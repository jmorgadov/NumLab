0
True
1
0
if
2
0
decorated
3
0
atom
4
0
atom_expr
5
0
while_stmt
6
0
shift_expr
7
0
arith_expr
8
0
and_expr
9
0
conf
10
0
factor
11
0
NAME
12
0
(
13
0
for
14
0
[
15
0
resetstats
16
0
compound_stmt
17
0
while
18
0
raise
19
0
class
20
0
small_stmt
21
0
try
22
0
or_test
23
0
for_stmt
24
0
try_stmt
25
0
def
26
0
False
27
0
comparison
28
0
term
29
0
simple_stmt
30
0
+
31
0
power
32
0
not_test
33
0
None
34
0
with
35
0
classdef
36
0
lambdef
37
0
if_stmt
38
0
NUMBER
39
0
xor_expr
40
0
{
41
0
not
42
0
-
43
0
funcdef
44
0
decorators
45
0
STRING
46
0
test
47
0
and_test
48
0
begsim
49
0
expr
50
0
with_stmt
51
0
confdef
52
0
lambda
53
0
return
54
0
~
55
0
return_stmt
56
0
endsim
57
0
@
58
0
$
program -> 
0
raise_stmt
59
0
stmt
60
0
global_stmt
61
0
continue_stmt
62
0
assert
63
0
break_stmt
64
0
NEWLINE
65
0
del
66
0
global
67
0
pass_stmt
68
0
program
69
0
test_list
70
0
flow_stmt
71
0
yield_stmt
72
0
pass
73
0
continue
74
0
del_stmt
75
0
nonlocal
76
0
decorator
77
0
assert_stmt
78
0
stat_stmt
79
0
nonlocal_stmt
80
0
expr_stmt
81
0
break
82
0
yield
83
0
sim_stmt
84
1
!=
atom -> True
1
&
atom -> True
1
/=
atom -> True
1
+
atom -> True
1
<<=
atom -> True
1
<<
atom -> True
1
@
atom -> True
1
,
atom -> True
1
@=
atom -> True
1
if
atom -> True
1
NEWLINE
atom -> True
1
and
atom -> True
1
is
atom -> True
1
|
atom -> True
1
<
atom -> True
1
>=
atom -> True
1
>>=
atom -> True
1
%=
atom -> True
1
or
atom -> True
1
=
atom -> True
1
==
atom -> True
1
%
atom -> True
1
>
atom -> True
1
[
atom -> True
1
*
atom -> True
1
^=
atom -> True
1
//
atom -> True
1
/
atom -> True
1
**=
atom -> True
1
in
atom -> True
1
-
atom -> True
1
^
atom -> True
1
-=
atom -> True
1
<=
atom -> True
1
*=
atom -> True
1
&=
atom -> True
1
(
atom -> True
1
|=
atom -> True
1
//=
atom -> True
1
**
atom -> True
1
.
atom -> True
1
+=
atom -> True
1
not
atom -> True
1
:
atom -> True
1
>>
atom -> True
2
NAME
85
2
atom_expr
86
2
term
87
2
atom
88
2
-
89
2
factor
90
2
True
91
2
arith_expr
92
2
test
93
2
False
94
2
+
95
2
{
96
2
(
97
2
and_expr
98
2
and_test
99
2
[
100
2
STRING
101
2
comparison
102
2
shift_expr
103
2
not_test
104
2
power
105
2
None
106
2
xor_expr
107
2
expr
108
2
NUMBER
109
2
~
110
2
not
111
2
or_test
112
2
lambda
113
2
lambdef
114
3
if
compound_stmt -> decorated
3
raise
compound_stmt -> decorated
3
class
compound_stmt -> decorated
3
assert
compound_stmt -> decorated
3
STRING
compound_stmt -> decorated
3
lambda
compound_stmt -> decorated
3
global
compound_stmt -> decorated
3
while
compound_stmt -> decorated
3
NEWLINE
compound_stmt -> decorated
3
resetstats
compound_stmt -> decorated
3
pass
compound_stmt -> decorated
3
for
compound_stmt -> decorated
3
(
compound_stmt -> decorated
3
conf
compound_stmt -> decorated
3
None
compound_stmt -> decorated
3
False
compound_stmt -> decorated
3
def
compound_stmt -> decorated
3
break
compound_stmt -> decorated
3
nonlocal
compound_stmt -> decorated
3
with
compound_stmt -> decorated
3
try
compound_stmt -> decorated
3
-
compound_stmt -> decorated
3
~
compound_stmt -> decorated
3
del
compound_stmt -> decorated
3
[
compound_stmt -> decorated
3
@
compound_stmt -> decorated
3
yield
compound_stmt -> decorated
3
not
compound_stmt -> decorated
3
True
compound_stmt -> decorated
3
{
compound_stmt -> decorated
3
begsim
compound_stmt -> decorated
3
$
compound_stmt -> decorated
3
endsim
compound_stmt -> decorated
3
continue
compound_stmt -> decorated
3
+
compound_stmt -> decorated
3
NUMBER
compound_stmt -> decorated
3
NAME
compound_stmt -> decorated
3
return
compound_stmt -> decorated
4
trailer_expr
115
4
[
116
4
or
trailer_expr -> 
4
.
117
4
trailer
118
4
in
trailer_expr -> 
4
(
119
4
<=
trailer_expr -> 
4
^
trailer_expr -> 
4
*
trailer_expr -> 
4
**
trailer_expr -> 
4
|=
trailer_expr -> 
4
&=
trailer_expr -> 
4
==
trailer_expr -> 
4
>>
trailer_expr -> 
4
//
trailer_expr -> 
4
!=
trailer_expr -> 
4
&
trailer_expr -> 
4
^=
trailer_expr -> 
4
*=
trailer_expr -> 
4
>>=
trailer_expr -> 
4
and
trailer_expr -> 
4
**=
trailer_expr -> 
4
+
trailer_expr -> 
4
@=
trailer_expr -> 
4
%
trailer_expr -> 
4
not
trailer_expr -> 
4
is
trailer_expr -> 
4
>=
trailer_expr -> 
4
-
trailer_expr -> 
4
@
trailer_expr -> 
4
%=
trailer_expr -> 
4
,
trailer_expr -> 
4
if
trailer_expr -> 
4
=
trailer_expr -> 
4
>
trailer_expr -> 
4
+=
trailer_expr -> 
4
/=
trailer_expr -> 
4
-=
trailer_expr -> 
4
<<
trailer_expr -> 
4
/
trailer_expr -> 
4
NEWLINE
trailer_expr -> 
4
<
trailer_expr -> 
4
//=
trailer_expr -> 
4
:
trailer_expr -> 
4
|
trailer_expr -> 
4
<<=
trailer_expr -> 
5
**
120
5
or
power -> atom_expr
5
>>
power -> atom_expr
5
<<=
power -> atom_expr
5
+
power -> atom_expr
5
*
power -> atom_expr
5
-=
power -> atom_expr
5
<
power -> atom_expr
5
*=
power -> atom_expr
5
:
power -> atom_expr
5
is
power -> atom_expr
5
|=
power -> atom_expr
5
^=
power -> atom_expr
5
//=
power -> atom_expr
5
|
power -> atom_expr
5
&
power -> atom_expr
5
,
power -> atom_expr
5
>
power -> atom_expr
5
&=
power -> atom_expr
5
NEWLINE
power -> atom_expr
5
!=
power -> atom_expr
5
+=
power -> atom_expr
5
==
power -> atom_expr
5
//
power -> atom_expr
5
@
power -> atom_expr
5
>>=
power -> atom_expr
5
%
power -> atom_expr
5
in
power -> atom_expr
5
@=
power -> atom_expr
5
and
power -> atom_expr
5
^
power -> atom_expr
5
%=
power -> atom_expr
5
if
power -> atom_expr
5
=
power -> atom_expr
5
>=
power -> atom_expr
5
**=
power -> atom_expr
5
/=
power -> atom_expr
5
<=
power -> atom_expr
5
not
power -> atom_expr
5
-
power -> atom_expr
5
/
power -> atom_expr
5
<<
power -> atom_expr
6
not
compound_stmt -> while_stmt
6
try
compound_stmt -> while_stmt
6
lambda
compound_stmt -> while_stmt
6
nonlocal
compound_stmt -> while_stmt
6
if
compound_stmt -> while_stmt
6
NAME
compound_stmt -> while_stmt
6
-
compound_stmt -> while_stmt
6
STRING
compound_stmt -> while_stmt
6
NEWLINE
compound_stmt -> while_stmt
6
break
compound_stmt -> while_stmt
6
@
compound_stmt -> while_stmt
6
assert
compound_stmt -> while_stmt
6
class
compound_stmt -> while_stmt
6
raise
compound_stmt -> while_stmt
6
$
compound_stmt -> while_stmt
6
conf
compound_stmt -> while_stmt
6
yield
compound_stmt -> while_stmt
6
global
compound_stmt -> while_stmt
6
with
compound_stmt -> while_stmt
6
(
compound_stmt -> while_stmt
6
continue
compound_stmt -> while_stmt
6
return
compound_stmt -> while_stmt
6
while
compound_stmt -> while_stmt
6
True
compound_stmt -> while_stmt
6
~
compound_stmt -> while_stmt
6
for
compound_stmt -> while_stmt
6
def
compound_stmt -> while_stmt
6
resetstats
compound_stmt -> while_stmt
6
endsim
compound_stmt -> while_stmt
6
{
compound_stmt -> while_stmt
6
del
compound_stmt -> while_stmt
6
begsim
compound_stmt -> while_stmt
6
False
compound_stmt -> while_stmt
6
pass
compound_stmt -> while_stmt
6
[
compound_stmt -> while_stmt
6
NUMBER
compound_stmt -> while_stmt
6
None
compound_stmt -> while_stmt
6
+
compound_stmt -> while_stmt
7
==
and_expr -> shift_expr
7
&
121
7
!=
and_expr -> shift_expr
7
<<=
and_expr -> shift_expr
7
|=
and_expr -> shift_expr
7
<
and_expr -> shift_expr
7
-=
and_expr -> shift_expr
7
<=
and_expr -> shift_expr
7
and
and_expr -> shift_expr
7
in
and_expr -> shift_expr
7
=
and_expr -> shift_expr
7
^=
and_expr -> shift_expr
7
^
and_expr -> shift_expr
7
:
and_expr -> shift_expr
7
not
and_expr -> shift_expr
7
>>=
and_expr -> shift_expr
7
*=
and_expr -> shift_expr
7
**=
and_expr -> shift_expr
7
is
and_expr -> shift_expr
7
if
and_expr -> shift_expr
7
@=
and_expr -> shift_expr
7
,
and_expr -> shift_expr
7
%=
and_expr -> shift_expr
7
>
and_expr -> shift_expr
7
/=
and_expr -> shift_expr
7
or
and_expr -> shift_expr
7
NEWLINE
and_expr -> shift_expr
7
//=
and_expr -> shift_expr
7
&=
and_expr -> shift_expr
7
+=
and_expr -> shift_expr
7
>=
and_expr -> shift_expr
7
|
and_expr -> shift_expr
8
or
shift_expr -> arith_expr
8
<<
122
8
*=
shift_expr -> arith_expr
8
**=
shift_expr -> arith_expr
8
>>
123
8
==
shift_expr -> arith_expr
8
|=
shift_expr -> arith_expr
8
!=
shift_expr -> arith_expr
8
if
shift_expr -> arith_expr
8
|
shift_expr -> arith_expr
8
<<=
shift_expr -> arith_expr
8
is
shift_expr -> arith_expr
8
,
shift_expr -> arith_expr
8
^=
shift_expr -> arith_expr
8
/=
shift_expr -> arith_expr
8
=
shift_expr -> arith_expr
8
%=
shift_expr -> arith_expr
8
not
shift_expr -> arith_expr
8
+=
shift_expr -> arith_expr
8
and
shift_expr -> arith_expr
8
NEWLINE
shift_expr -> arith_expr
8
^
shift_expr -> arith_expr
8
in
shift_expr -> arith_expr
8
>=
shift_expr -> arith_expr
8
&=
shift_expr -> arith_expr
8
>
shift_expr -> arith_expr
8
<
shift_expr -> arith_expr
8
>>=
shift_expr -> arith_expr
8
<=
shift_expr -> arith_expr
8
&
shift_expr -> arith_expr
8
-=
shift_expr -> arith_expr
8
@=
shift_expr -> arith_expr
8
:
shift_expr -> arith_expr
8
//=
shift_expr -> arith_expr
9
^
124
9
<
xor_expr -> and_expr
9
|=
xor_expr -> and_expr
9
-=
xor_expr -> and_expr
9
<=
xor_expr -> and_expr
9
//=
xor_expr -> and_expr
9
/=
xor_expr -> and_expr
9
<<=
xor_expr -> and_expr
9
|
xor_expr -> and_expr
9
not
xor_expr -> and_expr
9
and
xor_expr -> and_expr
9
+=
xor_expr -> and_expr
9
!=
xor_expr -> and_expr
9
NEWLINE
xor_expr -> and_expr
9
or
xor_expr -> and_expr
9
&=
xor_expr -> and_expr
9
@=
xor_expr -> and_expr
9
>
xor_expr -> and_expr
9
%=
xor_expr -> and_expr
9
**=
xor_expr -> and_expr
9
*=
xor_expr -> and_expr
9
>>=
xor_expr -> and_expr
9
>=
xor_expr -> and_expr
9
==
xor_expr -> and_expr
9
^=
xor_expr -> and_expr
9
=
xor_expr -> and_expr
9
,
xor_expr -> and_expr
9
in
xor_expr -> and_expr
9
is
xor_expr -> and_expr
9
:
xor_expr -> and_expr
9
if
xor_expr -> and_expr
10
NAME
125
11
*=
term -> factor
11
/
126
11
%
127
11
//
128
11
@
129
11
&=
term -> factor
11
*
130
11
not
term -> factor
11
<<
term -> factor
11
or
term -> factor
11
^
term -> factor
11
NEWLINE
term -> factor
11
@=
term -> factor
11
in
term -> factor
11
if
term -> factor
11
and
term -> factor
11
-=
term -> factor
11
<=
term -> factor
11
&
term -> factor
11
:
term -> factor
11
,
term -> factor
11
<<=
term -> factor
11
>>
term -> factor
11
=
term -> factor
11
>>=
term -> factor
11
>
term -> factor
11
|
term -> factor
11
|=
term -> factor
11
//=
term -> factor
11
/=
term -> factor
11
<
term -> factor
11
is
term -> factor
11
!=
term -> factor
11
>=
term -> factor
11
==
term -> factor
11
-
term -> factor
11
+
term -> factor
11
^=
term -> factor
11
**=
term -> factor
11
%=
term -> factor
11
+=
term -> factor
12
.
atom -> NAME
12
<
atom -> NAME
12
+=
atom -> NAME
12
|
atom -> NAME
12
not
atom -> NAME
12
,
atom -> NAME
12
[
atom -> NAME
12
+
atom -> NAME
12
%
atom -> NAME
12
-=
atom -> NAME
12
//=
atom -> NAME
12
^=
atom -> NAME
12
>>=
atom -> NAME
12
*=
atom -> NAME
12
<<=
atom -> NAME
12
NEWLINE
atom -> NAME
12
<=
atom -> NAME
12
=
atom -> NAME
12
*
atom -> NAME
12
/=
atom -> NAME
12
!=
atom -> NAME
12
in
atom -> NAME
12
&=
atom -> NAME
12
:
atom -> NAME
12
if
atom -> NAME
12
%=
atom -> NAME
12
is
atom -> NAME
12
(
atom -> NAME
12
^
atom -> NAME
12
@
atom -> NAME
12
&
atom -> NAME
12
>>
atom -> NAME
12
**=
atom -> NAME
12
<<
atom -> NAME
12
-
atom -> NAME
12
/
atom -> NAME
12
or
atom -> NAME
12
@=
atom -> NAME
12
//
atom -> NAME
12
>=
atom -> NAME
12
and
atom -> NAME
12
|=
atom -> NAME
12
>
atom -> NAME
12
==
atom -> NAME
12
**
atom -> NAME
13
NAME
131
13
atom_expr
132
13
atom
133
13
-
134
13
)
135
13
factor
136
13
[
137
13
True
138
13
arith_expr
139
13
False
140
13
{
141
13
+
142
13
and_expr
143
13
(
144
13
STRING
145
13
test_list_comp
146
13
power
147
13
term
148
13
comparison
149
13
shift_expr
150
13
test
151
13
not_test
152
13
or_test
153
13
lambda
154
13
None
155
13
xor_expr
156
13
expr
157
13
NUMBER
158
13
and_test
159
13
~
160
13
lambdef
161
13
not
162
13
test_list
163
14
~
164
14
atom
165
14
False
166
14
atom_expr
167
14
NUMBER
168
14
[
169
14
expr_list
170
14
True
171
14
NAME
172
14
None
173
14
+
174
14
factor
175
14
term
176
14
-
177
14
(
178
14
{
179
14
arith_expr
180
14
STRING
181
14
power
182
14
shift_expr
183
14
and_expr
184
14
xor_expr
185
14
expr
186
15
NAME
187
15
atom_expr
188
15
atom
189
15
-
190
15
factor
191
15
test_list_comp
192
15
[
193
15
True
194
15
arith_expr
195
15
False
196
15
{
197
15
+
198
15
and_expr
199
15
(
200
15
STRING
201
15
]
202
15
term
203
15
and_test
204
15
comparison
205
15
shift_expr
206
15
not_test
207
15
power
208
15
or_test
209
15
None
210
15
xor_expr
211
15
expr
212
15
NUMBER
213
15
lambda
214
15
~
215
15
lambdef
216
15
not
217
15
test
218
15
test_list
219
16
NEWLINE
stat_stmt -> resetstats
17
+
stmt -> compound_stmt
17
del
stmt -> compound_stmt
17
raise
stmt -> compound_stmt
17
if
stmt -> compound_stmt
17
False
stmt -> compound_stmt
17
pass
stmt -> compound_stmt
17
nonlocal
stmt -> compound_stmt
17
while
stmt -> compound_stmt
17
STRING
stmt -> compound_stmt
17
conf
stmt -> compound_stmt
17
$
stmt -> compound_stmt
17
lambda
stmt -> compound_stmt
17
continue
stmt -> compound_stmt
17
endsim
stmt -> compound_stmt
17
(
stmt -> compound_stmt
17
global
stmt -> compound_stmt
17
resetstats
stmt -> compound_stmt
17
~
stmt -> compound_stmt
17
for
stmt -> compound_stmt
17
[
stmt -> compound_stmt
17
return
stmt -> compound_stmt
17
@
stmt -> compound_stmt
17
True
stmt -> compound_stmt
17
begsim
stmt -> compound_stmt
17
None
stmt -> compound_stmt
17
NUMBER
stmt -> compound_stmt
17
assert
stmt -> compound_stmt
17
NAME
stmt -> compound_stmt
17
break
stmt -> compound_stmt
17
with
stmt -> compound_stmt
17
{
stmt -> compound_stmt
17
try
stmt -> compound_stmt
17
not
stmt -> compound_stmt
17
class
stmt -> compound_stmt
17
yield
stmt -> compound_stmt
17
def
stmt -> compound_stmt
17
-
stmt -> compound_stmt
17
NEWLINE
stmt -> compound_stmt
18
NAME
85
18
atom_expr
86
18
term
87
18
atom
88
18
-
89
18
factor
90
18
True
91
18
arith_expr
92
18
False
94
18
{
96
18
(
97
18
+
95
18
test
220
18
and_expr
98
18
and_test
99
18
[
100
18
STRING
101
18
comparison
102
18
shift_expr
103
18
not_test
104
18
power
105
18
None
106
18
xor_expr
107
18
expr
108
18
NUMBER
109
18
~
110
18
not
111
18
or_test
112
18
lambda
113
18
lambdef
114
19
NAME
221
19
lambda
222
19
atom_expr
223
19
term
224
19
atom
225
19
-
226
19
factor
227
19
{
228
19
True
229
19
arith_expr
230
19
False
231
19
test
232
19
+
233
19
and_expr
234
19
[
235
19
(
236
19
STRING
237
19
comparison
238
19
shift_expr
239
19
not_test
240
19
power
241
19
None
242
19
xor_expr
243
19
expr
244
19
NUMBER
245
19
and_test
246
19
or_test
247
19
~
248
19
lambdef
249
19
not
250
19
NEWLINE
raise_stmt -> raise
20
NAME
251
21
NEWLINE
252
22
:
253
23
>>=
test -> or_test
23
if
254
23
NEWLINE
test -> or_test
23
+=
test -> or_test
23
,
test -> or_test
23
**=
test -> or_test
23
/=
test -> or_test
23
*=
test -> or_test
23
//=
test -> or_test
23
:
test -> or_test
23
<<=
test -> or_test
23
&=
test -> or_test
23
-=
test -> or_test
23
=
test -> or_test
23
@=
test -> or_test
23
^=
test -> or_test
23
|=
test -> or_test
23
%=
test -> or_test
24
not
compound_stmt -> for_stmt
24
+
compound_stmt -> for_stmt
24
False
compound_stmt -> for_stmt
24
$
compound_stmt -> for_stmt
24
break
compound_stmt -> for_stmt
24
(
compound_stmt -> for_stmt
24
-
compound_stmt -> for_stmt
24
continue
compound_stmt -> for_stmt
24
{
compound_stmt -> for_stmt
24
def
compound_stmt -> for_stmt
24
for
compound_stmt -> for_stmt
24
return
compound_stmt -> for_stmt
24
begsim
compound_stmt -> for_stmt
24
global
compound_stmt -> for_stmt
24
True
compound_stmt -> for_stmt
24
while
compound_stmt -> for_stmt
24
class
compound_stmt -> for_stmt
24
raise
compound_stmt -> for_stmt
24
assert
compound_stmt -> for_stmt
24
endsim
compound_stmt -> for_stmt
24
pass
compound_stmt -> for_stmt
24
del
compound_stmt -> for_stmt
24
[
compound_stmt -> for_stmt
24
if
compound_stmt -> for_stmt
24
resetstats
compound_stmt -> for_stmt
24
~
compound_stmt -> for_stmt
24
nonlocal
compound_stmt -> for_stmt
24
lambda
compound_stmt -> for_stmt
24
NUMBER
compound_stmt -> for_stmt
24
None
compound_stmt -> for_stmt
24
@
compound_stmt -> for_stmt
24
conf
compound_stmt -> for_stmt
24
NAME
compound_stmt -> for_stmt
24
with
compound_stmt -> for_stmt
24
yield
compound_stmt -> for_stmt
24
NEWLINE
compound_stmt -> for_stmt
24
STRING
compound_stmt -> for_stmt
24
try
compound_stmt -> for_stmt
25
if
compound_stmt -> try_stmt
25
class
compound_stmt -> try_stmt
25
assert
compound_stmt -> try_stmt
25
True
compound_stmt -> try_stmt
25
not
compound_stmt -> try_stmt
25
[
compound_stmt -> try_stmt
25
pass
compound_stmt -> try_stmt
25
del
compound_stmt -> try_stmt
25
yield
compound_stmt -> try_stmt
25
return
compound_stmt -> try_stmt
25
$
compound_stmt -> try_stmt
25
while
compound_stmt -> try_stmt
25
-
compound_stmt -> try_stmt
25
def
compound_stmt -> try_stmt
25
endsim
compound_stmt -> try_stmt
25
NAME
compound_stmt -> try_stmt
25
@
compound_stmt -> try_stmt
25
~
compound_stmt -> try_stmt
25
try
compound_stmt -> try_stmt
25
global
compound_stmt -> try_stmt
25
NEWLINE
compound_stmt -> try_stmt
25
conf
compound_stmt -> try_stmt
25
resetstats
compound_stmt -> try_stmt
25
(
compound_stmt -> try_stmt
25
lambda
compound_stmt -> try_stmt
25
{
compound_stmt -> try_stmt
25
nonlocal
compound_stmt -> try_stmt
25
+
compound_stmt -> try_stmt
25
STRING
compound_stmt -> try_stmt
25
with
compound_stmt -> try_stmt
25
False
compound_stmt -> try_stmt
25
for
compound_stmt -> try_stmt
25
continue
compound_stmt -> try_stmt
25
None
compound_stmt -> try_stmt
25
begsim
compound_stmt -> try_stmt
25
NUMBER
compound_stmt -> try_stmt
25
raise
compound_stmt -> try_stmt
25
break
compound_stmt -> try_stmt
26
NAME
255
27
not
atom -> False
27
==
atom -> False
27
*
atom -> False
27
>
atom -> False
27
,
atom -> False
27
/=
atom -> False
27
&=
atom -> False
27
[
atom -> False
27
**=
atom -> False
27
if
atom -> False
27
%=
atom -> False
27
-=
atom -> False
27
@
atom -> False
27
&
atom -> False
27
is
atom -> False
27
<<=
atom -> False
27
.
atom -> False
27
=
atom -> False
27
+
atom -> False
27
%
atom -> False
27
>=
atom -> False
27
+=
atom -> False
27
NEWLINE
atom -> False
27
*=
atom -> False
27
|=
atom -> False
27
and
atom -> False
27
(
atom -> False
27
|
atom -> False
27
-
atom -> False
27
:
atom -> False
27
in
atom -> False
27
//=
atom -> False
27
/
atom -> False
27
^=
atom -> False
27
<<
atom -> False
27
<=
atom -> False
27
^
atom -> False
27
//
atom -> False
27
>>
atom -> False
27
!=
atom -> False
27
**
atom -> False
27
>>=
atom -> False
27
or
atom -> False
27
@=
atom -> False
27
<
atom -> False
28
-=
not_test -> comparison
28
>>=
not_test -> comparison
28
/=
not_test -> comparison
28
=
not_test -> comparison
28
if
not_test -> comparison
28
:
not_test -> comparison
28
<<=
not_test -> comparison
28
@=
not_test -> comparison
28
*=
not_test -> comparison
28
^=
not_test -> comparison
28
//=
not_test -> comparison
28
&=
not_test -> comparison
28
**=
not_test -> comparison
28
and
not_test -> comparison
28
or
not_test -> comparison
28
+=
not_test -> comparison
28
,
not_test -> comparison
28
|=
not_test -> comparison
28
NEWLINE
not_test -> comparison
28
%=
not_test -> comparison
29
+
256
29
-
257
29
in
arith_expr -> term
29
<<
arith_expr -> term
29
,
arith_expr -> term
29
|
arith_expr -> term
29
>>=
arith_expr -> term
29
>=
arith_expr -> term
29
%=
arith_expr -> term
29
|=
arith_expr -> term
29
if
arith_expr -> term
29
@=
arith_expr -> term
29
or
arith_expr -> term
29
NEWLINE
arith_expr -> term
29
=
arith_expr -> term
29
>>
arith_expr -> term
29
//=
arith_expr -> term
29
&=
arith_expr -> term
29
!=
arith_expr -> term
29
&
arith_expr -> term
29
+=
arith_expr -> term
29
==
arith_expr -> term
29
>
arith_expr -> term
29
/=
arith_expr -> term
29
^=
arith_expr -> term
29
is
arith_expr -> term
29
*=
arith_expr -> term
29
**=
arith_expr -> term
29
:
arith_expr -> term
29
<=
arith_expr -> term
29
and
arith_expr -> term
29
-=
arith_expr -> term
29
not
arith_expr -> term
29
<<=
arith_expr -> term
29
<
arith_expr -> term
29
^
arith_expr -> term
30
NEWLINE
stmt -> simple_stmt
30
yield
stmt -> simple_stmt
30
pass
stmt -> simple_stmt
30
with
stmt -> simple_stmt
30
True
stmt -> simple_stmt
30
break
stmt -> simple_stmt
30
resetstats
stmt -> simple_stmt
30
raise
stmt -> simple_stmt
30
class
stmt -> simple_stmt
30
if
stmt -> simple_stmt
30
None
stmt -> simple_stmt
30
@
stmt -> simple_stmt
30
lambda
stmt -> simple_stmt
30
return
stmt -> simple_stmt
30
~
stmt -> simple_stmt
30
nonlocal
stmt -> simple_stmt
30
(
stmt -> simple_stmt
30
continue
stmt -> simple_stmt
30
STRING
stmt -> simple_stmt
30
+
stmt -> simple_stmt
30
NAME
stmt -> simple_stmt
30
def
stmt -> simple_stmt
30
conf
stmt -> simple_stmt
30
[
stmt -> simple_stmt
30
del
stmt -> simple_stmt
30
NUMBER
stmt -> simple_stmt
30
try
stmt -> simple_stmt
30
assert
stmt -> simple_stmt
30
not
stmt -> simple_stmt
30
begsim
stmt -> simple_stmt
30
-
stmt -> simple_stmt
30
global
stmt -> simple_stmt
30
{
stmt -> simple_stmt
30
while
stmt -> simple_stmt
30
for
stmt -> simple_stmt
30
endsim
stmt -> simple_stmt
30
False
stmt -> simple_stmt
30
$
stmt -> simple_stmt
31
NAME
12
31
True
1
31
atom_expr
5
31
atom
4
31
-
43
31
False
27
31
[
15
31
{
41
31
(
13
31
+
31
31
None
34
31
STRING
46
31
factor
258
31
~
55
31
power
32
31
NUMBER
39
32
<=
factor -> power
32
,
factor -> power
32
is
factor -> power
32
>
factor -> power
32
==
factor -> power
32
^
factor -> power
32
or
factor -> power
32
-
factor -> power
32
>>=
factor -> power
32
%=
factor -> power
32
+
factor -> power
32
^=
factor -> power
32
>>
factor -> power
32
/
factor -> power
32
-=
factor -> power
32
*
factor -> power
32
NEWLINE
factor -> power
32
<<
factor -> power
32
|
factor -> power
32
+=
factor -> power
32
and
factor -> power
32
&=
factor -> power
32
<
factor -> power
32
not
factor -> power
32
!=
factor -> power
32
:
factor -> power
32
/=
factor -> power
32
*=
factor -> power
32
if
factor -> power
32
&
factor -> power
32
<<=
factor -> power
32
in
factor -> power
32
@=
factor -> power
32
%
factor -> power
32
**=
factor -> power
32
//=
factor -> power
32
=
factor -> power
32
>=
factor -> power
32
//
factor -> power
32
|=
factor -> power
32
@
factor -> power
33
and
259
33
**=
and_test -> not_test
33
<<=
and_test -> not_test
33
//=
and_test -> not_test
33
/=
and_test -> not_test
33
or
and_test -> not_test
33
:
and_test -> not_test
33
-=
and_test -> not_test
33
%=
and_test -> not_test
33
if
and_test -> not_test
33
NEWLINE
and_test -> not_test
33
>>=
and_test -> not_test
33
+=
and_test -> not_test
33
*=
and_test -> not_test
33
^=
and_test -> not_test
33
,
and_test -> not_test
33
|=
and_test -> not_test
33
=
and_test -> not_test
33
&=
and_test -> not_test
33
@=
and_test -> not_test
34
+
atom -> None
34
@=
atom -> None
34
>>
atom -> None
34
/
atom -> None
34
%=
atom -> None
34
or
atom -> None
34
//=
atom -> None
34
*
atom -> None
34
<<=
atom -> None
34
in
atom -> None
34
**
atom -> None
34
==
atom -> None
34
-
atom -> None
34
if
atom -> None
34
NEWLINE
atom -> None
34
&=
atom -> None
34
(
atom -> None
34
@
atom -> None
34
**=
atom -> None
34
:
atom -> None
34
-=
atom -> None
34
>=
atom -> None
34
[
atom -> None
34
^
atom -> None
34
=
atom -> None
34
^=
atom -> None
34
&
atom -> None
34
<=
atom -> None
34
is
atom -> None
34
.
atom -> None
34
not
atom -> None
34
and
atom -> None
34
<
atom -> None
34
<<
atom -> None
34
//
atom -> None
34
!=
atom -> None
34
/=
atom -> None
34
*=
atom -> None
34
%
atom -> None
34
|=
atom -> None
34
>>=
atom -> None
34
|
atom -> None
34
,
atom -> None
34
>
atom -> None
34
+=
atom -> None
35
NAME
260
35
atom_expr
261
35
term
262
35
atom
263
35
-
264
35
with_items
265
35
factor
266
35
arith_expr
267
35
[
268
35
True
269
35
False
270
35
{
271
35
(
272
35
+
273
35
and_expr
274
35
and_test
275
35
STRING
276
35
xor_expr
277
35
comparison
278
35
shift_expr
279
35
not_test
280
35
power
281
35
None
282
35
expr
283
35
NUMBER
284
35
~
285
35
lambda
286
35
or_test
287
35
with_item
288
35
lambdef
289
35
not
290
35
test
291
36
raise
compound_stmt -> classdef
36
NUMBER
compound_stmt -> classdef
36
lambda
compound_stmt -> classdef
36
pass
compound_stmt -> classdef
36
[
compound_stmt -> classdef
36
False
compound_stmt -> classdef
36
if
compound_stmt -> classdef
36
with
compound_stmt -> classdef
36
return
compound_stmt -> classdef
36
endsim
compound_stmt -> classdef
36
-
compound_stmt -> classdef
36
(
compound_stmt -> classdef
36
while
compound_stmt -> classdef
36
True
compound_stmt -> classdef
36
class
compound_stmt -> classdef
36
resetstats
compound_stmt -> classdef
36
break
compound_stmt -> classdef
36
@
compound_stmt -> classdef
36
NEWLINE
compound_stmt -> classdef
36
yield
compound_stmt -> classdef
36
try
compound_stmt -> classdef
36
continue
compound_stmt -> classdef
36
STRING
compound_stmt -> classdef
36
begsim
compound_stmt -> classdef
36
{
compound_stmt -> classdef
36
$
compound_stmt -> classdef
36
global
compound_stmt -> classdef
36
None
compound_stmt -> classdef
36
def
compound_stmt -> classdef
36
conf
compound_stmt -> classdef
36
del
compound_stmt -> classdef
36
nonlocal
compound_stmt -> classdef
36
+
compound_stmt -> classdef
36
assert
compound_stmt -> classdef
36
~
compound_stmt -> classdef
36
NAME
compound_stmt -> classdef
36
not
compound_stmt -> classdef
36
for
compound_stmt -> classdef
37
|=
test -> lambdef
37
NEWLINE
test -> lambdef
37
=
test -> lambdef
37
-=
test -> lambdef
37
^=
test -> lambdef
37
**=
test -> lambdef
37
//=
test -> lambdef
37
,
test -> lambdef
37
+=
test -> lambdef
37
@=
test -> lambdef
37
>>=
test -> lambdef
37
<<=
test -> lambdef
37
/=
test -> lambdef
37
%=
test -> lambdef
37
:
test -> lambdef
37
&=
test -> lambdef
37
*=
test -> lambdef
38
[
compound_stmt -> if_stmt
38
nonlocal
compound_stmt -> if_stmt
38
del
compound_stmt -> if_stmt
38
break
compound_stmt -> if_stmt
38
False
compound_stmt -> if_stmt
38
with
compound_stmt -> if_stmt
38
+
compound_stmt -> if_stmt
38
raise
compound_stmt -> if_stmt
38
True
compound_stmt -> if_stmt
38
NEWLINE
compound_stmt -> if_stmt
38
return
compound_stmt -> if_stmt
38
@
compound_stmt -> if_stmt
38
for
compound_stmt -> if_stmt
38
(
compound_stmt -> if_stmt
38
STRING
compound_stmt -> if_stmt
38
assert
compound_stmt -> if_stmt
38
$
compound_stmt -> if_stmt
38
continue
compound_stmt -> if_stmt
38
if
compound_stmt -> if_stmt
38
NAME
compound_stmt -> if_stmt
38
pass
compound_stmt -> if_stmt
38
None
compound_stmt -> if_stmt
38
def
compound_stmt -> if_stmt
38
global
compound_stmt -> if_stmt
38
NUMBER
compound_stmt -> if_stmt
38
class
compound_stmt -> if_stmt
38
while
compound_stmt -> if_stmt
38
conf
compound_stmt -> if_stmt
38
begsim
compound_stmt -> if_stmt
38
lambda
compound_stmt -> if_stmt
38
not
compound_stmt -> if_stmt
38
{
compound_stmt -> if_stmt
38
yield
compound_stmt -> if_stmt
38
endsim
compound_stmt -> if_stmt
38
try
compound_stmt -> if_stmt
38
-
compound_stmt -> if_stmt
38
resetstats
compound_stmt -> if_stmt
38
~
compound_stmt -> if_stmt
39
is
atom -> NUMBER
39
|
atom -> NUMBER
39
=
atom -> NUMBER
39
%=
atom -> NUMBER
39
in
atom -> NUMBER
39
**
atom -> NUMBER
39
@
atom -> NUMBER
39
and
atom -> NUMBER
39
!=
atom -> NUMBER
39
if
atom -> NUMBER
39
-
atom -> NUMBER
39
<<
atom -> NUMBER
39
.
atom -> NUMBER
39
(
atom -> NUMBER
39
==
atom -> NUMBER
39
|=
atom -> NUMBER
39
**=
atom -> NUMBER
39
%
atom -> NUMBER
39
^
atom -> NUMBER
39
^=
atom -> NUMBER
39
not
atom -> NUMBER
39
>=
atom -> NUMBER
39
:
atom -> NUMBER
39
,
atom -> NUMBER
39
//=
atom -> NUMBER
39
@=
atom -> NUMBER
39
/
atom -> NUMBER
39
&=
atom -> NUMBER
39
<<=
atom -> NUMBER
39
>
atom -> NUMBER
39
//
atom -> NUMBER
39
&
atom -> NUMBER
39
[
atom -> NUMBER
39
<=
atom -> NUMBER
39
+=
atom -> NUMBER
39
*
atom -> NUMBER
39
NEWLINE
atom -> NUMBER
39
/=
atom -> NUMBER
39
-=
atom -> NUMBER
39
<
atom -> NUMBER
39
or
atom -> NUMBER
39
>>
atom -> NUMBER
39
+
atom -> NUMBER
39
*=
atom -> NUMBER
39
>>=
atom -> NUMBER
40
|
292
40
/=
expr -> xor_expr
40
<<=
expr -> xor_expr
40
**=
expr -> xor_expr
40
>
expr -> xor_expr
40
<
expr -> xor_expr
40
%=
expr -> xor_expr
40
and
expr -> xor_expr
40
>=
expr -> xor_expr
40
,
expr -> xor_expr
40
!=
expr -> xor_expr
40
-=
expr -> xor_expr
40
&=
expr -> xor_expr
40
or
expr -> xor_expr
40
NEWLINE
expr -> xor_expr
40
*=
expr -> xor_expr
40
in
expr -> xor_expr
40
is
expr -> xor_expr
40
if
expr -> xor_expr
40
==
expr -> xor_expr
40
=
expr -> xor_expr
40
>>=
expr -> xor_expr
40
//=
expr -> xor_expr
40
@=
expr -> xor_expr
40
|=
expr -> xor_expr
40
^=
expr -> xor_expr
40
<=
expr -> xor_expr
40
:
expr -> xor_expr
40
not
expr -> xor_expr
40
+=
expr -> xor_expr
41
}
293
42
NAME
12
42
True
1
42
atom_expr
5
42
term
29
42
atom
4
42
factor
11
42
shift_expr
7
42
arith_expr
8
42
not_test
294
42
False
27
42
and_expr
9
42
xor_expr
40
42
{
41
42
(
13
42
[
15
42
STRING
46
42
comparison
28
42
~
55
42
-
43
42
+
31
42
power
32
42
None
34
42
not
42
42
NUMBER
39
42
expr
50
43
NAME
12
43
True
1
43
atom_expr
5
43
atom
4
43
-
43
43
factor
295
43
False
27
43
[
15
43
{
41
43
(
13
43
+
31
43
None
34
43
STRING
46
43
~
55
43
power
32
43
NUMBER
39
44
conf
compound_stmt -> funcdef
44
+
compound_stmt -> funcdef
44
@
compound_stmt -> funcdef
44
pass
compound_stmt -> funcdef
44
None
compound_stmt -> funcdef
44
NUMBER
compound_stmt -> funcdef
44
resetstats
compound_stmt -> funcdef
44
break
compound_stmt -> funcdef
44
lambda
compound_stmt -> funcdef
44
class
compound_stmt -> funcdef
44
try
compound_stmt -> funcdef
44
with
compound_stmt -> funcdef
44
True
compound_stmt -> funcdef
44
{
compound_stmt -> funcdef
44
$
compound_stmt -> funcdef
44
global
compound_stmt -> funcdef
44
NEWLINE
compound_stmt -> funcdef
44
nonlocal
compound_stmt -> funcdef
44
continue
compound_stmt -> funcdef
44
endsim
compound_stmt -> funcdef
44
begsim
compound_stmt -> funcdef
44
assert
compound_stmt -> funcdef
44
False
compound_stmt -> funcdef
44
if
compound_stmt -> funcdef
44
for
compound_stmt -> funcdef
44
while
compound_stmt -> funcdef
44
STRING
compound_stmt -> funcdef
44
~
compound_stmt -> funcdef
44
def
compound_stmt -> funcdef
44
(
compound_stmt -> funcdef
44
-
compound_stmt -> funcdef
44
return
compound_stmt -> funcdef
44
NAME
compound_stmt -> funcdef
44
del
compound_stmt -> funcdef
44
[
compound_stmt -> funcdef
44
raise
compound_stmt -> funcdef
44
yield
compound_stmt -> funcdef
44
not
compound_stmt -> funcdef
45
funcdef
296
45
def
26
45
class
20
45
classdef
297
46
and
atom -> STRING
46
not
atom -> STRING
46
NEWLINE
atom -> STRING
46
.
atom -> STRING
46
//
atom -> STRING
46
%=
atom -> STRING
46
*
atom -> STRING
46
-
atom -> STRING
46
(
atom -> STRING
46
@=
atom -> STRING
46
>=
atom -> STRING
46
//=
atom -> STRING
46
<=
atom -> STRING
46
<<
atom -> STRING
46
if
atom -> STRING
46
-=
atom -> STRING
46
+=
atom -> STRING
46
+
atom -> STRING
46
or
atom -> STRING
46
=
atom -> STRING
46
**=
atom -> STRING
46
/
atom -> STRING
46
@
atom -> STRING
46
in
atom -> STRING
46
>>=
atom -> STRING
46
>>
atom -> STRING
46
|=
atom -> STRING
46
%
atom -> STRING
46
!=
atom -> STRING
46
^=
atom -> STRING
46
,
atom -> STRING
46
<<=
atom -> STRING
46
>
atom -> STRING
46
^
atom -> STRING
46
<
atom -> STRING
46
:
atom -> STRING
46
==
atom -> STRING
46
&=
atom -> STRING
46
*=
atom -> STRING
46
**
atom -> STRING
46
|
atom -> STRING
46
&
atom -> STRING
46
is
atom -> STRING
46
/=
atom -> STRING
46
[
atom -> STRING
47
,
298
47
:
test_list -> test
47
+=
test_list -> test
47
@=
test_list -> test
47
NEWLINE
test_list -> test
47
|=
test_list -> test
47
//=
test_list -> test
47
*=
test_list -> test
47
^=
test_list -> test
47
**=
test_list -> test
47
>>=
test_list -> test
47
=
test_list -> test
47
%=
test_list -> test
47
<<=
test_list -> test
47
&=
test_list -> test
47
-=
test_list -> test
47
/=
test_list -> test
48
or
299
48
/=
or_test -> and_test
48
NEWLINE
or_test -> and_test
48
-=
or_test -> and_test
48
**=
or_test -> and_test
48
@=
or_test -> and_test
48
if
or_test -> and_test
48
,
or_test -> and_test
48
^=
or_test -> and_test
48
=
or_test -> and_test
48
:
or_test -> and_test
48
&=
or_test -> and_test
48
<<=
or_test -> and_test
48
//=
or_test -> and_test
48
*=
or_test -> and_test
48
>>=
or_test -> and_test
48
+=
or_test -> and_test
48
|=
or_test -> and_test
48
%=
or_test -> and_test
49
NAME
300
49
atom_expr
301
49
term
302
49
atom
303
49
-
304
49
factor
305
49
True
306
49
arith_expr
307
49
False
308
49
{
309
49
+
310
49
and_expr
311
49
[
312
49
(
313
49
STRING
314
49
comparison
315
49
shift_expr
316
49
not_test
317
49
power
318
49
None
319
49
xor_expr
320
49
expr
321
49
NUMBER
322
49
and_test
323
49
or_test
324
49
~
325
49
lambda
326
49
lambdef
327
49
not
328
49
test
329
50
==
330
50
is
331
50
<=
332
50
comp_op
333
50
and
comparison -> expr
50
!=
334
50
>
335
50
not
336
50
NEWLINE
comparison -> expr
50
in
337
50
>>=
comparison -> expr
50
or
comparison -> expr
50
<
338
50
//=
comparison -> expr
50
>=
339
50
|=
comparison -> expr
50
-=
comparison -> expr
50
^=
comparison -> expr
50
&=
comparison -> expr
50
if
comparison -> expr
50
,
comparison -> expr
50
*=
comparison -> expr
50
%=
comparison -> expr
50
@=
comparison -> expr
50
**=
comparison -> expr
50
<<=
comparison -> expr
50
:
comparison -> expr
50
+=
comparison -> expr
50
/=
comparison -> expr
50
=
comparison -> expr
51
{
compound_stmt -> with_stmt
51
NAME
compound_stmt -> with_stmt
51
NUMBER
compound_stmt -> with_stmt
51
for
compound_stmt -> with_stmt
51
True
compound_stmt -> with_stmt
51
~
compound_stmt -> with_stmt
51
try
compound_stmt -> with_stmt
51
-
compound_stmt -> with_stmt
51
$
compound_stmt -> with_stmt
51
assert
compound_stmt -> with_stmt
51
STRING
compound_stmt -> with_stmt
51
conf
compound_stmt -> with_stmt
51
None
compound_stmt -> with_stmt
51
yield
compound_stmt -> with_stmt
51
with
compound_stmt -> with_stmt
51
class
compound_stmt -> with_stmt
51
del
compound_stmt -> with_stmt
51
nonlocal
compound_stmt -> with_stmt
51
break
compound_stmt -> with_stmt
51
[
compound_stmt -> with_stmt
51
def
compound_stmt -> with_stmt
51
(
compound_stmt -> with_stmt
51
lambda
compound_stmt -> with_stmt
51
False
compound_stmt -> with_stmt
51
global
compound_stmt -> with_stmt
51
+
compound_stmt -> with_stmt
51
return
compound_stmt -> with_stmt
51
endsim
compound_stmt -> with_stmt
51
not
compound_stmt -> with_stmt
51
pass
compound_stmt -> with_stmt
51
resetstats
compound_stmt -> with_stmt
51
begsim
compound_stmt -> with_stmt
51
while
compound_stmt -> with_stmt
51
raise
compound_stmt -> with_stmt
51
NEWLINE
compound_stmt -> with_stmt
51
@
compound_stmt -> with_stmt
51
continue
compound_stmt -> with_stmt
51
if
compound_stmt -> with_stmt
52
def
compound_stmt -> confdef
52
nonlocal
compound_stmt -> confdef
52
STRING
compound_stmt -> confdef
52
yield
compound_stmt -> confdef
52
return
compound_stmt -> confdef
52
resetstats
compound_stmt -> confdef
52
continue
compound_stmt -> confdef
52
if
compound_stmt -> confdef
52
(
compound_stmt -> confdef
52
[
compound_stmt -> confdef
52
assert
compound_stmt -> confdef
52
NAME
compound_stmt -> confdef
52
+
compound_stmt -> confdef
52
pass
compound_stmt -> confdef
52
with
compound_stmt -> confdef
52
conf
compound_stmt -> confdef
52
NUMBER
compound_stmt -> confdef
52
not
compound_stmt -> confdef
52
None
compound_stmt -> confdef
52
raise
compound_stmt -> confdef
52
for
compound_stmt -> confdef
52
@
compound_stmt -> confdef
52
while
compound_stmt -> confdef
52
endsim
compound_stmt -> confdef
52
True
compound_stmt -> confdef
52
try
compound_stmt -> confdef
52
$
compound_stmt -> confdef
52
global
compound_stmt -> confdef
52
~
compound_stmt -> confdef
52
class
compound_stmt -> confdef
52
begsim
compound_stmt -> confdef
52
-
compound_stmt -> confdef
52
lambda
compound_stmt -> confdef
52
NEWLINE
compound_stmt -> confdef
52
{
compound_stmt -> confdef
52
False
compound_stmt -> confdef
52
break
compound_stmt -> confdef
52
del
compound_stmt -> confdef
53
varargslist
340
53
:
341
53
NAME
342
53
vfpdef
343
54
~
344
54
term
345
54
atom
346
54
False
347
54
NEWLINE
return_stmt -> return
54
atom_expr
348
54
[
349
54
NUMBER
350
54
True
351
54
NAME
352
54
None
353
54
+
354
54
factor
355
54
-
356
54
(
357
54
arith_expr
358
54
{
359
54
STRING
360
54
power
361
54
shift_expr
362
54
xor_expr
363
54
and_expr
364
54
expr_list
365
54
expr
366
55
NAME
12
55
True
1
55
atom_expr
5
55
atom
4
55
-
43
55
False
27
55
[
15
55
{
41
55
(
13
55
+
31
55
factor
367
55
None
34
55
STRING
46
55
~
55
55
power
32
55
NUMBER
39
56
NEWLINE
flow_stmt -> return_stmt
57
NEWLINE
sim_stmt -> endsim
58
dotted_name
368
58
NAME
369
59
NEWLINE
flow_stmt -> raise_stmt
60
True
1
60
if
2
60
decorated
3
60
atom
4
60
atom_expr
5
60
while_stmt
6
60
shift_expr
7
60
arith_expr
8
60
and_expr
9
60
conf
10
60
factor
11
60
NAME
12
60
(
13
60
for
14
60
[
15
60
resetstats
16
60
compound_stmt
17
60
while
18
60
raise
19
60
class
20
60
small_stmt
21
60
try
22
60
or_test
23
60
for_stmt
24
60
try_stmt
25
60
def
26
60
False
27
60
comparison
28
60
term
29
60
simple_stmt
30
60
+
31
60
power
32
60
not_test
33
60
None
34
60
with
35
60
classdef
36
60
lambdef
37
60
if_stmt
38
60
NUMBER
39
60
xor_expr
40
60
{
41
60
not
42
60
-
43
60
funcdef
44
60
decorators
45
60
STRING
46
60
test
47
60
and_test
48
60
begsim
49
60
expr
50
60
with_stmt
51
60
confdef
52
60
lambda
53
60
return
54
60
~
55
60
return_stmt
56
60
endsim
57
60
@
58
60
$
program -> 
60
raise_stmt
59
60
stmt
60
60
global_stmt
61
60
continue_stmt
62
60
assert
63
60
break_stmt
64
60
NEWLINE
65
60
program
370
60
del
66
60
global
67
60
pass_stmt
68
60
test_list
70
60
flow_stmt
71
60
yield_stmt
72
60
pass
73
60
continue
74
60
del_stmt
75
60
nonlocal
76
60
decorator
77
60
assert_stmt
78
60
stat_stmt
79
60
nonlocal_stmt
80
60
expr_stmt
81
60
break
82
60
yield
83
60
sim_stmt
84
61
NEWLINE
small_stmt -> global_stmt
62
NEWLINE
flow_stmt -> continue_stmt
63
NAME
371
63
atom_expr
372
63
term
373
63
atom
374
63
-
375
63
factor
376
63
[
377
63
True
378
63
arith_expr
379
63
False
380
63
{
381
63
+
382
63
and_expr
383
63
(
384
63
STRING
385
63
comparison
386
63
shift_expr
387
63
not_test
388
63
power
389
63
None
390
63
xor_expr
391
63
expr
392
63
NUMBER
393
63
and_test
394
63
or_test
395
63
~
396
63
lambda
397
63
test
398
63
lambdef
399
63
not
400
63
test_list
401
64
NEWLINE
flow_stmt -> break_stmt
65
True
1
65
if
2
65
decorated
3
65
atom
4
65
atom_expr
5
65
while_stmt
6
65
shift_expr
7
65
arith_expr
8
65
and_expr
9
65
conf
10
65
factor
11
65
NAME
12
65
(
13
65
for
14
65
[
15
65
resetstats
16
65
compound_stmt
17
65
while
18
65
raise
19
65
class
20
65
small_stmt
21
65
try
22
65
or_test
23
65
for_stmt
24
65
try_stmt
25
65
def
26
65
False
27
65
comparison
28
65
term
29
65
simple_stmt
30
65
+
31
65
power
32
65
not_test
33
65
None
34
65
with
35
65
classdef
36
65
lambdef
37
65
if_stmt
38
65
NUMBER
39
65
xor_expr
40
65
{
41
65
not
42
65
-
43
65
funcdef
44
65
decorators
45
65
STRING
46
65
test
47
65
and_test
48
65
begsim
49
65
expr
50
65
with_stmt
51
65
confdef
52
65
lambda
53
65
return
54
65
~
55
65
return_stmt
56
65
endsim
57
65
@
58
65
$
program -> 
65
raise_stmt
59
65
stmt
60
65
global_stmt
61
65
continue_stmt
62
65
assert
63
65
break_stmt
64
65
NEWLINE
65
65
del
66
65
global
67
65
pass_stmt
68
65
test_list
70
65
flow_stmt
71
65
program
402
65
yield_stmt
72
65
pass
73
65
continue
74
65
del_stmt
75
65
nonlocal
76
65
decorator
77
65
assert_stmt
78
65
stat_stmt
79
65
nonlocal_stmt
80
65
expr_stmt
81
65
break
82
65
yield
83
65
sim_stmt
84
66
~
344
66
term
345
66
atom
346
66
False
347
66
atom_expr
348
66
[
349
66
NUMBER
350
66
True
351
66
NAME
352
66
None
353
66
+
354
66
factor
355
66
-
356
66
(
357
66
arith_expr
358
66
{
359
66
STRING
360
66
power
361
66
shift_expr
362
66
xor_expr
363
66
and_expr
364
66
expr
366
66
expr_list
403
67
namelist
404
67
NAME
405
68
NEWLINE
small_stmt -> pass_stmt
69
$
OK
70
*=
406
70
-=
407
70
NEWLINE
assign -> 
70
>>=
408
70
^=
409
70
&=
410
70
%=
411
70
+=
412
70
//=
413
70
**=
414
70
<<=
415
70
|=
416
70
@=
417
70
=
418
70
/=
419
70
augassign
420
70
assign
421
70
:
422
70
annassign
423
71
NEWLINE
small_stmt -> flow_stmt
72
NEWLINE
flow_stmt -> yield_stmt
73
NEWLINE
pass_stmt -> pass
74
NEWLINE
continue_stmt -> continue
75
NEWLINE
small_stmt -> del_stmt
76
namelist
424
76
NAME
405
77
@
58
77
def
decorators -> decorator
77
decorator
77
77
decorators
425
77
class
decorators -> decorator
78
NEWLINE
small_stmt -> assert_stmt
79
NEWLINE
small_stmt -> stat_stmt
80
NEWLINE
small_stmt -> nonlocal_stmt
81
NEWLINE
small_stmt -> expr_stmt
82
NEWLINE
break_stmt -> break
83
~
344
83
term
345
83
atom
346
83
False
347
83
atom_expr
348
83
[
349
83
NUMBER
350
83
True
351
83
NAME
352
83
None
353
83
+
354
83
factor
355
83
-
356
83
(
357
83
arith_expr
358
83
{
359
83
STRING
360
83
NEWLINE
yield_stmt -> yield
83
power
361
83
shift_expr
362
83
xor_expr
363
83
and_expr
364
83
expr_list
426
83
expr
366
84
NEWLINE
small_stmt -> sim_stmt
85
.
atom -> NAME
85
<
atom -> NAME
85
|
atom -> NAME
85
not
atom -> NAME
85
[
atom -> NAME
85
+
atom -> NAME
85
%
atom -> NAME
85
<=
atom -> NAME
85
*
atom -> NAME
85
!=
atom -> NAME
85
in
atom -> NAME
85
:
atom -> NAME
85
if
atom -> NAME
85
is
atom -> NAME
85
(
atom -> NAME
85
^
atom -> NAME
85
@
atom -> NAME
85
&
atom -> NAME
85
>>
atom -> NAME
85
<<
atom -> NAME
85
-
atom -> NAME
85
/
atom -> NAME
85
or
atom -> NAME
85
//
atom -> NAME
85
>=
atom -> NAME
85
and
atom -> NAME
85
>
atom -> NAME
85
==
atom -> NAME
85
**
atom -> NAME
86
**
427
86
and
power -> atom_expr
86
^
power -> atom_expr
86
or
power -> atom_expr
86
>>
power -> atom_expr
86
if
power -> atom_expr
86
<
power -> atom_expr
86
>=
power -> atom_expr
86
:
power -> atom_expr
86
!=
power -> atom_expr
86
is
power -> atom_expr
86
<=
power -> atom_expr
86
not
power -> atom_expr
86
//
power -> atom_expr
86
+
power -> atom_expr
86
==
power -> atom_expr
86
|
power -> atom_expr
86
-
power -> atom_expr
86
&
power -> atom_expr
86
/
power -> atom_expr
86
@
power -> atom_expr
86
<<
power -> atom_expr
86
%
power -> atom_expr
86
*
power -> atom_expr
86
in
power -> atom_expr
86
>
power -> atom_expr
87
+
428
87
or
arith_expr -> term
87
==
arith_expr -> term
87
-
429
87
in
arith_expr -> term
87
<<
arith_expr -> term
87
>
arith_expr -> term
87
is
arith_expr -> term
87
>=
arith_expr -> term
87
:
arith_expr -> term
87
<=
arith_expr -> term
87
and
arith_expr -> term
87
>>
arith_expr -> term
87
!=
arith_expr -> term
87
not
arith_expr -> term
87
&
arith_expr -> term
87
if
arith_expr -> term
87
<
arith_expr -> term
87
^
arith_expr -> term
87
|
arith_expr -> term
88
trailer
430
88
trailer_expr
431
88
[
432
88
or
trailer_expr -> 
88
.
433
88
(
434
88
not
trailer_expr -> 
88
in
trailer_expr -> 
88
is
trailer_expr -> 
88
>=
trailer_expr -> 
88
-
trailer_expr -> 
88
@
trailer_expr -> 
88
<=
trailer_expr -> 
88
^
trailer_expr -> 
88
*
trailer_expr -> 
88
if
trailer_expr -> 
88
**
trailer_expr -> 
88
>
trailer_expr -> 
88
==
trailer_expr -> 
88
>>
trailer_expr -> 
88
<<
trailer_expr -> 
88
/
trailer_expr -> 
88
//
trailer_expr -> 
88
!=
trailer_expr -> 
88
<
trailer_expr -> 
88
&
trailer_expr -> 
88
:
trailer_expr -> 
88
|
trailer_expr -> 
88
and
trailer_expr -> 
88
+
trailer_expr -> 
88
%
trailer_expr -> 
89
NAME
85
89
atom_expr
86
89
atom
88
89
-
89
89
factor
435
89
True
91
89
False
94
89
{
96
89
(
97
89
+
95
89
[
100
89
STRING
101
89
power
105
89
None
106
89
NUMBER
109
89
~
110
90
%
436
90
//
437
90
/
438
90
*
439
90
@
440
90
not
term -> factor
90
<<
term -> factor
90
or
term -> factor
90
^
term -> factor
90
in
term -> factor
90
if
term -> factor
90
and
term -> factor
90
<=
term -> factor
90
&
term -> factor
90
:
term -> factor
90
>>
term -> factor
90
>
term -> factor
90
|
term -> factor
90
<
term -> factor
90
is
term -> factor
90
!=
term -> factor
90
>=
term -> factor
90
==
term -> factor
90
-
term -> factor
90
+
term -> factor
91
!=
atom -> True
91
&
atom -> True
91
+
atom -> True
91
<<
atom -> True
91
@
atom -> True
91
if
atom -> True
91
and
atom -> True
91
is
atom -> True
91
|
atom -> True
91
<
atom -> True
91
>=
atom -> True
91
or
atom -> True
91
==
atom -> True
91
%
atom -> True
91
>
atom -> True
91
[
atom -> True
91
*
atom -> True
91
//
atom -> True
91
/
atom -> True
91
in
atom -> True
91
-
atom -> True
91
^
atom -> True
91
<=
atom -> True
91
(
atom -> True
91
**
atom -> True
91
.
atom -> True
91
not
atom -> True
91
:
atom -> True
91
>>
atom -> True
92
>>
441
92
or
shift_expr -> arith_expr
92
<<
442
92
^
shift_expr -> arith_expr
92
in
shift_expr -> arith_expr
92
<=
shift_expr -> arith_expr
92
>=
shift_expr -> arith_expr
92
&
shift_expr -> arith_expr
92
==
shift_expr -> arith_expr
92
:
shift_expr -> arith_expr
92
not
shift_expr -> arith_expr
92
and
shift_expr -> arith_expr
92
>
shift_expr -> arith_expr
92
!=
shift_expr -> arith_expr
92
if
shift_expr -> arith_expr
92
|
shift_expr -> arith_expr
92
<
shift_expr -> arith_expr
92
is
shift_expr -> arith_expr
93
:
443
94
not
atom -> False
94
==
atom -> False
94
*
atom -> False
94
>
atom -> False
94
[
atom -> False
94
if
atom -> False
94
@
atom -> False
94
&
atom -> False
94
is
atom -> False
94
.
atom -> False
94
+
atom -> False
94
%
atom -> False
94
>=
atom -> False
94
and
atom -> False
94
(
atom -> False
94
|
atom -> False
94
-
atom -> False
94
:
atom -> False
94
/
atom -> False
94
in
atom -> False
94
<<
atom -> False
94
<=
atom -> False
94
^
atom -> False
94
//
atom -> False
94
>>
atom -> False
94
!=
atom -> False
94
**
atom -> False
94
or
atom -> False
94
<
atom -> False
95
NAME
85
95
atom_expr
86
95
atom
88
95
-
89
95
True
91
95
False
94
95
{
96
95
(
97
95
+
95
95
[
100
95
STRING
101
95
factor
444
95
power
105
95
None
106
95
NUMBER
109
95
~
110
96
}
445
97
NAME
131
97
atom_expr
132
97
atom
133
97
-
134
97
factor
136
97
)
446
97
[
137
97
True
138
97
arith_expr
139
97
False
140
97
{
141
97
+
142
97
and_expr
143
97
(
144
97
STRING
145
97
test_list_comp
447
97
power
147
97
term
148
97
comparison
149
97
shift_expr
150
97
test
151
97
not_test
152
97
or_test
153
97
lambda
154
97
None
155
97
xor_expr
156
97
expr
157
97
NUMBER
158
97
and_test
159
97
~
160
97
lambdef
161
97
not
162
97
test_list
163
98
^
448
98
<
xor_expr -> and_expr
98
<=
xor_expr -> and_expr
98
|
xor_expr -> and_expr
98
not
xor_expr -> and_expr
98
and
xor_expr -> and_expr
98
!=
xor_expr -> and_expr
98
or
xor_expr -> and_expr
98
>
xor_expr -> and_expr
98
>=
xor_expr -> and_expr
98
==
xor_expr -> and_expr
98
in
xor_expr -> and_expr
98
is
xor_expr -> and_expr
98
:
xor_expr -> and_expr
98
if
xor_expr -> and_expr
99
or
449
99
if
or_test -> and_test
99
:
or_test -> and_test
100
NAME
187
100
atom_expr
188
100
atom
189
100
-
190
100
factor
191
100
test_list_comp
450
100
[
193
100
True
194
100
arith_expr
195
100
False
196
100
{
197
100
+
198
100
and_expr
199
100
(
200
100
STRING
201
100
]
451
100
term
203
100
and_test
204
100
comparison
205
100
shift_expr
206
100
not_test
207
100
power
208
100
or_test
209
100
None
210
100
xor_expr
211
100
expr
212
100
NUMBER
213
100
lambda
214
100
~
215
100
lambdef
216
100
not
217
100
test
218
100
test_list
219
101
and
atom -> STRING
101
not
atom -> STRING
101
.
atom -> STRING
101
//
atom -> STRING
101
-
atom -> STRING
101
*
atom -> STRING
101
(
atom -> STRING
101
>=
atom -> STRING
101
<=
atom -> STRING
101
<<
atom -> STRING
101
if
atom -> STRING
101
+
atom -> STRING
101
or
atom -> STRING
101
/
atom -> STRING
101
@
atom -> STRING
101
in
atom -> STRING
101
>>
atom -> STRING
101
%
atom -> STRING
101
!=
atom -> STRING
101
>
atom -> STRING
101
^
atom -> STRING
101
<
atom -> STRING
101
:
atom -> STRING
101
==
atom -> STRING
101
**
atom -> STRING
101
&
atom -> STRING
101
|
atom -> STRING
101
is
atom -> STRING
101
[
atom -> STRING
102
:
not_test -> comparison
102
if
not_test -> comparison
102
or
not_test -> comparison
102
and
not_test -> comparison
103
==
and_expr -> shift_expr
103
&
452
103
!=
and_expr -> shift_expr
103
<
and_expr -> shift_expr
103
<=
and_expr -> shift_expr
103
and
and_expr -> shift_expr
103
in
and_expr -> shift_expr
103
^
and_expr -> shift_expr
103
:
and_expr -> shift_expr
103
not
and_expr -> shift_expr
103
is
and_expr -> shift_expr
103
if
and_expr -> shift_expr
103
>
and_expr -> shift_expr
103
or
and_expr -> shift_expr
103
>=
and_expr -> shift_expr
103
|
and_expr -> shift_expr
104
and
453
104
if
and_test -> not_test
104
:
and_test -> not_test
104
or
and_test -> not_test
105
<=
factor -> power
105
is
factor -> power
105
>
factor -> power
105
==
factor -> power
105
^
factor -> power
105
or
factor -> power
105
-
factor -> power
105
+
factor -> power
105
>>
factor -> power
105
/
factor -> power
105
*
factor -> power
105
<<
factor -> power
105
|
factor -> power
105
and
factor -> power
105
<
factor -> power
105
not
factor -> power
105
!=
factor -> power
105
:
factor -> power
105
if
factor -> power
105
&
factor -> power
105
in
factor -> power
105
%
factor -> power
105
>=
factor -> power
105
//
factor -> power
105
@
factor -> power
106
+
atom -> None
106
>>
atom -> None
106
/
atom -> None
106
or
atom -> None
106
*
atom -> None
106
in
atom -> None
106
**
atom -> None
106
==
atom -> None
106
-
atom -> None
106
if
atom -> None
106
(
atom -> None
106
@
atom -> None
106
:
atom -> None
106
>=
atom -> None
106
[
atom -> None
106
^
atom -> None
106
&
atom -> None
106
<=
atom -> None
106
is
atom -> None
106
.
atom -> None
106
not
atom -> None
106
//
atom -> None
106
<
atom -> None
106
<<
atom -> None
106
!=
atom -> None
106
and
atom -> None
106
%
atom -> None
106
|
atom -> None
106
>
atom -> None
107
|
454
107
>
expr -> xor_expr
107
<
expr -> xor_expr
107
and
expr -> xor_expr
107
>=
expr -> xor_expr
107
!=
expr -> xor_expr
107
or
expr -> xor_expr
107
in
expr -> xor_expr
107
is
expr -> xor_expr
107
if
expr -> xor_expr
107
==
expr -> xor_expr
107
<=
expr -> xor_expr
107
:
expr -> xor_expr
107
not
expr -> xor_expr
108
==
330
108
is
331
108
<=
332
108
and
comparison -> expr
108
!=
334
108
>
335
108
not
336
108
comp_op
455
108
in
337
108
or
comparison -> expr
108
<
338
108
>=
339
108
if
comparison -> expr
108
:
comparison -> expr
109
is
atom -> NUMBER
109
|
atom -> NUMBER
109
in
atom -> NUMBER
109
@
atom -> NUMBER
109
**
atom -> NUMBER
109
and
atom -> NUMBER
109
!=
atom -> NUMBER
109
if
atom -> NUMBER
109
-
atom -> NUMBER
109
<<
atom -> NUMBER
109
.
atom -> NUMBER
109
(
atom -> NUMBER
109
==
atom -> NUMBER
109
%
atom -> NUMBER
109
^
atom -> NUMBER
109
not
atom -> NUMBER
109
>=
atom -> NUMBER
109
:
atom -> NUMBER
109
/
atom -> NUMBER
109
//
atom -> NUMBER
109
>
atom -> NUMBER
109
&
atom -> NUMBER
109
[
atom -> NUMBER
109
<=
atom -> NUMBER
109
*
atom -> NUMBER
109
or
atom -> NUMBER
109
+
atom -> NUMBER
109
>>
atom -> NUMBER
109
<
atom -> NUMBER
110
NAME
85
110
atom_expr
86
110
atom
88
110
-
89
110
True
91
110
False
94
110
{
96
110
(
97
110
+
95
110
factor
456
110
[
100
110
STRING
101
110
power
105
110
None
106
110
NUMBER
109
110
~
110
111
NAME
85
111
atom_expr
86
111
term
87
111
atom
88
111
-
89
111
factor
90
111
True
91
111
arith_expr
92
111
False
94
111
{
96
111
(
97
111
+
95
111
and_expr
98
111
[
100
111
not_test
457
111
STRING
101
111
comparison
102
111
shift_expr
103
111
power
105
111
None
106
111
xor_expr
107
111
expr
108
111
NUMBER
109
111
~
110
111
not
111
112
:
test -> or_test
112
if
458
113
:
459
113
vfpdef
343
113
NAME
342
113
varargslist
460
114
:
test -> lambdef
115
|
atom_expr -> atom trailer_expr
115
<<=
atom_expr -> atom trailer_expr
115
*
atom_expr -> atom trailer_expr
115
|=
atom_expr -> atom trailer_expr
115
//=
atom_expr -> atom trailer_expr
115
:
atom_expr -> atom trailer_expr
115
^=
atom_expr -> atom trailer_expr
115
-
atom_expr -> atom trailer_expr
115
not
atom_expr -> atom trailer_expr
115
in
atom_expr -> atom trailer_expr
115
and
atom_expr -> atom trailer_expr
115
>>
atom_expr -> atom trailer_expr
115
or
atom_expr -> atom trailer_expr
115
<=
atom_expr -> atom trailer_expr
115
^
atom_expr -> atom trailer_expr
115
<
atom_expr -> atom trailer_expr
115
NEWLINE
atom_expr -> atom trailer_expr
115
//
atom_expr -> atom trailer_expr
115
!=
atom_expr -> atom trailer_expr
115
&=
atom_expr -> atom trailer_expr
115
<<
atom_expr -> atom trailer_expr
115
+=
atom_expr -> atom trailer_expr
115
+
atom_expr -> atom trailer_expr
115
>
atom_expr -> atom trailer_expr
115
/
atom_expr -> atom trailer_expr
115
-=
atom_expr -> atom trailer_expr
115
>>=
atom_expr -> atom trailer_expr
115
==
atom_expr -> atom trailer_expr
115
%=
atom_expr -> atom trailer_expr
115
%
atom_expr -> atom trailer_expr
115
&
atom_expr -> atom trailer_expr
115
@
atom_expr -> atom trailer_expr
115
*=
atom_expr -> atom trailer_expr
115
if
atom_expr -> atom trailer_expr
115
**=
atom_expr -> atom trailer_expr
115
/=
atom_expr -> atom trailer_expr
115
=
atom_expr -> atom trailer_expr
115
@=
atom_expr -> atom trailer_expr
115
>=
atom_expr -> atom trailer_expr
115
is
atom_expr -> atom trailer_expr
115
,
atom_expr -> atom trailer_expr
115
**
atom_expr -> atom trailer_expr
116
NAME
461
116
atom_expr
462
116
term
463
116
atom
464
116
-
465
116
factor
466
116
[
467
116
True
468
116
arith_expr
469
116
False
470
116
{
471
116
(
472
116
+
473
116
and_expr
474
116
and_test
475
116
STRING
476
116
subscriptlist
477
116
comparison
478
116
shift_expr
479
116
not_test
480
116
power
481
116
None
482
116
xor_expr
483
116
expr
484
116
NUMBER
485
116
test
486
116
~
487
116
or_test
488
116
not
489
116
lambdef
490
116
:
maybe_test -> 
116
lambda
491
116
subscript
492
116
maybe_test
493
117
NAME
494
118
trailer_expr
495
118
[
116
118
or
trailer_expr -> 
118
.
117
118
trailer
118
118
in
trailer_expr -> 
118
(
119
118
<=
trailer_expr -> 
118
^
trailer_expr -> 
118
*
trailer_expr -> 
118
**
trailer_expr -> 
118
|=
trailer_expr -> 
118
&=
trailer_expr -> 
118
==
trailer_expr -> 
118
>>
trailer_expr -> 
118
//
trailer_expr -> 
118
!=
trailer_expr -> 
118
&
trailer_expr -> 
118
^=
trailer_expr -> 
118
*=
trailer_expr -> 
118
>>=
trailer_expr -> 
118
and
trailer_expr -> 
118
**=
trailer_expr -> 
118
+
trailer_expr -> 
118
@=
trailer_expr -> 
118
%
trailer_expr -> 
118
not
trailer_expr -> 
118
is
trailer_expr -> 
118
>=
trailer_expr -> 
118
-
trailer_expr -> 
118
@
trailer_expr -> 
118
%=
trailer_expr -> 
118
,
trailer_expr -> 
118
if
trailer_expr -> 
118
=
trailer_expr -> 
118
>
trailer_expr -> 
118
+=
trailer_expr -> 
118
/=
trailer_expr -> 
118
-=
trailer_expr -> 
118
<<
trailer_expr -> 
118
/
trailer_expr -> 
118
NEWLINE
trailer_expr -> 
118
<
trailer_expr -> 
118
//=
trailer_expr -> 
118
:
trailer_expr -> 
118
|
trailer_expr -> 
118
<<=
trailer_expr -> 
119
NAME
496
119
atom_expr
497
119
atom
498
119
-
499
119
arglist
500
119
factor
501
119
*
502
119
[
503
119
True
504
119
arith_expr
505
119
xor_expr
506
119
False
507
119
**
508
119
{
509
119
+
510
119
)
511
119
and_expr
512
119
(
513
119
STRING
514
119
power
515
119
term
516
119
comparison
517
119
shift_expr
518
119
argument
519
119
not_test
520
119
or_test
521
119
lambdef
522
119
lambda
523
119
None
524
119
test
525
119
expr
526
119
NUMBER
527
119
and_test
528
119
~
529
119
not
530
120
NAME
12
120
True
1
120
atom_expr
5
120
atom
4
120
-
43
120
False
27
120
[
15
120
{
41
120
(
13
120
+
31
120
None
34
120
factor
531
120
STRING
46
120
~
55
120
power
32
120
NUMBER
39
121
NAME
12
121
True
1
121
atom_expr
5
121
term
29
121
atom
4
121
factor
11
121
shift_expr
7
121
arith_expr
8
121
False
27
121
{
41
121
(
13
121
[
15
121
STRING
46
121
~
55
121
-
43
121
+
31
121
power
32
121
and_expr
532
121
None
34
121
NUMBER
39
122
NAME
12
122
True
1
122
atom_expr
5
122
term
29
122
atom
4
122
factor
11
122
arith_expr
8
122
False
27
122
{
41
122
shift_expr
533
122
(
13
122
[
15
122
STRING
46
122
~
55
122
-
43
122
+
31
122
power
32
122
None
34
122
NUMBER
39
123
NAME
12
123
True
1
123
atom_expr
5
123
term
29
123
atom
4
123
factor
11
123
arith_expr
8
123
False
27
123
{
41
123
(
13
123
[
15
123
STRING
46
123
shift_expr
534
123
~
55
123
-
43
123
+
31
123
power
32
123
None
34
123
NUMBER
39
124
NAME
12
124
True
1
124
atom_expr
5
124
term
29
124
atom
4
124
factor
11
124
shift_expr
7
124
arith_expr
8
124
False
27
124
and_expr
9
124
{
41
124
(
13
124
[
15
124
STRING
46
124
xor_expr
535
124
~
55
124
-
43
124
+
31
124
power
32
124
None
34
124
NUMBER
39
125
:
536
126
NAME
12
126
True
1
126
atom_expr
5
126
atom
4
126
factor
11
126
False
27
126
{
41
126
(
13
126
[
15
126
term
537
126
STRING
46
126
~
55
126
-
43
126
+
31
126
power
32
126
None
34
126
NUMBER
39
127
NAME
12
127
True
1
127
atom_expr
5
127
atom
4
127
factor
11
127
False
27
127
{
41
127
(
13
127
[
15
127
STRING
46
127
~
55
127
-
43
127
+
31
127
term
538
127
power
32
127
None
34
127
NUMBER
39
128
NAME
12
128
True
1
128
atom_expr
5
128
atom
4
128
factor
11
128
term
539
128
False
27
128
{
41
128
(
13
128
[
15
128
STRING
46
128
~
55
128
-
43
128
+
31
128
power
32
128
None
34
128
NUMBER
39
129
NAME
12
129
True
1
129
atom_expr
5
129
atom
4
129
factor
11
129
False
27
129
{
41
129
(
13
129
[
15
129
STRING
46
129
~
55
129
-
43
129
+
31
129
term
540
129
power
32
129
None
34
129
NUMBER
39
130
NAME
12
130
True
1
130
atom_expr
5
130
atom
4
130
factor
11
130
False
27
130
{
41
130
(
13
130
[
15
130
term
541
130
STRING
46
130
~
55
130
-
43
130
+
31
130
power
32
130
None
34
130
NUMBER
39
131
.
atom -> NAME
131
<
atom -> NAME
131
|
atom -> NAME
131
not
atom -> NAME
131
[
atom -> NAME
131
,
atom -> NAME
131
+
atom -> NAME
131
%
atom -> NAME
131
for
atom -> NAME
131
)
atom -> NAME
131
<=
atom -> NAME
131
*
atom -> NAME
131
!=
atom -> NAME
131
in
atom -> NAME
131
if
atom -> NAME
131
is
atom -> NAME
131
(
atom -> NAME
131
^
atom -> NAME
131
@
atom -> NAME
131
&
atom -> NAME
131
>>
atom -> NAME
131
<<
atom -> NAME
131
-
atom -> NAME
131
/
atom -> NAME
131
or
atom -> NAME
131
//
atom -> NAME
131
>=
atom -> NAME
131
and
atom -> NAME
131
>
atom -> NAME
131
==
atom -> NAME
131
**
atom -> NAME
132
**
542
132
)
power -> atom_expr
132
and
power -> atom_expr
132
^
power -> atom_expr
132
or
power -> atom_expr
132
>>
power -> atom_expr
132
if
power -> atom_expr
132
<
power -> atom_expr
132
>=
power -> atom_expr
132
for
power -> atom_expr
132
!=
power -> atom_expr
132
is
power -> atom_expr
132
<=
power -> atom_expr
132
not
power -> atom_expr
132
//
power -> atom_expr
132
+
power -> atom_expr
132
==
power -> atom_expr
132
|
power -> atom_expr
132
-
power -> atom_expr
132
&
power -> atom_expr
132
/
power -> atom_expr
132
@
power -> atom_expr
132
<<
power -> atom_expr
132
,
power -> atom_expr
132
%
power -> atom_expr
132
*
power -> atom_expr
132
in
power -> atom_expr
132
>
power -> atom_expr
133
trailer
543
133
trailer_expr
544
133
[
545
133
.
546
133
or
trailer_expr -> 
133
(
547
133
not
trailer_expr -> 
133
in
trailer_expr -> 
133
is
trailer_expr -> 
133
>=
trailer_expr -> 
133
-
trailer_expr -> 
133
@
trailer_expr -> 
133
<=
trailer_expr -> 
133
)
trailer_expr -> 
133
,
trailer_expr -> 
133
^
trailer_expr -> 
133
*
trailer_expr -> 
133
for
trailer_expr -> 
133
if
trailer_expr -> 
133
**
trailer_expr -> 
133
>
trailer_expr -> 
133
==
trailer_expr -> 
133
>>
trailer_expr -> 
133
<<
trailer_expr -> 
133
/
trailer_expr -> 
133
//
trailer_expr -> 
133
!=
trailer_expr -> 
133
<
trailer_expr -> 
133
&
trailer_expr -> 
133
|
trailer_expr -> 
133
and
trailer_expr -> 
133
+
trailer_expr -> 
133
%
trailer_expr -> 
134
NAME
131
134
atom_expr
132
134
atom
133
134
-
134
134
factor
548
134
[
137
134
True
138
134
False
140
134
{
141
134
+
142
134
(
144
134
STRING
145
134
power
147
134
None
155
134
NUMBER
158
134
~
160
135
NEWLINE
atom -> ( )
135
%=
atom -> ( )
135
|=
atom -> ( )
135
|
atom -> ( )
135
**
atom -> ( )
135
>>
atom -> ( )
135
-
atom -> ( )
135
%
atom -> ( )
135
(
atom -> ( )
135
not
atom -> ( )
135
>>=
atom -> ( )
135
/=
atom -> ( )
135
**=
atom -> ( )
135
+
atom -> ( )
135
>=
atom -> ( )
135
&
atom -> ( )
135
@=
atom -> ( )
135
-=
atom -> ( )
135
*=
atom -> ( )
135
*
atom -> ( )
135
!=
atom -> ( )
135
&=
atom -> ( )
135
<=
atom -> ( )
135
and
atom -> ( )
135
^=
atom -> ( )
135
<
atom -> ( )
135
//=
atom -> ( )
135
^
atom -> ( )
135
==
atom -> ( )
135
if
atom -> ( )
135
in
atom -> ( )
135
/
atom -> ( )
135
>
atom -> ( )
135
//
atom -> ( )
135
.
atom -> ( )
135
+=
atom -> ( )
135
or
atom -> ( )
135
@
atom -> ( )
135
is
atom -> ( )
135
<<=
atom -> ( )
135
=
atom -> ( )
135
:
atom -> ( )
135
<<
atom -> ( )
135
,
atom -> ( )
135
[
atom -> ( )
136
%
549
136
/
550
136
*
551
136
//
552
136
@
553
136
not
term -> factor
136
<<
term -> factor
136
or
term -> factor
136
^
term -> factor
136
in
term -> factor
136
if
term -> factor
136
and
term -> factor
136
<=
term -> factor
136
&
term -> factor
136
,
term -> factor
136
>>
term -> factor
136
>
term -> factor
136
|
term -> factor
136
<
term -> factor
136
is
term -> factor
136
!=
term -> factor
136
>=
term -> factor
136
==
term -> factor
136
-
term -> factor
136
+
term -> factor
136
)
term -> factor
136
for
term -> factor
137
NAME
187
137
atom_expr
188
137
atom
189
137
-
190
137
factor
191
137
test_list_comp
554
137
[
193
137
True
194
137
arith_expr
195
137
False
196
137
{
197
137
+
198
137
and_expr
199
137
(
200
137
STRING
201
137
]
555
137
term
203
137
and_test
204
137
comparison
205
137
shift_expr
206
137
not_test
207
137
power
208
137
or_test
209
137
None
210
137
xor_expr
211
137
expr
212
137
NUMBER
213
137
lambda
214
137
~
215
137
lambdef
216
137
not
217
137
test
218
137
test_list
219
138
!=
atom -> True
138
&
atom -> True
138
+
atom -> True
138
<<
atom -> True
138
@
atom -> True
138
,
atom -> True
138
if
atom -> True
138
and
atom -> True
138
is
atom -> True
138
|
atom -> True
138
<
atom -> True
138
>=
atom -> True
138
or
atom -> True
138
==
atom -> True
138
%
atom -> True
138
for
atom -> True
138
>
atom -> True
138
*
atom -> True
138
[
atom -> True
138
)
atom -> True
138
//
atom -> True
138
/
atom -> True
138
in
atom -> True
138
-
atom -> True
138
^
atom -> True
138
<=
atom -> True
138
(
atom -> True
138
**
atom -> True
138
.
atom -> True
138
not
atom -> True
138
>>
atom -> True
139
or
shift_expr -> arith_expr
139
>>
556
139
<<
557
139
)
shift_expr -> arith_expr
139
^
shift_expr -> arith_expr
139
in
shift_expr -> arith_expr
139
,
shift_expr -> arith_expr
139
<=
shift_expr -> arith_expr
139
>=
shift_expr -> arith_expr
139
&
shift_expr -> arith_expr
139
==
shift_expr -> arith_expr
139
for
shift_expr -> arith_expr
139
not
shift_expr -> arith_expr
139
and
shift_expr -> arith_expr
139
>
shift_expr -> arith_expr
139
!=
shift_expr -> arith_expr
139
if
shift_expr -> arith_expr
139
|
shift_expr -> arith_expr
139
<
shift_expr -> arith_expr
139
is
shift_expr -> arith_expr
140
not
atom -> False
140
==
atom -> False
140
)
atom -> False
140
*
atom -> False
140
>
atom -> False
140
,
atom -> False
140
[
atom -> False
140
if
atom -> False
140
@
atom -> False
140
&
atom -> False
140
is
atom -> False
140
.
atom -> False
140
+
atom -> False
140
%
atom -> False
140
>=
atom -> False
140
and
atom -> False
140
(
atom -> False
140
|
atom -> False
140
-
atom -> False
140
/
atom -> False
140
in
atom -> False
140
<<
atom -> False
140
<=
atom -> False
140
^
atom -> False
140
//
atom -> False
140
>>
atom -> False
140
!=
atom -> False
140
**
atom -> False
140
for
atom -> False
140
or
atom -> False
140
<
atom -> False
141
}
558
142
NAME
131
142
atom_expr
132
142
atom
133
142
-
134
142
[
137
142
True
138
142
False
140
142
{
141
142
+
142
142
(
144
142
STRING
145
142
power
147
142
factor
559
142
None
155
142
NUMBER
158
142
~
160
143
^
560
143
<
xor_expr -> and_expr
143
<=
xor_expr -> and_expr
143
|
xor_expr -> and_expr
143
not
xor_expr -> and_expr
143
and
xor_expr -> and_expr
143
)
xor_expr -> and_expr
143
for
xor_expr -> and_expr
143
!=
xor_expr -> and_expr
143
or
xor_expr -> and_expr
143
>
xor_expr -> and_expr
143
>=
xor_expr -> and_expr
143
==
xor_expr -> and_expr
143
,
xor_expr -> and_expr
143
in
xor_expr -> and_expr
143
is
xor_expr -> and_expr
143
if
xor_expr -> and_expr
144
NAME
131
144
atom_expr
132
144
atom
133
144
-
134
144
factor
136
144
)
561
144
[
137
144
True
138
144
arith_expr
139
144
False
140
144
{
141
144
+
142
144
and_expr
143
144
(
144
144
STRING
145
144
test_list_comp
562
144
power
147
144
term
148
144
comparison
149
144
shift_expr
150
144
test
151
144
not_test
152
144
or_test
153
144
lambda
154
144
None
155
144
xor_expr
156
144
expr
157
144
NUMBER
158
144
and_test
159
144
~
160
144
lambdef
161
144
not
162
144
test_list
163
145
and
atom -> STRING
145
not
atom -> STRING
145
.
atom -> STRING
145
//
atom -> STRING
145
-
atom -> STRING
145
*
atom -> STRING
145
(
atom -> STRING
145
>=
atom -> STRING
145
<=
atom -> STRING
145
<<
atom -> STRING
145
if
atom -> STRING
145
+
atom -> STRING
145
or
atom -> STRING
145
/
atom -> STRING
145
@
atom -> STRING
145
in
atom -> STRING
145
>>
atom -> STRING
145
%
atom -> STRING
145
!=
atom -> STRING
145
,
atom -> STRING
145
>
atom -> STRING
145
^
atom -> STRING
145
<
atom -> STRING
145
==
atom -> STRING
145
for
atom -> STRING
145
**
atom -> STRING
145
&
atom -> STRING
145
|
atom -> STRING
145
is
atom -> STRING
145
)
atom -> STRING
145
[
atom -> STRING
146
)
563
147
<=
factor -> power
147
,
factor -> power
147
is
factor -> power
147
>
factor -> power
147
)
factor -> power
147
==
factor -> power
147
^
factor -> power
147
or
factor -> power
147
-
factor -> power
147
+
factor -> power
147
>>
factor -> power
147
/
factor -> power
147
*
factor -> power
147
<<
factor -> power
147
|
factor -> power
147
and
factor -> power
147
<
factor -> power
147
not
factor -> power
147
!=
factor -> power
147
if
factor -> power
147
&
factor -> power
147
in
factor -> power
147
for
factor -> power
147
%
factor -> power
147
>=
factor -> power
147
//
factor -> power
147
@
factor -> power
148
+
564
148
or
arith_expr -> term
148
)
arith_expr -> term
148
==
arith_expr -> term
148
-
565
148
in
arith_expr -> term
148
<<
arith_expr -> term
148
>
arith_expr -> term
148
is
arith_expr -> term
148
>=
arith_expr -> term
148
<=
arith_expr -> term
148
and
arith_expr -> term
148
>>
arith_expr -> term
148
for
arith_expr -> term
148
!=
arith_expr -> term
148
not
arith_expr -> term
148
&
arith_expr -> term
148
,
arith_expr -> term
148
if
arith_expr -> term
148
<
arith_expr -> term
148
^
arith_expr -> term
148
|
arith_expr -> term
149
,
not_test -> comparison
149
)
not_test -> comparison
149
for
not_test -> comparison
149
or
not_test -> comparison
149
if
not_test -> comparison
149
and
not_test -> comparison
150
==
and_expr -> shift_expr
150
&
566
150
!=
and_expr -> shift_expr
150
<
and_expr -> shift_expr
150
<=
and_expr -> shift_expr
150
and
and_expr -> shift_expr
150
in
and_expr -> shift_expr
150
^
and_expr -> shift_expr
150
for
and_expr -> shift_expr
150
not
and_expr -> shift_expr
150
is
and_expr -> shift_expr
150
if
and_expr -> shift_expr
150
,
and_expr -> shift_expr
150
>
and_expr -> shift_expr
150
or
and_expr -> shift_expr
150
>=
and_expr -> shift_expr
150
)
and_expr -> shift_expr
150
|
and_expr -> shift_expr
151
,
567
151
comp_for
568
151
for
569
151
)
test_list -> test
152
and
570
152
for
and_test -> not_test
152
if
and_test -> not_test
152
)
and_test -> not_test
152
or
and_test -> not_test
152
,
and_test -> not_test
153
if
571
153
for
test -> or_test
153
,
test -> or_test
153
)
test -> or_test
154
varargslist
572
154
vfpdef
343
154
:
573
154
NAME
342
155
+
atom -> None
155
for
atom -> None
155
>>
atom -> None
155
/
atom -> None
155
or
atom -> None
155
*
atom -> None
155
in
atom -> None
155
**
atom -> None
155
==
atom -> None
155
-
atom -> None
155
if
atom -> None
155
(
atom -> None
155
@
atom -> None
155
)
atom -> None
155
[
atom -> None
155
>=
atom -> None
155
^
atom -> None
155
&
atom -> None
155
<=
atom -> None
155
is
atom -> None
155
.
atom -> None
155
not
atom -> None
155
//
atom -> None
155
<
atom -> None
155
<<
atom -> None
155
!=
atom -> None
155
and
atom -> None
155
%
atom -> None
155
|
atom -> None
155
,
atom -> None
155
>
atom -> None
156
|
574
156
>
expr -> xor_expr
156
<
expr -> xor_expr
156
and
expr -> xor_expr
156
>=
expr -> xor_expr
156
for
expr -> xor_expr
156
,
expr -> xor_expr
156
!=
expr -> xor_expr
156
or
expr -> xor_expr
156
in
expr -> xor_expr
156
is
expr -> xor_expr
156
if
expr -> xor_expr
156
==
expr -> xor_expr
156
)
expr -> xor_expr
156
<=
expr -> xor_expr
156
not
expr -> xor_expr
157
==
330
157
is
331
157
<=
332
157
comp_op
575
157
and
comparison -> expr
157
!=
334
157
>
335
157
not
336
157
in
337
157
for
comparison -> expr
157
or
comparison -> expr
157
<
338
157
>=
339
157
)
comparison -> expr
157
if
comparison -> expr
157
,
comparison -> expr
158
is
atom -> NUMBER
158
|
atom -> NUMBER
158
in
atom -> NUMBER
158
@
atom -> NUMBER
158
**
atom -> NUMBER
158
and
atom -> NUMBER
158
!=
atom -> NUMBER
158
if
atom -> NUMBER
158
-
atom -> NUMBER
158
<<
atom -> NUMBER
158
.
atom -> NUMBER
158
(
atom -> NUMBER
158
==
atom -> NUMBER
158
%
atom -> NUMBER
158
^
atom -> NUMBER
158
not
atom -> NUMBER
158
>=
atom -> NUMBER
158
,
atom -> NUMBER
158
/
atom -> NUMBER
158
)
atom -> NUMBER
158
//
atom -> NUMBER
158
>
atom -> NUMBER
158
&
atom -> NUMBER
158
[
atom -> NUMBER
158
<=
atom -> NUMBER
158
*
atom -> NUMBER
158
or
atom -> NUMBER
158
for
atom -> NUMBER
158
>>
atom -> NUMBER
158
+
atom -> NUMBER
158
<
atom -> NUMBER
159
or
576
159
)
or_test -> and_test
159
for
or_test -> and_test
159
if
or_test -> and_test
159
,
or_test -> and_test
160
NAME
131
160
atom_expr
132
160
atom
133
160
-
134
160
[
137
160
True
138
160
False
140
160
{
141
160
+
142
160
factor
577
160
(
144
160
STRING
145
160
power
147
160
None
155
160
NUMBER
158
160
~
160
161
for
test -> lambdef
161
)
test -> lambdef
161
,
test -> lambdef
162
NAME
131
162
atom_expr
132
162
atom
133
162
-
134
162
factor
136
162
[
137
162
True
138
162
arith_expr
139
162
False
140
162
{
141
162
+
142
162
and_expr
143
162
(
144
162
STRING
145
162
power
147
162
term
148
162
comparison
149
162
shift_expr
150
162
not_test
578
162
None
155
162
xor_expr
156
162
expr
157
162
NUMBER
158
162
~
160
162
not
162
163
)
test_list_comp -> test_list
164
~
164
164
atom
165
164
False
166
164
atom_expr
167
164
NUMBER
168
164
factor
579
164
[
169
164
True
171
164
NAME
172
164
None
173
164
+
174
164
-
177
164
(
178
164
{
179
164
STRING
181
164
power
182
165
trailer
580
165
(
581
165
>>
trailer_expr -> 
165
trailer_expr
582
165
[
583
165
<<
trailer_expr -> 
165
/
trailer_expr -> 
165
.
584
165
//
trailer_expr -> 
165
in
trailer_expr -> 
165
-
trailer_expr -> 
165
@
trailer_expr -> 
165
&
trailer_expr -> 
165
,
trailer_expr -> 
165
^
trailer_expr -> 
165
*
trailer_expr -> 
165
**
trailer_expr -> 
165
|
trailer_expr -> 
165
+
trailer_expr -> 
165
%
trailer_expr -> 
166
|
atom -> False
166
-
atom -> False
166
%
atom -> False
166
/
atom -> False
166
in
atom -> False
166
<<
atom -> False
166
@
atom -> False
166
&
atom -> False
166
*
atom -> False
166
//
atom -> False
166
^
atom -> False
166
,
atom -> False
166
>>
atom -> False
166
**
atom -> False
166
+
atom -> False
166
[
atom -> False
166
.
atom -> False
166
(
atom -> False
167
**
585
167
^
power -> atom_expr
167
>>
power -> atom_expr
167
//
power -> atom_expr
167
+
power -> atom_expr
167
|
power -> atom_expr
167
-
power -> atom_expr
167
&
power -> atom_expr
167
/
power -> atom_expr
167
@
power -> atom_expr
167
<<
power -> atom_expr
167
,
power -> atom_expr
167
%
power -> atom_expr
167
*
power -> atom_expr
167
in
power -> atom_expr
168
,
atom -> NUMBER
168
|
atom -> NUMBER
168
/
atom -> NUMBER
168
in
atom -> NUMBER
168
//
atom -> NUMBER
168
@
atom -> NUMBER
168
%
atom -> NUMBER
168
**
atom -> NUMBER
168
&
atom -> NUMBER
168
[
atom -> NUMBER
168
+
atom -> NUMBER
168
>>
atom -> NUMBER
168
^
atom -> NUMBER
168
-
atom -> NUMBER
168
<<
atom -> NUMBER
168
.
atom -> NUMBER
168
*
atom -> NUMBER
168
(
atom -> NUMBER
169
NAME
187
169
atom_expr
188
169
atom
189
169
-
190
169
factor
191
169
test_list_comp
586
169
[
193
169
True
194
169
arith_expr
195
169
False
196
169
{
197
169
+
198
169
and_expr
199
169
(
200
169
STRING
201
169
term
203
169
and_test
204
169
comparison
205
169
shift_expr
206
169
not_test
207
169
]
587
169
power
208
169
or_test
209
169
None
210
169
xor_expr
211
169
expr
212
169
NUMBER
213
169
lambda
214
169
~
215
169
lambdef
216
169
not
217
169
test
218
169
test_list
219
170
in
588
171
%
atom -> True
171
[
atom -> True
171
*
atom -> True
171
(
atom -> True
171
&
atom -> True
171
>>
atom -> True
171
|
atom -> True
171
**
atom -> True
171
/
atom -> True
171
//
atom -> True
171
.
atom -> True
171
+
atom -> True
171
in
atom -> True
171
-
atom -> True
171
^
atom -> True
171
<<
atom -> True
171
@
atom -> True
171
,
atom -> True
172
@
atom -> NAME
172
.
atom -> NAME
172
&
atom -> NAME
172
>>
atom -> NAME
172
|
atom -> NAME
172
<<
atom -> NAME
172
-
atom -> NAME
172
/
atom -> NAME
172
(
atom -> NAME
172
,
atom -> NAME
172
+
atom -> NAME
172
%
atom -> NAME
172
[
atom -> NAME
172
//
atom -> NAME
172
^
atom -> NAME
172
*
atom -> NAME
172
**
atom -> NAME
172
in
atom -> NAME
173
+
atom -> None
173
//
atom -> None
173
-
atom -> None
173
<<
atom -> None
173
&
atom -> None
173
(
atom -> None
173
>>
atom -> None
173
/
atom -> None
173
@
atom -> None
173
%
atom -> None
173
|
atom -> None
173
*
atom -> None
173
,
atom -> None
173
[
atom -> None
173
in
atom -> None
173
^
atom -> None
173
**
atom -> None
173
.
atom -> None
174
~
164
174
atom
165
174
False
166
174
atom_expr
167
174
NUMBER
168
174
[
169
174
True
171
174
NAME
172
174
None
173
174
+
174
174
-
177
174
(
178
174
{
179
174
STRING
181
174
factor
589
174
power
182
175
%
590
175
*
591
175
@
592
175
-
term -> factor
175
/
593
175
in
term -> factor
175
//
594
175
+
term -> factor
175
|
term -> factor
175
&
term -> factor
175
<<
term -> factor
175
,
term -> factor
175
^
term -> factor
175
>>
term -> factor
176
+
595
176
in
arith_expr -> term
176
<<
arith_expr -> term
176
-
596
176
>>
arith_expr -> term
176
&
arith_expr -> term
176
,
arith_expr -> term
176
^
arith_expr -> term
176
|
arith_expr -> term
177
~
164
177
factor
597
177
atom
165
177
False
166
177
atom_expr
167
177
NUMBER
168
177
[
169
177
True
171
177
NAME
172
177
None
173
177
+
174
177
-
177
177
(
178
177
{
179
177
STRING
181
177
power
182
178
NAME
131
178
atom_expr
132
178
atom
133
178
-
134
178
factor
136
178
)
598
178
[
137
178
True
138
178
arith_expr
139
178
False
140
178
{
141
178
+
142
178
and_expr
143
178
(
144
178
STRING
145
178
test_list_comp
599
178
power
147
178
term
148
178
comparison
149
178
shift_expr
150
178
test
151
178
not_test
152
178
or_test
153
178
lambda
154
178
None
155
178
xor_expr
156
178
expr
157
178
NUMBER
158
178
and_test
159
178
~
160
178
lambdef
161
178
not
162
178
test_list
163
179
}
600
180
>>
601
180
^
shift_expr -> arith_expr
180
in
shift_expr -> arith_expr
180
<<
602
180
|
shift_expr -> arith_expr
180
,
shift_expr -> arith_expr
180
&
shift_expr -> arith_expr
181
in
atom -> STRING
181
>>
atom -> STRING
181
%
atom -> STRING
181
/
atom -> STRING
181
+
atom -> STRING
181
(
atom -> STRING
181
.
atom -> STRING
181
//
atom -> STRING
181
**
atom -> STRING
181
*
atom -> STRING
181
,
atom -> STRING
181
&
atom -> STRING
181
-
atom -> STRING
181
|
atom -> STRING
181
^
atom -> STRING
181
[
atom -> STRING
181
<<
atom -> STRING
181
@
atom -> STRING
182
&
factor -> power
182
in
factor -> power
182
<<
factor -> power
182
+
factor -> power
182
,
factor -> power
182
%
factor -> power
182
|
factor -> power
182
//
factor -> power
182
>>
factor -> power
182
^
factor -> power
182
/
factor -> power
182
@
factor -> power
182
-
factor -> power
182
*
factor -> power
183
&
603
183
|
and_expr -> shift_expr
183
in
and_expr -> shift_expr
183
^
and_expr -> shift_expr
183
,
and_expr -> shift_expr
184
|
xor_expr -> and_expr
184
^
604
184
,
xor_expr -> and_expr
184
in
xor_expr -> and_expr
185
in
expr -> xor_expr
185
|
605
185
,
expr -> xor_expr
186
in
expr_list -> expr
186
,
606
187
.
atom -> NAME
187
<
atom -> NAME
187
|
atom -> NAME
187
not
atom -> NAME
187
[
atom -> NAME
187
,
atom -> NAME
187
+
atom -> NAME
187
%
atom -> NAME
187
]
atom -> NAME
187
for
atom -> NAME
187
<=
atom -> NAME
187
*
atom -> NAME
187
!=
atom -> NAME
187
in
atom -> NAME
187
if
atom -> NAME
187
is
atom -> NAME
187
(
atom -> NAME
187
^
atom -> NAME
187
@
atom -> NAME
187
&
atom -> NAME
187
>>
atom -> NAME
187
<<
atom -> NAME
187
-
atom -> NAME
187
/
atom -> NAME
187
or
atom -> NAME
187
//
atom -> NAME
187
>=
atom -> NAME
187
and
atom -> NAME
187
>
atom -> NAME
187
==
atom -> NAME
187
**
atom -> NAME
188
**
607
188
and
power -> atom_expr
188
^
power -> atom_expr
188
or
power -> atom_expr
188
>>
power -> atom_expr
188
]
power -> atom_expr
188
if
power -> atom_expr
188
<
power -> atom_expr
188
>=
power -> atom_expr
188
for
power -> atom_expr
188
!=
power -> atom_expr
188
is
power -> atom_expr
188
<=
power -> atom_expr
188
not
power -> atom_expr
188
//
power -> atom_expr
188
+
power -> atom_expr
188
==
power -> atom_expr
188
|
power -> atom_expr
188
-
power -> atom_expr
188
&
power -> atom_expr
188
/
power -> atom_expr
188
@
power -> atom_expr
188
<<
power -> atom_expr
188
,
power -> atom_expr
188
%
power -> atom_expr
188
*
power -> atom_expr
188
in
power -> atom_expr
188
>
power -> atom_expr
189
trailer
608
189
trailer_expr
609
189
[
610
189
.
611
189
or
trailer_expr -> 
189
(
612
189
not
trailer_expr -> 
189
in
trailer_expr -> 
189
is
trailer_expr -> 
189
>=
trailer_expr -> 
189
-
trailer_expr -> 
189
@
trailer_expr -> 
189
<=
trailer_expr -> 
189
,
trailer_expr -> 
189
^
trailer_expr -> 
189
*
trailer_expr -> 
189
for
trailer_expr -> 
189
if
trailer_expr -> 
189
**
trailer_expr -> 
189
>
trailer_expr -> 
189
==
trailer_expr -> 
189
>>
trailer_expr -> 
189
<<
trailer_expr -> 
189
/
trailer_expr -> 
189
//
trailer_expr -> 
189
!=
trailer_expr -> 
189
<
trailer_expr -> 
189
&
trailer_expr -> 
189
]
trailer_expr -> 
189
|
trailer_expr -> 
189
and
trailer_expr -> 
189
+
trailer_expr -> 
189
%
trailer_expr -> 
190
NAME
187
190
atom_expr
188
190
atom
189
190
-
190
190
factor
613
190
[
193
190
True
194
190
False
196
190
{
197
190
+
198
190
(
200
190
STRING
201
190
power
208
190
None
210
190
NUMBER
213
190
~
215
191
%
614
191
//
615
191
/
616
191
*
617
191
@
618
191
not
term -> factor
191
<<
term -> factor
191
or
term -> factor
191
^
term -> factor
191
in
term -> factor
191
if
term -> factor
191
and
term -> factor
191
<=
term -> factor
191
&
term -> factor
191
,
term -> factor
191
>>
term -> factor
191
>
term -> factor
191
|
term -> factor
191
<
term -> factor
191
is
term -> factor
191
!=
term -> factor
191
>=
term -> factor
191
==
term -> factor
191
-
term -> factor
191
+
term -> factor
191
]
term -> factor
191
for
term -> factor
192
]
619
193
NAME
187
193
atom_expr
188
193
atom
189
193
-
190
193
factor
191
193
test_list_comp
620
193
[
193
193
True
194
193
arith_expr
195
193
False
196
193
{
197
193
+
198
193
and_expr
199
193
(
200
193
STRING
201
193
]
621
193
term
203
193
and_test
204
193
comparison
205
193
shift_expr
206
193
not_test
207
193
power
208
193
or_test
209
193
None
210
193
xor_expr
211
193
expr
212
193
NUMBER
213
193
lambda
214
193
~
215
193
lambdef
216
193
not
217
193
test
218
193
test_list
219
194
!=
atom -> True
194
&
atom -> True
194
+
atom -> True
194
<<
atom -> True
194
@
atom -> True
194
,
atom -> True
194
if
atom -> True
194
and
atom -> True
194
is
atom -> True
194
|
atom -> True
194
<
atom -> True
194
>=
atom -> True
194
]
atom -> True
194
or
atom -> True
194
==
atom -> True
194
%
atom -> True
194
for
atom -> True
194
>
atom -> True
194
*
atom -> True
194
[
atom -> True
194
//
atom -> True
194
/
atom -> True
194
in
atom -> True
194
-
atom -> True
194
^
atom -> True
194
<=
atom -> True
194
(
atom -> True
194
**
atom -> True
194
.
atom -> True
194
not
atom -> True
194
>>
atom -> True
195
or
shift_expr -> arith_expr
195
>>
622
195
<<
623
195
]
shift_expr -> arith_expr
195
^
shift_expr -> arith_expr
195
in
shift_expr -> arith_expr
195
,
shift_expr -> arith_expr
195
<=
shift_expr -> arith_expr
195
>=
shift_expr -> arith_expr
195
&
shift_expr -> arith_expr
195
==
shift_expr -> arith_expr
195
for
shift_expr -> arith_expr
195
not
shift_expr -> arith_expr
195
and
shift_expr -> arith_expr
195
>
shift_expr -> arith_expr
195
!=
shift_expr -> arith_expr
195
if
shift_expr -> arith_expr
195
|
shift_expr -> arith_expr
195
<
shift_expr -> arith_expr
195
is
shift_expr -> arith_expr
196
not
atom -> False
196
==
atom -> False
196
*
atom -> False
196
>
atom -> False
196
,
atom -> False
196
[
atom -> False
196
if
atom -> False
196
@
atom -> False
196
&
atom -> False
196
is
atom -> False
196
.
atom -> False
196
+
atom -> False
196
]
atom -> False
196
%
atom -> False
196
>=
atom -> False
196
and
atom -> False
196
(
atom -> False
196
|
atom -> False
196
-
atom -> False
196
/
atom -> False
196
in
atom -> False
196
<<
atom -> False
196
<=
atom -> False
196
^
atom -> False
196
//
atom -> False
196
>>
atom -> False
196
!=
atom -> False
196
**
atom -> False
196
for
atom -> False
196
or
atom -> False
196
<
atom -> False
197
}
624
198
NAME
187
198
atom_expr
188
198
atom
189
198
-
190
198
[
193
198
True
194
198
False
196
198
{
197
198
+
198
198
(
200
198
STRING
201
198
power
208
198
factor
625
198
None
210
198
NUMBER
213
198
~
215
199
^
626
199
<
xor_expr -> and_expr
199
]
xor_expr -> and_expr
199
<=
xor_expr -> and_expr
199
|
xor_expr -> and_expr
199
not
xor_expr -> and_expr
199
and
xor_expr -> and_expr
199
for
xor_expr -> and_expr
199
!=
xor_expr -> and_expr
199
or
xor_expr -> and_expr
199
>
xor_expr -> and_expr
199
>=
xor_expr -> and_expr
199
==
xor_expr -> and_expr
199
,
xor_expr -> and_expr
199
in
xor_expr -> and_expr
199
is
xor_expr -> and_expr
199
if
xor_expr -> and_expr
200
NAME
131
200
atom_expr
132
200
atom
133
200
-
134
200
factor
136
200
)
627
200
[
137
200
True
138
200
arith_expr
139
200
False
140
200
{
141
200
+
142
200
and_expr
143
200
(
144
200
STRING
145
200
test_list_comp
628
200
power
147
200
term
148
200
comparison
149
200
shift_expr
150
200
test
151
200
not_test
152
200
or_test
153
200
lambda
154
200
None
155
200
xor_expr
156
200
expr
157
200
NUMBER
158
200
and_test
159
200
~
160
200
lambdef
161
200
not
162
200
test_list
163
201
and
atom -> STRING
201
not
atom -> STRING
201
]
atom -> STRING
201
.
atom -> STRING
201
//
atom -> STRING
201
-
atom -> STRING
201
*
atom -> STRING
201
(
atom -> STRING
201
>=
atom -> STRING
201
<=
atom -> STRING
201
<<
atom -> STRING
201
if
atom -> STRING
201
+
atom -> STRING
201
or
atom -> STRING
201
/
atom -> STRING
201
@
atom -> STRING
201
in
atom -> STRING
201
>>
atom -> STRING
201
%
atom -> STRING
201
!=
atom -> STRING
201
,
atom -> STRING
201
>
atom -> STRING
201
^
atom -> STRING
201
<
atom -> STRING
201
==
atom -> STRING
201
for
atom -> STRING
201
**
atom -> STRING
201
&
atom -> STRING
201
|
atom -> STRING
201
is
atom -> STRING
201
[
atom -> STRING
202
and
atom -> [ ]
202
<<
atom -> [ ]
202
//=
atom -> [ ]
202
//
atom -> [ ]
202
*
atom -> [ ]
202
+
atom -> [ ]
202
=
atom -> [ ]
202
^
atom -> [ ]
202
==
atom -> [ ]
202
>>
atom -> [ ]
202
/
atom -> [ ]
202
|=
atom -> [ ]
202
:
atom -> [ ]
202
in
atom -> [ ]
202
NEWLINE
atom -> [ ]
202
>
atom -> [ ]
202
<=
atom -> [ ]
202
.
atom -> [ ]
202
**=
atom -> [ ]
202
>>=
atom -> [ ]
202
%
atom -> [ ]
202
&
atom -> [ ]
202
-
atom -> [ ]
202
<<=
atom -> [ ]
202
>=
atom -> [ ]
202
/=
atom -> [ ]
202
not
atom -> [ ]
202
|
atom -> [ ]
202
@
atom -> [ ]
202
is
atom -> [ ]
202
or
atom -> [ ]
202
%=
atom -> [ ]
202
&=
atom -> [ ]
202
!=
atom -> [ ]
202
if
atom -> [ ]
202
,
atom -> [ ]
202
**
atom -> [ ]
202
*=
atom -> [ ]
202
+=
atom -> [ ]
202
<
atom -> [ ]
202
^=
atom -> [ ]
202
@=
atom -> [ ]
202
-=
atom -> [ ]
202
(
atom -> [ ]
202
[
atom -> [ ]
203
+
629
203
or
arith_expr -> term
203
==
arith_expr -> term
203
-
630
203
in
arith_expr -> term
203
<<
arith_expr -> term
203
>
arith_expr -> term
203
is
arith_expr -> term
203
>=
arith_expr -> term
203
<=
arith_expr -> term
203
and
arith_expr -> term
203
>>
arith_expr -> term
203
for
arith_expr -> term
203
!=
arith_expr -> term
203
not
arith_expr -> term
203
&
arith_expr -> term
203
]
arith_expr -> term
203
,
arith_expr -> term
203
if
arith_expr -> term
203
<
arith_expr -> term
203
^
arith_expr -> term
203
|
arith_expr -> term
204
]
or_test -> and_test
204
or
631
204
for
or_test -> and_test
204
if
or_test -> and_test
204
,
or_test -> and_test
205
,
not_test -> comparison
205
for
not_test -> comparison
205
or
not_test -> comparison
205
]
not_test -> comparison
205
if
not_test -> comparison
205
and
not_test -> comparison
206
==
and_expr -> shift_expr
206
&
632
206
!=
and_expr -> shift_expr
206
<
and_expr -> shift_expr
206
<=
and_expr -> shift_expr
206
and
and_expr -> shift_expr
206
in
and_expr -> shift_expr
206
^
and_expr -> shift_expr
206
for
and_expr -> shift_expr
206
not
and_expr -> shift_expr
206
]
and_expr -> shift_expr
206
is
and_expr -> shift_expr
206
if
and_expr -> shift_expr
206
,
and_expr -> shift_expr
206
>
and_expr -> shift_expr
206
or
and_expr -> shift_expr
206
>=
and_expr -> shift_expr
206
|
and_expr -> shift_expr
207
and
633
207
]
and_test -> not_test
207
for
and_test -> not_test
207
if
and_test -> not_test
207
or
and_test -> not_test
207
,
and_test -> not_test
208
<=
factor -> power
208
,
factor -> power
208
is
factor -> power
208
>
factor -> power
208
==
factor -> power
208
^
factor -> power
208
or
factor -> power
208
-
factor -> power
208
+
factor -> power
208
>>
factor -> power
208
]
factor -> power
208
/
factor -> power
208
*
factor -> power
208
<<
factor -> power
208
|
factor -> power
208
and
factor -> power
208
<
factor -> power
208
not
factor -> power
208
!=
factor -> power
208
if
factor -> power
208
&
factor -> power
208
in
factor -> power
208
for
factor -> power
208
%
factor -> power
208
>=
factor -> power
208
//
factor -> power
208
@
factor -> power
209
for
test -> or_test
209
if
634
209
]
test -> or_test
209
,
test -> or_test
210
+
atom -> None
210
for
atom -> None
210
>>
atom -> None
210
/
atom -> None
210
or
atom -> None
210
*
atom -> None
210
in
atom -> None
210
**
atom -> None
210
==
atom -> None
210
-
atom -> None
210
if
atom -> None
210
(
atom -> None
210
@
atom -> None
210
>=
atom -> None
210
[
atom -> None
210
^
atom -> None
210
&
atom -> None
210
<=
atom -> None
210
is
atom -> None
210
]
atom -> None
210
.
atom -> None
210
not
atom -> None
210
//
atom -> None
210
<
atom -> None
210
<<
atom -> None
210
!=
atom -> None
210
and
atom -> None
210
%
atom -> None
210
|
atom -> None
210
,
atom -> None
210
>
atom -> None
211
|
635
211
>
expr -> xor_expr
211
<
expr -> xor_expr
211
]
expr -> xor_expr
211
and
expr -> xor_expr
211
>=
expr -> xor_expr
211
for
expr -> xor_expr
211
,
expr -> xor_expr
211
!=
expr -> xor_expr
211
or
expr -> xor_expr
211
in
expr -> xor_expr
211
is
expr -> xor_expr
211
if
expr -> xor_expr
211
==
expr -> xor_expr
211
<=
expr -> xor_expr
211
not
expr -> xor_expr
212
==
330
212
is
331
212
<=
332
212
comp_op
636
212
and
comparison -> expr
212
!=
334
212
>
335
212
not
336
212
in
337
212
for
comparison -> expr
212
]
comparison -> expr
212
or
comparison -> expr
212
<
338
212
>=
339
212
if
comparison -> expr
212
,
comparison -> expr
213
is
atom -> NUMBER
213
|
atom -> NUMBER
213
]
atom -> NUMBER
213
@
atom -> NUMBER
213
**
atom -> NUMBER
213
in
atom -> NUMBER
213
and
atom -> NUMBER
213
!=
atom -> NUMBER
213
if
atom -> NUMBER
213
-
atom -> NUMBER
213
<<
atom -> NUMBER
213
.
atom -> NUMBER
213
(
atom -> NUMBER
213
==
atom -> NUMBER
213
%
atom -> NUMBER
213
^
atom -> NUMBER
213
not
atom -> NUMBER
213
>=
atom -> NUMBER
213
,
atom -> NUMBER
213
/
atom -> NUMBER
213
//
atom -> NUMBER
213
>
atom -> NUMBER
213
&
atom -> NUMBER
213
[
atom -> NUMBER
213
<=
atom -> NUMBER
213
*
atom -> NUMBER
213
or
atom -> NUMBER
213
for
atom -> NUMBER
213
>>
atom -> NUMBER
213
+
atom -> NUMBER
213
<
atom -> NUMBER
214
varargslist
637
214
:
638
214
vfpdef
343
214
NAME
342
215
NAME
187
215
atom_expr
188
215
atom
189
215
-
190
215
[
193
215
True
194
215
False
196
215
{
197
215
+
198
215
factor
639
215
(
200
215
STRING
201
215
power
208
215
None
210
215
NUMBER
213
215
~
215
216
]
test -> lambdef
216
for
test -> lambdef
216
,
test -> lambdef
217
NAME
187
217
atom_expr
188
217
atom
189
217
-
190
217
factor
191
217
[
193
217
True
194
217
arith_expr
195
217
False
196
217
{
197
217
+
198
217
and_expr
199
217
(
200
217
STRING
201
217
term
203
217
comparison
205
217
shift_expr
206
217
power
208
217
None
210
217
xor_expr
211
217
expr
212
217
NUMBER
213
217
~
215
217
not
217
217
not_test
640
218
,
641
218
]
test_list -> test
218
for
642
218
comp_for
643
219
]
test_list_comp -> test_list
220
:
644
221
.
atom -> NAME
221
<
atom -> NAME
221
|
atom -> NAME
221
not
atom -> NAME
221
[
atom -> NAME
221
+
atom -> NAME
221
%
atom -> NAME
221
NEWLINE
atom -> NAME
221
<=
atom -> NAME
221
*
atom -> NAME
221
!=
atom -> NAME
221
in
atom -> NAME
221
if
atom -> NAME
221
is
atom -> NAME
221
(
atom -> NAME
221
^
atom -> NAME
221
from
atom -> NAME
221
@
atom -> NAME
221
&
atom -> NAME
221
>>
atom -> NAME
221
<<
atom -> NAME
221
-
atom -> NAME
221
/
atom -> NAME
221
or
atom -> NAME
221
//
atom -> NAME
221
>=
atom -> NAME
221
and
atom -> NAME
221
>
atom -> NAME
221
==
atom -> NAME
221
**
atom -> NAME
222
:
645
222
vfpdef
343
222
NAME
342
222
varargslist
646
223
**
647
223
and
power -> atom_expr
223
^
power -> atom_expr
223
or
power -> atom_expr
223
>>
power -> atom_expr
223
if
power -> atom_expr
223
<
power -> atom_expr
223
>=
power -> atom_expr
223
NEWLINE
power -> atom_expr
223
!=
power -> atom_expr
223
from
power -> atom_expr
223
is
power -> atom_expr
223
<=
power -> atom_expr
223
not
power -> atom_expr
223
//
power -> atom_expr
223
+
power -> atom_expr
223
==
power -> atom_expr
223
|
power -> atom_expr
223
-
power -> atom_expr
223
&
power -> atom_expr
223
/
power -> atom_expr
223
@
power -> atom_expr
223
<<
power -> atom_expr
223
%
power -> atom_expr
223
*
power -> atom_expr
223
in
power -> atom_expr
223
>
power -> atom_expr
224
+
648
224
or
arith_expr -> term
224
-
649
224
==
arith_expr -> term
224
NEWLINE
arith_expr -> term
224
in
arith_expr -> term
224
<<
arith_expr -> term
224
>
arith_expr -> term
224
is
arith_expr -> term
224
>=
arith_expr -> term
224
<=
arith_expr -> term
224
and
arith_expr -> term
224
>>
arith_expr -> term
224
!=
arith_expr -> term
224
not
arith_expr -> term
224
&
arith_expr -> term
224
if
arith_expr -> term
224
<
arith_expr -> term
224
from
arith_expr -> term
224
^
arith_expr -> term
224
|
arith_expr -> term
225
trailer_expr
650
225
trailer
651
225
[
652
225
or
trailer_expr -> 
225
.
653
225
(
654
225
not
trailer_expr -> 
225
in
trailer_expr -> 
225
is
trailer_expr -> 
225
>=
trailer_expr -> 
225
-
trailer_expr -> 
225
@
trailer_expr -> 
225
<=
trailer_expr -> 
225
^
trailer_expr -> 
225
*
trailer_expr -> 
225
if
trailer_expr -> 
225
**
trailer_expr -> 
225
>
trailer_expr -> 
225
==
trailer_expr -> 
225
>>
trailer_expr -> 
225
<<
trailer_expr -> 
225
/
trailer_expr -> 
225
NEWLINE
trailer_expr -> 
225
//
trailer_expr -> 
225
!=
trailer_expr -> 
225
<
trailer_expr -> 
225
&
trailer_expr -> 
225
|
trailer_expr -> 
225
and
trailer_expr -> 
225
from
trailer_expr -> 
225
+
trailer_expr -> 
225
%
trailer_expr -> 
226
NAME
221
226
atom_expr
223
226
atom
225
226
-
226
226
factor
655
226
{
228
226
True
229
226
False
231
226
+
233
226
[
235
226
(
236
226
STRING
237
226
power
241
226
None
242
226
NUMBER
245
226
~
248
227
%
656
227
/
657
227
*
658
227
//
659
227
@
660
227
not
term -> factor
227
<<
term -> factor
227
or
term -> factor
227
^
term -> factor
227
NEWLINE
term -> factor
227
in
term -> factor
227
if
term -> factor
227
and
term -> factor
227
<=
term -> factor
227
&
term -> factor
227
>>
term -> factor
227
>
term -> factor
227
from
term -> factor
227
|
term -> factor
227
<
term -> factor
227
is
term -> factor
227
!=
term -> factor
227
>=
term -> factor
227
==
term -> factor
227
-
term -> factor
227
+
term -> factor
228
}
661
229
!=
atom -> True
229
&
atom -> True
229
+
atom -> True
229
<<
atom -> True
229
@
atom -> True
229
from
atom -> True
229
if
atom -> True
229
NEWLINE
atom -> True
229
and
atom -> True
229
is
atom -> True
229
|
atom -> True
229
<
atom -> True
229
>=
atom -> True
229
or
atom -> True
229
==
atom -> True
229
%
atom -> True
229
>
atom -> True
229
[
atom -> True
229
*
atom -> True
229
//
atom -> True
229
/
atom -> True
229
in
atom -> True
229
-
atom -> True
229
^
atom -> True
229
<=
atom -> True
229
(
atom -> True
229
**
atom -> True
229
.
atom -> True
229
not
atom -> True
229
>>
atom -> True
230
or
shift_expr -> arith_expr
230
>>
662
230
<<
663
230
^
shift_expr -> arith_expr
230
in
shift_expr -> arith_expr
230
<=
shift_expr -> arith_expr
230
>=
shift_expr -> arith_expr
230
&
shift_expr -> arith_expr
230
==
shift_expr -> arith_expr
230
not
shift_expr -> arith_expr
230
and
shift_expr -> arith_expr
230
>
shift_expr -> arith_expr
230
from
shift_expr -> arith_expr
230
!=
shift_expr -> arith_expr
230
if
shift_expr -> arith_expr
230
|
shift_expr -> arith_expr
230
NEWLINE
shift_expr -> arith_expr
230
<
shift_expr -> arith_expr
230
is
shift_expr -> arith_expr
231
not
atom -> False
231
==
atom -> False
231
from
atom -> False
231
*
atom -> False
231
>
atom -> False
231
[
atom -> False
231
if
atom -> False
231
@
atom -> False
231
&
atom -> False
231
is
atom -> False
231
.
atom -> False
231
+
atom -> False
231
NEWLINE
atom -> False
231
>=
atom -> False
231
%
atom -> False
231
and
atom -> False
231
(
atom -> False
231
|
atom -> False
231
-
atom -> False
231
/
atom -> False
231
in
atom -> False
231
<<
atom -> False
231
<=
atom -> False
231
^
atom -> False
231
//
atom -> False
231
>>
atom -> False
231
!=
atom -> False
231
**
atom -> False
231
or
atom -> False
231
<
atom -> False
232
from
664
232
NEWLINE
raise_stmt -> raise test
233
NAME
221
233
atom_expr
223
233
atom
225
233
-
226
233
{
228
233
True
229
233
False
231
233
+
233
233
[
235
233
(
236
233
STRING
237
233
power
241
233
factor
665
233
None
242
233
NUMBER
245
233
~
248
234
^
666
234
<
xor_expr -> and_expr
234
<=
xor_expr -> and_expr
234
|
xor_expr -> and_expr
234
not
xor_expr -> and_expr
234
and
xor_expr -> and_expr
234
!=
xor_expr -> and_expr
234
NEWLINE
xor_expr -> and_expr
234
or
xor_expr -> and_expr
234
>
xor_expr -> and_expr
234
>=
xor_expr -> and_expr
234
==
xor_expr -> and_expr
234
from
xor_expr -> and_expr
234
in
xor_expr -> and_expr
234
is
xor_expr -> and_expr
234
if
xor_expr -> and_expr
235
NAME
187
235
atom_expr
188
235
atom
189
235
-
190
235
factor
191
235
test_list_comp
667
235
[
193
235
True
194
235
arith_expr
195
235
False
196
235
{
197
235
+
198
235
and_expr
199
235
(
200
235
STRING
201
235
]
668
235
term
203
235
and_test
204
235
comparison
205
235
shift_expr
206
235
not_test
207
235
power
208
235
or_test
209
235
None
210
235
xor_expr
211
235
expr
212
235
NUMBER
213
235
lambda
214
235
~
215
235
lambdef
216
235
not
217
235
test
218
235
test_list
219
236
NAME
131
236
atom_expr
132
236
atom
133
236
-
134
236
factor
136
236
)
669
236
[
137
236
True
138
236
arith_expr
139
236
False
140
236
{
141
236
+
142
236
and_expr
143
236
(
144
236
STRING
145
236
test_list_comp
670
236
power
147
236
term
148
236
comparison
149
236
shift_expr
150
236
test
151
236
not_test
152
236
or_test
153
236
lambda
154
236
None
155
236
xor_expr
156
236
expr
157
236
NUMBER
158
236
and_test
159
236
~
160
236
lambdef
161
236
not
162
236
test_list
163
237
and
atom -> STRING
237
not
atom -> STRING
237
NEWLINE
atom -> STRING
237
from
atom -> STRING
237
.
atom -> STRING
237
//
atom -> STRING
237
-
atom -> STRING
237
*
atom -> STRING
237
(
atom -> STRING
237
>=
atom -> STRING
237
<=
atom -> STRING
237
<<
atom -> STRING
237
if
atom -> STRING
237
+
atom -> STRING
237
or
atom -> STRING
237
/
atom -> STRING
237
@
atom -> STRING
237
in
atom -> STRING
237
>>
atom -> STRING
237
%
atom -> STRING
237
!=
atom -> STRING
237
>
atom -> STRING
237
^
atom -> STRING
237
<
atom -> STRING
237
==
atom -> STRING
237
**
atom -> STRING
237
&
atom -> STRING
237
|
atom -> STRING
237
is
atom -> STRING
237
[
atom -> STRING
238
or
not_test -> comparison
238
and
not_test -> comparison
238
if
not_test -> comparison
238
NEWLINE
not_test -> comparison
238
from
not_test -> comparison
239
==
and_expr -> shift_expr
239
from
and_expr -> shift_expr
239
&
671
239
!=
and_expr -> shift_expr
239
<
and_expr -> shift_expr
239
<=
and_expr -> shift_expr
239
and
and_expr -> shift_expr
239
in
and_expr -> shift_expr
239
^
and_expr -> shift_expr
239
not
and_expr -> shift_expr
239
is
and_expr -> shift_expr
239
if
and_expr -> shift_expr
239
>
and_expr -> shift_expr
239
or
and_expr -> shift_expr
239
NEWLINE
and_expr -> shift_expr
239
>=
and_expr -> shift_expr
239
|
and_expr -> shift_expr
240
and
672
240
from
and_test -> not_test
240
if
and_test -> not_test
240
NEWLINE
and_test -> not_test
240
or
and_test -> not_test
241
<=
factor -> power
241
is
factor -> power
241
>
factor -> power
241
==
factor -> power
241
^
factor -> power
241
or
factor -> power
241
-
factor -> power
241
+
factor -> power
241
>>
factor -> power
241
/
factor -> power
241
*
factor -> power
241
<<
factor -> power
241
NEWLINE
factor -> power
241
|
factor -> power
241
and
factor -> power
241
<
factor -> power
241
not
factor -> power
241
!=
factor -> power
241
if
factor -> power
241
&
factor -> power
241
in
factor -> power
241
%
factor -> power
241
>=
factor -> power
241
//
factor -> power
241
from
factor -> power
241
@
factor -> power
242
+
atom -> None
242
from
atom -> None
242
>>
atom -> None
242
/
atom -> None
242
or
atom -> None
242
*
atom -> None
242
in
atom -> None
242
**
atom -> None
242
==
atom -> None
242
-
atom -> None
242
if
atom -> None
242
NEWLINE
atom -> None
242
(
atom -> None
242
@
atom -> None
242
>=
atom -> None
242
[
atom -> None
242
^
atom -> None
242
&
atom -> None
242
<=
atom -> None
242
is
atom -> None
242
.
atom -> None
242
not
atom -> None
242
//
atom -> None
242
<
atom -> None
242
<<
atom -> None
242
!=
atom -> None
242
and
atom -> None
242
%
atom -> None
242
|
atom -> None
242
>
atom -> None
243
|
673
243
>
expr -> xor_expr
243
<
expr -> xor_expr
243
from
expr -> xor_expr
243
and
expr -> xor_expr
243
>=
expr -> xor_expr
243
!=
expr -> xor_expr
243
or
expr -> xor_expr
243
NEWLINE
expr -> xor_expr
243
in
expr -> xor_expr
243
is
expr -> xor_expr
243
if
expr -> xor_expr
243
==
expr -> xor_expr
243
<=
expr -> xor_expr
243
not
expr -> xor_expr
244
==
330
244
is
331
244
<=
332
244
and
comparison -> expr
244
!=
334
244
>
335
244
not
336
244
NEWLINE
comparison -> expr
244
comp_op
674
244
in
337
244
or
comparison -> expr
244
<
338
244
>=
339
244
if
comparison -> expr
244
from
comparison -> expr
245
is
atom -> NUMBER
245
|
atom -> NUMBER
245
in
atom -> NUMBER
245
@
atom -> NUMBER
245
**
atom -> NUMBER
245
and
atom -> NUMBER
245
!=
atom -> NUMBER
245
if
atom -> NUMBER
245
-
atom -> NUMBER
245
<<
atom -> NUMBER
245
.
atom -> NUMBER
245
(
atom -> NUMBER
245
==
atom -> NUMBER
245
%
atom -> NUMBER
245
^
atom -> NUMBER
245
not
atom -> NUMBER
245
>=
atom -> NUMBER
245
/
atom -> NUMBER
245
//
atom -> NUMBER
245
>
atom -> NUMBER
245
&
atom -> NUMBER
245
[
atom -> NUMBER
245
<=
atom -> NUMBER
245
*
atom -> NUMBER
245
from
atom -> NUMBER
245
NEWLINE
atom -> NUMBER
245
or
atom -> NUMBER
245
+
atom -> NUMBER
245
>>
atom -> NUMBER
245
<
atom -> NUMBER
246
or
675
246
if
or_test -> and_test
246
NEWLINE
or_test -> and_test
246
from
or_test -> and_test
247
if
676
247
NEWLINE
test -> or_test
247
from
test -> or_test
248
NAME
221
248
atom_expr
223
248
atom
225
248
-
226
248
{
228
248
True
229
248
False
231
248
+
233
248
factor
677
248
[
235
248
(
236
248
STRING
237
248
power
241
248
None
242
248
NUMBER
245
248
~
248
249
from
test -> lambdef
249
NEWLINE
test -> lambdef
250
NAME
221
250
atom_expr
223
250
term
224
250
atom
225
250
-
226
250
factor
227
250
{
228
250
True
229
250
arith_expr
230
250
False
231
250
+
233
250
and_expr
234
250
[
235
250
(
236
250
STRING
237
250
comparison
238
250
shift_expr
239
250
power
241
250
None
242
250
xor_expr
243
250
expr
244
250
NUMBER
245
250
not_test
678
250
~
248
250
not
250
251
(
679
251
:
680
252
STRING
simple_stmt -> small_stmt NEWLINE
252
while
simple_stmt -> small_stmt NEWLINE
252
~
simple_stmt -> small_stmt NEWLINE
252
del
simple_stmt -> small_stmt NEWLINE
252
global
simple_stmt -> small_stmt NEWLINE
252
NUMBER
simple_stmt -> small_stmt NEWLINE
252
True
simple_stmt -> small_stmt NEWLINE
252
NAME
simple_stmt -> small_stmt NEWLINE
252
with
simple_stmt -> small_stmt NEWLINE
252
NEWLINE
simple_stmt -> small_stmt NEWLINE
252
(
simple_stmt -> small_stmt NEWLINE
252
-
simple_stmt -> small_stmt NEWLINE
252
+
simple_stmt -> small_stmt NEWLINE
252
continue
simple_stmt -> small_stmt NEWLINE
252
endsim
simple_stmt -> small_stmt NEWLINE
252
try
simple_stmt -> small_stmt NEWLINE
252
$
simple_stmt -> small_stmt NEWLINE
252
[
simple_stmt -> small_stmt NEWLINE
252
raise
simple_stmt -> small_stmt NEWLINE
252
if
simple_stmt -> small_stmt NEWLINE
252
{
simple_stmt -> small_stmt NEWLINE
252
begsim
simple_stmt -> small_stmt NEWLINE
252
return
simple_stmt -> small_stmt NEWLINE
252
assert
simple_stmt -> small_stmt NEWLINE
252
nonlocal
simple_stmt -> small_stmt NEWLINE
252
not
simple_stmt -> small_stmt NEWLINE
252
conf
simple_stmt -> small_stmt NEWLINE
252
yield
simple_stmt -> small_stmt NEWLINE
252
resetstats
simple_stmt -> small_stmt NEWLINE
252
None
simple_stmt -> small_stmt NEWLINE
252
for
simple_stmt -> small_stmt NEWLINE
252
class
simple_stmt -> small_stmt NEWLINE
252
@
simple_stmt -> small_stmt NEWLINE
252
pass
simple_stmt -> small_stmt NEWLINE
252
lambda
simple_stmt -> small_stmt NEWLINE
252
False
simple_stmt -> small_stmt NEWLINE
252
break
simple_stmt -> small_stmt NEWLINE
252
def
simple_stmt -> small_stmt NEWLINE
253
NAME
12
253
True
1
253
atom_expr
5
253
suite
681
253
NEWLINE
682
253
term
29
253
factor
11
253
atom
4
253
shift_expr
7
253
arith_expr
8
253
False
27
253
and_expr
9
253
xor_expr
40
253
{
41
253
(
13
253
[
15
253
resetstats
16
253
STRING
46
253
raise
19
253
test
47
253
comparison
28
253
or_test
23
253
~
55
253
-
43
253
lambda
53
253
+
31
253
not_test
33
253
and_test
48
253
power
32
253
pass
73
253
None
34
253
lambdef
37
253
not
42
253
NUMBER
39
253
expr
50
253
continue
74
253
begsim
49
253
del_stmt
75
253
simple_stmt
683
253
return
54
253
nonlocal
76
253
return_stmt
56
253
endsim
57
253
test_list
70
253
raise_stmt
59
253
assert_stmt
78
253
stat_stmt
79
253
global_stmt
61
253
continue_stmt
62
253
assert
63
253
break_stmt
64
253
nonlocal_stmt
80
253
expr_stmt
81
253
break
82
253
del
66
253
global
67
253
yield
83
253
pass_stmt
68
253
flow_stmt
71
253
yield_stmt
72
253
sim_stmt
84
253
small_stmt
684
254
atom_expr
685
254
atom
686
254
-
687
254
factor
688
254
and_test
689
254
True
690
254
arith_expr
691
254
False
692
254
NAME
693
254
{
694
254
+
695
254
and_expr
696
254
[
697
254
(
698
254
STRING
699
254
term
700
254
comparison
701
254
shift_expr
702
254
not_test
703
254
power
704
254
or_test
705
254
xor_expr
706
254
None
707
254
NUMBER
708
254
expr
709
254
~
710
254
not
711
255
(
712
256
term
29
256
NAME
12
256
True
1
256
atom_expr
5
256
atom
4
256
factor
11
256
-
43
256
False
27
256
[
15
256
{
41
256
(
13
256
+
31
256
None
34
256
STRING
46
256
arith_expr
713
256
~
55
256
power
32
256
NUMBER
39
257
term
29
257
NAME
12
257
True
1
257
atom_expr
5
257
atom
4
257
factor
11
257
-
43
257
False
27
257
[
15
257
{
41
257
(
13
257
+
31
257
arith_expr
714
257
None
34
257
STRING
46
257
~
55
257
power
32
257
NUMBER
39
258
-=
factor -> + factor
258
>>
factor -> + factor
258
>=
factor -> + factor
258
or
factor -> + factor
258
==
factor -> + factor
258
-
factor -> + factor
258
%=
factor -> + factor
258
:
factor -> + factor
258
*
factor -> + factor
258
NEWLINE
factor -> + factor
258
<
factor -> + factor
258
^
factor -> + factor
258
^=
factor -> + factor
258
,
factor -> + factor
258
&
factor -> + factor
258
*=
factor -> + factor
258
>>=
factor -> + factor
258
@
factor -> + factor
258
|
factor -> + factor
258
<<
factor -> + factor
258
%
factor -> + factor
258
<<=
factor -> + factor
258
not
factor -> + factor
258
//
factor -> + factor
258
and
factor -> + factor
258
&=
factor -> + factor
258
@=
factor -> + factor
258
in
factor -> + factor
258
!=
factor -> + factor
258
=
factor -> + factor
258
>
factor -> + factor
258
**=
factor -> + factor
258
//=
factor -> + factor
258
|=
factor -> + factor
258
/
factor -> + factor
258
/=
factor -> + factor
258
is
factor -> + factor
258
+
factor -> + factor
258
if
factor -> + factor
258
<=
factor -> + factor
258
+=
factor -> + factor
259
NAME
12
259
True
1
259
atom_expr
5
259
term
29
259
atom
4
259
factor
11
259
and_test
715
259
shift_expr
7
259
arith_expr
8
259
False
27
259
and_expr
9
259
xor_expr
40
259
{
41
259
(
13
259
[
15
259
STRING
46
259
comparison
28
259
~
55
259
-
43
259
+
31
259
not_test
33
259
power
32
259
None
34
259
not
42
259
NUMBER
39
259
expr
50
260
.
atom -> NAME
260
<
atom -> NAME
260
|
atom -> NAME
260
not
atom -> NAME
260
[
atom -> NAME
260
,
atom -> NAME
260
+
atom -> NAME
260
%
atom -> NAME
260
<=
atom -> NAME
260
*
atom -> NAME
260
!=
atom -> NAME
260
in
atom -> NAME
260
:
atom -> NAME
260
if
atom -> NAME
260
is
atom -> NAME
260
(
atom -> NAME
260
^
atom -> NAME
260
@
atom -> NAME
260
&
atom -> NAME
260
>>
atom -> NAME
260
as
atom -> NAME
260
<<
atom -> NAME
260
-
atom -> NAME
260
/
atom -> NAME
260
or
atom -> NAME
260
//
atom -> NAME
260
>=
atom -> NAME
260
and
atom -> NAME
260
>
atom -> NAME
260
==
atom -> NAME
260
**
atom -> NAME
261
**
716
261
and
power -> atom_expr
261
^
power -> atom_expr
261
or
power -> atom_expr
261
>>
power -> atom_expr
261
if
power -> atom_expr
261
<
power -> atom_expr
261
>=
power -> atom_expr
261
:
power -> atom_expr
261
!=
power -> atom_expr
261
is
power -> atom_expr
261
<=
power -> atom_expr
261
as
power -> atom_expr
261
not
power -> atom_expr
261
//
power -> atom_expr
261
+
power -> atom_expr
261
==
power -> atom_expr
261
|
power -> atom_expr
261
-
power -> atom_expr
261
&
power -> atom_expr
261
/
power -> atom_expr
261
@
power -> atom_expr
261
<<
power -> atom_expr
261
,
power -> atom_expr
261
%
power -> atom_expr
261
*
power -> atom_expr
261
in
power -> atom_expr
261
>
power -> atom_expr
262
+
717
262
or
arith_expr -> term
262
==
arith_expr -> term
262
-
718
262
in
arith_expr -> term
262
<<
arith_expr -> term
262
>
arith_expr -> term
262
is
arith_expr -> term
262
>=
arith_expr -> term
262
:
arith_expr -> term
262
<=
arith_expr -> term
262
and
arith_expr -> term
262
as
arith_expr -> term
262
>>
arith_expr -> term
262
!=
arith_expr -> term
262
not
arith_expr -> term
262
&
arith_expr -> term
262
,
arith_expr -> term
262
if
arith_expr -> term
262
<
arith_expr -> term
262
^
arith_expr -> term
262
|
arith_expr -> term
263
trailer
719
263
trailer_expr
720
263
[
721
263
(
722
263
or
trailer_expr -> 
263
.
723
263
not
trailer_expr -> 
263
in
trailer_expr -> 
263
is
trailer_expr -> 
263
>=
trailer_expr -> 
263
-
trailer_expr -> 
263
@
trailer_expr -> 
263
<=
trailer_expr -> 
263
,
trailer_expr -> 
263
^
trailer_expr -> 
263
*
trailer_expr -> 
263
if
trailer_expr -> 
263
**
trailer_expr -> 
263
>
trailer_expr -> 
263
==
trailer_expr -> 
263
>>
trailer_expr -> 
263
<<
trailer_expr -> 
263
/
trailer_expr -> 
263
//
trailer_expr -> 
263
!=
trailer_expr -> 
263
<
trailer_expr -> 
263
&
trailer_expr -> 
263
:
trailer_expr -> 
263
|
trailer_expr -> 
263
and
trailer_expr -> 
263
+
trailer_expr -> 
263
%
trailer_expr -> 
263
as
trailer_expr -> 
264
NAME
260
264
atom_expr
261
264
atom
263
264
-
264
264
factor
724
264
[
268
264
True
269
264
False
270
264
{
271
264
(
272
264
+
273
264
STRING
276
264
power
281
264
None
282
264
NUMBER
284
264
~
285
265
:
725
266
%
726
266
//
727
266
/
728
266
*
729
266
@
730
266
not
term -> factor
266
<<
term -> factor
266
or
term -> factor
266
^
term -> factor
266
in
term -> factor
266
if
term -> factor
266
and
term -> factor
266
<=
term -> factor
266
&
term -> factor
266
:
term -> factor
266
as
term -> factor
266
,
term -> factor
266
>>
term -> factor
266
>
term -> factor
266
|
term -> factor
266
<
term -> factor
266
is
term -> factor
266
!=
term -> factor
266
>=
term -> factor
266
==
term -> factor
266
-
term -> factor
266
+
term -> factor
267
>>
731
267
or
shift_expr -> arith_expr
267
<<
732
267
^
shift_expr -> arith_expr
267
in
shift_expr -> arith_expr
267
as
shift_expr -> arith_expr
267
,
shift_expr -> arith_expr
267
<=
shift_expr -> arith_expr
267
>=
shift_expr -> arith_expr
267
&
shift_expr -> arith_expr
267
==
shift_expr -> arith_expr
267
:
shift_expr -> arith_expr
267
not
shift_expr -> arith_expr
267
and
shift_expr -> arith_expr
267
>
shift_expr -> arith_expr
267
!=
shift_expr -> arith_expr
267
if
shift_expr -> arith_expr
267
|
shift_expr -> arith_expr
267
<
shift_expr -> arith_expr
267
is
shift_expr -> arith_expr
268
NAME
187
268
atom_expr
188
268
atom
189
268
-
190
268
factor
191
268
test_list_comp
733
268
[
193
268
True
194
268
arith_expr
195
268
False
196
268
{
197
268
+
198
268
and_expr
199
268
(
200
268
STRING
201
268
]
734
268
term
203
268
and_test
204
268
comparison
205
268
shift_expr
206
268
not_test
207
268
power
208
268
or_test
209
268
None
210
268
xor_expr
211
268
expr
212
268
NUMBER
213
268
lambda
214
268
~
215
268
lambdef
216
268
not
217
268
test
218
268
test_list
219
269
!=
atom -> True
269
&
atom -> True
269
+
atom -> True
269
<<
atom -> True
269
@
atom -> True
269
,
atom -> True
269
as
atom -> True
269
if
atom -> True
269
and
atom -> True
269
is
atom -> True
269
|
atom -> True
269
<
atom -> True
269
>=
atom -> True
269
or
atom -> True
269
==
atom -> True
269
%
atom -> True
269
>
atom -> True
269
[
atom -> True
269
*
atom -> True
269
//
atom -> True
269
/
atom -> True
269
in
atom -> True
269
-
atom -> True
269
^
atom -> True
269
<=
atom -> True
269
(
atom -> True
269
**
atom -> True
269
.
atom -> True
269
not
atom -> True
269
:
atom -> True
269
>>
atom -> True
270
not
atom -> False
270
==
atom -> False
270
*
atom -> False
270
>
atom -> False
270
,
atom -> False
270
[
atom -> False
270
if
atom -> False
270
@
atom -> False
270
&
atom -> False
270
is
atom -> False
270
.
atom -> False
270
+
atom -> False
270
%
atom -> False
270
>=
atom -> False
270
and
atom -> False
270
(
atom -> False
270
|
atom -> False
270
-
atom -> False
270
:
atom -> False
270
/
atom -> False
270
as
atom -> False
270
in
atom -> False
270
<<
atom -> False
270
<=
atom -> False
270
^
atom -> False
270
//
atom -> False
270
>>
atom -> False
270
!=
atom -> False
270
**
atom -> False
270
or
atom -> False
270
<
atom -> False
271
}
735
272
NAME
131
272
atom_expr
132
272
atom
133
272
-
134
272
factor
136
272
)
736
272
[
137
272
True
138
272
arith_expr
139
272
False
140
272
{
141
272
+
142
272
and_expr
143
272
(
144
272
STRING
145
272
test_list_comp
737
272
power
147
272
term
148
272
comparison
149
272
shift_expr
150
272
test
151
272
not_test
152
272
or_test
153
272
lambda
154
272
None
155
272
xor_expr
156
272
expr
157
272
NUMBER
158
272
and_test
159
272
~
160
272
lambdef
161
272
not
162
272
test_list
163
273
NAME
260
273
atom_expr
261
273
atom
263
273
-
264
273
[
268
273
True
269
273
False
270
273
{
271
273
(
272
273
+
273
273
factor
738
273
STRING
276
273
power
281
273
None
282
273
NUMBER
284
273
~
285
274
^
739
274
<
xor_expr -> and_expr
274
<=
xor_expr -> and_expr
274
|
xor_expr -> and_expr
274
not
xor_expr -> and_expr
274
as
xor_expr -> and_expr
274
and
xor_expr -> and_expr
274
!=
xor_expr -> and_expr
274
or
xor_expr -> and_expr
274
>
xor_expr -> and_expr
274
>=
xor_expr -> and_expr
274
==
xor_expr -> and_expr
274
,
xor_expr -> and_expr
274
in
xor_expr -> and_expr
274
is
xor_expr -> and_expr
274
:
xor_expr -> and_expr
274
if
xor_expr -> and_expr
275
or
740
275
as
or_test -> and_test
275
if
or_test -> and_test
275
:
or_test -> and_test
275
,
or_test -> and_test
276
and
atom -> STRING
276
not
atom -> STRING
276
.
atom -> STRING
276
//
atom -> STRING
276
-
atom -> STRING
276
*
atom -> STRING
276
(
atom -> STRING
276
>=
atom -> STRING
276
<=
atom -> STRING
276
<<
atom -> STRING
276
if
atom -> STRING
276
+
atom -> STRING
276
or
atom -> STRING
276
/
atom -> STRING
276
@
atom -> STRING
276
in
atom -> STRING
276
>>
atom -> STRING
276
%
atom -> STRING
276
!=
atom -> STRING
276
,
atom -> STRING
276
>
atom -> STRING
276
^
atom -> STRING
276
<
atom -> STRING
276
as
atom -> STRING
276
:
atom -> STRING
276
==
atom -> STRING
276
**
atom -> STRING
276
&
atom -> STRING
276
|
atom -> STRING
276
is
atom -> STRING
276
[
atom -> STRING
277
|
741
277
>
expr -> xor_expr
277
<
expr -> xor_expr
277
and
expr -> xor_expr
277
>=
expr -> xor_expr
277
,
expr -> xor_expr
277
!=
expr -> xor_expr
277
or
expr -> xor_expr
277
in
expr -> xor_expr
277
is
expr -> xor_expr
277
if
expr -> xor_expr
277
==
expr -> xor_expr
277
<=
expr -> xor_expr
277
:
expr -> xor_expr
277
not
expr -> xor_expr
277
as
expr -> xor_expr
278
:
not_test -> comparison
278
,
not_test -> comparison
278
as
not_test -> comparison
278
or
not_test -> comparison
278
if
not_test -> comparison
278
and
not_test -> comparison
279
==
and_expr -> shift_expr
279
&
742
279
!=
and_expr -> shift_expr
279
as
and_expr -> shift_expr
279
<
and_expr -> shift_expr
279
<=
and_expr -> shift_expr
279
and
and_expr -> shift_expr
279
in
and_expr -> shift_expr
279
^
and_expr -> shift_expr
279
:
and_expr -> shift_expr
279
not
and_expr -> shift_expr
279
is
and_expr -> shift_expr
279
if
and_expr -> shift_expr
279
,
and_expr -> shift_expr
279
>
and_expr -> shift_expr
279
or
and_expr -> shift_expr
279
>=
and_expr -> shift_expr
279
|
and_expr -> shift_expr
280
and
743
280
if
and_test -> not_test
280
as
and_test -> not_test
280
:
and_test -> not_test
280
or
and_test -> not_test
280
,
and_test -> not_test
281
<=
factor -> power
281
,
factor -> power
281
is
factor -> power
281
>
factor -> power
281
==
factor -> power
281
^
factor -> power
281
or
factor -> power
281
-
factor -> power
281
+
factor -> power
281
as
factor -> power
281
>>
factor -> power
281
/
factor -> power
281
*
factor -> power
281
<<
factor -> power
281
|
factor -> power
281
and
factor -> power
281
<
factor -> power
281
not
factor -> power
281
!=
factor -> power
281
:
factor -> power
281
if
factor -> power
281
&
factor -> power
281
in
factor -> power
281
%
factor -> power
281
>=
factor -> power
281
//
factor -> power
281
@
factor -> power
282
+
atom -> None
282
>>
atom -> None
282
/
atom -> None
282
or
atom -> None
282
as
atom -> None
282
*
atom -> None
282
in
atom -> None
282
**
atom -> None
282
==
atom -> None
282
-
atom -> None
282
if
atom -> None
282
(
atom -> None
282
@
atom -> None
282
:
atom -> None
282
>=
atom -> None
282
[
atom -> None
282
^
atom -> None
282
&
atom -> None
282
<=
atom -> None
282
is
atom -> None
282
.
atom -> None
282
not
atom -> None
282
//
atom -> None
282
<
atom -> None
282
<<
atom -> None
282
!=
atom -> None
282
and
atom -> None
282
%
atom -> None
282
|
atom -> None
282
,
atom -> None
282
>
atom -> None
283
==
330
283
is
331
283
<=
332
283
comp_op
744
283
and
comparison -> expr
283
!=
334
283
>
335
283
not
336
283
in
337
283
or
comparison -> expr
283
<
338
283
>=
339
283
if
comparison -> expr
283
,
comparison -> expr
283
as
comparison -> expr
283
:
comparison -> expr
284
is
atom -> NUMBER
284
|
atom -> NUMBER
284
in
atom -> NUMBER
284
@
atom -> NUMBER
284
**
atom -> NUMBER
284
as
atom -> NUMBER
284
and
atom -> NUMBER
284
!=
atom -> NUMBER
284
if
atom -> NUMBER
284
-
atom -> NUMBER
284
<<
atom -> NUMBER
284
.
atom -> NUMBER
284
(
atom -> NUMBER
284
==
atom -> NUMBER
284
%
atom -> NUMBER
284
^
atom -> NUMBER
284
not
atom -> NUMBER
284
>=
atom -> NUMBER
284
:
atom -> NUMBER
284
,
atom -> NUMBER
284
/
atom -> NUMBER
284
//
atom -> NUMBER
284
>
atom -> NUMBER
284
&
atom -> NUMBER
284
[
atom -> NUMBER
284
<=
atom -> NUMBER
284
*
atom -> NUMBER
284
or
atom -> NUMBER
284
+
atom -> NUMBER
284
>>
atom -> NUMBER
284
<
atom -> NUMBER
285
NAME
260
285
atom_expr
261
285
atom
263
285
-
264
285
[
268
285
True
269
285
False
270
285
{
271
285
(
272
285
+
273
285
factor
745
285
STRING
276
285
power
281
285
None
282
285
NUMBER
284
285
~
285
286
varargslist
746
286
:
747
286
vfpdef
343
286
NAME
342
287
if
748
287
as
test -> or_test
287
:
test -> or_test
287
,
test -> or_test
288
:
with_items -> with_item
288
,
749
289
as
test -> lambdef
289
:
test -> lambdef
289
,
test -> lambdef
290
NAME
260
290
atom_expr
261
290
term
262
290
atom
263
290
-
264
290
factor
266
290
arith_expr
267
290
[
268
290
True
269
290
not_test
750
290
False
270
290
{
271
290
(
272
290
+
273
290
and_expr
274
290
STRING
276
290
xor_expr
277
290
comparison
278
290
shift_expr
279
290
power
281
290
None
282
290
expr
283
290
NUMBER
284
290
~
285
290
not
290
291
,
with_item -> test
291
as
751
291
:
with_item -> test
292
NAME
12
292
True
1
292
atom_expr
5
292
term
29
292
atom
4
292
factor
11
292
shift_expr
7
292
arith_expr
8
292
False
27
292
and_expr
9
292
xor_expr
40
292
{
41
292
(
13
292
[
15
292
STRING
46
292
~
55
292
-
43
292
expr
752
292
+
31
292
power
32
292
None
34
292
NUMBER
39
293
%
atom -> { }
293
[
atom -> { }
293
not
atom -> { }
293
-=
atom -> { }
293
@=
atom -> { }
293
/=
atom -> { }
293
>>=
atom -> { }
293
*=
atom -> { }
293
^
atom -> { }
293
or
atom -> { }
293
//=
atom -> { }
293
<<=
atom -> { }
293
-
atom -> { }
293
=
atom -> { }
293
>=
atom -> { }
293
<<
atom -> { }
293
/
atom -> { }
293
<=
atom -> { }
293
|
atom -> { }
293
>>
atom -> { }
293
:
atom -> { }
293
@
atom -> { }
293
|=
atom -> { }
293
^=
atom -> { }
293
is
atom -> { }
293
if
atom -> { }
293
**=
atom -> { }
293
NEWLINE
atom -> { }
293
&=
atom -> { }
293
and
atom -> { }
293
==
atom -> { }
293
in
atom -> { }
293
**
atom -> { }
293
&
atom -> { }
293
+=
atom -> { }
293
>
atom -> { }
293
//
atom -> { }
293
(
atom -> { }
293
+
atom -> { }
293
<
atom -> { }
293
,
atom -> { }
293
!=
atom -> { }
293
.
atom -> { }
293
*
atom -> { }
293
%=
atom -> { }
294
|=
not_test -> not not_test
294
+=
not_test -> not not_test
294
if
not_test -> not not_test
294
**=
not_test -> not not_test
294
&=
not_test -> not not_test
294
,
not_test -> not not_test
294
*=
not_test -> not not_test
294
-=
not_test -> not not_test
294
//=
not_test -> not not_test
294
NEWLINE
not_test -> not not_test
294
^=
not_test -> not not_test
294
<<=
not_test -> not not_test
294
:
not_test -> not not_test
294
%=
not_test -> not not_test
294
=
not_test -> not not_test
294
or
not_test -> not not_test
294
>>=
not_test -> not not_test
294
@=
not_test -> not not_test
294
/=
not_test -> not not_test
294
and
not_test -> not not_test
295
>>
factor -> - factor
295
if
factor -> - factor
295
>
factor -> - factor
295
,
factor -> - factor
295
&=
factor -> - factor
295
@
factor -> - factor
295
//=
factor -> - factor
295
is
factor -> - factor
295
**=
factor -> - factor
295
//
factor -> - factor
295
not
factor -> - factor
295
or
factor -> - factor
295
-
factor -> - factor
295
^=
factor -> - factor
295
/=
factor -> - factor
295
<<
factor -> - factor
295
%=
factor -> - factor
295
>=
factor -> - factor
295
/
factor -> - factor
295
<=
factor -> - factor
295
<
factor -> - factor
295
<<=
factor -> - factor
295
in
factor -> - factor
295
>>=
factor -> - factor
295
-=
factor -> - factor
295
|
factor -> - factor
295
*
factor -> - factor
295
NEWLINE
factor -> - factor
295
!=
factor -> - factor
295
&
factor -> - factor
295
and
factor -> - factor
295
+=
factor -> - factor
295
@=
factor -> - factor
295
*=
factor -> - factor
295
|=
factor -> - factor
295
^
factor -> - factor
295
+
factor -> - factor
295
:
factor -> - factor
295
%
factor -> - factor
295
==
factor -> - factor
295
=
factor -> - factor
296
None
decorated -> decorators funcdef
296
NUMBER
decorated -> decorators funcdef
296
NEWLINE
decorated -> decorators funcdef
296
begsim
decorated -> decorators funcdef
296
resetstats
decorated -> decorators funcdef
296
class
decorated -> decorators funcdef
296
continue
decorated -> decorators funcdef
296
raise
decorated -> decorators funcdef
296
for
decorated -> decorators funcdef
296
endsim
decorated -> decorators funcdef
296
pass
decorated -> decorators funcdef
296
~
decorated -> decorators funcdef
296
[
decorated -> decorators funcdef
296
global
decorated -> decorators funcdef
296
try
decorated -> decorators funcdef
296
def
decorated -> decorators funcdef
296
not
decorated -> decorators funcdef
296
del
decorated -> decorators funcdef
296
NAME
decorated -> decorators funcdef
296
yield
decorated -> decorators funcdef
296
assert
decorated -> decorators funcdef
296
True
decorated -> decorators funcdef
296
lambda
decorated -> decorators funcdef
296
with
decorated -> decorators funcdef
296
STRING
decorated -> decorators funcdef
296
return
decorated -> decorators funcdef
296
if
decorated -> decorators funcdef
296
while
decorated -> decorators funcdef
296
break
decorated -> decorators funcdef
296
+
decorated -> decorators funcdef
296
nonlocal
decorated -> decorators funcdef
296
conf
decorated -> decorators funcdef
296
False
decorated -> decorators funcdef
296
(
decorated -> decorators funcdef
296
-
decorated -> decorators funcdef
296
$
decorated -> decorators funcdef
296
{
decorated -> decorators funcdef
296
@
decorated -> decorators funcdef
297
endsim
decorated -> decorators classdef
297
False
decorated -> decorators classdef
297
yield
decorated -> decorators classdef
297
break
decorated -> decorators classdef
297
~
decorated -> decorators classdef
297
$
decorated -> decorators classdef
297
lambda
decorated -> decorators classdef
297
begsim
decorated -> decorators classdef
297
continue
decorated -> decorators classdef
297
for
decorated -> decorators classdef
297
resetstats
decorated -> decorators classdef
297
NEWLINE
decorated -> decorators classdef
297
del
decorated -> decorators classdef
297
True
decorated -> decorators classdef
297
raise
decorated -> decorators classdef
297
class
decorated -> decorators classdef
297
assert
decorated -> decorators classdef
297
[
decorated -> decorators classdef
297
nonlocal
decorated -> decorators classdef
297
def
decorated -> decorators classdef
297
-
decorated -> decorators classdef
297
global
decorated -> decorators classdef
297
None
decorated -> decorators classdef
297
NAME
decorated -> decorators classdef
297
if
decorated -> decorators classdef
297
(
decorated -> decorators classdef
297
try
decorated -> decorators classdef
297
+
decorated -> decorators classdef
297
conf
decorated -> decorators classdef
297
with
decorated -> decorators classdef
297
NUMBER
decorated -> decorators classdef
297
@
decorated -> decorators classdef
297
while
decorated -> decorators classdef
297
return
decorated -> decorators classdef
297
STRING
decorated -> decorators classdef
297
not
decorated -> decorators classdef
297
{
decorated -> decorators classdef
297
pass
decorated -> decorators classdef
298
NAME
12
298
True
1
298
atom_expr
5
298
term
29
298
atom
4
298
factor
11
298
shift_expr
7
298
arith_expr
8
298
False
27
298
and_expr
9
298
xor_expr
40
298
{
41
298
(
13
298
[
15
298
STRING
46
298
test
47
298
comparison
28
298
or_test
23
298
~
55
298
-
43
298
lambda
53
298
+
31
298
not_test
33
298
and_test
48
298
power
32
298
None
34
298
test_list
753
298
lambdef
37
298
not
42
298
NUMBER
39
298
expr
50
299
NAME
12
299
True
1
299
atom_expr
5
299
term
29
299
atom
4
299
factor
11
299
shift_expr
7
299
arith_expr
8
299
False
27
299
and_expr
9
299
xor_expr
40
299
{
41
299
(
13
299
[
15
299
STRING
46
299
comparison
28
299
~
55
299
-
43
299
+
31
299
not_test
33
299
or_test
754
299
and_test
48
299
power
32
299
None
34
299
not
42
299
NUMBER
39
299
expr
50
300
.
atom -> NAME
300
<
atom -> NAME
300
|
atom -> NAME
300
not
atom -> NAME
300
[
atom -> NAME
300
+
atom -> NAME
300
%
atom -> NAME
300
NEWLINE
atom -> NAME
300
<=
atom -> NAME
300
*
atom -> NAME
300
!=
atom -> NAME
300
in
atom -> NAME
300
if
atom -> NAME
300
is
atom -> NAME
300
(
atom -> NAME
300
^
atom -> NAME
300
@
atom -> NAME
300
&
atom -> NAME
300
>>
atom -> NAME
300
<<
atom -> NAME
300
-
atom -> NAME
300
/
atom -> NAME
300
or
atom -> NAME
300
//
atom -> NAME
300
>=
atom -> NAME
300
and
atom -> NAME
300
>
atom -> NAME
300
==
atom -> NAME
300
**
atom -> NAME
301
**
755
301
and
power -> atom_expr
301
^
power -> atom_expr
301
or
power -> atom_expr
301
>>
power -> atom_expr
301
if
power -> atom_expr
301
<
power -> atom_expr
301
>=
power -> atom_expr
301
NEWLINE
power -> atom_expr
301
!=
power -> atom_expr
301
is
power -> atom_expr
301
<=
power -> atom_expr
301
not
power -> atom_expr
301
//
power -> atom_expr
301
+
power -> atom_expr
301
==
power -> atom_expr
301
|
power -> atom_expr
301
-
power -> atom_expr
301
&
power -> atom_expr
301
/
power -> atom_expr
301
@
power -> atom_expr
301
<<
power -> atom_expr
301
%
power -> atom_expr
301
*
power -> atom_expr
301
in
power -> atom_expr
301
>
power -> atom_expr
302
+
756
302
or
arith_expr -> term
302
==
arith_expr -> term
302
NEWLINE
arith_expr -> term
302
-
757
302
in
arith_expr -> term
302
<<
arith_expr -> term
302
>
arith_expr -> term
302
is
arith_expr -> term
302
>=
arith_expr -> term
302
<=
arith_expr -> term
302
and
arith_expr -> term
302
>>
arith_expr -> term
302
!=
arith_expr -> term
302
not
arith_expr -> term
302
&
arith_expr -> term
302
if
arith_expr -> term
302
<
arith_expr -> term
302
^
arith_expr -> term
302
|
arith_expr -> term
303
trailer
758
303
trailer_expr
759
303
[
760
303
or
trailer_expr -> 
303
.
761
303
(
762
303
not
trailer_expr -> 
303
in
trailer_expr -> 
303
is
trailer_expr -> 
303
>=
trailer_expr -> 
303
-
trailer_expr -> 
303
@
trailer_expr -> 
303
<=
trailer_expr -> 
303
^
trailer_expr -> 
303
*
trailer_expr -> 
303
if
trailer_expr -> 
303
**
trailer_expr -> 
303
>
trailer_expr -> 
303
==
trailer_expr -> 
303
>>
trailer_expr -> 
303
<<
trailer_expr -> 
303
/
trailer_expr -> 
303
NEWLINE
trailer_expr -> 
303
//
trailer_expr -> 
303
!=
trailer_expr -> 
303
<
trailer_expr -> 
303
&
trailer_expr -> 
303
|
trailer_expr -> 
303
and
trailer_expr -> 
303
+
trailer_expr -> 
303
%
trailer_expr -> 
304
NAME
300
304
atom_expr
301
304
atom
303
304
-
304
304
factor
763
304
True
306
304
False
308
304
{
309
304
+
310
304
[
312
304
(
313
304
STRING
314
304
power
318
304
None
319
304
NUMBER
322
304
~
325
305
%
764
305
/
765
305
*
766
305
//
767
305
@
768
305
not
term -> factor
305
<<
term -> factor
305
or
term -> factor
305
^
term -> factor
305
NEWLINE
term -> factor
305
in
term -> factor
305
if
term -> factor
305
and
term -> factor
305
<=
term -> factor
305
&
term -> factor
305
>>
term -> factor
305
>
term -> factor
305
|
term -> factor
305
<
term -> factor
305
is
term -> factor
305
!=
term -> factor
305
>=
term -> factor
305
==
term -> factor
305
-
term -> factor
305
+
term -> factor
306
!=
atom -> True
306
&
atom -> True
306
+
atom -> True
306
<<
atom -> True
306
@
atom -> True
306
if
atom -> True
306
NEWLINE
atom -> True
306
and
atom -> True
306
is
atom -> True
306
|
atom -> True
306
<
atom -> True
306
>=
atom -> True
306
or
atom -> True
306
==
atom -> True
306
%
atom -> True
306
>
atom -> True
306
[
atom -> True
306
*
atom -> True
306
//
atom -> True
306
/
atom -> True
306
in
atom -> True
306
-
atom -> True
306
^
atom -> True
306
<=
atom -> True
306
(
atom -> True
306
**
atom -> True
306
.
atom -> True
306
not
atom -> True
306
>>
atom -> True
307
or
shift_expr -> arith_expr
307
>>
769
307
<<
770
307
^
shift_expr -> arith_expr
307
in
shift_expr -> arith_expr
307
<=
shift_expr -> arith_expr
307
>=
shift_expr -> arith_expr
307
&
shift_expr -> arith_expr
307
==
shift_expr -> arith_expr
307
not
shift_expr -> arith_expr
307
and
shift_expr -> arith_expr
307
>
shift_expr -> arith_expr
307
!=
shift_expr -> arith_expr
307
if
shift_expr -> arith_expr
307
|
shift_expr -> arith_expr
307
NEWLINE
shift_expr -> arith_expr
307
<
shift_expr -> arith_expr
307
is
shift_expr -> arith_expr
308
not
atom -> False
308
==
atom -> False
308
*
atom -> False
308
>
atom -> False
308
[
atom -> False
308
if
atom -> False
308
@
atom -> False
308
&
atom -> False
308
is
atom -> False
308
.
atom -> False
308
+
atom -> False
308
NEWLINE
atom -> False
308
>=
atom -> False
308
%
atom -> False
308
and
atom -> False
308
(
atom -> False
308
|
atom -> False
308
-
atom -> False
308
/
atom -> False
308
in
atom -> False
308
<<
atom -> False
308
<=
atom -> False
308
^
atom -> False
308
//
atom -> False
308
>>
atom -> False
308
!=
atom -> False
308
**
atom -> False
308
or
atom -> False
308
<
atom -> False
309
}
771
310
NAME
300
310
atom_expr
301
310
atom
303
310
-
304
310
True
306
310
False
308
310
{
309
310
+
310
310
[
312
310
(
313
310
STRING
314
310
power
318
310
factor
772
310
None
319
310
NUMBER
322
310
~
325
311
^
773
311
<
xor_expr -> and_expr
311
<=
xor_expr -> and_expr
311
|
xor_expr -> and_expr
311
not
xor_expr -> and_expr
311
and
xor_expr -> and_expr
311
!=
xor_expr -> and_expr
311
NEWLINE
xor_expr -> and_expr
311
or
xor_expr -> and_expr
311
>
xor_expr -> and_expr
311
>=
xor_expr -> and_expr
311
==
xor_expr -> and_expr
311
in
xor_expr -> and_expr
311
is
xor_expr -> and_expr
311
if
xor_expr -> and_expr
312
NAME
187
312
atom_expr
188
312
atom
189
312
-
190
312
factor
191
312
test_list_comp
774
312
[
193
312
True
194
312
arith_expr
195
312
False
196
312
{
197
312
+
198
312
and_expr
199
312
(
200
312
STRING
201
312
]
775
312
term
203
312
and_test
204
312
comparison
205
312
shift_expr
206
312
not_test
207
312
power
208
312
or_test
209
312
None
210
312
xor_expr
211
312
expr
212
312
NUMBER
213
312
lambda
214
312
~
215
312
lambdef
216
312
not
217
312
test
218
312
test_list
219
313
NAME
131
313
atom_expr
132
313
atom
133
313
-
134
313
factor
136
313
)
776
313
[
137
313
True
138
313
arith_expr
139
313
False
140
313
{
141
313
+
142
313
and_expr
143
313
(
144
313
STRING
145
313
test_list_comp
777
313
power
147
313
term
148
313
comparison
149
313
shift_expr
150
313
test
151
313
not_test
152
313
or_test
153
313
lambda
154
313
None
155
313
xor_expr
156
313
expr
157
313
NUMBER
158
313
and_test
159
313
~
160
313
lambdef
161
313
not
162
313
test_list
163
314
and
atom -> STRING
314
not
atom -> STRING
314
NEWLINE
atom -> STRING
314
.
atom -> STRING
314
//
atom -> STRING
314
-
atom -> STRING
314
*
atom -> STRING
314
(
atom -> STRING
314
>=
atom -> STRING
314
<=
atom -> STRING
314
<<
atom -> STRING
314
if
atom -> STRING
314
+
atom -> STRING
314
or
atom -> STRING
314
/
atom -> STRING
314
@
atom -> STRING
314
in
atom -> STRING
314
>>
atom -> STRING
314
%
atom -> STRING
314
!=
atom -> STRING
314
>
atom -> STRING
314
^
atom -> STRING
314
<
atom -> STRING
314
==
atom -> STRING
314
**
atom -> STRING
314
&
atom -> STRING
314
|
atom -> STRING
314
is
atom -> STRING
314
[
atom -> STRING
315
if
not_test -> comparison
315
NEWLINE
not_test -> comparison
315
or
not_test -> comparison
315
and
not_test -> comparison
316
==
and_expr -> shift_expr
316
&
778
316
!=
and_expr -> shift_expr
316
<
and_expr -> shift_expr
316
<=
and_expr -> shift_expr
316
and
and_expr -> shift_expr
316
in
and_expr -> shift_expr
316
^
and_expr -> shift_expr
316
not
and_expr -> shift_expr
316
is
and_expr -> shift_expr
316
if
and_expr -> shift_expr
316
>
and_expr -> shift_expr
316
or
and_expr -> shift_expr
316
NEWLINE
and_expr -> shift_expr
316
>=
and_expr -> shift_expr
316
|
and_expr -> shift_expr
317
and
779
317
if
and_test -> not_test
317
NEWLINE
and_test -> not_test
317
or
and_test -> not_test
318
<=
factor -> power
318
is
factor -> power
318
>
factor -> power
318
==
factor -> power
318
^
factor -> power
318
or
factor -> power
318
-
factor -> power
318
+
factor -> power
318
>>
factor -> power
318
/
factor -> power
318
*
factor -> power
318
<<
factor -> power
318
NEWLINE
factor -> power
318
|
factor -> power
318
and
factor -> power
318
<
factor -> power
318
not
factor -> power
318
!=
factor -> power
318
if
factor -> power
318
&
factor -> power
318
in
factor -> power
318
%
factor -> power
318
>=
factor -> power
318
//
factor -> power
318
@
factor -> power
319
+
atom -> None
319
>>
atom -> None
319
/
atom -> None
319
or
atom -> None
319
*
atom -> None
319
in
atom -> None
319
**
atom -> None
319
==
atom -> None
319
-
atom -> None
319
if
atom -> None
319
NEWLINE
atom -> None
319
(
atom -> None
319
@
atom -> None
319
>=
atom -> None
319
[
atom -> None
319
^
atom -> None
319
&
atom -> None
319
<=
atom -> None
319
is
atom -> None
319
.
atom -> None
319
not
atom -> None
319
//
atom -> None
319
<
atom -> None
319
<<
atom -> None
319
!=
atom -> None
319
and
atom -> None
319
%
atom -> None
319
|
atom -> None
319
>
atom -> None
320
|
780
320
>
expr -> xor_expr
320
<
expr -> xor_expr
320
and
expr -> xor_expr
320
>=
expr -> xor_expr
320
!=
expr -> xor_expr
320
or
expr -> xor_expr
320
NEWLINE
expr -> xor_expr
320
in
expr -> xor_expr
320
is
expr -> xor_expr
320
if
expr -> xor_expr
320
==
expr -> xor_expr
320
<=
expr -> xor_expr
320
not
expr -> xor_expr
321
==
330
321
is
331
321
<=
332
321
and
comparison -> expr
321
!=
334
321
>
335
321
not
336
321
NEWLINE
comparison -> expr
321
comp_op
781
321
in
337
321
or
comparison -> expr
321
<
338
321
>=
339
321
if
comparison -> expr
322
is
atom -> NUMBER
322
|
atom -> NUMBER
322
in
atom -> NUMBER
322
@
atom -> NUMBER
322
**
atom -> NUMBER
322
and
atom -> NUMBER
322
!=
atom -> NUMBER
322
if
atom -> NUMBER
322
-
atom -> NUMBER
322
<<
atom -> NUMBER
322
.
atom -> NUMBER
322
(
atom -> NUMBER
322
==
atom -> NUMBER
322
%
atom -> NUMBER
322
^
atom -> NUMBER
322
not
atom -> NUMBER
322
>=
atom -> NUMBER
322
/
atom -> NUMBER
322
//
atom -> NUMBER
322
>
atom -> NUMBER
322
&
atom -> NUMBER
322
[
atom -> NUMBER
322
<=
atom -> NUMBER
322
*
atom -> NUMBER
322
NEWLINE
atom -> NUMBER
322
or
atom -> NUMBER
322
+
atom -> NUMBER
322
>>
atom -> NUMBER
322
<
atom -> NUMBER
323
or
782
323
if
or_test -> and_test
323
NEWLINE
or_test -> and_test
324
if
783
324
NEWLINE
test -> or_test
325
NAME
300
325
atom_expr
301
325
atom
303
325
-
304
325
True
306
325
False
308
325
{
309
325
+
310
325
factor
784
325
[
312
325
(
313
325
STRING
314
325
power
318
325
None
319
325
NUMBER
322
325
~
325
326
vfpdef
343
326
:
785
326
NAME
342
326
varargslist
786
327
NEWLINE
test -> lambdef
328
NAME
300
328
atom_expr
301
328
term
302
328
atom
303
328
-
304
328
factor
305
328
True
306
328
arith_expr
307
328
False
308
328
{
309
328
+
310
328
and_expr
311
328
[
312
328
(
313
328
STRING
314
328
comparison
315
328
shift_expr
316
328
power
318
328
None
319
328
xor_expr
320
328
expr
321
328
NUMBER
322
328
~
325
328
not_test
787
328
not
328
329
NEWLINE
sim_stmt -> begsim test
330
(
comp_op -> ==
330
None
comp_op -> ==
330
[
comp_op -> ==
330
True
comp_op -> ==
330
{
comp_op -> ==
330
STRING
comp_op -> ==
330
False
comp_op -> ==
330
-
comp_op -> ==
330
~
comp_op -> ==
330
+
comp_op -> ==
330
NUMBER
comp_op -> ==
330
NAME
comp_op -> ==
331
+
comp_op -> is
331
[
comp_op -> is
331
not
788
331
False
comp_op -> is
331
None
comp_op -> is
331
~
comp_op -> is
331
(
comp_op -> is
331
STRING
comp_op -> is
331
-
comp_op -> is
331
NAME
comp_op -> is
331
True
comp_op -> is
331
{
comp_op -> is
331
NUMBER
comp_op -> is
332
[
comp_op -> <=
332
+
comp_op -> <=
332
None
comp_op -> <=
332
NAME
comp_op -> <=
332
False
comp_op -> <=
332
{
comp_op -> <=
332
STRING
comp_op -> <=
332
-
comp_op -> <=
332
NUMBER
comp_op -> <=
332
(
comp_op -> <=
332
True
comp_op -> <=
332
~
comp_op -> <=
333
NAME
12
333
True
1
333
atom_expr
5
333
term
29
333
atom
4
333
factor
11
333
shift_expr
7
333
arith_expr
8
333
False
27
333
and_expr
9
333
xor_expr
40
333
{
41
333
(
13
333
[
15
333
STRING
46
333
~
55
333
-
43
333
+
31
333
power
32
333
None
34
333
comparison
789
333
NUMBER
39
333
expr
50
334
(
comp_op -> !=
334
False
comp_op -> !=
334
NUMBER
comp_op -> !=
334
+
comp_op -> !=
334
NAME
comp_op -> !=
334
-
comp_op -> !=
334
None
comp_op -> !=
334
True
comp_op -> !=
334
{
comp_op -> !=
334
[
comp_op -> !=
334
STRING
comp_op -> !=
334
~
comp_op -> !=
335
(
comp_op -> >
335
~
comp_op -> >
335
-
comp_op -> >
335
STRING
comp_op -> >
335
True
comp_op -> >
335
[
comp_op -> >
335
NUMBER
comp_op -> >
335
None
comp_op -> >
335
{
comp_op -> >
335
NAME
comp_op -> >
335
+
comp_op -> >
335
False
comp_op -> >
336
in
790
337
True
comp_op -> in
337
NUMBER
comp_op -> in
337
+
comp_op -> in
337
NAME
comp_op -> in
337
-
comp_op -> in
337
STRING
comp_op -> in
337
[
comp_op -> in
337
None
comp_op -> in
337
~
comp_op -> in
337
{
comp_op -> in
337
(
comp_op -> in
337
False
comp_op -> in
338
+
comp_op -> <
338
True
comp_op -> <
338
~
comp_op -> <
338
(
comp_op -> <
338
[
comp_op -> <
338
False
comp_op -> <
338
{
comp_op -> <
338
NAME
comp_op -> <
338
STRING
comp_op -> <
338
-
comp_op -> <
338
NUMBER
comp_op -> <
338
None
comp_op -> <
339
{
comp_op -> >=
339
None
comp_op -> >=
339
~
comp_op -> >=
339
NAME
comp_op -> >=
339
STRING
comp_op -> >=
339
-
comp_op -> >=
339
(
comp_op -> >=
339
True
comp_op -> >=
339
+
comp_op -> >=
339
NUMBER
comp_op -> >=
339
False
comp_op -> >=
339
[
comp_op -> >=
340
:
791
341
NAME
12
341
True
1
341
atom_expr
5
341
term
29
341
atom
4
341
factor
11
341
shift_expr
7
341
arith_expr
8
341
False
27
341
and_expr
9
341
xor_expr
40
341
{
41
341
(
13
341
[
15
341
STRING
46
341
comparison
28
341
or_test
23
341
~
55
341
-
43
341
lambda
53
341
+
31
341
not_test
33
341
and_test
48
341
power
32
341
None
34
341
lambdef
37
341
not
42
341
NUMBER
39
341
test
792
341
expr
50
342
,
vfpdef -> NAME
342
:
vfpdef -> NAME
343
,
793
343
:
varargslist -> vfpdef
344
~
344
344
atom
346
344
False
347
344
atom_expr
348
344
[
349
344
NUMBER
350
344
factor
794
344
True
351
344
NAME
352
344
None
353
344
+
354
344
-
356
344
(
357
344
{
359
344
STRING
360
344
power
361
345
+
795
345
NEWLINE
arith_expr -> term
345
<<
arith_expr -> term
345
-
796
345
>>
arith_expr -> term
345
&
arith_expr -> term
345
,
arith_expr -> term
345
^
arith_expr -> term
345
|
arith_expr -> term
346
trailer
797
346
(
798
346
>>
trailer_expr -> 
346
trailer_expr
799
346
[
800
346
<<
trailer_expr -> 
346
/
trailer_expr -> 
346
NEWLINE
trailer_expr -> 
346
//
trailer_expr -> 
346
.
801
346
-
trailer_expr -> 
346
@
trailer_expr -> 
346
&
trailer_expr -> 
346
,
trailer_expr -> 
346
^
trailer_expr -> 
346
*
trailer_expr -> 
346
**
trailer_expr -> 
346
|
trailer_expr -> 
346
+
trailer_expr -> 
346
%
trailer_expr -> 
347
|
atom -> False
347
NEWLINE
atom -> False
347
-
atom -> False
347
%
atom -> False
347
/
atom -> False
347
<<
atom -> False
347
@
atom -> False
347
&
atom -> False
347
*
atom -> False
347
//
atom -> False
347
^
atom -> False
347
,
atom -> False
347
>>
atom -> False
347
**
atom -> False
347
+
atom -> False
347
[
atom -> False
347
.
atom -> False
347
(
atom -> False
348
**
802
348
^
power -> atom_expr
348
>>
power -> atom_expr
348
NEWLINE
power -> atom_expr
348
//
power -> atom_expr
348
+
power -> atom_expr
348
|
power -> atom_expr
348
-
power -> atom_expr
348
&
power -> atom_expr
348
/
power -> atom_expr
348
@
power -> atom_expr
348
<<
power -> atom_expr
348
,
power -> atom_expr
348
%
power -> atom_expr
348
*
power -> atom_expr
349
NAME
187
349
atom_expr
188
349
atom
189
349
-
190
349
factor
191
349
test_list_comp
803
349
[
193
349
True
194
349
arith_expr
195
349
False
196
349
{
197
349
+
198
349
and_expr
199
349
(
200
349
STRING
201
349
term
203
349
and_test
204
349
comparison
205
349
shift_expr
206
349
not_test
207
349
]
804
349
power
208
349
or_test
209
349
None
210
349
xor_expr
211
349
expr
212
349
NUMBER
213
349
lambda
214
349
~
215
349
lambdef
216
349
not
217
349
test
218
349
test_list
219
350
,
atom -> NUMBER
350
|
atom -> NUMBER
350
/
atom -> NUMBER
350
NEWLINE
atom -> NUMBER
350
//
atom -> NUMBER
350
@
atom -> NUMBER
350
%
atom -> NUMBER
350
**
atom -> NUMBER
350
&
atom -> NUMBER
350
[
atom -> NUMBER
350
+
atom -> NUMBER
350
>>
atom -> NUMBER
350
^
atom -> NUMBER
350
-
atom -> NUMBER
350
<<
atom -> NUMBER
350
.
atom -> NUMBER
350
*
atom -> NUMBER
350
(
atom -> NUMBER
351
%
atom -> True
351
[
atom -> True
351
*
atom -> True
351
NEWLINE
atom -> True
351
&
atom -> True
351
(
atom -> True
351
>>
atom -> True
351
|
atom -> True
351
**
atom -> True
351
/
atom -> True
351
//
atom -> True
351
.
atom -> True
351
+
atom -> True
351
-
atom -> True
351
^
atom -> True
351
<<
atom -> True
351
@
atom -> True
351
,
atom -> True
352
@
atom -> NAME
352
.
atom -> NAME
352
&
atom -> NAME
352
>>
atom -> NAME
352
|
atom -> NAME
352
<<
atom -> NAME
352
-
atom -> NAME
352
/
atom -> NAME
352
(
atom -> NAME
352
,
atom -> NAME
352
+
atom -> NAME
352
%
atom -> NAME
352
NEWLINE
atom -> NAME
352
//
atom -> NAME
352
^
atom -> NAME
352
[
atom -> NAME
352
*
atom -> NAME
352
**
atom -> NAME
353
+
atom -> None
353
//
atom -> None
353
-
atom -> None
353
<<
atom -> None
353
NEWLINE
atom -> None
353
&
atom -> None
353
(
atom -> None
353
>>
atom -> None
353
/
atom -> None
353
@
atom -> None
353
%
atom -> None
353
|
atom -> None
353
*
atom -> None
353
,
atom -> None
353
[
atom -> None
353
^
atom -> None
353
**
atom -> None
353
.
atom -> None
354
~
344
354
atom
346
354
False
347
354
atom_expr
348
354
[
349
354
NUMBER
350
354
True
351
354
NAME
352
354
None
353
354
+
354
354
-
356
354
(
357
354
{
359
354
STRING
360
354
factor
805
354
power
361
355
%
806
355
@
807
355
-
term -> factor
355
*
808
355
/
809
355
//
810
355
+
term -> factor
355
|
term -> factor
355
&
term -> factor
355
<<
term -> factor
355
,
term -> factor
355
^
term -> factor
355
NEWLINE
term -> factor
355
>>
term -> factor
356
~
344
356
factor
811
356
atom
346
356
False
347
356
atom_expr
348
356
[
349
356
NUMBER
350
356
True
351
356
NAME
352
356
None
353
356
+
354
356
-
356
356
(
357
356
{
359
356
STRING
360
356
power
361
357
NAME
131
357
atom_expr
132
357
atom
133
357
-
134
357
factor
136
357
)
812
357
[
137
357
True
138
357
arith_expr
139
357
False
140
357
{
141
357
+
142
357
and_expr
143
357
(
144
357
STRING
145
357
test_list_comp
813
357
power
147
357
term
148
357
comparison
149
357
shift_expr
150
357
test
151
357
not_test
152
357
or_test
153
357
lambda
154
357
None
155
357
xor_expr
156
357
expr
157
357
NUMBER
158
357
and_test
159
357
~
160
357
lambdef
161
357
not
162
357
test_list
163
358
>>
814
358
^
shift_expr -> arith_expr
358
<<
815
358
|
shift_expr -> arith_expr
358
,
shift_expr -> arith_expr
358
NEWLINE
shift_expr -> arith_expr
358
&
shift_expr -> arith_expr
359
}
816
360
NEWLINE
atom -> STRING
360
>>
atom -> STRING
360
%
atom -> STRING
360
/
atom -> STRING
360
+
atom -> STRING
360
(
atom -> STRING
360
.
atom -> STRING
360
//
atom -> STRING
360
**
atom -> STRING
360
*
atom -> STRING
360
,
atom -> STRING
360
&
atom -> STRING
360
-
atom -> STRING
360
|
atom -> STRING
360
^
atom -> STRING
360
[
atom -> STRING
360
<<
atom -> STRING
360
@
atom -> STRING
361
&
factor -> power
361
<<
factor -> power
361
NEWLINE
factor -> power
361
+
factor -> power
361
,
factor -> power
361
%
factor -> power
361
|
factor -> power
361
//
factor -> power
361
>>
factor -> power
361
^
factor -> power
361
/
factor -> power
361
@
factor -> power
361
-
factor -> power
361
*
factor -> power
362
&
817
362
|
and_expr -> shift_expr
362
NEWLINE
and_expr -> shift_expr
362
^
and_expr -> shift_expr
362
,
and_expr -> shift_expr
363
NEWLINE
expr -> xor_expr
363
|
818
363
,
expr -> xor_expr
364
|
xor_expr -> and_expr
364
NEWLINE
xor_expr -> and_expr
364
^
819
364
,
xor_expr -> and_expr
365
NEWLINE
return_stmt -> return expr_list
366
,
820
366
NEWLINE
expr_list -> expr
367
/=
factor -> ~ factor
367
is
factor -> ~ factor
367
>=
factor -> ~ factor
367
@=
factor -> ~ factor
367
<<
factor -> ~ factor
367
**=
factor -> ~ factor
367
<<=
factor -> ~ factor
367
<=
factor -> ~ factor
367
//=
factor -> ~ factor
367
if
factor -> ~ factor
367
==
factor -> ~ factor
367
*=
factor -> ~ factor
367
^=
factor -> ~ factor
367
//
factor -> ~ factor
367
or
factor -> ~ factor
367
+
factor -> ~ factor
367
and
factor -> ~ factor
367
!=
factor -> ~ factor
367
&
factor -> ~ factor
367
|=
factor -> ~ factor
367
+=
factor -> ~ factor
367
&=
factor -> ~ factor
367
|
factor -> ~ factor
367
:
factor -> ~ factor
367
-=
factor -> ~ factor
367
>>=
factor -> ~ factor
367
>>
factor -> ~ factor
367
%=
factor -> ~ factor
367
in
factor -> ~ factor
367
NEWLINE
factor -> ~ factor
367
=
factor -> ~ factor
367
>
factor -> ~ factor
367
/
factor -> ~ factor
367
not
factor -> ~ factor
367
@
factor -> ~ factor
367
-
factor -> ~ factor
367
^
factor -> ~ factor
367
,
factor -> ~ factor
367
*
factor -> ~ factor
367
<
factor -> ~ factor
367
%
factor -> ~ factor
368
(
821
368
NEWLINE
822
369
NEWLINE
dotted_name -> NAME
369
.
823
369
(
dotted_name -> NAME
370
$
program -> stmt program
371
.
atom -> NAME
371
<
atom -> NAME
371
|
atom -> NAME
371
not
atom -> NAME
371
[
atom -> NAME
371
,
atom -> NAME
371
+
atom -> NAME
371
%
atom -> NAME
371
NEWLINE
atom -> NAME
371
<=
atom -> NAME
371
*
atom -> NAME
371
!=
atom -> NAME
371
in
atom -> NAME
371
if
atom -> NAME
371
is
atom -> NAME
371
(
atom -> NAME
371
^
atom -> NAME
371
@
atom -> NAME
371
&
atom -> NAME
371
>>
atom -> NAME
371
<<
atom -> NAME
371
-
atom -> NAME
371
/
atom -> NAME
371
or
atom -> NAME
371
//
atom -> NAME
371
>=
atom -> NAME
371
and
atom -> NAME
371
>
atom -> NAME
371
==
atom -> NAME
371
**
atom -> NAME
372
**
824
372
and
power -> atom_expr
372
^
power -> atom_expr
372
or
power -> atom_expr
372
>>
power -> atom_expr
372
if
power -> atom_expr
372
<
power -> atom_expr
372
>=
power -> atom_expr
372
NEWLINE
power -> atom_expr
372
!=
power -> atom_expr
372
is
power -> atom_expr
372
<=
power -> atom_expr
372
not
power -> atom_expr
372
//
power -> atom_expr
372
+
power -> atom_expr
372
==
power -> atom_expr
372
|
power -> atom_expr
372
-
power -> atom_expr
372
&
power -> atom_expr
372
/
power -> atom_expr
372
@
power -> atom_expr
372
<<
power -> atom_expr
372
,
power -> atom_expr
372
%
power -> atom_expr
372
*
power -> atom_expr
372
in
power -> atom_expr
372
>
power -> atom_expr
373
+
825
373
or
arith_expr -> term
373
==
arith_expr -> term
373
NEWLINE
arith_expr -> term
373
-
826
373
in
arith_expr -> term
373
<<
arith_expr -> term
373
>
arith_expr -> term
373
is
arith_expr -> term
373
>=
arith_expr -> term
373
<=
arith_expr -> term
373
and
arith_expr -> term
373
>>
arith_expr -> term
373
!=
arith_expr -> term
373
not
arith_expr -> term
373
&
arith_expr -> term
373
,
arith_expr -> term
373
if
arith_expr -> term
373
<
arith_expr -> term
373
^
arith_expr -> term
373
|
arith_expr -> term
374
trailer
827
374
trailer_expr
828
374
[
829
374
or
trailer_expr -> 
374
.
830
374
(
831
374
not
trailer_expr -> 
374
in
trailer_expr -> 
374
is
trailer_expr -> 
374
>=
trailer_expr -> 
374
-
trailer_expr -> 
374
@
trailer_expr -> 
374
<=
trailer_expr -> 
374
,
trailer_expr -> 
374
^
trailer_expr -> 
374
*
trailer_expr -> 
374
if
trailer_expr -> 
374
**
trailer_expr -> 
374
>
trailer_expr -> 
374
==
trailer_expr -> 
374
>>
trailer_expr -> 
374
<<
trailer_expr -> 
374
/
trailer_expr -> 
374
NEWLINE
trailer_expr -> 
374
//
trailer_expr -> 
374
!=
trailer_expr -> 
374
<
trailer_expr -> 
374
&
trailer_expr -> 
374
|
trailer_expr -> 
374
and
trailer_expr -> 
374
+
trailer_expr -> 
374
%
trailer_expr -> 
375
NAME
371
375
atom_expr
372
375
atom
374
375
-
375
375
factor
832
375
[
377
375
True
378
375
False
380
375
{
381
375
+
382
375
(
384
375
STRING
385
375
power
389
375
None
390
375
NUMBER
393
375
~
396
376
%
833
376
/
834
376
*
835
376
//
836
376
@
837
376
not
term -> factor
376
<<
term -> factor
376
or
term -> factor
376
^
term -> factor
376
NEWLINE
term -> factor
376
in
term -> factor
376
if
term -> factor
376
and
term -> factor
376
<=
term -> factor
376
&
term -> factor
376
,
term -> factor
376
>>
term -> factor
376
>
term -> factor
376
|
term -> factor
376
<
term -> factor
376
is
term -> factor
376
!=
term -> factor
376
>=
term -> factor
376
==
term -> factor
376
-
term -> factor
376
+
term -> factor
377
NAME
187
377
atom_expr
188
377
atom
189
377
-
190
377
factor
191
377
test_list_comp
838
377
[
193
377
True
194
377
arith_expr
195
377
False
196
377
{
197
377
+
198
377
and_expr
199
377
(
200
377
STRING
201
377
]
839
377
term
203
377
and_test
204
377
comparison
205
377
shift_expr
206
377
not_test
207
377
power
208
377
or_test
209
377
None
210
377
xor_expr
211
377
expr
212
377
NUMBER
213
377
lambda
214
377
~
215
377
lambdef
216
377
not
217
377
test
218
377
test_list
219
378
!=
atom -> True
378
&
atom -> True
378
+
atom -> True
378
<<
atom -> True
378
@
atom -> True
378
,
atom -> True
378
if
atom -> True
378
NEWLINE
atom -> True
378
and
atom -> True
378
is
atom -> True
378
|
atom -> True
378
<
atom -> True
378
>=
atom -> True
378
or
atom -> True
378
==
atom -> True
378
%
atom -> True
378
>
atom -> True
378
[
atom -> True
378
*
atom -> True
378
//
atom -> True
378
/
atom -> True
378
in
atom -> True
378
-
atom -> True
378
^
atom -> True
378
<=
atom -> True
378
(
atom -> True
378
**
atom -> True
378
.
atom -> True
378
not
atom -> True
378
>>
atom -> True
379
or
shift_expr -> arith_expr
379
>>
840
379
<<
841
379
^
shift_expr -> arith_expr
379
in
shift_expr -> arith_expr
379
,
shift_expr -> arith_expr
379
<=
shift_expr -> arith_expr
379
>=
shift_expr -> arith_expr
379
&
shift_expr -> arith_expr
379
==
shift_expr -> arith_expr
379
not
shift_expr -> arith_expr
379
and
shift_expr -> arith_expr
379
>
shift_expr -> arith_expr
379
!=
shift_expr -> arith_expr
379
if
shift_expr -> arith_expr
379
|
shift_expr -> arith_expr
379
NEWLINE
shift_expr -> arith_expr
379
<
shift_expr -> arith_expr
379
is
shift_expr -> arith_expr
380
not
atom -> False
380
==
atom -> False
380
*
atom -> False
380
>
atom -> False
380
,
atom -> False
380
[
atom -> False
380
if
atom -> False
380
@
atom -> False
380
&
atom -> False
380
is
atom -> False
380
.
atom -> False
380
+
atom -> False
380
NEWLINE
atom -> False
380
>=
atom -> False
380
%
atom -> False
380
and
atom -> False
380
(
atom -> False
380
|
atom -> False
380
-
atom -> False
380
/
atom -> False
380
in
atom -> False
380
<<
atom -> False
380
<=
atom -> False
380
^
atom -> False
380
//
atom -> False
380
>>
atom -> False
380
!=
atom -> False
380
**
atom -> False
380
or
atom -> False
380
<
atom -> False
381
}
842
382
NAME
371
382
atom_expr
372
382
atom
374
382
-
375
382
[
377
382
True
378
382
False
380
382
{
381
382
+
382
382
(
384
382
STRING
385
382
power
389
382
factor
843
382
None
390
382
NUMBER
393
382
~
396
383
^
844
383
<
xor_expr -> and_expr
383
<=
xor_expr -> and_expr
383
|
xor_expr -> and_expr
383
not
xor_expr -> and_expr
383
and
xor_expr -> and_expr
383
!=
xor_expr -> and_expr
383
NEWLINE
xor_expr -> and_expr
383
or
xor_expr -> and_expr
383
>
xor_expr -> and_expr
383
>=
xor_expr -> and_expr
383
==
xor_expr -> and_expr
383
,
xor_expr -> and_expr
383
in
xor_expr -> and_expr
383
is
xor_expr -> and_expr
383
if
xor_expr -> and_expr
384
NAME
131
384
atom_expr
132
384
atom
133
384
-
134
384
factor
136
384
)
845
384
[
137
384
True
138
384
arith_expr
139
384
False
140
384
{
141
384
+
142
384
and_expr
143
384
(
144
384
STRING
145
384
test_list_comp
846
384
power
147
384
term
148
384
comparison
149
384
shift_expr
150
384
test
151
384
not_test
152
384
or_test
153
384
lambda
154
384
None
155
384
xor_expr
156
384
expr
157
384
NUMBER
158
384
and_test
159
384
~
160
384
lambdef
161
384
not
162
384
test_list
163
385
and
atom -> STRING
385
not
atom -> STRING
385
NEWLINE
atom -> STRING
385
.
atom -> STRING
385
//
atom -> STRING
385
-
atom -> STRING
385
*
atom -> STRING
385
(
atom -> STRING
385
>=
atom -> STRING
385
<=
atom -> STRING
385
<<
atom -> STRING
385
if
atom -> STRING
385
+
atom -> STRING
385
or
atom -> STRING
385
/
atom -> STRING
385
@
atom -> STRING
385
in
atom -> STRING
385
>>
atom -> STRING
385
%
atom -> STRING
385
!=
atom -> STRING
385
,
atom -> STRING
385
>
atom -> STRING
385
^
atom -> STRING
385
<
atom -> STRING
385
==
atom -> STRING
385
**
atom -> STRING
385
&
atom -> STRING
385
|
atom -> STRING
385
is
atom -> STRING
385
[
atom -> STRING
386
if
not_test -> comparison
386
or
not_test -> comparison
386
and
not_test -> comparison
386
,
not_test -> comparison
386
NEWLINE
not_test -> comparison
387
==
and_expr -> shift_expr
387
&
847
387
!=
and_expr -> shift_expr
387
<
and_expr -> shift_expr
387
<=
and_expr -> shift_expr
387
and
and_expr -> shift_expr
387
in
and_expr -> shift_expr
387
^
and_expr -> shift_expr
387
not
and_expr -> shift_expr
387
is
and_expr -> shift_expr
387
if
and_expr -> shift_expr
387
,
and_expr -> shift_expr
387
>
and_expr -> shift_expr
387
or
and_expr -> shift_expr
387
NEWLINE
and_expr -> shift_expr
387
>=
and_expr -> shift_expr
387
|
and_expr -> shift_expr
388
and
848
388
if
and_test -> not_test
388
NEWLINE
and_test -> not_test
388
or
and_test -> not_test
388
,
and_test -> not_test
389
<=
factor -> power
389
,
factor -> power
389
is
factor -> power
389
>
factor -> power
389
==
factor -> power
389
^
factor -> power
389
or
factor -> power
389
-
factor -> power
389
+
factor -> power
389
>>
factor -> power
389
/
factor -> power
389
*
factor -> power
389
<<
factor -> power
389
NEWLINE
factor -> power
389
|
factor -> power
389
and
factor -> power
389
<
factor -> power
389
not
factor -> power
389
!=
factor -> power
389
if
factor -> power
389
&
factor -> power
389
in
factor -> power
389
%
factor -> power
389
>=
factor -> power
389
//
factor -> power
389
@
factor -> power
390
+
atom -> None
390
>>
atom -> None
390
/
atom -> None
390
or
atom -> None
390
*
atom -> None
390
in
atom -> None
390
**
atom -> None
390
==
atom -> None
390
-
atom -> None
390
if
atom -> None
390
NEWLINE
atom -> None
390
(
atom -> None
390
@
atom -> None
390
>=
atom -> None
390
[
atom -> None
390
^
atom -> None
390
&
atom -> None
390
<=
atom -> None
390
is
atom -> None
390
.
atom -> None
390
not
atom -> None
390
//
atom -> None
390
<
atom -> None
390
<<
atom -> None
390
!=
atom -> None
390
and
atom -> None
390
%
atom -> None
390
|
atom -> None
390
,
atom -> None
390
>
atom -> None
391
|
849
391
>
expr -> xor_expr
391
<
expr -> xor_expr
391
and
expr -> xor_expr
391
>=
expr -> xor_expr
391
,
expr -> xor_expr
391
!=
expr -> xor_expr
391
or
expr -> xor_expr
391
NEWLINE
expr -> xor_expr
391
in
expr -> xor_expr
391
is
expr -> xor_expr
391
if
expr -> xor_expr
391
==
expr -> xor_expr
391
<=
expr -> xor_expr
391
not
expr -> xor_expr
392
==
330
392
is
331
392
<=
332
392
comp_op
850
392
and
comparison -> expr
392
!=
334
392
>
335
392
not
336
392
NEWLINE
comparison -> expr
392
in
337
392
or
comparison -> expr
392
<
338
392
>=
339
392
if
comparison -> expr
392
,
comparison -> expr
393
is
atom -> NUMBER
393
|
atom -> NUMBER
393
in
atom -> NUMBER
393
@
atom -> NUMBER
393
**
atom -> NUMBER
393
and
atom -> NUMBER
393
!=
atom -> NUMBER
393
if
atom -> NUMBER
393
-
atom -> NUMBER
393
<<
atom -> NUMBER
393
.
atom -> NUMBER
393
(
atom -> NUMBER
393
==
atom -> NUMBER
393
%
atom -> NUMBER
393
^
atom -> NUMBER
393
not
atom -> NUMBER
393
>=
atom -> NUMBER
393
,
atom -> NUMBER
393
/
atom -> NUMBER
393
//
atom -> NUMBER
393
>
atom -> NUMBER
393
&
atom -> NUMBER
393
[
atom -> NUMBER
393
<=
atom -> NUMBER
393
*
atom -> NUMBER
393
NEWLINE
atom -> NUMBER
393
or
atom -> NUMBER
393
+
atom -> NUMBER
393
>>
atom -> NUMBER
393
<
atom -> NUMBER
394
or
851
394
if
or_test -> and_test
394
NEWLINE
or_test -> and_test
394
,
or_test -> and_test
395
if
852
395
NEWLINE
test -> or_test
395
,
test -> or_test
396
NAME
371
396
atom_expr
372
396
atom
374
396
-
375
396
[
377
396
True
378
396
False
380
396
{
381
396
+
382
396
factor
853
396
(
384
396
STRING
385
396
power
389
396
None
390
396
NUMBER
393
396
~
396
397
NAME
342
397
:
854
397
vfpdef
343
397
varargslist
855
398
,
856
398
NEWLINE
test_list -> test
399
NEWLINE
test -> lambdef
399
,
test -> lambdef
400
NAME
371
400
atom_expr
372
400
term
373
400
atom
374
400
-
375
400
factor
376
400
[
377
400
True
378
400
arith_expr
379
400
False
380
400
{
381
400
+
382
400
and_expr
383
400
(
384
400
STRING
385
400
comparison
386
400
shift_expr
387
400
power
389
400
None
390
400
xor_expr
391
400
expr
392
400
NUMBER
393
400
~
396
400
not_test
857
400
not
400
401
NEWLINE
assert_stmt -> assert test_list
402
$
program -> NEWLINE program
403
NEWLINE
del_stmt -> del expr_list
404
NEWLINE
global_stmt -> global namelist
405
,
858
405
NEWLINE
namelist -> NAME
406
True
augassign -> *=
406
(
augassign -> *=
406
not
augassign -> *=
406
lambda
augassign -> *=
406
False
augassign -> *=
406
[
augassign -> *=
406
-
augassign -> *=
406
~
augassign -> *=
406
{
augassign -> *=
406
NUMBER
augassign -> *=
406
yield
augassign -> *=
406
+
augassign -> *=
406
STRING
augassign -> *=
406
None
augassign -> *=
406
NAME
augassign -> *=
407
[
augassign -> -=
407
~
augassign -> -=
407
None
augassign -> -=
407
yield
augassign -> -=
407
lambda
augassign -> -=
407
NAME
augassign -> -=
407
False
augassign -> -=
407
True
augassign -> -=
407
STRING
augassign -> -=
407
+
augassign -> -=
407
(
augassign -> -=
407
{
augassign -> -=
407
-
augassign -> -=
407
NUMBER
augassign -> -=
407
not
augassign -> -=
408
True
augassign -> >>=
408
yield
augassign -> >>=
408
+
augassign -> >>=
408
(
augassign -> >>=
408
lambda
augassign -> >>=
408
-
augassign -> >>=
408
NAME
augassign -> >>=
408
not
augassign -> >>=
408
None
augassign -> >>=
408
[
augassign -> >>=
408
STRING
augassign -> >>=
408
NUMBER
augassign -> >>=
408
{
augassign -> >>=
408
False
augassign -> >>=
408
~
augassign -> >>=
409
False
augassign -> ^=
409
{
augassign -> ^=
409
True
augassign -> ^=
409
NAME
augassign -> ^=
409
-
augassign -> ^=
409
lambda
augassign -> ^=
409
None
augassign -> ^=
409
STRING
augassign -> ^=
409
~
augassign -> ^=
409
(
augassign -> ^=
409
[
augassign -> ^=
409
NUMBER
augassign -> ^=
409
+
augassign -> ^=
409
not
augassign -> ^=
409
yield
augassign -> ^=
410
None
augassign -> &=
410
True
augassign -> &=
410
not
augassign -> &=
410
yield
augassign -> &=
410
False
augassign -> &=
410
-
augassign -> &=
410
NUMBER
augassign -> &=
410
[
augassign -> &=
410
(
augassign -> &=
410
lambda
augassign -> &=
410
~
augassign -> &=
410
+
augassign -> &=
410
STRING
augassign -> &=
410
NAME
augassign -> &=
410
{
augassign -> &=
411
STRING
augassign -> %=
411
lambda
augassign -> %=
411
~
augassign -> %=
411
True
augassign -> %=
411
(
augassign -> %=
411
[
augassign -> %=
411
not
augassign -> %=
411
yield
augassign -> %=
411
NAME
augassign -> %=
411
NUMBER
augassign -> %=
411
{
augassign -> %=
411
False
augassign -> %=
411
+
augassign -> %=
411
-
augassign -> %=
411
None
augassign -> %=
412
True
augassign -> +=
412
(
augassign -> +=
412
False
augassign -> +=
412
lambda
augassign -> +=
412
{
augassign -> +=
412
STRING
augassign -> +=
412
NUMBER
augassign -> +=
412
NAME
augassign -> +=
412
-
augassign -> +=
412
not
augassign -> +=
412
None
augassign -> +=
412
+
augassign -> +=
412
~
augassign -> +=
412
yield
augassign -> +=
412
[
augassign -> +=
413
[
augassign -> //=
413
{
augassign -> //=
413
STRING
augassign -> //=
413
+
augassign -> //=
413
NUMBER
augassign -> //=
413
-
augassign -> //=
413
None
augassign -> //=
413
lambda
augassign -> //=
413
not
augassign -> //=
413
yield
augassign -> //=
413
(
augassign -> //=
413
NAME
augassign -> //=
413
False
augassign -> //=
413
~
augassign -> //=
413
True
augassign -> //=
414
yield
augassign -> **=
414
+
augassign -> **=
414
[
augassign -> **=
414
~
augassign -> **=
414
False
augassign -> **=
414
not
augassign -> **=
414
NUMBER
augassign -> **=
414
(
augassign -> **=
414
-
augassign -> **=
414
STRING
augassign -> **=
414
{
augassign -> **=
414
lambda
augassign -> **=
414
True
augassign -> **=
414
None
augassign -> **=
414
NAME
augassign -> **=
415
not
augassign -> <<=
415
{
augassign -> <<=
415
-
augassign -> <<=
415
lambda
augassign -> <<=
415
~
augassign -> <<=
415
[
augassign -> <<=
415
NUMBER
augassign -> <<=
415
None
augassign -> <<=
415
(
augassign -> <<=
415
False
augassign -> <<=
415
NAME
augassign -> <<=
415
yield
augassign -> <<=
415
STRING
augassign -> <<=
415
+
augassign -> <<=
415
True
augassign -> <<=
416
NUMBER
augassign -> |=
416
{
augassign -> |=
416
+
augassign -> |=
416
NAME
augassign -> |=
416
STRING
augassign -> |=
416
lambda
augassign -> |=
416
[
augassign -> |=
416
not
augassign -> |=
416
None
augassign -> |=
416
-
augassign -> |=
416
(
augassign -> |=
416
~
augassign -> |=
416
yield
augassign -> |=
416
True
augassign -> |=
416
False
augassign -> |=
417
(
augassign -> @=
417
NAME
augassign -> @=
417
lambda
augassign -> @=
417
True
augassign -> @=
417
not
augassign -> @=
417
False
augassign -> @=
417
[
augassign -> @=
417
+
augassign -> @=
417
yield
augassign -> @=
417
{
augassign -> @=
417
None
augassign -> @=
417
-
augassign -> @=
417
NUMBER
augassign -> @=
417
~
augassign -> @=
417
STRING
augassign -> @=
418
NAME
859
418
atom_expr
860
418
term
861
418
atom
862
418
-
863
418
factor
864
418
[
865
418
True
866
418
arith_expr
867
418
xor_expr
868
418
False
869
418
{
870
418
+
871
418
and_expr
872
418
(
873
418
STRING
874
418
test
875
418
comparison
876
418
shift_expr
877
418
not_test
878
418
power
879
418
lambdef
880
418
None
881
418
expr
882
418
NUMBER
883
418
and_test
884
418
or_test
885
418
test_list
886
418
~
887
418
yield
888
418
lambda
889
418
not
890
418
yield_expr
891
419
NAME
augassign -> /=
419
None
augassign -> /=
419
True
augassign -> /=
419
-
augassign -> /=
419
lambda
augassign -> /=
419
~
augassign -> /=
419
[
augassign -> /=
419
NUMBER
augassign -> /=
419
yield
augassign -> /=
419
+
augassign -> /=
419
(
augassign -> /=
419
STRING
augassign -> /=
419
not
augassign -> /=
419
{
augassign -> /=
419
False
augassign -> /=
420
NAME
371
420
atom_expr
372
420
term
373
420
atom
374
420
-
375
420
factor
376
420
[
377
420
True
378
420
arith_expr
379
420
False
380
420
{
381
420
+
382
420
and_expr
383
420
(
384
420
STRING
385
420
comparison
386
420
shift_expr
387
420
not_test
388
420
power
389
420
None
390
420
xor_expr
391
420
expr
392
420
NUMBER
393
420
and_test
394
420
or_test
395
420
~
396
420
lambda
397
420
test
398
420
yield
892
420
test_list
893
420
lambdef
399
420
not
400
420
yield_or_testlist
894
420
yield_expr
895
421
NEWLINE
expr_stmt -> test_list assign
422
NAME
896
422
atom_expr
897
422
atom
898
422
-
899
422
factor
900
422
True
901
422
arith_expr
902
422
xor_expr
903
422
False
904
422
{
905
422
+
906
422
and_expr
907
422
[
908
422
(
909
422
STRING
910
422
term
911
422
comparison
912
422
shift_expr
913
422
not_test
914
422
power
915
422
lambdef
916
422
test
917
422
None
918
422
expr
919
422
NUMBER
920
422
~
921
422
or_test
922
422
not
923
422
and_test
924
422
lambda
925
423
NEWLINE
expr_stmt -> test_list annassign
424
NEWLINE
nonlocal_stmt -> nonlocal namelist
425
class
decorators -> decorator decorators
425
def
decorators -> decorator decorators
426
NEWLINE
yield_stmt -> yield expr_list
427
NAME
85
427
atom_expr
86
427
atom
88
427
-
89
427
True
91
427
False
94
427
{
96
427
(
97
427
+
95
427
[
100
427
STRING
101
427
factor
926
427
power
105
427
None
106
427
NUMBER
109
427
~
110
428
NAME
85
428
atom_expr
86
428
term
87
428
atom
88
428
-
89
428
factor
90
428
True
91
428
False
94
428
{
96
428
(
97
428
+
95
428
[
100
428
STRING
101
428
arith_expr
927
428
power
105
428
None
106
428
NUMBER
109
428
~
110
429
NAME
85
429
atom_expr
86
429
term
87
429
atom
88
429
-
89
429
factor
90
429
True
91
429
False
94
429
{
96
429
(
97
429
+
95
429
[
100
429
STRING
101
429
arith_expr
928
429
power
105
429
None
106
429
NUMBER
109
429
~
110
430
trailer
430
430
trailer_expr
929
430
[
432
430
or
trailer_expr -> 
430
.
433
430
(
434
430
not
trailer_expr -> 
430
in
trailer_expr -> 
430
is
trailer_expr -> 
430
>=
trailer_expr -> 
430
-
trailer_expr -> 
430
@
trailer_expr -> 
430
<=
trailer_expr -> 
430
^
trailer_expr -> 
430
*
trailer_expr -> 
430
if
trailer_expr -> 
430
**
trailer_expr -> 
430
>
trailer_expr -> 
430
==
trailer_expr -> 
430
>>
trailer_expr -> 
430
<<
trailer_expr -> 
430
/
trailer_expr -> 
430
//
trailer_expr -> 
430
!=
trailer_expr -> 
430
<
trailer_expr -> 
430
&
trailer_expr -> 
430
:
trailer_expr -> 
430
|
trailer_expr -> 
430
and
trailer_expr -> 
430
+
trailer_expr -> 
430
%
trailer_expr -> 
431
|
atom_expr -> atom trailer_expr
431
*
atom_expr -> atom trailer_expr
431
-
atom_expr -> atom trailer_expr
431
:
atom_expr -> atom trailer_expr
431
not
atom_expr -> atom trailer_expr
431
in
atom_expr -> atom trailer_expr
431
and
atom_expr -> atom trailer_expr
431
^
atom_expr -> atom trailer_expr
431
or
atom_expr -> atom trailer_expr
431
<=
atom_expr -> atom trailer_expr
431
<
atom_expr -> atom trailer_expr
431
>>
atom_expr -> atom trailer_expr
431
//
atom_expr -> atom trailer_expr
431
!=
atom_expr -> atom trailer_expr
431
<<
atom_expr -> atom trailer_expr
431
+
atom_expr -> atom trailer_expr
431
>
atom_expr -> atom trailer_expr
431
/
atom_expr -> atom trailer_expr
431
==
atom_expr -> atom trailer_expr
431
%
atom_expr -> atom trailer_expr
431
&
atom_expr -> atom trailer_expr
431
@
atom_expr -> atom trailer_expr
431
if
atom_expr -> atom trailer_expr
431
>=
atom_expr -> atom trailer_expr
431
is
atom_expr -> atom trailer_expr
431
**
atom_expr -> atom trailer_expr
432
NAME
461
432
atom_expr
462
432
term
463
432
atom
464
432
-
465
432
factor
466
432
[
467
432
True
468
432
arith_expr
469
432
False
470
432
{
471
432
(
472
432
+
473
432
and_expr
474
432
and_test
475
432
STRING
476
432
subscriptlist
930
432
comparison
478
432
shift_expr
479
432
not_test
480
432
power
481
432
None
482
432
xor_expr
483
432
expr
484
432
NUMBER
485
432
test
486
432
~
487
432
or_test
488
432
not
489
432
lambdef
490
432
:
maybe_test -> 
432
lambda
491
432
subscript
492
432
maybe_test
493
433
NAME
931
434
NAME
496
434
atom_expr
497
434
atom
498
434
-
499
434
arglist
932
434
factor
501
434
*
502
434
[
503
434
True
504
434
arith_expr
505
434
xor_expr
506
434
False
507
434
**
508
434
{
509
434
+
510
434
)
933
434
and_expr
512
434
(
513
434
STRING
514
434
power
515
434
term
516
434
comparison
517
434
shift_expr
518
434
argument
519
434
not_test
520
434
or_test
521
434
lambdef
522
434
lambda
523
434
None
524
434
test
525
434
expr
526
434
NUMBER
527
434
and_test
528
434
~
529
434
not
530
435
>>
factor -> - factor
435
if
factor -> - factor
435
>
factor -> - factor
435
is
factor -> - factor
435
//
factor -> - factor
435
not
factor -> - factor
435
or
factor -> - factor
435
-
factor -> - factor
435
<<
factor -> - factor
435
>=
factor -> - factor
435
/
factor -> - factor
435
<=
factor -> - factor
435
<
factor -> - factor
435
in
factor -> - factor
435
*
factor -> - factor
435
|
factor -> - factor
435
!=
factor -> - factor
435
&
factor -> - factor
435
and
factor -> - factor
435
^
factor -> - factor
435
+
factor -> - factor
435
:
factor -> - factor
435
%
factor -> - factor
435
==
factor -> - factor
435
@
factor -> - factor
436
NAME
85
436
atom_expr
86
436
atom
88
436
-
89
436
factor
90
436
True
91
436
False
94
436
{
96
436
(
97
436
+
95
436
[
100
436
STRING
101
436
term
934
436
power
105
436
None
106
436
NUMBER
109
436
~
110
437
NAME
85
437
atom_expr
86
437
atom
88
437
-
89
437
factor
90
437
True
91
437
False
94
437
{
96
437
(
97
437
+
95
437
[
100
437
STRING
101
437
term
935
437
power
105
437
None
106
437
NUMBER
109
437
~
110
438
NAME
85
438
atom_expr
86
438
atom
88
438
-
89
438
factor
90
438
True
91
438
False
94
438
term
936
438
{
96
438
(
97
438
+
95
438
[
100
438
STRING
101
438
power
105
438
None
106
438
NUMBER
109
438
~
110
439
NAME
85
439
atom_expr
86
439
atom
88
439
-
89
439
factor
90
439
True
91
439
False
94
439
{
96
439
(
97
439
+
95
439
[
100
439
STRING
101
439
power
105
439
None
106
439
NUMBER
109
439
~
110
439
term
937
440
NAME
85
440
atom_expr
86
440
atom
88
440
-
89
440
factor
90
440
True
91
440
False
94
440
{
96
440
(
97
440
+
95
440
[
100
440
STRING
101
440
term
938
440
power
105
440
None
106
440
NUMBER
109
440
~
110
441
NAME
85
441
atom_expr
86
441
term
87
441
atom
88
441
-
89
441
factor
90
441
True
91
441
arith_expr
92
441
False
94
441
{
96
441
(
97
441
+
95
441
[
100
441
STRING
101
441
shift_expr
939
441
power
105
441
None
106
441
NUMBER
109
441
~
110
442
NAME
85
442
atom_expr
86
442
term
87
442
atom
88
442
-
89
442
factor
90
442
True
91
442
arith_expr
92
442
False
94
442
{
96
442
shift_expr
940
442
+
95
442
(
97
442
[
100
442
STRING
101
442
power
105
442
None
106
442
NUMBER
109
442
~
110
443
NAME
12
443
True
1
443
atom_expr
5
443
term
29
443
atom
4
443
simple_stmt
941
443
factor
11
443
shift_expr
7
443
arith_expr
8
443
False
27
443
and_expr
9
443
xor_expr
40
443
{
41
443
(
13
443
[
15
443
resetstats
16
443
STRING
46
443
raise
19
443
small_stmt
942
443
test
47
443
comparison
28
443
suite
943
443
or_test
23
443
~
55
443
-
43
443
lambda
53
443
+
31
443
not_test
33
443
and_test
48
443
power
32
443
pass
73
443
None
34
443
lambdef
37
443
not
42
443
NUMBER
39
443
expr
50
443
continue
74
443
begsim
49
443
del_stmt
75
443
NEWLINE
944
443
return
54
443
nonlocal
76
443
return_stmt
56
443
endsim
57
443
test_list
70
443
raise_stmt
59
443
assert_stmt
78
443
stat_stmt
79
443
global_stmt
61
443
continue_stmt
62
443
assert
63
443
break_stmt
64
443
nonlocal_stmt
80
443
expr_stmt
81
443
break
82
443
del
66
443
global
67
443
yield
83
443
pass_stmt
68
443
flow_stmt
71
443
yield_stmt
72
443
sim_stmt
84
444
>>
factor -> + factor
444
>=
factor -> + factor
444
or
factor -> + factor
444
==
factor -> + factor
444
-
factor -> + factor
444
:
factor -> + factor
444
*
factor -> + factor
444
<
factor -> + factor
444
^
factor -> + factor
444
&
factor -> + factor
444
@
factor -> + factor
444
|
factor -> + factor
444
<<
factor -> + factor
444
%
factor -> + factor
444
not
factor -> + factor
444
//
factor -> + factor
444
and
factor -> + factor
444
in
factor -> + factor
444
!=
factor -> + factor
444
>
factor -> + factor
444
/
factor -> + factor
444
is
factor -> + factor
444
+
factor -> + factor
444
if
factor -> + factor
444
<=
factor -> + factor
445
%
atom -> { }
445
[
atom -> { }
445
not
atom -> { }
445
^
atom -> { }
445
or
atom -> { }
445
-
atom -> { }
445
>=
atom -> { }
445
<<
atom -> { }
445
/
atom -> { }
445
<=
atom -> { }
445
|
atom -> { }
445
>>
atom -> { }
445
:
atom -> { }
445
@
atom -> { }
445
is
atom -> { }
445
if
atom -> { }
445
and
atom -> { }
445
==
atom -> { }
445
in
atom -> { }
445
**
atom -> { }
445
&
atom -> { }
445
>
atom -> { }
445
//
atom -> { }
445
(
atom -> { }
445
+
atom -> { }
445
<
atom -> { }
445
!=
atom -> { }
445
.
atom -> { }
445
*
atom -> { }
446
|
atom -> ( )
446
**
atom -> ( )
446
>>
atom -> ( )
446
-
atom -> ( )
446
%
atom -> ( )
446
(
atom -> ( )
446
not
atom -> ( )
446
+
atom -> ( )
446
>=
atom -> ( )
446
&
atom -> ( )
446
*
atom -> ( )
446
!=
atom -> ( )
446
<=
atom -> ( )
446
and
atom -> ( )
446
<
atom -> ( )
446
^
atom -> ( )
446
==
atom -> ( )
446
if
atom -> ( )
446
in
atom -> ( )
446
/
atom -> ( )
446
>
atom -> ( )
446
//
atom -> ( )
446
.
atom -> ( )
446
or
atom -> ( )
446
@
atom -> ( )
446
is
atom -> ( )
446
:
atom -> ( )
446
<<
atom -> ( )
446
[
atom -> ( )
447
)
945
448
NAME
85
448
atom_expr
86
448
term
87
448
atom
88
448
-
89
448
factor
90
448
True
91
448
arith_expr
92
448
False
94
448
{
96
448
(
97
448
+
95
448
and_expr
98
448
[
100
448
STRING
101
448
xor_expr
946
448
shift_expr
103
448
power
105
448
None
106
448
NUMBER
109
448
~
110
449
NAME
85
449
atom_expr
86
449
term
87
449
atom
88
449
-
89
449
factor
90
449
True
91
449
arith_expr
92
449
False
94
449
{
96
449
(
97
449
+
95
449
and_expr
98
449
and_test
99
449
[
100
449
STRING
101
449
comparison
102
449
shift_expr
103
449
not_test
104
449
power
105
449
None
106
449
xor_expr
107
449
expr
108
449
NUMBER
109
449
~
110
449
or_test
947
449
not
111
450
]
948
451
and
atom -> [ ]
451
<<
atom -> [ ]
451
//
atom -> [ ]
451
*
atom -> [ ]
451
+
atom -> [ ]
451
^
atom -> [ ]
451
==
atom -> [ ]
451
>>
atom -> [ ]
451
/
atom -> [ ]
451
:
atom -> [ ]
451
in
atom -> [ ]
451
>
atom -> [ ]
451
<=
atom -> [ ]
451
.
atom -> [ ]
451
%
atom -> [ ]
451
&
atom -> [ ]
451
-
atom -> [ ]
451
>=
atom -> [ ]
451
not
atom -> [ ]
451
|
atom -> [ ]
451
@
atom -> [ ]
451
is
atom -> [ ]
451
or
atom -> [ ]
451
!=
atom -> [ ]
451
if
atom -> [ ]
451
**
atom -> [ ]
451
<
atom -> [ ]
451
(
atom -> [ ]
451
[
atom -> [ ]
452
NAME
85
452
atom_expr
86
452
term
87
452
atom
88
452
-
89
452
factor
90
452
True
91
452
arith_expr
92
452
False
94
452
{
96
452
(
97
452
+
95
452
[
100
452
STRING
101
452
shift_expr
103
452
and_expr
949
452
power
105
452
None
106
452
NUMBER
109
452
~
110
453
NAME
85
453
atom_expr
86
453
term
87
453
atom
88
453
-
89
453
factor
90
453
True
91
453
arith_expr
92
453
False
94
453
{
96
453
(
97
453
+
95
453
and_expr
98
453
[
100
453
STRING
101
453
comparison
102
453
shift_expr
103
453
not_test
104
453
power
105
453
None
106
453
xor_expr
107
453
expr
108
453
NUMBER
109
453
and_test
950
453
~
110
453
not
111
454
NAME
85
454
atom_expr
86
454
term
87
454
atom
88
454
-
89
454
factor
90
454
True
91
454
arith_expr
92
454
False
94
454
{
96
454
(
97
454
+
95
454
and_expr
98
454
[
100
454
STRING
101
454
shift_expr
103
454
power
105
454
None
106
454
xor_expr
107
454
NUMBER
109
454
expr
951
454
~
110
455
NAME
85
455
atom_expr
86
455
term
87
455
atom
88
455
-
89
455
factor
90
455
True
91
455
arith_expr
92
455
False
94
455
{
96
455
(
97
455
+
95
455
and_expr
98
455
[
100
455
STRING
101
455
shift_expr
103
455
power
105
455
None
106
455
xor_expr
107
455
expr
108
455
NUMBER
109
455
~
110
455
comparison
952
456
is
factor -> ~ factor
456
>=
factor -> ~ factor
456
<<
factor -> ~ factor
456
<=
factor -> ~ factor
456
if
factor -> ~ factor
456
==
factor -> ~ factor
456
//
factor -> ~ factor
456
or
factor -> ~ factor
456
+
factor -> ~ factor
456
and
factor -> ~ factor
456
!=
factor -> ~ factor
456
&
factor -> ~ factor
456
:
factor -> ~ factor
456
|
factor -> ~ factor
456
>>
factor -> ~ factor
456
in
factor -> ~ factor
456
>
factor -> ~ factor
456
/
factor -> ~ factor
456
not
factor -> ~ factor
456
@
factor -> ~ factor
456
-
factor -> ~ factor
456
^
factor -> ~ factor
456
*
factor -> ~ factor
456
<
factor -> ~ factor
456
%
factor -> ~ factor
457
:
not_test -> not not_test
457
if
not_test -> not not_test
457
or
not_test -> not not_test
457
and
not_test -> not not_test
458
atom_expr
685
458
atom
686
458
-
687
458
factor
688
458
and_test
689
458
True
690
458
arith_expr
691
458
False
692
458
NAME
693
458
{
694
458
+
695
458
and_expr
696
458
[
697
458
(
698
458
STRING
699
458
term
700
458
comparison
701
458
shift_expr
702
458
not_test
703
458
power
704
458
xor_expr
706
458
None
707
458
NUMBER
708
458
expr
709
458
~
710
458
or_test
953
458
not
711
459
NAME
85
459
atom_expr
86
459
term
87
459
atom
88
459
-
89
459
factor
90
459
True
91
459
arith_expr
92
459
False
94
459
{
96
459
(
97
459
+
95
459
and_expr
98
459
and_test
99
459
[
100
459
STRING
101
459
comparison
102
459
shift_expr
103
459
not_test
104
459
power
105
459
None
106
459
xor_expr
107
459
expr
108
459
NUMBER
109
459
~
110
459
not
111
459
or_test
112
459
lambda
113
459
test
954
459
lambdef
114
460
:
955
461
.
atom -> NAME
461
<
atom -> NAME
461
|
atom -> NAME
461
not
atom -> NAME
461
[
atom -> NAME
461
,
atom -> NAME
461
+
atom -> NAME
461
%
atom -> NAME
461
]
atom -> NAME
461
<=
atom -> NAME
461
*
atom -> NAME
461
!=
atom -> NAME
461
in
atom -> NAME
461
:
atom -> NAME
461
if
atom -> NAME
461
is
atom -> NAME
461
(
atom -> NAME
461
^
atom -> NAME
461
@
atom -> NAME
461
&
atom -> NAME
461
>>
atom -> NAME
461
<<
atom -> NAME
461
-
atom -> NAME
461
/
atom -> NAME
461
or
atom -> NAME
461
//
atom -> NAME
461
>=
atom -> NAME
461
and
atom -> NAME
461
>
atom -> NAME
461
==
atom -> NAME
461
**
atom -> NAME
462
**
956
462
and
power -> atom_expr
462
^
power -> atom_expr
462
or
power -> atom_expr
462
>>
power -> atom_expr
462
]
power -> atom_expr
462
if
power -> atom_expr
462
<
power -> atom_expr
462
>=
power -> atom_expr
462
:
power -> atom_expr
462
!=
power -> atom_expr
462
is
power -> atom_expr
462
<=
power -> atom_expr
462
not
power -> atom_expr
462
//
power -> atom_expr
462
+
power -> atom_expr
462
==
power -> atom_expr
462
|
power -> atom_expr
462
-
power -> atom_expr
462
&
power -> atom_expr
462
/
power -> atom_expr
462
@
power -> atom_expr
462
<<
power -> atom_expr
462
,
power -> atom_expr
462
%
power -> atom_expr
462
*
power -> atom_expr
462
in
power -> atom_expr
462
>
power -> atom_expr
463
+
957
463
or
arith_expr -> term
463
==
arith_expr -> term
463
-
958
463
in
arith_expr -> term
463
<<
arith_expr -> term
463
>
arith_expr -> term
463
is
arith_expr -> term
463
>=
arith_expr -> term
463
:
arith_expr -> term
463
<=
arith_expr -> term
463
and
arith_expr -> term
463
>>
arith_expr -> term
463
!=
arith_expr -> term
463
not
arith_expr -> term
463
&
arith_expr -> term
463
]
arith_expr -> term
463
,
arith_expr -> term
463
if
arith_expr -> term
463
<
arith_expr -> term
463
^
arith_expr -> term
463
|
arith_expr -> term
464
trailer
959
464
trailer_expr
960
464
[
961
464
or
trailer_expr -> 
464
.
962
464
(
963
464
not
trailer_expr -> 
464
in
trailer_expr -> 
464
is
trailer_expr -> 
464
>=
trailer_expr -> 
464
-
trailer_expr -> 
464
@
trailer_expr -> 
464
<=
trailer_expr -> 
464
,
trailer_expr -> 
464
^
trailer_expr -> 
464
*
trailer_expr -> 
464
if
trailer_expr -> 
464
**
trailer_expr -> 
464
>
trailer_expr -> 
464
==
trailer_expr -> 
464
>>
trailer_expr -> 
464
<<
trailer_expr -> 
464
/
trailer_expr -> 
464
//
trailer_expr -> 
464
!=
trailer_expr -> 
464
<
trailer_expr -> 
464
&
trailer_expr -> 
464
:
trailer_expr -> 
464
]
trailer_expr -> 
464
|
trailer_expr -> 
464
and
trailer_expr -> 
464
+
trailer_expr -> 
464
%
trailer_expr -> 
465
NAME
461
465
atom_expr
462
465
atom
464
465
-
465
465
factor
964
465
[
467
465
True
468
465
False
470
465
{
471
465
(
472
465
+
473
465
STRING
476
465
power
481
465
None
482
465
NUMBER
485
465
~
487
466
%
965
466
//
966
466
/
967
466
*
968
466
@
969
466
not
term -> factor
466
<<
term -> factor
466
or
term -> factor
466
^
term -> factor
466
in
term -> factor
466
if
term -> factor
466
and
term -> factor
466
<=
term -> factor
466
&
term -> factor
466
:
term -> factor
466
,
term -> factor
466
>>
term -> factor
466
>
term -> factor
466
|
term -> factor
466
<
term -> factor
466
is
term -> factor
466
!=
term -> factor
466
>=
term -> factor
466
==
term -> factor
466
-
term -> factor
466
+
term -> factor
466
]
term -> factor
467
NAME
187
467
atom_expr
188
467
atom
189
467
-
190
467
factor
191
467
test_list_comp
970
467
[
193
467
True
194
467
arith_expr
195
467
False
196
467
{
197
467
+
198
467
and_expr
199
467
(
200
467
STRING
201
467
]
971
467
term
203
467
and_test
204
467
comparison
205
467
shift_expr
206
467
not_test
207
467
power
208
467
or_test
209
467
None
210
467
xor_expr
211
467
expr
212
467
NUMBER
213
467
lambda
214
467
~
215
467
lambdef
216
467
not
217
467
test
218
467
test_list
219
468
!=
atom -> True
468
&
atom -> True
468
+
atom -> True
468
<<
atom -> True
468
@
atom -> True
468
,
atom -> True
468
if
atom -> True
468
and
atom -> True
468
is
atom -> True
468
|
atom -> True
468
<
atom -> True
468
>=
atom -> True
468
]
atom -> True
468
or
atom -> True
468
==
atom -> True
468
%
atom -> True
468
>
atom -> True
468
[
atom -> True
468
*
atom -> True
468
//
atom -> True
468
/
atom -> True
468
in
atom -> True
468
-
atom -> True
468
^
atom -> True
468
<=
atom -> True
468
(
atom -> True
468
**
atom -> True
468
.
atom -> True
468
not
atom -> True
468
:
atom -> True
468
>>
atom -> True
469
>>
972
469
or
shift_expr -> arith_expr
469
<<
973
469
]
shift_expr -> arith_expr
469
^
shift_expr -> arith_expr
469
in
shift_expr -> arith_expr
469
,
shift_expr -> arith_expr
469
<=
shift_expr -> arith_expr
469
>=
shift_expr -> arith_expr
469
&
shift_expr -> arith_expr
469
==
shift_expr -> arith_expr
469
:
shift_expr -> arith_expr
469
not
shift_expr -> arith_expr
469
and
shift_expr -> arith_expr
469
>
shift_expr -> arith_expr
469
!=
shift_expr -> arith_expr
469
if
shift_expr -> arith_expr
469
|
shift_expr -> arith_expr
469
<
shift_expr -> arith_expr
469
is
shift_expr -> arith_expr
470
not
atom -> False
470
==
atom -> False
470
*
atom -> False
470
>
atom -> False
470
,
atom -> False
470
[
atom -> False
470
if
atom -> False
470
@
atom -> False
470
&
atom -> False
470
is
atom -> False
470
.
atom -> False
470
+
atom -> False
470
]
atom -> False
470
%
atom -> False
470
>=
atom -> False
470
and
atom -> False
470
(
atom -> False
470
|
atom -> False
470
-
atom -> False
470
:
atom -> False
470
/
atom -> False
470
in
atom -> False
470
<<
atom -> False
470
<=
atom -> False
470
^
atom -> False
470
//
atom -> False
470
>>
atom -> False
470
!=
atom -> False
470
**
atom -> False
470
or
atom -> False
470
<
atom -> False
471
}
974
472
NAME
131
472
atom_expr
132
472
atom
133
472
-
134
472
factor
136
472
)
975
472
[
137
472
True
138
472
arith_expr
139
472
False
140
472
{
141
472
+
142
472
and_expr
143
472
(
144
472
STRING
145
472
test_list_comp
976
472
power
147
472
term
148
472
comparison
149
472
shift_expr
150
472
test
151
472
not_test
152
472
or_test
153
472
lambda
154
472
None
155
472
xor_expr
156
472
expr
157
472
NUMBER
158
472
and_test
159
472
~
160
472
lambdef
161
472
not
162
472
test_list
163
473
NAME
461
473
atom_expr
462
473
atom
464
473
-
465
473
[
467
473
True
468
473
False
470
473
{
471
473
(
472
473
+
473
473
STRING
476
473
factor
977
473
power
481
473
None
482
473
NUMBER
485
473
~
487
474
^
978
474
<
xor_expr -> and_expr
474
]
xor_expr -> and_expr
474
<=
xor_expr -> and_expr
474
|
xor_expr -> and_expr
474
not
xor_expr -> and_expr
474
and
xor_expr -> and_expr
474
!=
xor_expr -> and_expr
474
or
xor_expr -> and_expr
474
>
xor_expr -> and_expr
474
>=
xor_expr -> and_expr
474
==
xor_expr -> and_expr
474
,
xor_expr -> and_expr
474
in
xor_expr -> and_expr
474
is
xor_expr -> and_expr
474
:
xor_expr -> and_expr
474
if
xor_expr -> and_expr
475
or
979
475
]
or_test -> and_test
475
if
or_test -> and_test
475
,
or_test -> and_test
475
:
or_test -> and_test
476
and
atom -> STRING
476
not
atom -> STRING
476
]
atom -> STRING
476
.
atom -> STRING
476
//
atom -> STRING
476
-
atom -> STRING
476
*
atom -> STRING
476
(
atom -> STRING
476
>=
atom -> STRING
476
<=
atom -> STRING
476
<<
atom -> STRING
476
if
atom -> STRING
476
+
atom -> STRING
476
or
atom -> STRING
476
/
atom -> STRING
476
@
atom -> STRING
476
in
atom -> STRING
476
>>
atom -> STRING
476
%
atom -> STRING
476
!=
atom -> STRING
476
,
atom -> STRING
476
>
atom -> STRING
476
^
atom -> STRING
476
<
atom -> STRING
476
:
atom -> STRING
476
==
atom -> STRING
476
**
atom -> STRING
476
&
atom -> STRING
476
|
atom -> STRING
476
is
atom -> STRING
476
[
atom -> STRING
477
]
980
478
:
not_test -> comparison
478
,
not_test -> comparison
478
or
not_test -> comparison
478
]
not_test -> comparison
478
if
not_test -> comparison
478
and
not_test -> comparison
479
==
and_expr -> shift_expr
479
&
981
479
!=
and_expr -> shift_expr
479
<
and_expr -> shift_expr
479
<=
and_expr -> shift_expr
479
and
and_expr -> shift_expr
479
in
and_expr -> shift_expr
479
^
and_expr -> shift_expr
479
:
and_expr -> shift_expr
479
not
and_expr -> shift_expr
479
]
and_expr -> shift_expr
479
is
and_expr -> shift_expr
479
if
and_expr -> shift_expr
479
,
and_expr -> shift_expr
479
>
and_expr -> shift_expr
479
or
and_expr -> shift_expr
479
>=
and_expr -> shift_expr
479
|
and_expr -> shift_expr
480
and
982
480
]
and_test -> not_test
480
if
and_test -> not_test
480
:
and_test -> not_test
480
or
and_test -> not_test
480
,
and_test -> not_test
481
<=
factor -> power
481
,
factor -> power
481
is
factor -> power
481
>
factor -> power
481
==
factor -> power
481
^
factor -> power
481
or
factor -> power
481
-
factor -> power
481
+
factor -> power
481
>>
factor -> power
481
]
factor -> power
481
/
factor -> power
481
*
factor -> power
481
<<
factor -> power
481
|
factor -> power
481
and
factor -> power
481
<
factor -> power
481
not
factor -> power
481
!=
factor -> power
481
:
factor -> power
481
if
factor -> power
481
&
factor -> power
481
in
factor -> power
481
%
factor -> power
481
>=
factor -> power
481
//
factor -> power
481
@
factor -> power
482
+
atom -> None
482
>>
atom -> None
482
/
atom -> None
482
or
atom -> None
482
*
atom -> None
482
in
atom -> None
482
**
atom -> None
482
==
atom -> None
482
-
atom -> None
482
if
atom -> None
482
(
atom -> None
482
@
atom -> None
482
:
atom -> None
482
>=
atom -> None
482
[
atom -> None
482
^
atom -> None
482
&
atom -> None
482
<=
atom -> None
482
is
atom -> None
482
]
atom -> None
482
.
atom -> None
482
not
atom -> None
482
//
atom -> None
482
<
atom -> None
482
<<
atom -> None
482
!=
atom -> None
482
and
atom -> None
482
%
atom -> None
482
|
atom -> None
482
,
atom -> None
482
>
atom -> None
483
|
983
483
>
expr -> xor_expr
483
<
expr -> xor_expr
483
]
expr -> xor_expr
483
and
expr -> xor_expr
483
>=
expr -> xor_expr
483
,
expr -> xor_expr
483
!=
expr -> xor_expr
483
or
expr -> xor_expr
483
in
expr -> xor_expr
483
is
expr -> xor_expr
483
if
expr -> xor_expr
483
==
expr -> xor_expr
483
<=
expr -> xor_expr
483
:
expr -> xor_expr
483
not
expr -> xor_expr
484
==
330
484
is
331
484
<=
332
484
comp_op
984
484
and
comparison -> expr
484
!=
334
484
>
335
484
not
336
484
in
337
484
]
comparison -> expr
484
or
comparison -> expr
484
<
338
484
>=
339
484
if
comparison -> expr
484
,
comparison -> expr
484
:
comparison -> expr
485
is
atom -> NUMBER
485
|
atom -> NUMBER
485
]
atom -> NUMBER
485
@
atom -> NUMBER
485
**
atom -> NUMBER
485
in
atom -> NUMBER
485
and
atom -> NUMBER
485
!=
atom -> NUMBER
485
if
atom -> NUMBER
485
-
atom -> NUMBER
485
<<
atom -> NUMBER
485
.
atom -> NUMBER
485
(
atom -> NUMBER
485
==
atom -> NUMBER
485
%
atom -> NUMBER
485
^
atom -> NUMBER
485
not
atom -> NUMBER
485
>=
atom -> NUMBER
485
:
atom -> NUMBER
485
,
atom -> NUMBER
485
/
atom -> NUMBER
485
//
atom -> NUMBER
485
>
atom -> NUMBER
485
&
atom -> NUMBER
485
[
atom -> NUMBER
485
<=
atom -> NUMBER
485
*
atom -> NUMBER
485
or
atom -> NUMBER
485
+
atom -> NUMBER
485
>>
atom -> NUMBER
485
<
atom -> NUMBER
486
:
maybe_test -> test
486
]
subscript -> test
486
,
subscript -> test
487
NAME
461
487
atom_expr
462
487
atom
464
487
-
465
487
[
467
487
True
468
487
False
470
487
{
471
487
(
472
487
+
473
487
factor
985
487
STRING
476
487
power
481
487
None
482
487
NUMBER
485
487
~
487
488
if
986
488
:
test -> or_test
488
]
test -> or_test
488
,
test -> or_test
489
NAME
461
489
atom_expr
462
489
term
463
489
atom
464
489
-
465
489
factor
466
489
[
467
489
True
468
489
arith_expr
469
489
False
470
489
{
471
489
(
472
489
+
473
489
and_expr
474
489
not_test
987
489
STRING
476
489
comparison
478
489
shift_expr
479
489
power
481
489
None
482
489
xor_expr
483
489
expr
484
489
NUMBER
485
489
~
487
489
not
489
490
]
test -> lambdef
490
:
test -> lambdef
490
,
test -> lambdef
491
:
988
491
vfpdef
343
491
NAME
342
491
varargslist
989
492
,
990
492
]
subscriptlist -> subscript
493
:
991
494
^
trailer -> . NAME
494
%
trailer -> . NAME
494
**
trailer -> . NAME
494
<<=
trailer -> . NAME
494
>>
trailer -> . NAME
494
>
trailer -> . NAME
494
|=
trailer -> . NAME
494
-=
trailer -> . NAME
494
in
trailer -> . NAME
494
[
trailer -> . NAME
494
**=
trailer -> . NAME
494
is
trailer -> . NAME
494
+=
trailer -> . NAME
494
,
trailer -> . NAME
494
<<
trailer -> . NAME
494
or
trailer -> . NAME
494
and
trailer -> . NAME
494
>=
trailer -> . NAME
494
|
trailer -> . NAME
494
==
trailer -> . NAME
494
>>=
trailer -> . NAME
494
=
trailer -> . NAME
494
.
trailer -> . NAME
494
%=
trailer -> . NAME
494
+
trailer -> . NAME
494
@=
trailer -> . NAME
494
<
trailer -> . NAME
494
*=
trailer -> . NAME
494
-
trailer -> . NAME
494
&
trailer -> . NAME
494
^=
trailer -> . NAME
494
//=
trailer -> . NAME
494
NEWLINE
trailer -> . NAME
494
*
trailer -> . NAME
494
if
trailer -> . NAME
494
<=
trailer -> . NAME
494
:
trailer -> . NAME
494
(
trailer -> . NAME
494
&=
trailer -> . NAME
494
/=
trailer -> . NAME
494
not
trailer -> . NAME
494
//
trailer -> . NAME
494
@
trailer -> . NAME
494
!=
trailer -> . NAME
494
/
trailer -> . NAME
495
*
trailer_expr -> trailer trailer_expr
495
^=
trailer_expr -> trailer trailer_expr
495
+
trailer_expr -> trailer trailer_expr
495
if
trailer_expr -> trailer trailer_expr
495
-
trailer_expr -> trailer trailer_expr
495
<=
trailer_expr -> trailer trailer_expr
495
|
trailer_expr -> trailer trailer_expr
495
@
trailer_expr -> trailer trailer_expr
495
%
trailer_expr -> trailer trailer_expr
495
in
trailer_expr -> trailer trailer_expr
495
**=
trailer_expr -> trailer trailer_expr
495
/=
trailer_expr -> trailer trailer_expr
495
<<
trailer_expr -> trailer trailer_expr
495
**
trailer_expr -> trailer trailer_expr
495
==
trailer_expr -> trailer trailer_expr
495
&=
trailer_expr -> trailer trailer_expr
495
not
trailer_expr -> trailer trailer_expr
495
,
trailer_expr -> trailer trailer_expr
495
*=
trailer_expr -> trailer trailer_expr
495
and
trailer_expr -> trailer trailer_expr
495
-=
trailer_expr -> trailer trailer_expr
495
<<=
trailer_expr -> trailer trailer_expr
495
@=
trailer_expr -> trailer trailer_expr
495
//
trailer_expr -> trailer trailer_expr
495
//=
trailer_expr -> trailer trailer_expr
495
NEWLINE
trailer_expr -> trailer trailer_expr
495
^
trailer_expr -> trailer trailer_expr
495
or
trailer_expr -> trailer trailer_expr
495
=
trailer_expr -> trailer trailer_expr
495
>
trailer_expr -> trailer trailer_expr
495
!=
trailer_expr -> trailer trailer_expr
495
is
trailer_expr -> trailer trailer_expr
495
:
trailer_expr -> trailer trailer_expr
495
+=
trailer_expr -> trailer trailer_expr
495
&
trailer_expr -> trailer trailer_expr
495
>>
trailer_expr -> trailer trailer_expr
495
/
trailer_expr -> trailer trailer_expr
495
|=
trailer_expr -> trailer trailer_expr
495
%=
trailer_expr -> trailer trailer_expr
495
<
trailer_expr -> trailer trailer_expr
495
>=
trailer_expr -> trailer trailer_expr
495
>>=
trailer_expr -> trailer trailer_expr
496
.
atom -> NAME
496
<
atom -> NAME
496
|
atom -> NAME
496
not
atom -> NAME
496
[
atom -> NAME
496
,
atom -> NAME
496
+
atom -> NAME
496
%
atom -> NAME
496
for
atom -> NAME
496
)
atom -> NAME
496
<=
atom -> NAME
496
=
atom -> NAME
496
*
atom -> NAME
496
!=
atom -> NAME
496
in
atom -> NAME
496
if
atom -> NAME
496
is
atom -> NAME
496
(
atom -> NAME
496
^
atom -> NAME
496
@
atom -> NAME
496
&
atom -> NAME
496
>>
atom -> NAME
496
<<
atom -> NAME
496
-
atom -> NAME
496
/
atom -> NAME
496
or
atom -> NAME
496
//
atom -> NAME
496
>=
atom -> NAME
496
and
atom -> NAME
496
>
atom -> NAME
496
==
atom -> NAME
496
**
atom -> NAME
497
**
992
497
)
power -> atom_expr
497
and
power -> atom_expr
497
^
power -> atom_expr
497
or
power -> atom_expr
497
>>
power -> atom_expr
497
if
power -> atom_expr
497
<
power -> atom_expr
497
>=
power -> atom_expr
497
=
power -> atom_expr
497
for
power -> atom_expr
497
!=
power -> atom_expr
497
is
power -> atom_expr
497
<=
power -> atom_expr
497
not
power -> atom_expr
497
//
power -> atom_expr
497
+
power -> atom_expr
497
==
power -> atom_expr
497
|
power -> atom_expr
497
-
power -> atom_expr
497
&
power -> atom_expr
497
/
power -> atom_expr
497
@
power -> atom_expr
497
<<
power -> atom_expr
497
,
power -> atom_expr
497
%
power -> atom_expr
497
*
power -> atom_expr
497
in
power -> atom_expr
497
>
power -> atom_expr
498
trailer
993
498
trailer_expr
994
498
[
995
498
.
996
498
or
trailer_expr -> 
498
(
997
498
not
trailer_expr -> 
498
in
trailer_expr -> 
498
is
trailer_expr -> 
498
>=
trailer_expr -> 
498
-
trailer_expr -> 
498
@
trailer_expr -> 
498
<=
trailer_expr -> 
498
)
trailer_expr -> 
498
,
trailer_expr -> 
498
^
trailer_expr -> 
498
*
trailer_expr -> 
498
for
trailer_expr -> 
498
if
trailer_expr -> 
498
**
trailer_expr -> 
498
=
trailer_expr -> 
498
>
trailer_expr -> 
498
==
trailer_expr -> 
498
>>
trailer_expr -> 
498
<<
trailer_expr -> 
498
/
trailer_expr -> 
498
//
trailer_expr -> 
498
!=
trailer_expr -> 
498
<
trailer_expr -> 
498
&
trailer_expr -> 
498
|
trailer_expr -> 
498
and
trailer_expr -> 
498
+
trailer_expr -> 
498
%
trailer_expr -> 
499
NAME
496
499
atom_expr
497
499
atom
498
499
-
499
499
factor
998
499
[
503
499
True
504
499
False
507
499
{
509
499
+
510
499
(
513
499
STRING
514
499
power
515
499
None
524
499
NUMBER
527
499
~
529
500
)
999
501
%
1000
501
/
1001
501
*
1002
501
//
1003
501
@
1004
501
not
term -> factor
501
<<
term -> factor
501
or
term -> factor
501
^
term -> factor
501
in
term -> factor
501
if
term -> factor
501
and
term -> factor
501
<=
term -> factor
501
&
term -> factor
501
,
term -> factor
501
>>
term -> factor
501
=
term -> factor
501
>
term -> factor
501
|
term -> factor
501
<
term -> factor
501
is
term -> factor
501
!=
term -> factor
501
>=
term -> factor
501
==
term -> factor
501
-
term -> factor
501
+
term -> factor
501
)
term -> factor
501
for
term -> factor
502
NAME
1005
502
atom_expr
1006
502
atom
1007
502
-
1008
502
factor
1009
502
[
1010
502
True
1011
502
arith_expr
1012
502
False
1013
502
{
1014
502
+
1015
502
and_expr
1016
502
(
1017
502
STRING
1018
502
power
1019
502
term
1020
502
comparison
1021
502
shift_expr
1022
502
not_test
1023
502
or_test
1024
502
lambda
1025
502
None
1026
502
xor_expr
1027
502
expr
1028
502
NUMBER
1029
502
and_test
1030
502
~
1031
502
test
1032
502
lambdef
1033
502
not
1034
503
NAME
187
503
atom_expr
188
503
atom
189
503
-
190
503
factor
191
503
test_list_comp
1035
503
[
193
503
True
194
503
arith_expr
195
503
False
196
503
{
197
503
+
198
503
and_expr
199
503
(
200
503
STRING
201
503
]
1036
503
term
203
503
and_test
204
503
comparison
205
503
shift_expr
206
503
not_test
207
503
power
208
503
or_test
209
503
None
210
503
xor_expr
211
503
expr
212
503
NUMBER
213
503
lambda
214
503
~
215
503
lambdef
216
503
not
217
503
test
218
503
test_list
219
504
!=
atom -> True
504
&
atom -> True
504
+
atom -> True
504
<<
atom -> True
504
@
atom -> True
504
,
atom -> True
504
if
atom -> True
504
and
atom -> True
504
is
atom -> True
504
|
atom -> True
504
<
atom -> True
504
>=
atom -> True
504
or
atom -> True
504
=
atom -> True
504
==
atom -> True
504
%
atom -> True
504
for
atom -> True
504
>
atom -> True
504
*
atom -> True
504
[
atom -> True
504
)
atom -> True
504
//
atom -> True
504
/
atom -> True
504
in
atom -> True
504
-
atom -> True
504
^
atom -> True
504
<=
atom -> True
504
(
atom -> True
504
**
atom -> True
504
.
atom -> True
504
not
atom -> True
504
>>
atom -> True
505
or
shift_expr -> arith_expr
505
>>
1037
505
<<
1038
505
)
shift_expr -> arith_expr
505
^
shift_expr -> arith_expr
505
in
shift_expr -> arith_expr
505
,
shift_expr -> arith_expr
505
<=
shift_expr -> arith_expr
505
>=
shift_expr -> arith_expr
505
&
shift_expr -> arith_expr
505
==
shift_expr -> arith_expr
505
for
shift_expr -> arith_expr
505
=
shift_expr -> arith_expr
505
not
shift_expr -> arith_expr
505
and
shift_expr -> arith_expr
505
>
shift_expr -> arith_expr
505
!=
shift_expr -> arith_expr
505
if
shift_expr -> arith_expr
505
|
shift_expr -> arith_expr
505
<
shift_expr -> arith_expr
505
is
shift_expr -> arith_expr
506
|
1039
506
>
expr -> xor_expr
506
<
expr -> xor_expr
506
and
expr -> xor_expr
506
>=
expr -> xor_expr
506
for
expr -> xor_expr
506
,
expr -> xor_expr
506
!=
expr -> xor_expr
506
or
expr -> xor_expr
506
in
expr -> xor_expr
506
is
expr -> xor_expr
506
if
expr -> xor_expr
506
==
expr -> xor_expr
506
=
expr -> xor_expr
506
)
expr -> xor_expr
506
<=
expr -> xor_expr
506
not
expr -> xor_expr
507
not
atom -> False
507
==
atom -> False
507
)
atom -> False
507
*
atom -> False
507
>
atom -> False
507
,
atom -> False
507
[
atom -> False
507
if
atom -> False
507
@
atom -> False
507
&
atom -> False
507
is
atom -> False
507
.
atom -> False
507
=
atom -> False
507
+
atom -> False
507
%
atom -> False
507
>=
atom -> False
507
and
atom -> False
507
(
atom -> False
507
|
atom -> False
507
-
atom -> False
507
/
atom -> False
507
in
atom -> False
507
<<
atom -> False
507
<=
atom -> False
507
^
atom -> False
507
//
atom -> False
507
>>
atom -> False
507
!=
atom -> False
507
**
atom -> False
507
for
atom -> False
507
or
atom -> False
507
<
atom -> False
508
NAME
1005
508
atom_expr
1006
508
atom
1007
508
-
1008
508
factor
1009
508
[
1010
508
True
1011
508
arith_expr
1012
508
False
1013
508
{
1014
508
+
1015
508
and_expr
1016
508
(
1017
508
STRING
1018
508
power
1019
508
term
1020
508
comparison
1021
508
shift_expr
1022
508
not_test
1023
508
or_test
1024
508
lambda
1025
508
test
1040
508
None
1026
508
xor_expr
1027
508
expr
1028
508
NUMBER
1029
508
and_test
1030
508
~
1031
508
lambdef
1033
508
not
1034
509
}
1041
510
NAME
496
510
atom_expr
497
510
atom
498
510
-
499
510
[
503
510
True
504
510
False
507
510
{
509
510
+
510
510
(
513
510
STRING
514
510
power
515
510
factor
1042
510
None
524
510
NUMBER
527
510
~
529
511
+=
trailer -> ( )
511
[
trailer -> ( )
511
not
trailer -> ( )
511
==
trailer -> ( )
511
**
trailer -> ( )
511
,
trailer -> ( )
511
<<=
trailer -> ( )
511
:
trailer -> ( )
511
<=
trailer -> ( )
511
//
trailer -> ( )
511
<<
trailer -> ( )
511
<
trailer -> ( )
511
-=
trailer -> ( )
511
=
trailer -> ( )
511
/=
trailer -> ( )
511
in
trailer -> ( )
511
or
trailer -> ( )
511
-
trailer -> ( )
511
+
trailer -> ( )
511
&
trailer -> ( )
511
%=
trailer -> ( )
511
*
trailer -> ( )
511
>>=
trailer -> ( )
511
>
trailer -> ( )
511
is
trailer -> ( )
511
&=
trailer -> ( )
511
!=
trailer -> ( )
511
>>
trailer -> ( )
511
//=
trailer -> ( )
511
%
trailer -> ( )
511
**=
trailer -> ( )
511
|
trailer -> ( )
511
.
trailer -> ( )
511
|=
trailer -> ( )
511
>=
trailer -> ( )
511
(
trailer -> ( )
511
and
trailer -> ( )
511
*=
trailer -> ( )
511
@
trailer -> ( )
511
NEWLINE
trailer -> ( )
511
/
trailer -> ( )
511
^
trailer -> ( )
511
@=
trailer -> ( )
511
if
trailer -> ( )
511
^=
trailer -> ( )
512
^
1043
512
<
xor_expr -> and_expr
512
<=
xor_expr -> and_expr
512
|
xor_expr -> and_expr
512
not
xor_expr -> and_expr
512
and
xor_expr -> and_expr
512
)
xor_expr -> and_expr
512
for
xor_expr -> and_expr
512
!=
xor_expr -> and_expr
512
or
xor_expr -> and_expr
512
>
xor_expr -> and_expr
512
>=
xor_expr -> and_expr
512
==
xor_expr -> and_expr
512
,
xor_expr -> and_expr
512
=
xor_expr -> and_expr
512
in
xor_expr -> and_expr
512
is
xor_expr -> and_expr
512
if
xor_expr -> and_expr
513
NAME
131
513
atom_expr
132
513
atom
133
513
-
134
513
)
1044
513
factor
136
513
[
137
513
True
138
513
arith_expr
139
513
False
140
513
{
141
513
+
142
513
and_expr
143
513
(
144
513
STRING
145
513
test_list_comp
1045
513
power
147
513
term
148
513
comparison
149
513
shift_expr
150
513
test
151
513
not_test
152
513
or_test
153
513
lambda
154
513
None
155
513
xor_expr
156
513
expr
157
513
NUMBER
158
513
and_test
159
513
~
160
513
lambdef
161
513
not
162
513
test_list
163
514
and
atom -> STRING
514
not
atom -> STRING
514
.
atom -> STRING
514
//
atom -> STRING
514
-
atom -> STRING
514
*
atom -> STRING
514
(
atom -> STRING
514
>=
atom -> STRING
514
<=
atom -> STRING
514
<<
atom -> STRING
514
if
atom -> STRING
514
+
atom -> STRING
514
or
atom -> STRING
514
=
atom -> STRING
514
/
atom -> STRING
514
@
atom -> STRING
514
in
atom -> STRING
514
>>
atom -> STRING
514
%
atom -> STRING
514
!=
atom -> STRING
514
,
atom -> STRING
514
>
atom -> STRING
514
^
atom -> STRING
514
<
atom -> STRING
514
==
atom -> STRING
514
for
atom -> STRING
514
**
atom -> STRING
514
&
atom -> STRING
514
|
atom -> STRING
514
is
atom -> STRING
514
)
atom -> STRING
514
[
atom -> STRING
515
<=
factor -> power
515
,
factor -> power
515
is
factor -> power
515
>
factor -> power
515
)
factor -> power
515
==
factor -> power
515
^
factor -> power
515
or
factor -> power
515
-
factor -> power
515
+
factor -> power
515
>>
factor -> power
515
/
factor -> power
515
*
factor -> power
515
<<
factor -> power
515
|
factor -> power
515
and
factor -> power
515
<
factor -> power
515
not
factor -> power
515
!=
factor -> power
515
if
factor -> power
515
&
factor -> power
515
in
factor -> power
515
for
factor -> power
515
%
factor -> power
515
=
factor -> power
515
>=
factor -> power
515
//
factor -> power
515
@
factor -> power
516
+
1046
516
or
arith_expr -> term
516
)
arith_expr -> term
516
==
arith_expr -> term
516
-
1047
516
in
arith_expr -> term
516
<<
arith_expr -> term
516
>
arith_expr -> term
516
is
arith_expr -> term
516
>=
arith_expr -> term
516
=
arith_expr -> term
516
<=
arith_expr -> term
516
and
arith_expr -> term
516
>>
arith_expr -> term
516
for
arith_expr -> term
516
!=
arith_expr -> term
516
not
arith_expr -> term
516
&
arith_expr -> term
516
,
arith_expr -> term
516
if
arith_expr -> term
516
<
arith_expr -> term
516
^
arith_expr -> term
516
|
arith_expr -> term
517
=
not_test -> comparison
517
if
not_test -> comparison
517
)
not_test -> comparison
517
for
not_test -> comparison
517
or
not_test -> comparison
517
,
not_test -> comparison
517
and
not_test -> comparison
518
==
and_expr -> shift_expr
518
&
1048
518
!=
and_expr -> shift_expr
518
<
and_expr -> shift_expr
518
<=
and_expr -> shift_expr
518
and
and_expr -> shift_expr
518
in
and_expr -> shift_expr
518
=
and_expr -> shift_expr
518
^
and_expr -> shift_expr
518
for
and_expr -> shift_expr
518
not
and_expr -> shift_expr
518
is
and_expr -> shift_expr
518
if
and_expr -> shift_expr
518
,
and_expr -> shift_expr
518
>
and_expr -> shift_expr
518
or
and_expr -> shift_expr
518
>=
and_expr -> shift_expr
518
)
and_expr -> shift_expr
518
|
and_expr -> shift_expr
519
)
arglist -> argument
519
,
1049
520
and
1050
520
for
and_test -> not_test
520
if
and_test -> not_test
520
=
and_test -> not_test
520
)
and_test -> not_test
520
or
and_test -> not_test
520
,
and_test -> not_test
521
=
test -> or_test
521
if
1051
521
for
test -> or_test
521
,
test -> or_test
521
)
test -> or_test
522
for
test -> lambdef
522
=
test -> lambdef
522
)
test -> lambdef
522
,
test -> lambdef
523
varargslist
1052
523
:
1053
523
vfpdef
343
523
NAME
342
524
+
atom -> None
524
for
atom -> None
524
>>
atom -> None
524
/
atom -> None
524
or
atom -> None
524
*
atom -> None
524
in
atom -> None
524
**
atom -> None
524
==
atom -> None
524
-
atom -> None
524
if
atom -> None
524
(
atom -> None
524
@
atom -> None
524
)
atom -> None
524
[
atom -> None
524
>=
atom -> None
524
=
atom -> None
524
^
atom -> None
524
&
atom -> None
524
<=
atom -> None
524
is
atom -> None
524
.
atom -> None
524
not
atom -> None
524
//
atom -> None
524
<
atom -> None
524
<<
atom -> None
524
!=
atom -> None
524
and
atom -> None
524
%
atom -> None
524
|
atom -> None
524
,
atom -> None
524
>
atom -> None
525
comp_for
1054
525
for
1055
525
=
1056
525
,
argument -> test
525
)
argument -> test
526
==
330
526
is
331
526
<=
332
526
comp_op
1057
526
and
comparison -> expr
526
!=
334
526
>
335
526
not
336
526
in
337
526
for
comparison -> expr
526
or
comparison -> expr
526
<
338
526
>=
339
526
)
comparison -> expr
526
if
comparison -> expr
526
,
comparison -> expr
526
=
comparison -> expr
527
is
atom -> NUMBER
527
|
atom -> NUMBER
527
=
atom -> NUMBER
527
in
atom -> NUMBER
527
@
atom -> NUMBER
527
**
atom -> NUMBER
527
and
atom -> NUMBER
527
!=
atom -> NUMBER
527
if
atom -> NUMBER
527
-
atom -> NUMBER
527
<<
atom -> NUMBER
527
.
atom -> NUMBER
527
(
atom -> NUMBER
527
==
atom -> NUMBER
527
%
atom -> NUMBER
527
^
atom -> NUMBER
527
not
atom -> NUMBER
527
>=
atom -> NUMBER
527
,
atom -> NUMBER
527
/
atom -> NUMBER
527
)
atom -> NUMBER
527
//
atom -> NUMBER
527
>
atom -> NUMBER
527
&
atom -> NUMBER
527
[
atom -> NUMBER
527
<=
atom -> NUMBER
527
*
atom -> NUMBER
527
or
atom -> NUMBER
527
for
atom -> NUMBER
527
>>
atom -> NUMBER
527
+
atom -> NUMBER
527
<
atom -> NUMBER
528
or
1058
528
)
or_test -> and_test
528
=
or_test -> and_test
528
for
or_test -> and_test
528
if
or_test -> and_test
528
,
or_test -> and_test
529
NAME
496
529
atom_expr
497
529
atom
498
529
-
499
529
[
503
529
True
504
529
False
507
529
{
509
529
+
510
529
factor
1059
529
(
513
529
STRING
514
529
power
515
529
None
524
529
NUMBER
527
529
~
529
530
NAME
496
530
atom_expr
497
530
atom
498
530
-
499
530
factor
501
530
[
503
530
True
504
530
arith_expr
505
530
xor_expr
506
530
False
507
530
{
509
530
+
510
530
and_expr
512
530
(
513
530
STRING
514
530
power
515
530
term
516
530
comparison
517
530
shift_expr
518
530
not_test
1060
530
None
524
530
expr
526
530
NUMBER
527
530
~
529
530
not
530
531
+=
power -> atom_expr ** factor
531
>>
power -> atom_expr ** factor
531
<=
power -> atom_expr ** factor
531
:
power -> atom_expr ** factor
531
//=
power -> atom_expr ** factor
531
//
power -> atom_expr ** factor
531
/
power -> atom_expr ** factor
531
&
power -> atom_expr ** factor
531
>>=
power -> atom_expr ** factor
531
if
power -> atom_expr ** factor
531
not
power -> atom_expr ** factor
531
-=
power -> atom_expr ** factor
531
<
power -> atom_expr ** factor
531
<<=
power -> atom_expr ** factor
531
,
power -> atom_expr ** factor
531
>
power -> atom_expr ** factor
531
!=
power -> atom_expr ** factor
531
==
power -> atom_expr ** factor
531
*
power -> atom_expr ** factor
531
|
power -> atom_expr ** factor
531
NEWLINE
power -> atom_expr ** factor
531
is
power -> atom_expr ** factor
531
and
power -> atom_expr ** factor
531
^=
power -> atom_expr ** factor
531
*=
power -> atom_expr ** factor
531
<<
power -> atom_expr ** factor
531
-
power -> atom_expr ** factor
531
=
power -> atom_expr ** factor
531
|=
power -> atom_expr ** factor
531
/=
power -> atom_expr ** factor
531
@
power -> atom_expr ** factor
531
in
power -> atom_expr ** factor
531
@=
power -> atom_expr ** factor
531
**=
power -> atom_expr ** factor
531
&=
power -> atom_expr ** factor
531
^
power -> atom_expr ** factor
531
%
power -> atom_expr ** factor
531
>=
power -> atom_expr ** factor
531
%=
power -> atom_expr ** factor
531
+
power -> atom_expr ** factor
531
or
power -> atom_expr ** factor
532
>=
and_expr -> shift_expr & and_expr
532
!=
and_expr -> shift_expr & and_expr
532
or
and_expr -> shift_expr & and_expr
532
<
and_expr -> shift_expr & and_expr
532
>
and_expr -> shift_expr & and_expr
532
//=
and_expr -> shift_expr & and_expr
532
and
and_expr -> shift_expr & and_expr
532
NEWLINE
and_expr -> shift_expr & and_expr
532
@=
and_expr -> shift_expr & and_expr
532
is
and_expr -> shift_expr & and_expr
532
%=
and_expr -> shift_expr & and_expr
532
&=
and_expr -> shift_expr & and_expr
532
|=
and_expr -> shift_expr & and_expr
532
|
and_expr -> shift_expr & and_expr
532
<<=
and_expr -> shift_expr & and_expr
532
if
and_expr -> shift_expr & and_expr
532
,
and_expr -> shift_expr & and_expr
532
=
and_expr -> shift_expr & and_expr
532
**=
and_expr -> shift_expr & and_expr
532
>>=
and_expr -> shift_expr & and_expr
532
not
and_expr -> shift_expr & and_expr
532
in
and_expr -> shift_expr & and_expr
532
<=
and_expr -> shift_expr & and_expr
532
*=
and_expr -> shift_expr & and_expr
532
-=
and_expr -> shift_expr & and_expr
532
^
and_expr -> shift_expr & and_expr
532
^=
and_expr -> shift_expr & and_expr
532
==
and_expr -> shift_expr & and_expr
532
/=
and_expr -> shift_expr & and_expr
532
:
and_expr -> shift_expr & and_expr
532
+=
and_expr -> shift_expr & and_expr
533
@=
shift_expr -> arith_expr << shift_expr
533
-=
shift_expr -> arith_expr << shift_expr
533
>=
shift_expr -> arith_expr << shift_expr
533
%=
shift_expr -> arith_expr << shift_expr
533
or
shift_expr -> arith_expr << shift_expr
533
*=
shift_expr -> arith_expr << shift_expr
533
&=
shift_expr -> arith_expr << shift_expr
533
>
shift_expr -> arith_expr << shift_expr
533
+=
shift_expr -> arith_expr << shift_expr
533
<<=
shift_expr -> arith_expr << shift_expr
533
in
shift_expr -> arith_expr << shift_expr
533
/=
shift_expr -> arith_expr << shift_expr
533
!=
shift_expr -> arith_expr << shift_expr
533
^
shift_expr -> arith_expr << shift_expr
533
|
shift_expr -> arith_expr << shift_expr
533
<
shift_expr -> arith_expr << shift_expr
533
:
shift_expr -> arith_expr << shift_expr
533
and
shift_expr -> arith_expr << shift_expr
533
^=
shift_expr -> arith_expr << shift_expr
533
not
shift_expr -> arith_expr << shift_expr
533
&
shift_expr -> arith_expr << shift_expr
533
=
shift_expr -> arith_expr << shift_expr
533
is
shift_expr -> arith_expr << shift_expr
533
if
shift_expr -> arith_expr << shift_expr
533
NEWLINE
shift_expr -> arith_expr << shift_expr
533
//=
shift_expr -> arith_expr << shift_expr
533
,
shift_expr -> arith_expr << shift_expr
533
**=
shift_expr -> arith_expr << shift_expr
533
<=
shift_expr -> arith_expr << shift_expr
533
|=
shift_expr -> arith_expr << shift_expr
533
>>=
shift_expr -> arith_expr << shift_expr
533
==
shift_expr -> arith_expr << shift_expr
534
NEWLINE
shift_expr -> arith_expr >> shift_expr
534
^
shift_expr -> arith_expr >> shift_expr
534
&=
shift_expr -> arith_expr >> shift_expr
534
-=
shift_expr -> arith_expr >> shift_expr
534
<<=
shift_expr -> arith_expr >> shift_expr
534
>=
shift_expr -> arith_expr >> shift_expr
534
|=
shift_expr -> arith_expr >> shift_expr
534
|
shift_expr -> arith_expr >> shift_expr
534
>
shift_expr -> arith_expr >> shift_expr
534
<=
shift_expr -> arith_expr >> shift_expr
534
@=
shift_expr -> arith_expr >> shift_expr
534
/=
shift_expr -> arith_expr >> shift_expr
534
>>=
shift_expr -> arith_expr >> shift_expr
534
is
shift_expr -> arith_expr >> shift_expr
534
,
shift_expr -> arith_expr >> shift_expr
534
:
shift_expr -> arith_expr >> shift_expr
534
&
shift_expr -> arith_expr >> shift_expr
534
*=
shift_expr -> arith_expr >> shift_expr
534
<
shift_expr -> arith_expr >> shift_expr
534
%=
shift_expr -> arith_expr >> shift_expr
534
in
shift_expr -> arith_expr >> shift_expr
534
+=
shift_expr -> arith_expr >> shift_expr
534
and
shift_expr -> arith_expr >> shift_expr
534
not
shift_expr -> arith_expr >> shift_expr
534
^=
shift_expr -> arith_expr >> shift_expr
534
==
shift_expr -> arith_expr >> shift_expr
534
if
shift_expr -> arith_expr >> shift_expr
534
=
shift_expr -> arith_expr >> shift_expr
534
//=
shift_expr -> arith_expr >> shift_expr
534
!=
shift_expr -> arith_expr >> shift_expr
534
or
shift_expr -> arith_expr >> shift_expr
534
**=
shift_expr -> arith_expr >> shift_expr
535
^=
xor_expr -> and_expr ^ xor_expr
535
and
xor_expr -> and_expr ^ xor_expr
535
>
xor_expr -> and_expr ^ xor_expr
535
//=
xor_expr -> and_expr ^ xor_expr
535
<<=
xor_expr -> and_expr ^ xor_expr
535
if
xor_expr -> and_expr ^ xor_expr
535
&=
xor_expr -> and_expr ^ xor_expr
535
/=
xor_expr -> and_expr ^ xor_expr
535
|=
xor_expr -> and_expr ^ xor_expr
535
<=
xor_expr -> and_expr ^ xor_expr
535
!=
xor_expr -> and_expr ^ xor_expr
535
*=
xor_expr -> and_expr ^ xor_expr
535
in
xor_expr -> and_expr ^ xor_expr
535
or
xor_expr -> and_expr ^ xor_expr
535
>>=
xor_expr -> and_expr ^ xor_expr
535
==
xor_expr -> and_expr ^ xor_expr
535
=
xor_expr -> and_expr ^ xor_expr
535
not
xor_expr -> and_expr ^ xor_expr
535
%=
xor_expr -> and_expr ^ xor_expr
535
**=
xor_expr -> and_expr ^ xor_expr
535
+=
xor_expr -> and_expr ^ xor_expr
535
is
xor_expr -> and_expr ^ xor_expr
535
NEWLINE
xor_expr -> and_expr ^ xor_expr
535
>=
xor_expr -> and_expr ^ xor_expr
535
,
xor_expr -> and_expr ^ xor_expr
535
-=
xor_expr -> and_expr ^ xor_expr
535
@=
xor_expr -> and_expr ^ xor_expr
535
<
xor_expr -> and_expr ^ xor_expr
535
:
xor_expr -> and_expr ^ xor_expr
535
|
xor_expr -> and_expr ^ xor_expr
536
NEWLINE
1061
537
^=
term -> factor / term
537
,
term -> factor / term
537
+=
term -> factor / term
537
>>
term -> factor / term
537
<<=
term -> factor / term
537
^
term -> factor / term
537
NEWLINE
term -> factor / term
537
or
term -> factor / term
537
:
term -> factor / term
537
+
term -> factor / term
537
=
term -> factor / term
537
&=
term -> factor / term
537
if
term -> factor / term
537
/=
term -> factor / term
537
//=
term -> factor / term
537
>=
term -> factor / term
537
>
term -> factor / term
537
|=
term -> factor / term
537
-
term -> factor / term
537
@=
term -> factor / term
537
and
term -> factor / term
537
**=
term -> factor / term
537
not
term -> factor / term
537
<
term -> factor / term
537
in
term -> factor / term
537
==
term -> factor / term
537
*=
term -> factor / term
537
<=
term -> factor / term
537
is
term -> factor / term
537
&
term -> factor / term
537
<<
term -> factor / term
537
-=
term -> factor / term
537
!=
term -> factor / term
537
|
term -> factor / term
537
%=
term -> factor / term
537
>>=
term -> factor / term
538
NEWLINE
term -> factor % term
538
|
term -> factor % term
538
<<
term -> factor % term
538
>>=
term -> factor % term
538
^
term -> factor % term
538
==
term -> factor % term
538
<<=
term -> factor % term
538
+=
term -> factor % term
538
-
term -> factor % term
538
=
term -> factor % term
538
,
term -> factor % term
538
|=
term -> factor % term
538
:
term -> factor % term
538
is
term -> factor % term
538
*=
term -> factor % term
538
/=
term -> factor % term
538
>=
term -> factor % term
538
>>
term -> factor % term
538
>
term -> factor % term
538
in
term -> factor % term
538
//=
term -> factor % term
538
%=
term -> factor % term
538
&
term -> factor % term
538
if
term -> factor % term
538
@=
term -> factor % term
538
<
term -> factor % term
538
!=
term -> factor % term
538
<=
term -> factor % term
538
not
term -> factor % term
538
+
term -> factor % term
538
-=
term -> factor % term
538
**=
term -> factor % term
538
and
term -> factor % term
538
or
term -> factor % term
538
&=
term -> factor % term
538
^=
term -> factor % term
539
&=
term -> factor // term
539
if
term -> factor // term
539
<
term -> factor // term
539
<<=
term -> factor // term
539
and
term -> factor // term
539
%=
term -> factor // term
539
^=
term -> factor // term
539
in
term -> factor // term
539
,
term -> factor // term
539
>>
term -> factor // term
539
@=
term -> factor // term
539
<=
term -> factor // term
539
!=
term -> factor // term
539
^
term -> factor // term
539
=
term -> factor // term
539
|
term -> factor // term
539
-=
term -> factor // term
539
or
term -> factor // term
539
+=
term -> factor // term
539
NEWLINE
term -> factor // term
539
>=
term -> factor // term
539
&
term -> factor // term
539
/=
term -> factor // term
539
>
term -> factor // term
539
+
term -> factor // term
539
is
term -> factor // term
539
|=
term -> factor // term
539
not
term -> factor // term
539
//=
term -> factor // term
539
<<
term -> factor // term
539
:
term -> factor // term
539
-
term -> factor // term
539
**=
term -> factor // term
539
>>=
term -> factor // term
539
*=
term -> factor // term
539
==
term -> factor // term
540
>>
term -> factor @ term
540
^
term -> factor @ term
540
&
term -> factor @ term
540
@=
term -> factor @ term
540
|
term -> factor @ term
540
%=
term -> factor @ term
540
=
term -> factor @ term
540
/=
term -> factor @ term
540
if
term -> factor @ term
540
is
term -> factor @ term
540
<
term -> factor @ term
540
<<
term -> factor @ term
540
NEWLINE
term -> factor @ term
540
*=
term -> factor @ term
540
and
term -> factor @ term
540
==
term -> factor @ term
540
>
term -> factor @ term
540
|=
term -> factor @ term
540
in
term -> factor @ term
540
-=
term -> factor @ term
540
,
term -> factor @ term
540
>=
term -> factor @ term
540
&=
term -> factor @ term
540
:
term -> factor @ term
540
+
term -> factor @ term
540
**=
term -> factor @ term
540
not
term -> factor @ term
540
^=
term -> factor @ term
540
<=
term -> factor @ term
540
!=
term -> factor @ term
540
+=
term -> factor @ term
540
<<=
term -> factor @ term
540
>>=
term -> factor @ term
540
or
term -> factor @ term
540
//=
term -> factor @ term
540
-
term -> factor @ term
541
|=
term -> factor * term
541
NEWLINE
term -> factor * term
541
-
term -> factor * term
541
&
term -> factor * term
541
and
term -> factor * term
541
,
term -> factor * term
541
!=
term -> factor * term
541
|
term -> factor * term
541
//=
term -> factor * term
541
*=
term -> factor * term
541
<<
term -> factor * term
541
<
term -> factor * term
541
=
term -> factor * term
541
/=
term -> factor * term
541
if
term -> factor * term
541
^
term -> factor * term
541
%=
term -> factor * term
541
-=
term -> factor * term
541
+
term -> factor * term
541
or
term -> factor * term
541
in
term -> factor * term
541
@=
term -> factor * term
541
^=
term -> factor * term
541
>>
term -> factor * term
541
<<=
term -> factor * term
541
&=
term -> factor * term
541
not
term -> factor * term
541
:
term -> factor * term
541
==
term -> factor * term
541
>>=
term -> factor * term
541
>=
term -> factor * term
541
<=
term -> factor * term
541
**=
term -> factor * term
541
>
term -> factor * term
541
is
term -> factor * term
541
+=
term -> factor * term
542
NAME
131
542
atom_expr
132
542
atom
133
542
-
134
542
[
137
542
True
138
542
False
140
542
{
141
542
+
142
542
(
144
542
STRING
145
542
power
147
542
factor
1062
542
None
155
542
NUMBER
158
542
~
160
543
trailer
543
543
trailer_expr
1063
543
[
545
543
.
546
543
or
trailer_expr -> 
543
(
547
543
not
trailer_expr -> 
543
in
trailer_expr -> 
543
is
trailer_expr -> 
543
>=
trailer_expr -> 
543
-
trailer_expr -> 
543
@
trailer_expr -> 
543
<=
trailer_expr -> 
543
)
trailer_expr -> 
543
,
trailer_expr -> 
543
^
trailer_expr -> 
543
*
trailer_expr -> 
543
for
trailer_expr -> 
543
if
trailer_expr -> 
543
**
trailer_expr -> 
543
>
trailer_expr -> 
543
==
trailer_expr -> 
543
>>
trailer_expr -> 
543
<<
trailer_expr -> 
543
/
trailer_expr -> 
543
//
trailer_expr -> 
543
!=
trailer_expr -> 
543
<
trailer_expr -> 
543
&
trailer_expr -> 
543
|
trailer_expr -> 
543
and
trailer_expr -> 
543
+
trailer_expr -> 
543
%
trailer_expr -> 
544
|
atom_expr -> atom trailer_expr
544
)
atom_expr -> atom trailer_expr
544
*
atom_expr -> atom trailer_expr
544
-
atom_expr -> atom trailer_expr
544
not
atom_expr -> atom trailer_expr
544
in
atom_expr -> atom trailer_expr
544
and
atom_expr -> atom trailer_expr
544
^
atom_expr -> atom trailer_expr
544
or
atom_expr -> atom trailer_expr
544
<=
atom_expr -> atom trailer_expr
544
<
atom_expr -> atom trailer_expr
544
>>
atom_expr -> atom trailer_expr
544
//
atom_expr -> atom trailer_expr
544
!=
atom_expr -> atom trailer_expr
544
<<
atom_expr -> atom trailer_expr
544
+
atom_expr -> atom trailer_expr
544
>
atom_expr -> atom trailer_expr
544
/
atom_expr -> atom trailer_expr
544
==
atom_expr -> atom trailer_expr
544
%
atom_expr -> atom trailer_expr
544
&
atom_expr -> atom trailer_expr
544
@
atom_expr -> atom trailer_expr
544
if
atom_expr -> atom trailer_expr
544
for
atom_expr -> atom trailer_expr
544
>=
atom_expr -> atom trailer_expr
544
is
atom_expr -> atom trailer_expr
544
,
atom_expr -> atom trailer_expr
544
**
atom_expr -> atom trailer_expr
545
NAME
461
545
atom_expr
462
545
term
463
545
atom
464
545
-
465
545
factor
466
545
[
467
545
True
468
545
arith_expr
469
545
False
470
545
{
471
545
(
472
545
+
473
545
and_expr
474
545
and_test
475
545
STRING
476
545
subscriptlist
1064
545
comparison
478
545
shift_expr
479
545
not_test
480
545
power
481
545
None
482
545
xor_expr
483
545
expr
484
545
NUMBER
485
545
test
486
545
~
487
545
or_test
488
545
not
489
545
lambdef
490
545
:
maybe_test -> 
545
lambda
491
545
subscript
492
545
maybe_test
493
546
NAME
1065
547
NAME
496
547
atom_expr
497
547
atom
498
547
-
499
547
arglist
1066
547
factor
501
547
*
502
547
[
503
547
True
504
547
arith_expr
505
547
xor_expr
506
547
False
507
547
**
508
547
{
509
547
+
510
547
)
1067
547
and_expr
512
547
(
513
547
STRING
514
547
power
515
547
term
516
547
comparison
517
547
shift_expr
518
547
argument
519
547
not_test
520
547
or_test
521
547
lambdef
522
547
lambda
523
547
None
524
547
test
525
547
expr
526
547
NUMBER
527
547
and_test
528
547
~
529
547
not
530
548
>>
factor -> - factor
548
if
factor -> - factor
548
>
factor -> - factor
548
,
factor -> - factor
548
is
factor -> - factor
548
//
factor -> - factor
548
)
factor -> - factor
548
not
factor -> - factor
548
or
factor -> - factor
548
-
factor -> - factor
548
<<
factor -> - factor
548
for
factor -> - factor
548
>=
factor -> - factor
548
/
factor -> - factor
548
<=
factor -> - factor
548
<
factor -> - factor
548
in
factor -> - factor
548
|
factor -> - factor
548
*
factor -> - factor
548
!=
factor -> - factor
548
&
factor -> - factor
548
and
factor -> - factor
548
^
factor -> - factor
548
+
factor -> - factor
548
%
factor -> - factor
548
==
factor -> - factor
548
@
factor -> - factor
549
NAME
131
549
atom_expr
132
549
atom
133
549
-
134
549
factor
136
549
[
137
549
True
138
549
False
140
549
{
141
549
+
142
549
(
144
549
STRING
145
549
power
147
549
term
1068
549
None
155
549
NUMBER
158
549
~
160
550
NAME
131
550
atom_expr
132
550
atom
133
550
-
134
550
factor
136
550
[
137
550
True
138
550
False
140
550
term
1069
550
{
141
550
+
142
550
(
144
550
STRING
145
550
power
147
550
None
155
550
NUMBER
158
550
~
160
551
NAME
131
551
atom_expr
132
551
atom
133
551
-
134
551
factor
136
551
[
137
551
True
138
551
False
140
551
{
141
551
+
142
551
(
144
551
STRING
145
551
power
147
551
term
1070
551
None
155
551
NUMBER
158
551
~
160
552
NAME
131
552
atom_expr
132
552
atom
133
552
-
134
552
factor
136
552
[
137
552
True
138
552
False
140
552
{
141
552
+
142
552
(
144
552
STRING
145
552
term
1071
552
power
147
552
None
155
552
NUMBER
158
552
~
160
553
NAME
131
553
atom_expr
132
553
atom
133
553
-
134
553
factor
136
553
[
137
553
True
138
553
False
140
553
{
141
553
+
142
553
(
144
553
STRING
145
553
power
147
553
term
1072
553
None
155
553
NUMBER
158
553
~
160
554
]
1073
555
and
atom -> [ ]
555
<<
atom -> [ ]
555
//
atom -> [ ]
555
*
atom -> [ ]
555
+
atom -> [ ]
555
^
atom -> [ ]
555
==
atom -> [ ]
555
>>
atom -> [ ]
555
/
atom -> [ ]
555
in
atom -> [ ]
555
>
atom -> [ ]
555
<=
atom -> [ ]
555
.
atom -> [ ]
555
)
atom -> [ ]
555
%
atom -> [ ]
555
&
atom -> [ ]
555
-
atom -> [ ]
555
>=
atom -> [ ]
555
not
atom -> [ ]
555
|
atom -> [ ]
555
@
atom -> [ ]
555
is
atom -> [ ]
555
or
atom -> [ ]
555
!=
atom -> [ ]
555
if
atom -> [ ]
555
,
atom -> [ ]
555
**
atom -> [ ]
555
for
atom -> [ ]
555
<
atom -> [ ]
555
(
atom -> [ ]
555
[
atom -> [ ]
556
NAME
131
556
atom_expr
132
556
atom
133
556
-
134
556
factor
136
556
[
137
556
True
138
556
arith_expr
139
556
False
140
556
{
141
556
+
142
556
(
144
556
STRING
145
556
power
147
556
shift_expr
1074
556
term
148
556
None
155
556
NUMBER
158
556
~
160
557
NAME
131
557
atom_expr
132
557
atom
133
557
-
134
557
factor
136
557
[
137
557
True
138
557
arith_expr
139
557
False
140
557
{
141
557
shift_expr
1075
557
+
142
557
(
144
557
STRING
145
557
power
147
557
term
148
557
None
155
557
NUMBER
158
557
~
160
558
%
atom -> { }
558
[
atom -> { }
558
not
atom -> { }
558
^
atom -> { }
558
or
atom -> { }
558
-
atom -> { }
558
>=
atom -> { }
558
<<
atom -> { }
558
/
atom -> { }
558
<=
atom -> { }
558
|
atom -> { }
558
for
atom -> { }
558
)
atom -> { }
558
>>
atom -> { }
558
@
atom -> { }
558
is
atom -> { }
558
if
atom -> { }
558
and
atom -> { }
558
==
atom -> { }
558
in
atom -> { }
558
**
atom -> { }
558
&
atom -> { }
558
>
atom -> { }
558
//
atom -> { }
558
(
atom -> { }
558
+
atom -> { }
558
<
atom -> { }
558
,
atom -> { }
558
!=
atom -> { }
558
.
atom -> { }
558
*
atom -> { }
559
>>
factor -> + factor
559
>=
factor -> + factor
559
or
factor -> + factor
559
==
factor -> + factor
559
-
factor -> + factor
559
*
factor -> + factor
559
<
factor -> + factor
559
^
factor -> + factor
559
,
factor -> + factor
559
&
factor -> + factor
559
)
factor -> + factor
559
@
factor -> + factor
559
|
factor -> + factor
559
<<
factor -> + factor
559
%
factor -> + factor
559
not
factor -> + factor
559
//
factor -> + factor
559
and
factor -> + factor
559
in
factor -> + factor
559
!=
factor -> + factor
559
>
factor -> + factor
559
/
factor -> + factor
559
is
factor -> + factor
559
+
factor -> + factor
559
if
factor -> + factor
559
for
factor -> + factor
559
<=
factor -> + factor
560
NAME
131
560
atom_expr
132
560
atom
133
560
-
134
560
factor
136
560
[
137
560
True
138
560
arith_expr
139
560
False
140
560
{
141
560
+
142
560
and_expr
143
560
(
144
560
STRING
145
560
power
147
560
xor_expr
1076
560
term
148
560
shift_expr
150
560
None
155
560
NUMBER
158
560
~
160
561
|
atom -> ( )
561
**
atom -> ( )
561
>>
atom -> ( )
561
-
atom -> ( )
561
%
atom -> ( )
561
(
atom -> ( )
561
not
atom -> ( )
561
+
atom -> ( )
561
>=
atom -> ( )
561
&
atom -> ( )
561
*
atom -> ( )
561
!=
atom -> ( )
561
<=
atom -> ( )
561
and
atom -> ( )
561
<
atom -> ( )
561
^
atom -> ( )
561
==
atom -> ( )
561
if
atom -> ( )
561
in
atom -> ( )
561
/
atom -> ( )
561
>
atom -> ( )
561
//
atom -> ( )
561
.
atom -> ( )
561
or
atom -> ( )
561
@
atom -> ( )
561
is
atom -> ( )
561
)
atom -> ( )
561
<<
atom -> ( )
561
,
atom -> ( )
561
for
atom -> ( )
561
[
atom -> ( )
562
)
1077
563
@
atom -> ( test_list_comp )
563
/=
atom -> ( test_list_comp )
563
<
atom -> ( test_list_comp )
563
%=
atom -> ( test_list_comp )
563
and
atom -> ( test_list_comp )
563
-=
atom -> ( test_list_comp )
563
if
atom -> ( test_list_comp )
563
^=
atom -> ( test_list_comp )
563
&
atom -> ( test_list_comp )
563
=
atom -> ( test_list_comp )
563
+=
atom -> ( test_list_comp )
563
*
atom -> ( test_list_comp )
563
%
atom -> ( test_list_comp )
563
[
atom -> ( test_list_comp )
563
//
atom -> ( test_list_comp )
563
<<
atom -> ( test_list_comp )
563
.
atom -> ( test_list_comp )
563
/
atom -> ( test_list_comp )
563
>=
atom -> ( test_list_comp )
563
or
atom -> ( test_list_comp )
563
>
atom -> ( test_list_comp )
563
-
atom -> ( test_list_comp )
563
|
atom -> ( test_list_comp )
563
**
atom -> ( test_list_comp )
563
is
atom -> ( test_list_comp )
563
|=
atom -> ( test_list_comp )
563
//=
atom -> ( test_list_comp )
563
:
atom -> ( test_list_comp )
563
==
atom -> ( test_list_comp )
563
&=
atom -> ( test_list_comp )
563
not
atom -> ( test_list_comp )
563
in
atom -> ( test_list_comp )
563
<<=
atom -> ( test_list_comp )
563
!=
atom -> ( test_list_comp )
563
^
atom -> ( test_list_comp )
563
,
atom -> ( test_list_comp )
563
(
atom -> ( test_list_comp )
563
NEWLINE
atom -> ( test_list_comp )
563
**=
atom -> ( test_list_comp )
563
>>=
atom -> ( test_list_comp )
563
@=
atom -> ( test_list_comp )
563
<=
atom -> ( test_list_comp )
563
+
atom -> ( test_list_comp )
563
>>
atom -> ( test_list_comp )
563
*=
atom -> ( test_list_comp )
564
NAME
131
564
atom_expr
132
564
atom
133
564
-
134
564
factor
136
564
[
137
564
True
138
564
False
140
564
{
141
564
+
142
564
(
144
564
STRING
145
564
power
147
564
arith_expr
1078
564
term
148
564
None
155
564
NUMBER
158
564
~
160
565
NAME
131
565
atom_expr
132
565
atom
133
565
-
134
565
factor
136
565
[
137
565
True
138
565
False
140
565
{
141
565
+
142
565
(
144
565
STRING
145
565
power
147
565
term
148
565
arith_expr
1079
565
None
155
565
NUMBER
158
565
~
160
566
NAME
131
566
atom_expr
132
566
atom
133
566
-
134
566
factor
136
566
[
137
566
True
138
566
arith_expr
139
566
False
140
566
{
141
566
+
142
566
(
144
566
STRING
145
566
power
147
566
term
148
566
shift_expr
150
566
None
155
566
and_expr
1080
566
NUMBER
158
566
~
160
567
NAME
1005
567
atom_expr
1006
567
atom
1007
567
-
1008
567
factor
1009
567
[
1010
567
True
1011
567
arith_expr
1012
567
False
1013
567
{
1014
567
+
1015
567
and_expr
1016
567
(
1017
567
STRING
1018
567
power
1019
567
term
1020
567
comparison
1021
567
shift_expr
1022
567
not_test
1023
567
or_test
1024
567
lambda
1025
567
test
1081
567
None
1026
567
xor_expr
1027
567
expr
1028
567
NUMBER
1029
567
and_test
1030
567
~
1031
567
test_list
1082
567
lambdef
1033
567
not
1034
568
)
test_list_comp -> test comp_for
569
~
164
569
atom
165
569
False
166
569
atom_expr
167
569
NUMBER
168
569
[
169
569
True
171
569
NAME
172
569
None
173
569
+
174
569
factor
175
569
term
176
569
-
177
569
(
178
569
{
179
569
arith_expr
180
569
STRING
181
569
power
182
569
shift_expr
183
569
and_expr
184
569
xor_expr
185
569
expr
186
569
expr_list
1083
570
NAME
131
570
atom_expr
132
570
atom
133
570
-
134
570
factor
136
570
[
137
570
True
138
570
arith_expr
139
570
False
140
570
{
141
570
+
142
570
and_expr
143
570
(
144
570
STRING
145
570
power
147
570
term
148
570
comparison
149
570
and_test
1084
570
shift_expr
150
570
not_test
152
570
None
155
570
xor_expr
156
570
expr
157
570
NUMBER
158
570
~
160
570
not
162
571
atom_expr
685
571
atom
686
571
-
687
571
factor
688
571
and_test
689
571
True
690
571
arith_expr
691
571
False
692
571
NAME
693
571
{
694
571
+
695
571
and_expr
696
571
[
697
571
(
698
571
STRING
699
571
term
700
571
comparison
701
571
shift_expr
702
571
not_test
703
571
power
704
571
xor_expr
706
571
or_test
1085
571
None
707
571
NUMBER
708
571
expr
709
571
~
710
571
not
711
572
:
1086
573
NAME
131
573
atom_expr
132
573
atom
133
573
-
134
573
factor
136
573
[
137
573
True
138
573
arith_expr
139
573
False
140
573
{
141
573
+
142
573
and_expr
143
573
(
144
573
STRING
145
573
power
147
573
term
148
573
comparison
149
573
shift_expr
150
573
test
1087
573
not_test
152
573
or_test
153
573
lambda
154
573
None
155
573
xor_expr
156
573
expr
157
573
NUMBER
158
573
and_test
159
573
~
160
573
lambdef
161
573
not
162
574
NAME
131
574
atom_expr
132
574
atom
133
574
-
134
574
factor
136
574
[
137
574
True
138
574
arith_expr
139
574
False
140
574
{
141
574
+
142
574
and_expr
143
574
(
144
574
STRING
145
574
power
147
574
term
148
574
shift_expr
150
574
None
155
574
expr
1088
574
xor_expr
156
574
NUMBER
158
574
~
160
575
NAME
131
575
atom_expr
132
575
atom
133
575
-
134
575
factor
136
575
[
137
575
True
138
575
arith_expr
139
575
False
140
575
{
141
575
+
142
575
and_expr
143
575
comparison
1089
575
(
144
575
STRING
145
575
power
147
575
term
148
575
shift_expr
150
575
None
155
575
xor_expr
156
575
expr
157
575
NUMBER
158
575
~
160
576
NAME
131
576
atom_expr
132
576
atom
133
576
-
134
576
factor
136
576
[
137
576
True
138
576
arith_expr
139
576
False
140
576
{
141
576
+
142
576
and_expr
143
576
(
144
576
STRING
145
576
power
147
576
term
148
576
comparison
149
576
shift_expr
150
576
not_test
152
576
None
155
576
xor_expr
156
576
expr
157
576
NUMBER
158
576
and_test
159
576
~
160
576
or_test
1090
576
not
162
577
is
factor -> ~ factor
577
>=
factor -> ~ factor
577
<<
factor -> ~ factor
577
<=
factor -> ~ factor
577
if
factor -> ~ factor
577
==
factor -> ~ factor
577
for
factor -> ~ factor
577
//
factor -> ~ factor
577
or
factor -> ~ factor
577
+
factor -> ~ factor
577
)
factor -> ~ factor
577
and
factor -> ~ factor
577
!=
factor -> ~ factor
577
&
factor -> ~ factor
577
|
factor -> ~ factor
577
>>
factor -> ~ factor
577
in
factor -> ~ factor
577
>
factor -> ~ factor
577
/
factor -> ~ factor
577
not
factor -> ~ factor
577
@
factor -> ~ factor
577
-
factor -> ~ factor
577
^
factor -> ~ factor
577
,
factor -> ~ factor
577
*
factor -> ~ factor
577
<
factor -> ~ factor
577
%
factor -> ~ factor
578
)
not_test -> not not_test
578
,
not_test -> not not_test
578
for
not_test -> not not_test
578
or
not_test -> not not_test
578
if
not_test -> not not_test
578
and
not_test -> not not_test
579
+
factor -> ~ factor
579
/
factor -> ~ factor
579
&
factor -> ~ factor
579
|
factor -> ~ factor
579
//
factor -> ~ factor
579
@
factor -> ~ factor
579
-
factor -> ~ factor
579
^
factor -> ~ factor
579
<<
factor -> ~ factor
579
>>
factor -> ~ factor
579
,
factor -> ~ factor
579
*
factor -> ~ factor
579
in
factor -> ~ factor
579
%
factor -> ~ factor
580
trailer
580
580
(
581
580
>>
trailer_expr -> 
580
trailer_expr
1091
580
[
583
580
<<
trailer_expr -> 
580
/
trailer_expr -> 
580
.
584
580
//
trailer_expr -> 
580
in
trailer_expr -> 
580
-
trailer_expr -> 
580
@
trailer_expr -> 
580
&
trailer_expr -> 
580
,
trailer_expr -> 
580
^
trailer_expr -> 
580
*
trailer_expr -> 
580
**
trailer_expr -> 
580
|
trailer_expr -> 
580
+
trailer_expr -> 
580
%
trailer_expr -> 
581
NAME
496
581
atom_expr
497
581
atom
498
581
-
499
581
factor
501
581
*
502
581
[
503
581
True
504
581
arith_expr
505
581
xor_expr
506
581
False
507
581
**
508
581
{
509
581
+
510
581
and_expr
512
581
(
513
581
STRING
514
581
power
515
581
term
516
581
comparison
517
581
arglist
1092
581
shift_expr
518
581
argument
519
581
not_test
520
581
or_test
521
581
lambdef
522
581
lambda
523
581
None
524
581
)
1093
581
test
525
581
expr
526
581
NUMBER
527
581
and_test
528
581
~
529
581
not
530
582
|
atom_expr -> atom trailer_expr
582
/
atom_expr -> atom trailer_expr
582
*
atom_expr -> atom trailer_expr
582
-
atom_expr -> atom trailer_expr
582
//
atom_expr -> atom trailer_expr
582
&
atom_expr -> atom trailer_expr
582
^
atom_expr -> atom trailer_expr
582
%
atom_expr -> atom trailer_expr
582
<<
atom_expr -> atom trailer_expr
582
@
atom_expr -> atom trailer_expr
582
+
atom_expr -> atom trailer_expr
582
,
atom_expr -> atom trailer_expr
582
in
atom_expr -> atom trailer_expr
582
**
atom_expr -> atom trailer_expr
582
>>
atom_expr -> atom trailer_expr
583
NAME
461
583
atom_expr
462
583
term
463
583
atom
464
583
-
465
583
factor
466
583
[
467
583
True
468
583
arith_expr
469
583
False
470
583
{
471
583
(
472
583
+
473
583
and_expr
474
583
and_test
475
583
STRING
476
583
comparison
478
583
shift_expr
479
583
not_test
480
583
power
481
583
None
482
583
xor_expr
483
583
expr
484
583
NUMBER
485
583
test
486
583
~
487
583
or_test
488
583
subscriptlist
1094
583
not
489
583
lambdef
490
583
:
maybe_test -> 
583
lambda
491
583
subscript
492
583
maybe_test
493
584
NAME
1095
585
~
164
585
atom
165
585
False
166
585
atom_expr
167
585
NUMBER
168
585
[
169
585
True
171
585
NAME
172
585
None
173
585
+
174
585
-
177
585
(
178
585
{
179
585
STRING
181
585
factor
1096
585
power
182
586
]
1097
587
&
atom -> [ ]
587
-
atom -> [ ]
587
>>
atom -> [ ]
587
/
atom -> [ ]
587
<<
atom -> [ ]
587
//
atom -> [ ]
587
,
atom -> [ ]
587
**
atom -> [ ]
587
|
atom -> [ ]
587
*
atom -> [ ]
587
+
atom -> [ ]
587
in
atom -> [ ]
587
@
atom -> [ ]
587
.
atom -> [ ]
587
(
atom -> [ ]
587
%
atom -> [ ]
587
^
atom -> [ ]
587
[
atom -> [ ]
588
NAME
1098
588
atom_expr
1099
588
term
1100
588
atom
1101
588
-
1102
588
factor
1103
588
test_list
1104
588
[
1105
588
True
1106
588
arith_expr
1107
588
False
1108
588
{
1109
588
(
1110
588
+
1111
588
and_expr
1112
588
and_test
1113
588
STRING
1114
588
comparison
1115
588
shift_expr
1116
588
not_test
1117
588
power
1118
588
None
1119
588
xor_expr
1120
588
expr
1121
588
NUMBER
1122
588
~
1123
588
test
1124
588
lambdef
1125
588
not
1126
588
or_test
1127
588
lambda
1128
589
<<
factor -> + factor
589
>>
factor -> + factor
589
%
factor -> + factor
589
*
factor -> + factor
589
//
factor -> + factor
589
/
factor -> + factor
589
^
factor -> + factor
589
in
factor -> + factor
589
,
factor -> + factor
589
&
factor -> + factor
589
+
factor -> + factor
589
-
factor -> + factor
589
@
factor -> + factor
589
|
factor -> + factor
590
~
164
590
atom
165
590
False
166
590
atom_expr
167
590
NUMBER
168
590
[
169
590
True
171
590
NAME
172
590
None
173
590
+
174
590
factor
175
590
-
177
590
(
178
590
term
1129
590
{
179
590
STRING
181
590
power
182
591
~
164
591
atom
165
591
False
166
591
term
1130
591
atom_expr
167
591
NUMBER
168
591
[
169
591
True
171
591
NAME
172
591
None
173
591
+
174
591
factor
175
591
-
177
591
(
178
591
{
179
591
STRING
181
591
power
182
592
~
164
592
atom
165
592
False
166
592
atom_expr
167
592
NUMBER
168
592
[
169
592
True
171
592
NAME
172
592
None
173
592
+
174
592
factor
175
592
-
177
592
(
178
592
{
179
592
term
1131
592
STRING
181
592
power
182
593
~
164
593
atom
165
593
False
166
593
atom_expr
167
593
NUMBER
168
593
[
169
593
True
171
593
NAME
172
593
None
173
593
+
174
593
factor
175
593
term
1132
593
-
177
593
(
178
593
{
179
593
STRING
181
593
power
182
594
~
164
594
term
1133
594
atom
165
594
False
166
594
atom_expr
167
594
NUMBER
168
594
[
169
594
True
171
594
NAME
172
594
None
173
594
+
174
594
factor
175
594
-
177
594
(
178
594
{
179
594
STRING
181
594
power
182
595
~
164
595
atom
165
595
False
166
595
atom_expr
167
595
NUMBER
168
595
[
169
595
True
171
595
NAME
172
595
None
173
595
+
174
595
factor
175
595
term
176
595
-
177
595
(
178
595
{
179
595
STRING
181
595
power
182
595
arith_expr
1134
596
~
164
596
atom
165
596
False
166
596
atom_expr
167
596
NUMBER
168
596
[
169
596
True
171
596
NAME
172
596
None
173
596
+
174
596
factor
175
596
term
176
596
-
177
596
(
178
596
{
179
596
STRING
181
596
arith_expr
1135
596
power
182
597
&
factor -> - factor
597
//
factor -> - factor
597
>>
factor -> - factor
597
/
factor -> - factor
597
-
factor -> - factor
597
*
factor -> - factor
597
,
factor -> - factor
597
in
factor -> - factor
597
^
factor -> - factor
597
+
factor -> - factor
597
<<
factor -> - factor
597
%
factor -> - factor
597
|
factor -> - factor
597
@
factor -> - factor
598
+
atom -> ( )
598
@
atom -> ( )
598
|
atom -> ( )
598
^
atom -> ( )
598
,
atom -> ( )
598
**
atom -> ( )
598
>>
atom -> ( )
598
/
atom -> ( )
598
-
atom -> ( )
598
&
atom -> ( )
598
%
atom -> ( )
598
(
atom -> ( )
598
in
atom -> ( )
598
<<
atom -> ( )
598
//
atom -> ( )
598
*
atom -> ( )
598
.
atom -> ( )
598
[
atom -> ( )
599
)
1136
600
%
atom -> { }
600
**
atom -> { }
600
[
atom -> { }
600
&
atom -> { }
600
//
atom -> { }
600
(
atom -> { }
600
+
atom -> { }
600
@
atom -> { }
600
<<
atom -> { }
600
/
atom -> { }
600
|
atom -> { }
600
,
atom -> { }
600
^
atom -> { }
600
.
atom -> { }
600
>>
atom -> { }
600
*
atom -> { }
600
in
atom -> { }
600
-
atom -> { }
601
~
164
601
atom
165
601
False
166
601
atom_expr
167
601
NUMBER
168
601
[
169
601
True
171
601
NAME
172
601
None
173
601
+
174
601
factor
175
601
term
176
601
-
177
601
(
178
601
{
179
601
arith_expr
180
601
STRING
181
601
power
182
601
shift_expr
1137
602
~
164
602
atom
165
602
False
166
602
atom_expr
167
602
NUMBER
168
602
[
169
602
True
171
602
NAME
172
602
None
173
602
+
174
602
factor
175
602
term
176
602
-
177
602
(
178
602
{
179
602
arith_expr
180
602
STRING
181
602
power
182
602
shift_expr
1138
603
~
164
603
atom
165
603
False
166
603
atom_expr
167
603
NUMBER
168
603
[
169
603
True
171
603
NAME
172
603
None
173
603
+
174
603
factor
175
603
term
176
603
-
177
603
(
178
603
{
179
603
arith_expr
180
603
STRING
181
603
power
182
603
and_expr
1139
603
shift_expr
183
604
~
164
604
atom
165
604
False
166
604
atom_expr
167
604
NUMBER
168
604
[
169
604
True
171
604
NAME
172
604
None
173
604
+
174
604
factor
175
604
term
176
604
-
177
604
(
178
604
{
179
604
arith_expr
180
604
STRING
181
604
xor_expr
1140
604
power
182
604
shift_expr
183
604
and_expr
184
605
~
164
605
atom
165
605
False
166
605
atom_expr
167
605
NUMBER
168
605
[
169
605
True
171
605
NAME
172
605
None
173
605
+
174
605
factor
175
605
term
176
605
-
177
605
(
178
605
{
179
605
arith_expr
180
605
STRING
181
605
power
182
605
shift_expr
183
605
and_expr
184
605
xor_expr
185
605
expr
1141
606
~
164
606
atom
165
606
False
166
606
atom_expr
167
606
NUMBER
168
606
[
169
606
True
171
606
NAME
172
606
None
173
606
+
174
606
factor
175
606
term
176
606
-
177
606
(
178
606
{
179
606
arith_expr
180
606
STRING
181
606
power
182
606
shift_expr
183
606
and_expr
184
606
xor_expr
185
606
expr
186
606
expr_list
1142
607
NAME
187
607
atom_expr
188
607
atom
189
607
-
190
607
[
193
607
True
194
607
False
196
607
{
197
607
+
198
607
(
200
607
STRING
201
607
factor
1143
607
power
208
607
None
210
607
NUMBER
213
607
~
215
608
trailer
608
608
trailer_expr
1144
608
[
610
608
.
611
608
or
trailer_expr -> 
608
(
612
608
not
trailer_expr -> 
608
in
trailer_expr -> 
608
is
trailer_expr -> 
608
>=
trailer_expr -> 
608
-
trailer_expr -> 
608
@
trailer_expr -> 
608
<=
trailer_expr -> 
608
,
trailer_expr -> 
608
^
trailer_expr -> 
608
*
trailer_expr -> 
608
for
trailer_expr -> 
608
if
trailer_expr -> 
608
**
trailer_expr -> 
608
>
trailer_expr -> 
608
==
trailer_expr -> 
608
>>
trailer_expr -> 
608
<<
trailer_expr -> 
608
/
trailer_expr -> 
608
//
trailer_expr -> 
608
!=
trailer_expr -> 
608
<
trailer_expr -> 
608
&
trailer_expr -> 
608
]
trailer_expr -> 
608
|
trailer_expr -> 
608
and
trailer_expr -> 
608
+
trailer_expr -> 
608
%
trailer_expr -> 
609
|
atom_expr -> atom trailer_expr
609
*
atom_expr -> atom trailer_expr
609
-
atom_expr -> atom trailer_expr
609
not
atom_expr -> atom trailer_expr
609
in
atom_expr -> atom trailer_expr
609
and
atom_expr -> atom trailer_expr
609
^
atom_expr -> atom trailer_expr
609
or
atom_expr -> atom trailer_expr
609
<=
atom_expr -> atom trailer_expr
609
<
atom_expr -> atom trailer_expr
609
>>
atom_expr -> atom trailer_expr
609
//
atom_expr -> atom trailer_expr
609
!=
atom_expr -> atom trailer_expr
609
<<
atom_expr -> atom trailer_expr
609
+
atom_expr -> atom trailer_expr
609
>
atom_expr -> atom trailer_expr
609
/
atom_expr -> atom trailer_expr
609
==
atom_expr -> atom trailer_expr
609
%
atom_expr -> atom trailer_expr
609
&
atom_expr -> atom trailer_expr
609
@
atom_expr -> atom trailer_expr
609
if
atom_expr -> atom trailer_expr
609
for
atom_expr -> atom trailer_expr
609
>=
atom_expr -> atom trailer_expr
609
]
atom_expr -> atom trailer_expr
609
is
atom_expr -> atom trailer_expr
609
,
atom_expr -> atom trailer_expr
609
**
atom_expr -> atom trailer_expr
610
NAME
461
610
atom_expr
462
610
term
463
610
atom
464
610
-
465
610
factor
466
610
[
467
610
True
468
610
arith_expr
469
610
False
470
610
{
471
610
(
472
610
+
473
610
and_expr
474
610
and_test
475
610
STRING
476
610
subscriptlist
1145
610
comparison
478
610
shift_expr
479
610
not_test
480
610
power
481
610
None
482
610
xor_expr
483
610
expr
484
610
NUMBER
485
610
test
486
610
~
487
610
or_test
488
610
not
489
610
lambdef
490
610
:
maybe_test -> 
610
lambda
491
610
subscript
492
610
maybe_test
493
611
NAME
1146
612
NAME
496
612
atom_expr
497
612
atom
498
612
-
499
612
arglist
1147
612
factor
501
612
*
502
612
[
503
612
True
504
612
arith_expr
505
612
xor_expr
506
612
False
507
612
**
508
612
{
509
612
+
510
612
)
1148
612
and_expr
512
612
(
513
612
STRING
514
612
power
515
612
term
516
612
comparison
517
612
shift_expr
518
612
argument
519
612
not_test
520
612
or_test
521
612
lambdef
522
612
lambda
523
612
None
524
612
test
525
612
expr
526
612
NUMBER
527
612
and_test
528
612
~
529
612
not
530
613
>>
factor -> - factor
613
if
factor -> - factor
613
>
factor -> - factor
613
,
factor -> - factor
613
is
factor -> - factor
613
//
factor -> - factor
613
not
factor -> - factor
613
or
factor -> - factor
613
-
factor -> - factor
613
<<
factor -> - factor
613
]
factor -> - factor
613
for
factor -> - factor
613
>=
factor -> - factor
613
/
factor -> - factor
613
<=
factor -> - factor
613
<
factor -> - factor
613
in
factor -> - factor
613
|
factor -> - factor
613
*
factor -> - factor
613
!=
factor -> - factor
613
&
factor -> - factor
613
and
factor -> - factor
613
^
factor -> - factor
613
+
factor -> - factor
613
%
factor -> - factor
613
==
factor -> - factor
613
@
factor -> - factor
614
NAME
187
614
atom_expr
188
614
atom
189
614
-
190
614
factor
191
614
[
193
614
True
194
614
False
196
614
{
197
614
+
198
614
(
200
614
STRING
201
614
term
1149
614
power
208
614
None
210
614
NUMBER
213
614
~
215
615
NAME
187
615
atom_expr
188
615
atom
189
615
-
190
615
factor
191
615
[
193
615
True
194
615
False
196
615
{
197
615
+
198
615
(
200
615
STRING
201
615
term
1150
615
power
208
615
None
210
615
NUMBER
213
615
~
215
616
NAME
187
616
atom_expr
188
616
atom
189
616
-
190
616
factor
191
616
[
193
616
True
194
616
False
196
616
term
1151
616
{
197
616
+
198
616
(
200
616
STRING
201
616
power
208
616
None
210
616
NUMBER
213
616
~
215
617
NAME
187
617
atom_expr
188
617
atom
189
617
-
190
617
factor
191
617
[
193
617
True
194
617
False
196
617
{
197
617
+
198
617
(
200
617
STRING
201
617
term
1152
617
power
208
617
None
210
617
NUMBER
213
617
~
215
618
NAME
187
618
atom_expr
188
618
atom
189
618
-
190
618
factor
191
618
[
193
618
True
194
618
False
196
618
{
197
618
+
198
618
(
200
618
STRING
201
618
term
1153
618
power
208
618
None
210
618
NUMBER
213
618
~
215
619
<<
atom -> [ test_list_comp ]
619
*=
atom -> [ test_list_comp ]
619
:
atom -> [ test_list_comp ]
619
,
atom -> [ test_list_comp ]
619
**=
atom -> [ test_list_comp ]
619
>>
atom -> [ test_list_comp ]
619
+
atom -> [ test_list_comp ]
619
-
atom -> [ test_list_comp ]
619
^=
atom -> [ test_list_comp ]
619
@=
atom -> [ test_list_comp ]
619
not
atom -> [ test_list_comp ]
619
<=
atom -> [ test_list_comp ]
619
is
atom -> [ test_list_comp ]
619
[
atom -> [ test_list_comp ]
619
*
atom -> [ test_list_comp ]
619
==
atom -> [ test_list_comp ]
619
@
atom -> [ test_list_comp ]
619
NEWLINE
atom -> [ test_list_comp ]
619
%=
atom -> [ test_list_comp ]
619
>
atom -> [ test_list_comp ]
619
=
atom -> [ test_list_comp ]
619
%
atom -> [ test_list_comp ]
619
if
atom -> [ test_list_comp ]
619
>=
atom -> [ test_list_comp ]
619
>>=
atom -> [ test_list_comp ]
619
//
atom -> [ test_list_comp ]
619
/=
atom -> [ test_list_comp ]
619
.
atom -> [ test_list_comp ]
619
//=
atom -> [ test_list_comp ]
619
in
atom -> [ test_list_comp ]
619
+=
atom -> [ test_list_comp ]
619
**
atom -> [ test_list_comp ]
619
and
atom -> [ test_list_comp ]
619
/
atom -> [ test_list_comp ]
619
or
atom -> [ test_list_comp ]
619
!=
atom -> [ test_list_comp ]
619
<<=
atom -> [ test_list_comp ]
619
^
atom -> [ test_list_comp ]
619
<
atom -> [ test_list_comp ]
619
-=
atom -> [ test_list_comp ]
619
&
atom -> [ test_list_comp ]
619
|=
atom -> [ test_list_comp ]
619
(
atom -> [ test_list_comp ]
619
|
atom -> [ test_list_comp ]
619
&=
atom -> [ test_list_comp ]
620
]
1154
621
and
atom -> [ ]
621
<<
atom -> [ ]
621
//
atom -> [ ]
621
*
atom -> [ ]
621
+
atom -> [ ]
621
^
atom -> [ ]
621
==
atom -> [ ]
621
>>
atom -> [ ]
621
/
atom -> [ ]
621
]
atom -> [ ]
621
in
atom -> [ ]
621
>
atom -> [ ]
621
<=
atom -> [ ]
621
.
atom -> [ ]
621
%
atom -> [ ]
621
&
atom -> [ ]
621
-
atom -> [ ]
621
>=
atom -> [ ]
621
not
atom -> [ ]
621
|
atom -> [ ]
621
@
atom -> [ ]
621
is
atom -> [ ]
621
or
atom -> [ ]
621
!=
atom -> [ ]
621
if
atom -> [ ]
621
,
atom -> [ ]
621
**
atom -> [ ]
621
for
atom -> [ ]
621
<
atom -> [ ]
621
(
atom -> [ ]
621
[
atom -> [ ]
622
NAME
187
622
atom_expr
188
622
atom
189
622
-
190
622
factor
191
622
[
193
622
True
194
622
arith_expr
195
622
False
196
622
{
197
622
+
198
622
(
200
622
STRING
201
622
shift_expr
1155
622
term
203
622
power
208
622
None
210
622
NUMBER
213
622
~
215
623
NAME
187
623
atom_expr
188
623
atom
189
623
-
190
623
factor
191
623
[
193
623
True
194
623
arith_expr
195
623
False
196
623
{
197
623
shift_expr
1156
623
+
198
623
(
200
623
STRING
201
623
term
203
623
power
208
623
None
210
623
NUMBER
213
623
~
215
624
%
atom -> { }
624
[
atom -> { }
624
not
atom -> { }
624
]
atom -> { }
624
^
atom -> { }
624
or
atom -> { }
624
-
atom -> { }
624
>=
atom -> { }
624
<<
atom -> { }
624
/
atom -> { }
624
<=
atom -> { }
624
|
atom -> { }
624
for
atom -> { }
624
>>
atom -> { }
624
@
atom -> { }
624
is
atom -> { }
624
if
atom -> { }
624
and
atom -> { }
624
==
atom -> { }
624
in
atom -> { }
624
**
atom -> { }
624
&
atom -> { }
624
>
atom -> { }
624
//
atom -> { }
624
(
atom -> { }
624
+
atom -> { }
624
<
atom -> { }
624
,
atom -> { }
624
!=
atom -> { }
624
.
atom -> { }
624
*
atom -> { }
625
>>
factor -> + factor
625
>=
factor -> + factor
625
or
factor -> + factor
625
==
factor -> + factor
625
-
factor -> + factor
625
*
factor -> + factor
625
]
factor -> + factor
625
<
factor -> + factor
625
^
factor -> + factor
625
,
factor -> + factor
625
&
factor -> + factor
625
@
factor -> + factor
625
|
factor -> + factor
625
<<
factor -> + factor
625
%
factor -> + factor
625
not
factor -> + factor
625
//
factor -> + factor
625
and
factor -> + factor
625
in
factor -> + factor
625
!=
factor -> + factor
625
>
factor -> + factor
625
/
factor -> + factor
625
is
factor -> + factor
625
+
factor -> + factor
625
if
factor -> + factor
625
for
factor -> + factor
625
<=
factor -> + factor
626
NAME
187
626
atom_expr
188
626
atom
189
626
-
190
626
factor
191
626
[
193
626
True
194
626
arith_expr
195
626
False
196
626
{
197
626
+
198
626
and_expr
199
626
(
200
626
STRING
201
626
xor_expr
1157
626
term
203
626
shift_expr
206
626
power
208
626
None
210
626
NUMBER
213
626
~
215
627
|
atom -> ( )
627
**
atom -> ( )
627
]
atom -> ( )
627
>>
atom -> ( )
627
-
atom -> ( )
627
%
atom -> ( )
627
(
atom -> ( )
627
not
atom -> ( )
627
+
atom -> ( )
627
>=
atom -> ( )
627
&
atom -> ( )
627
*
atom -> ( )
627
!=
atom -> ( )
627
<=
atom -> ( )
627
and
atom -> ( )
627
<
atom -> ( )
627
^
atom -> ( )
627
==
atom -> ( )
627
if
atom -> ( )
627
in
atom -> ( )
627
/
atom -> ( )
627
>
atom -> ( )
627
//
atom -> ( )
627
.
atom -> ( )
627
or
atom -> ( )
627
@
atom -> ( )
627
is
atom -> ( )
627
<<
atom -> ( )
627
,
atom -> ( )
627
for
atom -> ( )
627
[
atom -> ( )
628
)
1158
629
NAME
187
629
atom_expr
188
629
atom
189
629
-
190
629
factor
191
629
[
193
629
True
194
629
False
196
629
{
197
629
+
198
629
(
200
629
STRING
201
629
arith_expr
1159
629
term
203
629
power
208
629
None
210
629
NUMBER
213
629
~
215
630
NAME
187
630
atom_expr
188
630
atom
189
630
-
190
630
factor
191
630
[
193
630
True
194
630
False
196
630
{
197
630
+
198
630
(
200
630
STRING
201
630
term
203
630
arith_expr
1160
630
power
208
630
None
210
630
NUMBER
213
630
~
215
631
NAME
187
631
atom_expr
188
631
atom
189
631
-
190
631
factor
191
631
[
193
631
True
194
631
arith_expr
195
631
False
196
631
{
197
631
+
198
631
and_expr
199
631
(
200
631
STRING
201
631
term
203
631
and_test
204
631
comparison
205
631
shift_expr
206
631
not_test
207
631
power
208
631
None
210
631
xor_expr
211
631
expr
212
631
NUMBER
213
631
~
215
631
not
217
631
or_test
1161
632
NAME
187
632
atom_expr
188
632
atom
189
632
-
190
632
factor
191
632
[
193
632
True
194
632
arith_expr
195
632
False
196
632
{
197
632
+
198
632
(
200
632
STRING
201
632
term
203
632
shift_expr
206
632
power
208
632
None
210
632
and_expr
1162
632
NUMBER
213
632
~
215
633
NAME
187
633
atom_expr
188
633
atom
189
633
-
190
633
factor
191
633
[
193
633
True
194
633
arith_expr
195
633
False
196
633
{
197
633
+
198
633
and_expr
199
633
(
200
633
STRING
201
633
term
203
633
comparison
205
633
and_test
1163
633
shift_expr
206
633
not_test
207
633
power
208
633
None
210
633
xor_expr
211
633
expr
212
633
NUMBER
213
633
~
215
633
not
217
634
atom_expr
685
634
atom
686
634
-
687
634
factor
688
634
and_test
689
634
True
690
634
arith_expr
691
634
False
692
634
NAME
693
634
{
694
634
+
695
634
and_expr
696
634
[
697
634
(
698
634
STRING
699
634
term
700
634
comparison
701
634
shift_expr
702
634
not_test
703
634
power
704
634
xor_expr
706
634
or_test
1164
634
None
707
634
NUMBER
708
634
expr
709
634
~
710
634
not
711
635
NAME
187
635
atom_expr
188
635
atom
189
635
-
190
635
factor
191
635
[
193
635
True
194
635
arith_expr
195
635
False
196
635
{
197
635
+
198
635
and_expr
199
635
(
200
635
STRING
201
635
term
203
635
shift_expr
206
635
power
208
635
None
210
635
expr
1165
635
xor_expr
211
635
NUMBER
213
635
~
215
636
NAME
187
636
atom_expr
188
636
atom
189
636
-
190
636
factor
191
636
[
193
636
True
194
636
arith_expr
195
636
False
196
636
{
197
636
+
198
636
and_expr
199
636
comparison
1166
636
(
200
636
STRING
201
636
term
203
636
shift_expr
206
636
power
208
636
None
210
636
xor_expr
211
636
expr
212
636
NUMBER
213
636
~
215
637
:
1167
638
NAME
187
638
atom_expr
188
638
atom
189
638
-
190
638
factor
191
638
[
193
638
True
194
638
arith_expr
195
638
False
196
638
{
197
638
+
198
638
and_expr
199
638
(
200
638
STRING
201
638
term
203
638
and_test
204
638
comparison
205
638
shift_expr
206
638
not_test
207
638
power
208
638
or_test
209
638
None
210
638
xor_expr
211
638
expr
212
638
NUMBER
213
638
lambda
214
638
~
215
638
lambdef
216
638
not
217
638
test
1168
639
is
factor -> ~ factor
639
>=
factor -> ~ factor
639
<<
factor -> ~ factor
639
<=
factor -> ~ factor
639
if
factor -> ~ factor
639
==
factor -> ~ factor
639
for
factor -> ~ factor
639
//
factor -> ~ factor
639
or
factor -> ~ factor
639
+
factor -> ~ factor
639
and
factor -> ~ factor
639
!=
factor -> ~ factor
639
&
factor -> ~ factor
639
%
factor -> ~ factor
639
|
factor -> ~ factor
639
>>
factor -> ~ factor
639
in
factor -> ~ factor
639
>
factor -> ~ factor
639
/
factor -> ~ factor
639
not
factor -> ~ factor
639
@
factor -> ~ factor
639
-
factor -> ~ factor
639
^
factor -> ~ factor
639
,
factor -> ~ factor
639
*
factor -> ~ factor
639
<
factor -> ~ factor
639
]
factor -> ~ factor
640
,
not_test -> not not_test
640
for
not_test -> not not_test
640
or
not_test -> not not_test
640
]
not_test -> not not_test
640
if
not_test -> not not_test
640
and
not_test -> not not_test
641
NAME
1169
641
atom_expr
1170
641
atom
1171
641
-
1172
641
factor
1173
641
[
1174
641
True
1175
641
arith_expr
1176
641
False
1177
641
{
1178
641
+
1179
641
and_expr
1180
641
(
1181
641
STRING
1182
641
term
1183
641
and_test
1184
641
comparison
1185
641
shift_expr
1186
641
not_test
1187
641
power
1188
641
None
1189
641
xor_expr
1190
641
expr
1191
641
NUMBER
1192
641
~
1193
641
or_test
1194
641
not
1195
641
lambdef
1196
641
test
1197
641
test_list
1198
641
lambda
1199
642
~
164
642
atom
165
642
False
166
642
atom_expr
167
642
NUMBER
168
642
[
169
642
True
171
642
NAME
172
642
None
173
642
+
174
642
factor
175
642
term
176
642
-
177
642
(
178
642
{
179
642
arith_expr
180
642
STRING
181
642
power
182
642
shift_expr
183
642
expr_list
1200
642
and_expr
184
642
xor_expr
185
642
expr
186
643
]
test_list_comp -> test comp_for
644
NAME
12
644
True
1
644
atom_expr
5
644
term
29
644
atom
4
644
simple_stmt
1201
644
factor
11
644
shift_expr
7
644
suite
1202
644
arith_expr
8
644
False
27
644
and_expr
9
644
xor_expr
40
644
{
41
644
(
13
644
[
15
644
resetstats
16
644
STRING
46
644
raise
19
644
small_stmt
1203
644
test
47
644
comparison
28
644
or_test
23
644
~
55
644
-
43
644
lambda
53
644
+
31
644
not_test
33
644
and_test
48
644
power
32
644
pass
73
644
None
34
644
lambdef
37
644
not
42
644
NUMBER
39
644
expr
50
644
continue
74
644
begsim
49
644
del_stmt
75
644
NEWLINE
1204
644
return
54
644
nonlocal
76
644
return_stmt
56
644
endsim
57
644
test_list
70
644
raise_stmt
59
644
assert_stmt
78
644
stat_stmt
79
644
global_stmt
61
644
continue_stmt
62
644
assert
63
644
break_stmt
64
644
nonlocal_stmt
80
644
expr_stmt
81
644
break
82
644
del
66
644
global
67
644
yield
83
644
pass_stmt
68
644
flow_stmt
71
644
yield_stmt
72
644
sim_stmt
84
645
NAME
221
645
lambda
222
645
atom_expr
223
645
term
224
645
atom
225
645
-
226
645
factor
227
645
{
228
645
True
229
645
arith_expr
230
645
False
231
645
+
233
645
and_expr
234
645
[
235
645
(
236
645
STRING
237
645
comparison
238
645
shift_expr
239
645
not_test
240
645
power
241
645
None
242
645
xor_expr
243
645
expr
244
645
NUMBER
245
645
and_test
246
645
or_test
247
645
~
248
645
lambdef
249
645
test
1205
645
not
250
646
:
1206
647
NAME
221
647
atom_expr
223
647
atom
225
647
-
226
647
{
228
647
True
229
647
False
231
647
+
233
647
[
235
647
(
236
647
STRING
237
647
factor
1207
647
power
241
647
None
242
647
NUMBER
245
647
~
248
648
NAME
221
648
atom_expr
223
648
term
224
648
atom
225
648
-
226
648
factor
227
648
{
228
648
True
229
648
False
231
648
+
233
648
[
235
648
(
236
648
STRING
237
648
arith_expr
1208
648
power
241
648
None
242
648
NUMBER
245
648
~
248
649
NAME
221
649
atom_expr
223
649
term
224
649
atom
225
649
-
226
649
factor
227
649
{
228
649
True
229
649
False
231
649
+
233
649
[
235
649
(
236
649
STRING
237
649
arith_expr
1209
649
power
241
649
None
242
649
NUMBER
245
649
~
248
650
|
atom_expr -> atom trailer_expr
650
*
atom_expr -> atom trailer_expr
650
-
atom_expr -> atom trailer_expr
650
not
atom_expr -> atom trailer_expr
650
in
atom_expr -> atom trailer_expr
650
and
atom_expr -> atom trailer_expr
650
^
atom_expr -> atom trailer_expr
650
or
atom_expr -> atom trailer_expr
650
<=
atom_expr -> atom trailer_expr
650
<
atom_expr -> atom trailer_expr
650
>>
atom_expr -> atom trailer_expr
650
NEWLINE
atom_expr -> atom trailer_expr
650
//
atom_expr -> atom trailer_expr
650
!=
atom_expr -> atom trailer_expr
650
<<
atom_expr -> atom trailer_expr
650
+
atom_expr -> atom trailer_expr
650
from
atom_expr -> atom trailer_expr
650
>
atom_expr -> atom trailer_expr
650
/
atom_expr -> atom trailer_expr
650
==
atom_expr -> atom trailer_expr
650
%
atom_expr -> atom trailer_expr
650
&
atom_expr -> atom trailer_expr
650
@
atom_expr -> atom trailer_expr
650
if
atom_expr -> atom trailer_expr
650
>=
atom_expr -> atom trailer_expr
650
is
atom_expr -> atom trailer_expr
650
**
atom_expr -> atom trailer_expr
651
trailer
651
651
trailer_expr
1210
651
[
652
651
or
trailer_expr -> 
651
.
653
651
(
654
651
not
trailer_expr -> 
651
in
trailer_expr -> 
651
is
trailer_expr -> 
651
>=
trailer_expr -> 
651
-
trailer_expr -> 
651
@
trailer_expr -> 
651
<=
trailer_expr -> 
651
^
trailer_expr -> 
651
*
trailer_expr -> 
651
if
trailer_expr -> 
651
**
trailer_expr -> 
651
>
trailer_expr -> 
651
==
trailer_expr -> 
651
>>
trailer_expr -> 
651
<<
trailer_expr -> 
651
/
trailer_expr -> 
651
NEWLINE
trailer_expr -> 
651
//
trailer_expr -> 
651
!=
trailer_expr -> 
651
<
trailer_expr -> 
651
&
trailer_expr -> 
651
|
trailer_expr -> 
651
and
trailer_expr -> 
651
from
trailer_expr -> 
651
+
trailer_expr -> 
651
%
trailer_expr -> 
652
NAME
461
652
atom_expr
462
652
term
463
652
atom
464
652
-
465
652
factor
466
652
[
467
652
True
468
652
arith_expr
469
652
False
470
652
{
471
652
(
472
652
+
473
652
and_expr
474
652
and_test
475
652
STRING
476
652
subscriptlist
1211
652
comparison
478
652
shift_expr
479
652
not_test
480
652
power
481
652
None
482
652
xor_expr
483
652
expr
484
652
NUMBER
485
652
test
486
652
~
487
652
or_test
488
652
not
489
652
lambdef
490
652
:
maybe_test -> 
652
lambda
491
652
subscript
492
652
maybe_test
493
653
NAME
1212
654
NAME
496
654
atom_expr
497
654
atom
498
654
-
499
654
arglist
1213
654
factor
501
654
*
502
654
[
503
654
True
504
654
arith_expr
505
654
xor_expr
506
654
False
507
654
**
508
654
{
509
654
+
510
654
)
1214
654
and_expr
512
654
(
513
654
STRING
514
654
power
515
654
term
516
654
comparison
517
654
shift_expr
518
654
argument
519
654
not_test
520
654
or_test
521
654
lambdef
522
654
lambda
523
654
None
524
654
test
525
654
expr
526
654
NUMBER
527
654
and_test
528
654
~
529
654
not
530
655
>>
factor -> - factor
655
if
factor -> - factor
655
>
factor -> - factor
655
is
factor -> - factor
655
from
factor -> - factor
655
//
factor -> - factor
655
not
factor -> - factor
655
or
factor -> - factor
655
-
factor -> - factor
655
<<
factor -> - factor
655
>=
factor -> - factor
655
/
factor -> - factor
655
<=
factor -> - factor
655
<
factor -> - factor
655
in
factor -> - factor
655
*
factor -> - factor
655
|
factor -> - factor
655
NEWLINE
factor -> - factor
655
!=
factor -> - factor
655
&
factor -> - factor
655
and
factor -> - factor
655
^
factor -> - factor
655
+
factor -> - factor
655
%
factor -> - factor
655
==
factor -> - factor
655
@
factor -> - factor
656
NAME
221
656
atom_expr
223
656
atom
225
656
-
226
656
factor
227
656
{
228
656
True
229
656
False
231
656
+
233
656
[
235
656
(
236
656
STRING
237
656
term
1215
656
power
241
656
None
242
656
NUMBER
245
656
~
248
657
NAME
221
657
atom_expr
223
657
atom
225
657
-
226
657
factor
227
657
{
228
657
True
229
657
False
231
657
term
1216
657
+
233
657
[
235
657
(
236
657
STRING
237
657
power
241
657
None
242
657
NUMBER
245
657
~
248
658
NAME
221
658
atom_expr
223
658
atom
225
658
-
226
658
factor
227
658
{
228
658
True
229
658
False
231
658
+
233
658
[
235
658
(
236
658
STRING
237
658
power
241
658
term
1217
658
None
242
658
NUMBER
245
658
~
248
659
NAME
221
659
atom_expr
223
659
atom
225
659
-
226
659
factor
227
659
term
1218
659
{
228
659
True
229
659
False
231
659
+
233
659
[
235
659
(
236
659
STRING
237
659
power
241
659
None
242
659
NUMBER
245
659
~
248
660
NAME
221
660
atom_expr
223
660
atom
225
660
-
226
660
factor
227
660
{
228
660
True
229
660
False
231
660
+
233
660
[
235
660
(
236
660
STRING
237
660
term
1219
660
power
241
660
None
242
660
NUMBER
245
660
~
248
661
%
atom -> { }
661
[
atom -> { }
661
not
atom -> { }
661
^
atom -> { }
661
or
atom -> { }
661
-
atom -> { }
661
>=
atom -> { }
661
<<
atom -> { }
661
/
atom -> { }
661
<=
atom -> { }
661
|
atom -> { }
661
>>
atom -> { }
661
from
atom -> { }
661
@
atom -> { }
661
is
atom -> { }
661
if
atom -> { }
661
NEWLINE
atom -> { }
661
and
atom -> { }
661
==
atom -> { }
661
in
atom -> { }
661
**
atom -> { }
661
&
atom -> { }
661
>
atom -> { }
661
//
atom -> { }
661
(
atom -> { }
661
+
atom -> { }
661
<
atom -> { }
661
!=
atom -> { }
661
.
atom -> { }
661
*
atom -> { }
662
NAME
221
662
atom_expr
223
662
term
224
662
atom
225
662
-
226
662
factor
227
662
{
228
662
True
229
662
arith_expr
230
662
False
231
662
+
233
662
[
235
662
(
236
662
STRING
237
662
shift_expr
1220
662
power
241
662
None
242
662
NUMBER
245
662
~
248
663
NAME
221
663
atom_expr
223
663
term
224
663
atom
225
663
-
226
663
factor
227
663
{
228
663
True
229
663
arith_expr
230
663
False
231
663
shift_expr
1221
663
+
233
663
[
235
663
(
236
663
STRING
237
663
power
241
663
None
242
663
NUMBER
245
663
~
248
664
NAME
300
664
atom_expr
301
664
term
302
664
atom
303
664
-
304
664
factor
305
664
True
306
664
arith_expr
307
664
False
308
664
{
309
664
+
310
664
and_expr
311
664
[
312
664
(
313
664
STRING
314
664
comparison
315
664
shift_expr
316
664
not_test
317
664
power
318
664
None
319
664
xor_expr
320
664
expr
321
664
NUMBER
322
664
and_test
323
664
test
1222
664
or_test
324
664
~
325
664
lambda
326
664
lambdef
327
664
not
328
665
>>
factor -> + factor
665
>=
factor -> + factor
665
or
factor -> + factor
665
==
factor -> + factor
665
-
factor -> + factor
665
from
factor -> + factor
665
*
factor -> + factor
665
NEWLINE
factor -> + factor
665
<
factor -> + factor
665
^
factor -> + factor
665
&
factor -> + factor
665
@
factor -> + factor
665
|
factor -> + factor
665
<<
factor -> + factor
665
%
factor -> + factor
665
not
factor -> + factor
665
//
factor -> + factor
665
and
factor -> + factor
665
in
factor -> + factor
665
!=
factor -> + factor
665
>
factor -> + factor
665
/
factor -> + factor
665
is
factor -> + factor
665
+
factor -> + factor
665
if
factor -> + factor
665
<=
factor -> + factor
666
NAME
221
666
atom_expr
223
666
term
224
666
atom
225
666
-
226
666
factor
227
666
{
228
666
True
229
666
arith_expr
230
666
False
231
666
+
233
666
and_expr
234
666
[
235
666
(
236
666
STRING
237
666
xor_expr
1223
666
shift_expr
239
666
power
241
666
None
242
666
NUMBER
245
666
~
248
667
]
1224
668
and
atom -> [ ]
668
<<
atom -> [ ]
668
//
atom -> [ ]
668
*
atom -> [ ]
668
+
atom -> [ ]
668
^
atom -> [ ]
668
==
atom -> [ ]
668
>>
atom -> [ ]
668
/
atom -> [ ]
668
in
atom -> [ ]
668
NEWLINE
atom -> [ ]
668
>
atom -> [ ]
668
<=
atom -> [ ]
668
.
atom -> [ ]
668
%
atom -> [ ]
668
&
atom -> [ ]
668
-
atom -> [ ]
668
>=
atom -> [ ]
668
not
atom -> [ ]
668
|
atom -> [ ]
668
@
atom -> [ ]
668
is
atom -> [ ]
668
or
atom -> [ ]
668
from
atom -> [ ]
668
!=
atom -> [ ]
668
if
atom -> [ ]
668
**
atom -> [ ]
668
<
atom -> [ ]
668
(
atom -> [ ]
668
[
atom -> [ ]
669
NEWLINE
atom -> ( )
669
|
atom -> ( )
669
**
atom -> ( )
669
>>
atom -> ( )
669
-
atom -> ( )
669
%
atom -> ( )
669
(
atom -> ( )
669
not
atom -> ( )
669
+
atom -> ( )
669
>=
atom -> ( )
669
&
atom -> ( )
669
*
atom -> ( )
669
!=
atom -> ( )
669
<=
atom -> ( )
669
and
atom -> ( )
669
<
atom -> ( )
669
^
atom -> ( )
669
==
atom -> ( )
669
if
atom -> ( )
669
in
atom -> ( )
669
/
atom -> ( )
669
>
atom -> ( )
669
//
atom -> ( )
669
.
atom -> ( )
669
or
atom -> ( )
669
@
atom -> ( )
669
is
atom -> ( )
669
<<
atom -> ( )
669
from
atom -> ( )
669
[
atom -> ( )
670
)
1225
671
NAME
221
671
atom_expr
223
671
term
224
671
atom
225
671
-
226
671
factor
227
671
{
228
671
True
229
671
arith_expr
230
671
False
231
671
+
233
671
[
235
671
(
236
671
STRING
237
671
shift_expr
239
671
power
241
671
None
242
671
and_expr
1226
671
NUMBER
245
671
~
248
672
NAME
221
672
atom_expr
223
672
term
224
672
atom
225
672
-
226
672
factor
227
672
{
228
672
True
229
672
arith_expr
230
672
False
231
672
+
233
672
and_expr
234
672
[
235
672
(
236
672
STRING
237
672
comparison
238
672
shift_expr
239
672
not_test
240
672
power
241
672
None
242
672
xor_expr
243
672
expr
244
672
NUMBER
245
672
and_test
1227
672
~
248
672
not
250
673
NAME
221
673
atom_expr
223
673
term
224
673
atom
225
673
-
226
673
factor
227
673
{
228
673
True
229
673
arith_expr
230
673
False
231
673
+
233
673
and_expr
234
673
[
235
673
(
236
673
STRING
237
673
shift_expr
239
673
power
241
673
None
242
673
xor_expr
243
673
NUMBER
245
673
expr
1228
673
~
248
674
NAME
221
674
atom_expr
223
674
term
224
674
atom
225
674
-
226
674
factor
227
674
{
228
674
True
229
674
arith_expr
230
674
False
231
674
+
233
674
and_expr
234
674
[
235
674
(
236
674
STRING
237
674
shift_expr
239
674
power
241
674
None
242
674
xor_expr
243
674
expr
244
674
NUMBER
245
674
~
248
674
comparison
1229
675
NAME
221
675
atom_expr
223
675
term
224
675
atom
225
675
-
226
675
factor
227
675
{
228
675
True
229
675
arith_expr
230
675
False
231
675
+
233
675
and_expr
234
675
[
235
675
(
236
675
STRING
237
675
comparison
238
675
shift_expr
239
675
not_test
240
675
power
241
675
None
242
675
xor_expr
243
675
expr
244
675
NUMBER
245
675
and_test
246
675
~
248
675
or_test
1230
675
not
250
676
atom_expr
685
676
atom
686
676
-
687
676
factor
688
676
and_test
689
676
True
690
676
arith_expr
691
676
False
692
676
NAME
693
676
{
694
676
+
695
676
and_expr
696
676
[
697
676
(
698
676
STRING
699
676
term
700
676
comparison
701
676
shift_expr
702
676
not_test
703
676
power
704
676
xor_expr
706
676
None
707
676
NUMBER
708
676
expr
709
676
~
710
676
not
711
676
or_test
1231
677
is
factor -> ~ factor
677
>=
factor -> ~ factor
677
<<
factor -> ~ factor
677
<=
factor -> ~ factor
677
if
factor -> ~ factor
677
==
factor -> ~ factor
677
//
factor -> ~ factor
677
or
factor -> ~ factor
677
+
factor -> ~ factor
677
and
factor -> ~ factor
677
!=
factor -> ~ factor
677
&
factor -> ~ factor
677
|
factor -> ~ factor
677
>>
factor -> ~ factor
677
in
factor -> ~ factor
677
NEWLINE
factor -> ~ factor
677
>
factor -> ~ factor
677
/
factor -> ~ factor
677
not
factor -> ~ factor
677
@
factor -> ~ factor
677
-
factor -> ~ factor
677
^
factor -> ~ factor
677
*
factor -> ~ factor
677
<
factor -> ~ factor
677
%
factor -> ~ factor
677
from
factor -> ~ factor
678
from
not_test -> not not_test
678
or
not_test -> not not_test
678
NEWLINE
not_test -> not not_test
678
if
not_test -> not not_test
678
and
not_test -> not not_test
679
NAME
496
679
atom_expr
497
679
atom
498
679
-
499
679
factor
501
679
*
502
679
[
503
679
True
504
679
arith_expr
505
679
arglist
1232
679
xor_expr
506
679
False
507
679
**
508
679
{
509
679
+
510
679
and_expr
512
679
(
513
679
STRING
514
679
power
515
679
term
516
679
comparison
517
679
)
1233
679
shift_expr
518
679
argument
519
679
not_test
520
679
or_test
521
679
lambdef
522
679
lambda
523
679
None
524
679
test
525
679
expr
526
679
NUMBER
527
679
and_test
528
679
~
529
679
not
530
680
NAME
12
680
True
1
680
atom_expr
5
680
term
29
680
atom
4
680
simple_stmt
1234
680
factor
11
680
shift_expr
7
680
arith_expr
8
680
False
27
680
and_expr
9
680
xor_expr
40
680
{
41
680
(
13
680
[
15
680
resetstats
16
680
STRING
46
680
raise
19
680
suite
1235
680
small_stmt
21
680
test
47
680
comparison
28
680
or_test
23
680
~
55
680
-
43
680
lambda
53
680
+
31
680
not_test
33
680
and_test
48
680
power
32
680
pass
73
680
None
34
680
lambdef
37
680
not
42
680
NUMBER
39
680
expr
50
680
continue
74
680
begsim
49
680
del_stmt
75
680
NEWLINE
1236
680
return
54
680
nonlocal
76
680
return_stmt
56
680
endsim
57
680
test_list
70
680
raise_stmt
59
680
assert_stmt
78
680
stat_stmt
79
680
global_stmt
61
680
continue_stmt
62
680
assert
63
680
break_stmt
64
680
nonlocal_stmt
80
680
expr_stmt
81
680
break
82
680
del
66
680
global
67
680
yield
83
680
pass_stmt
68
680
flow_stmt
71
680
yield_stmt
72
680
sim_stmt
84
681
except_clause
1237
681
except
1238
682
INDENT
1239
683
except
suite -> simple_stmt
684
NEWLINE
1240
685
**
1241
685
and
power -> atom_expr
685
^
power -> atom_expr
685
or
power -> atom_expr
685
else
power -> atom_expr
685
>>
power -> atom_expr
685
<
power -> atom_expr
685
>=
power -> atom_expr
685
!=
power -> atom_expr
685
is
power -> atom_expr
685
<=
power -> atom_expr
685
not
power -> atom_expr
685
//
power -> atom_expr
685
+
power -> atom_expr
685
==
power -> atom_expr
685
|
power -> atom_expr
685
-
power -> atom_expr
685
&
power -> atom_expr
685
/
power -> atom_expr
685
@
power -> atom_expr
685
<<
power -> atom_expr
685
%
power -> atom_expr
685
*
power -> atom_expr
685
in
power -> atom_expr
685
>
power -> atom_expr
686
trailer
1242
686
trailer_expr
1243
686
[
1244
686
or
trailer_expr -> 
686
.
1245
686
(
1246
686
not
trailer_expr -> 
686
in
trailer_expr -> 
686
is
trailer_expr -> 
686
>=
trailer_expr -> 
686
-
trailer_expr -> 
686
@
trailer_expr -> 
686
<=
trailer_expr -> 
686
^
trailer_expr -> 
686
*
trailer_expr -> 
686
**
trailer_expr -> 
686
>
trailer_expr -> 
686
==
trailer_expr -> 
686
>>
trailer_expr -> 
686
<<
trailer_expr -> 
686
/
trailer_expr -> 
686
//
trailer_expr -> 
686
!=
trailer_expr -> 
686
<
trailer_expr -> 
686
&
trailer_expr -> 
686
|
trailer_expr -> 
686
else
trailer_expr -> 
686
and
trailer_expr -> 
686
+
trailer_expr -> 
686
%
trailer_expr -> 
687
~
710
687
atom_expr
685
687
factor
1247
687
atom
686
687
False
692
687
-
687
687
(
698
687
NUMBER
708
687
True
690
687
+
695
687
NAME
693
687
{
694
687
None
707
687
[
697
687
STRING
699
687
power
704
688
%
1248
688
*
1249
688
/
1250
688
//
1251
688
@
1252
688
not
term -> factor
688
<<
term -> factor
688
or
term -> factor
688
^
term -> factor
688
in
term -> factor
688
else
term -> factor
688
and
term -> factor
688
<=
term -> factor
688
&
term -> factor
688
>>
term -> factor
688
>
term -> factor
688
|
term -> factor
688
<
term -> factor
688
is
term -> factor
688
!=
term -> factor
688
>=
term -> factor
688
==
term -> factor
688
-
term -> factor
688
+
term -> factor
689
or
1253
689
else
or_test -> and_test
690
!=
atom -> True
690
&
atom -> True
690
+
atom -> True
690
<<
atom -> True
690
@
atom -> True
690
and
atom -> True
690
is
atom -> True
690
else
atom -> True
690
<
atom -> True
690
|
atom -> True
690
>=
atom -> True
690
or
atom -> True
690
==
atom -> True
690
%
atom -> True
690
>
atom -> True
690
[
atom -> True
690
*
atom -> True
690
//
atom -> True
690
/
atom -> True
690
in
atom -> True
690
-
atom -> True
690
^
atom -> True
690
<=
atom -> True
690
(
atom -> True
690
**
atom -> True
690
.
atom -> True
690
not
atom -> True
690
>>
atom -> True
691
or
shift_expr -> arith_expr
691
>>
1254
691
<<
1255
691
else
shift_expr -> arith_expr
691
^
shift_expr -> arith_expr
691
in
shift_expr -> arith_expr
691
<=
shift_expr -> arith_expr
691
>=
shift_expr -> arith_expr
691
&
shift_expr -> arith_expr
691
==
shift_expr -> arith_expr
691
not
shift_expr -> arith_expr
691
and
shift_expr -> arith_expr
691
>
shift_expr -> arith_expr
691
!=
shift_expr -> arith_expr
691
|
shift_expr -> arith_expr
691
<
shift_expr -> arith_expr
691
is
shift_expr -> arith_expr
692
not
atom -> False
692
==
atom -> False
692
*
atom -> False
692
>
atom -> False
692
[
atom -> False
692
else
atom -> False
692
@
atom -> False
692
&
atom -> False
692
is
atom -> False
692
.
atom -> False
692
+
atom -> False
692
%
atom -> False
692
>=
atom -> False
692
and
atom -> False
692
(
atom -> False
692
|
atom -> False
692
-
atom -> False
692
/
atom -> False
692
in
atom -> False
692
<<
atom -> False
692
<=
atom -> False
692
^
atom -> False
692
//
atom -> False
692
>>
atom -> False
692
!=
atom -> False
692
**
atom -> False
692
or
atom -> False
692
<
atom -> False
693
.
atom -> NAME
693
<
atom -> NAME
693
|
atom -> NAME
693
not
atom -> NAME
693
[
atom -> NAME
693
+
atom -> NAME
693
%
atom -> NAME
693
<=
atom -> NAME
693
*
atom -> NAME
693
!=
atom -> NAME
693
in
atom -> NAME
693
is
atom -> NAME
693
(
atom -> NAME
693
^
atom -> NAME
693
else
atom -> NAME
693
@
atom -> NAME
693
&
atom -> NAME
693
>>
atom -> NAME
693
<<
atom -> NAME
693
-
atom -> NAME
693
/
atom -> NAME
693
or
atom -> NAME
693
//
atom -> NAME
693
>=
atom -> NAME
693
and
atom -> NAME
693
>
atom -> NAME
693
==
atom -> NAME
693
**
atom -> NAME
694
}
1256
695
~
710
695
atom_expr
685
695
atom
686
695
False
692
695
-
687
695
(
698
695
NUMBER
708
695
True
690
695
+
695
695
NAME
693
695
{
694
695
None
707
695
[
697
695
STRING
699
695
power
704
695
factor
1257
696
^
1258
696
<
xor_expr -> and_expr
696
<=
xor_expr -> and_expr
696
|
xor_expr -> and_expr
696
not
xor_expr -> and_expr
696
and
xor_expr -> and_expr
696
!=
xor_expr -> and_expr
696
or
xor_expr -> and_expr
696
>
xor_expr -> and_expr
696
>=
xor_expr -> and_expr
696
==
xor_expr -> and_expr
696
in
xor_expr -> and_expr
696
is
xor_expr -> and_expr
696
else
xor_expr -> and_expr
697
NAME
187
697
atom_expr
188
697
atom
189
697
-
190
697
factor
191
697
test_list_comp
1259
697
[
193
697
True
194
697
arith_expr
195
697
False
196
697
{
197
697
+
198
697
and_expr
199
697
(
200
697
STRING
201
697
]
1260
697
term
203
697
and_test
204
697
comparison
205
697
shift_expr
206
697
not_test
207
697
power
208
697
or_test
209
697
None
210
697
xor_expr
211
697
expr
212
697
NUMBER
213
697
lambda
214
697
~
215
697
lambdef
216
697
not
217
697
test
218
697
test_list
219
698
NAME
131
698
atom_expr
132
698
atom
133
698
-
134
698
factor
136
698
)
1261
698
[
137
698
True
138
698
arith_expr
139
698
False
140
698
{
141
698
+
142
698
and_expr
143
698
(
144
698
STRING
145
698
test_list_comp
1262
698
power
147
698
term
148
698
comparison
149
698
shift_expr
150
698
test
151
698
not_test
152
698
or_test
153
698
lambda
154
698
None
155
698
xor_expr
156
698
expr
157
698
NUMBER
158
698
and_test
159
698
~
160
698
lambdef
161
698
not
162
698
test_list
163
699
and
atom -> STRING
699
not
atom -> STRING
699
else
atom -> STRING
699
.
atom -> STRING
699
//
atom -> STRING
699
-
atom -> STRING
699
*
atom -> STRING
699
(
atom -> STRING
699
>=
atom -> STRING
699
<=
atom -> STRING
699
<<
atom -> STRING
699
+
atom -> STRING
699
or
atom -> STRING
699
/
atom -> STRING
699
@
atom -> STRING
699
in
atom -> STRING
699
>>
atom -> STRING
699
%
atom -> STRING
699
!=
atom -> STRING
699
>
atom -> STRING
699
^
atom -> STRING
699
<
atom -> STRING
699
==
atom -> STRING
699
**
atom -> STRING
699
&
atom -> STRING
699
|
atom -> STRING
699
is
atom -> STRING
699
[
atom -> STRING
700
+
1263
700
or
arith_expr -> term
700
==
arith_expr -> term
700
-
1264
700
else
arith_expr -> term
700
in
arith_expr -> term
700
<<
arith_expr -> term
700
>
arith_expr -> term
700
is
arith_expr -> term
700
>=
arith_expr -> term
700
<=
arith_expr -> term
700
and
arith_expr -> term
700
>>
arith_expr -> term
700
!=
arith_expr -> term
700
not
arith_expr -> term
700
&
arith_expr -> term
700
<
arith_expr -> term
700
^
arith_expr -> term
700
|
arith_expr -> term
701
or
not_test -> comparison
701
and
not_test -> comparison
701
else
not_test -> comparison
702
==
and_expr -> shift_expr
702
&
1265
702
!=
and_expr -> shift_expr
702
<
and_expr -> shift_expr
702
<=
and_expr -> shift_expr
702
and
and_expr -> shift_expr
702
in
and_expr -> shift_expr
702
^
and_expr -> shift_expr
702
not
and_expr -> shift_expr
702
else
and_expr -> shift_expr
702
is
and_expr -> shift_expr
702
>
and_expr -> shift_expr
702
or
and_expr -> shift_expr
702
>=
and_expr -> shift_expr
702
|
and_expr -> shift_expr
703
and
1266
703
or
and_test -> not_test
703
else
and_test -> not_test
704
<=
factor -> power
704
is
factor -> power
704
>
factor -> power
704
==
factor -> power
704
^
factor -> power
704
or
factor -> power
704
else
factor -> power
704
-
factor -> power
704
+
factor -> power
704
>>
factor -> power
704
/
factor -> power
704
*
factor -> power
704
<<
factor -> power
704
|
factor -> power
704
and
factor -> power
704
<
factor -> power
704
not
factor -> power
704
!=
factor -> power
704
&
factor -> power
704
in
factor -> power
704
%
factor -> power
704
>=
factor -> power
704
//
factor -> power
704
@
factor -> power
705
else
1267
706
|
1268
706
>
expr -> xor_expr
706
<
expr -> xor_expr
706
and
expr -> xor_expr
706
>=
expr -> xor_expr
706
!=
expr -> xor_expr
706
else
expr -> xor_expr
706
or
expr -> xor_expr
706
in
expr -> xor_expr
706
is
expr -> xor_expr
706
==
expr -> xor_expr
706
<=
expr -> xor_expr
706
not
expr -> xor_expr
707
+
atom -> None
707
>>
atom -> None
707
/
atom -> None
707
or
atom -> None
707
*
atom -> None
707
in
atom -> None
707
**
atom -> None
707
==
atom -> None
707
-
atom -> None
707
(
atom -> None
707
@
atom -> None
707
>=
atom -> None
707
[
atom -> None
707
^
atom -> None
707
&
atom -> None
707
<=
atom -> None
707
else
atom -> None
707
is
atom -> None
707
.
atom -> None
707
not
atom -> None
707
//
atom -> None
707
<
atom -> None
707
<<
atom -> None
707
!=
atom -> None
707
and
atom -> None
707
%
atom -> None
707
|
atom -> None
707
>
atom -> None
708
is
atom -> NUMBER
708
|
atom -> NUMBER
708
in
atom -> NUMBER
708
@
atom -> NUMBER
708
**
atom -> NUMBER
708
and
atom -> NUMBER
708
!=
atom -> NUMBER
708
-
atom -> NUMBER
708
<<
atom -> NUMBER
708
.
atom -> NUMBER
708
(
atom -> NUMBER
708
==
atom -> NUMBER
708
%
atom -> NUMBER
708
^
atom -> NUMBER
708
not
atom -> NUMBER
708
>=
atom -> NUMBER
708
/
atom -> NUMBER
708
//
atom -> NUMBER
708
>
atom -> NUMBER
708
&
atom -> NUMBER
708
[
atom -> NUMBER
708
else
atom -> NUMBER
708
<=
atom -> NUMBER
708
*
atom -> NUMBER
708
or
atom -> NUMBER
708
+
atom -> NUMBER
708
>>
atom -> NUMBER
708
<
atom -> NUMBER
709
==
330
709
>=
339
709
is
331
709
<=
332
709
and
comparison -> expr
709
not
336
709
!=
334
709
>
335
709
comp_op
1269
709
in
337
709
<
338
709
or
comparison -> expr
709
else
comparison -> expr
710
~
710
710
atom_expr
685
710
atom
686
710
False
692
710
-
687
710
(
698
710
factor
1270
710
NUMBER
708
710
True
690
710
+
695
710
NAME
693
710
{
694
710
None
707
710
[
697
710
STRING
699
710
power
704
711
atom_expr
685
711
atom
686
711
-
687
711
factor
688
711
True
690
711
arith_expr
691
711
False
692
711
NAME
693
711
{
694
711
+
695
711
and_expr
696
711
[
697
711
(
698
711
STRING
699
711
term
700
711
comparison
701
711
shift_expr
702
711
power
704
711
xor_expr
706
711
None
707
711
NUMBER
708
711
expr
709
711
~
710
711
not
711
711
not_test
1271
712
)
1272
712
parameters
1273
712
NAME
1274
712
tfpdef
1275
712
**
1276
712
param
1277
712
*
1278
713
and
arith_expr -> term + arith_expr
713
<
arith_expr -> term + arith_expr
713
|
arith_expr -> term + arith_expr
713
**=
arith_expr -> term + arith_expr
713
<<=
arith_expr -> term + arith_expr
713
>=
arith_expr -> term + arith_expr
713
>>
arith_expr -> term + arith_expr
713
-=
arith_expr -> term + arith_expr
713
//=
arith_expr -> term + arith_expr
713
/=
arith_expr -> term + arith_expr
713
:
arith_expr -> term + arith_expr
713
,
arith_expr -> term + arith_expr
713
+=
arith_expr -> term + arith_expr
713
if
arith_expr -> term + arith_expr
713
>
arith_expr -> term + arith_expr
713
>>=
arith_expr -> term + arith_expr
713
in
arith_expr -> term + arith_expr
713
is
arith_expr -> term + arith_expr
713
or
arith_expr -> term + arith_expr
713
<=
arith_expr -> term + arith_expr
713
|=
arith_expr -> term + arith_expr
713
not
arith_expr -> term + arith_expr
713
%=
arith_expr -> term + arith_expr
713
^
arith_expr -> term + arith_expr
713
!=
arith_expr -> term + arith_expr
713
^=
arith_expr -> term + arith_expr
713
@=
arith_expr -> term + arith_expr
713
==
arith_expr -> term + arith_expr
713
=
arith_expr -> term + arith_expr
713
&=
arith_expr -> term + arith_expr
713
NEWLINE
arith_expr -> term + arith_expr
713
*=
arith_expr -> term + arith_expr
713
<<
arith_expr -> term + arith_expr
713
&
arith_expr -> term + arith_expr
714
NEWLINE
arith_expr -> term - arith_expr
714
if
arith_expr -> term - arith_expr
714
<<
arith_expr -> term - arith_expr
714
:
arith_expr -> term - arith_expr
714
<
arith_expr -> term - arith_expr
714
^=
arith_expr -> term - arith_expr
714
=
arith_expr -> term - arith_expr
714
<=
arith_expr -> term - arith_expr
714
%=
arith_expr -> term - arith_expr
714
<<=
arith_expr -> term - arith_expr
714
and
arith_expr -> term - arith_expr
714
in
arith_expr -> term - arith_expr
714
&
arith_expr -> term - arith_expr
714
|
arith_expr -> term - arith_expr
714
==
arith_expr -> term - arith_expr
714
is
arith_expr -> term - arith_expr
714
+=
arith_expr -> term - arith_expr
714
|=
arith_expr -> term - arith_expr
714
>>
arith_expr -> term - arith_expr
714
//=
arith_expr -> term - arith_expr
714
!=
arith_expr -> term - arith_expr
714
>
arith_expr -> term - arith_expr
714
or
arith_expr -> term - arith_expr
714
**=
arith_expr -> term - arith_expr
714
*=
arith_expr -> term - arith_expr
714
,
arith_expr -> term - arith_expr
714
-=
arith_expr -> term - arith_expr
714
>>=
arith_expr -> term - arith_expr
714
>=
arith_expr -> term - arith_expr
714
&=
arith_expr -> term - arith_expr
714
/=
arith_expr -> term - arith_expr
714
^
arith_expr -> term - arith_expr
714
not
arith_expr -> term - arith_expr
714
@=
arith_expr -> term - arith_expr
715
@=
and_test -> not_test and and_test
715
//=
and_test -> not_test and and_test
715
:
and_test -> not_test and and_test
715
*=
and_test -> not_test and and_test
715
>>=
and_test -> not_test and and_test
715
=
and_test -> not_test and and_test
715
^=
and_test -> not_test and and_test
715
/=
and_test -> not_test and and_test
715
,
and_test -> not_test and and_test
715
or
and_test -> not_test and and_test
715
|=
and_test -> not_test and and_test
715
-=
and_test -> not_test and and_test
715
%=
and_test -> not_test and and_test
715
NEWLINE
and_test -> not_test and and_test
715
+=
and_test -> not_test and and_test
715
<<=
and_test -> not_test and and_test
715
&=
and_test -> not_test and and_test
715
if
and_test -> not_test and and_test
715
**=
and_test -> not_test and and_test
716
NAME
260
716
atom_expr
261
716
atom
263
716
-
264
716
[
268
716
True
269
716
False
270
716
{
271
716
(
272
716
+
273
716
STRING
276
716
factor
1279
716
power
281
716
None
282
716
NUMBER
284
716
~
285
717
NAME
260
717
atom_expr
261
717
term
262
717
atom
263
717
-
264
717
factor
266
717
[
268
717
True
269
717
False
270
717
{
271
717
(
272
717
+
273
717
STRING
276
717
arith_expr
1280
717
power
281
717
None
282
717
NUMBER
284
717
~
285
718
NAME
260
718
atom_expr
261
718
term
262
718
atom
263
718
-
264
718
factor
266
718
[
268
718
True
269
718
False
270
718
{
271
718
(
272
718
+
273
718
STRING
276
718
arith_expr
1281
718
power
281
718
None
282
718
NUMBER
284
718
~
285
719
trailer
719
719
trailer_expr
1282
719
[
721
719
(
722
719
or
trailer_expr -> 
719
.
723
719
not
trailer_expr -> 
719
in
trailer_expr -> 
719
is
trailer_expr -> 
719
>=
trailer_expr -> 
719
-
trailer_expr -> 
719
@
trailer_expr -> 
719
<=
trailer_expr -> 
719
,
trailer_expr -> 
719
^
trailer_expr -> 
719
*
trailer_expr -> 
719
if
trailer_expr -> 
719
**
trailer_expr -> 
719
>
trailer_expr -> 
719
==
trailer_expr -> 
719
>>
trailer_expr -> 
719
<<
trailer_expr -> 
719
/
trailer_expr -> 
719
//
trailer_expr -> 
719
!=
trailer_expr -> 
719
<
trailer_expr -> 
719
&
trailer_expr -> 
719
:
trailer_expr -> 
719
|
trailer_expr -> 
719
and
trailer_expr -> 
719
+
trailer_expr -> 
719
%
trailer_expr -> 
719
as
trailer_expr -> 
720
|
atom_expr -> atom trailer_expr
720
*
atom_expr -> atom trailer_expr
720
-
atom_expr -> atom trailer_expr
720
:
atom_expr -> atom trailer_expr
720
not
atom_expr -> atom trailer_expr
720
in
atom_expr -> atom trailer_expr
720
and
atom_expr -> atom trailer_expr
720
^
atom_expr -> atom trailer_expr
720
or
atom_expr -> atom trailer_expr
720
<=
atom_expr -> atom trailer_expr
720
<
atom_expr -> atom trailer_expr
720
>>
atom_expr -> atom trailer_expr
720
//
atom_expr -> atom trailer_expr
720
!=
atom_expr -> atom trailer_expr
720
<<
atom_expr -> atom trailer_expr
720
+
atom_expr -> atom trailer_expr
720
>
atom_expr -> atom trailer_expr
720
/
atom_expr -> atom trailer_expr
720
==
atom_expr -> atom trailer_expr
720
%
atom_expr -> atom trailer_expr
720
&
atom_expr -> atom trailer_expr
720
@
atom_expr -> atom trailer_expr
720
if
atom_expr -> atom trailer_expr
720
>=
atom_expr -> atom trailer_expr
720
as
atom_expr -> atom trailer_expr
720
is
atom_expr -> atom trailer_expr
720
,
atom_expr -> atom trailer_expr
720
**
atom_expr -> atom trailer_expr
721
NAME
461
721
atom_expr
462
721
term
463
721
atom
464
721
-
465
721
factor
466
721
[
467
721
True
468
721
arith_expr
469
721
False
470
721
{
471
721
(
472
721
+
473
721
and_expr
474
721
and_test
475
721
STRING
476
721
subscriptlist
1283
721
comparison
478
721
shift_expr
479
721
not_test
480
721
power
481
721
None
482
721
xor_expr
483
721
expr
484
721
NUMBER
485
721
test
486
721
~
487
721
or_test
488
721
not
489
721
lambdef
490
721
:
maybe_test -> 
721
lambda
491
721
subscript
492
721
maybe_test
493
722
NAME
496
722
atom_expr
497
722
atom
498
722
-
499
722
arglist
1284
722
factor
501
722
*
502
722
[
503
722
True
504
722
arith_expr
505
722
xor_expr
506
722
False
507
722
**
508
722
{
509
722
+
510
722
)
1285
722
and_expr
512
722
(
513
722
STRING
514
722
power
515
722
term
516
722
comparison
517
722
shift_expr
518
722
argument
519
722
not_test
520
722
or_test
521
722
lambdef
522
722
lambda
523
722
None
524
722
test
525
722
expr
526
722
NUMBER
527
722
and_test
528
722
~
529
722
not
530
723
NAME
1286
724
>>
factor -> - factor
724
if
factor -> - factor
724
>
factor -> - factor
724
,
factor -> - factor
724
is
factor -> - factor
724
//
factor -> - factor
724
not
factor -> - factor
724
or
factor -> - factor
724
as
factor -> - factor
724
-
factor -> - factor
724
<<
factor -> - factor
724
>=
factor -> - factor
724
/
factor -> - factor
724
<=
factor -> - factor
724
<
factor -> - factor
724
in
factor -> - factor
724
|
factor -> - factor
724
*
factor -> - factor
724
!=
factor -> - factor
724
&
factor -> - factor
724
and
factor -> - factor
724
^
factor -> - factor
724
+
factor -> - factor
724
:
factor -> - factor
724
%
factor -> - factor
724
==
factor -> - factor
724
@
factor -> - factor
725
NAME
12
725
suite
1287
725
True
1
725
atom_expr
5
725
term
29
725
atom
4
725
simple_stmt
1234
725
factor
11
725
shift_expr
7
725
arith_expr
8
725
False
27
725
and_expr
9
725
xor_expr
40
725
{
41
725
(
13
725
[
15
725
resetstats
16
725
STRING
46
725
raise
19
725
small_stmt
21
725
test
47
725
comparison
28
725
or_test
23
725
~
55
725
-
43
725
lambda
53
725
+
31
725
not_test
33
725
and_test
48
725
power
32
725
pass
73
725
None
34
725
lambdef
37
725
not
42
725
NUMBER
39
725
expr
50
725
continue
74
725
begsim
49
725
del_stmt
75
725
NEWLINE
1236
725
return
54
725
nonlocal
76
725
return_stmt
56
725
endsim
57
725
test_list
70
725
raise_stmt
59
725
assert_stmt
78
725
stat_stmt
79
725
global_stmt
61
725
continue_stmt
62
725
assert
63
725
break_stmt
64
725
nonlocal_stmt
80
725
expr_stmt
81
725
break
82
725
del
66
725
global
67
725
yield
83
725
pass_stmt
68
725
flow_stmt
71
725
yield_stmt
72
725
sim_stmt
84
726
NAME
260
726
atom_expr
261
726
atom
263
726
-
264
726
factor
266
726
[
268
726
True
269
726
False
270
726
{
271
726
(
272
726
+
273
726
STRING
276
726
term
1288
726
power
281
726
None
282
726
NUMBER
284
726
~
285
727
NAME
260
727
atom_expr
261
727
atom
263
727
-
264
727
factor
266
727
[
268
727
True
269
727
False
270
727
{
271
727
(
272
727
+
273
727
STRING
276
727
term
1289
727
power
281
727
None
282
727
NUMBER
284
727
~
285
728
NAME
260
728
atom_expr
261
728
atom
263
728
-
264
728
factor
266
728
[
268
728
True
269
728
False
270
728
term
1290
728
{
271
728
(
272
728
+
273
728
STRING
276
728
power
281
728
None
282
728
NUMBER
284
728
~
285
729
NAME
260
729
atom_expr
261
729
atom
263
729
-
264
729
factor
266
729
[
268
729
True
269
729
False
270
729
{
271
729
(
272
729
+
273
729
STRING
276
729
term
1291
729
power
281
729
None
282
729
NUMBER
284
729
~
285
730
NAME
260
730
atom_expr
261
730
atom
263
730
-
264
730
factor
266
730
[
268
730
True
269
730
False
270
730
{
271
730
(
272
730
+
273
730
STRING
276
730
term
1292
730
power
281
730
None
282
730
NUMBER
284
730
~
285
731
NAME
260
731
atom_expr
261
731
term
262
731
atom
263
731
-
264
731
factor
266
731
arith_expr
267
731
[
268
731
True
269
731
False
270
731
{
271
731
(
272
731
+
273
731
STRING
276
731
shift_expr
1293
731
power
281
731
None
282
731
NUMBER
284
731
~
285
732
NAME
260
732
atom_expr
261
732
term
262
732
atom
263
732
-
264
732
factor
266
732
arith_expr
267
732
[
268
732
True
269
732
False
270
732
{
271
732
shift_expr
1294
732
+
273
732
(
272
732
STRING
276
732
power
281
732
None
282
732
NUMBER
284
732
~
285
733
]
1295
734
and
atom -> [ ]
734
<<
atom -> [ ]
734
//
atom -> [ ]
734
*
atom -> [ ]
734
+
atom -> [ ]
734
^
atom -> [ ]
734
==
atom -> [ ]
734
>>
atom -> [ ]
734
/
atom -> [ ]
734
:
atom -> [ ]
734
in
atom -> [ ]
734
>
atom -> [ ]
734
<=
atom -> [ ]
734
.
atom -> [ ]
734
%
atom -> [ ]
734
&
atom -> [ ]
734
-
atom -> [ ]
734
>=
atom -> [ ]
734
not
atom -> [ ]
734
|
atom -> [ ]
734
@
atom -> [ ]
734
is
atom -> [ ]
734
or
atom -> [ ]
734
as
atom -> [ ]
734
!=
atom -> [ ]
734
if
atom -> [ ]
734
,
atom -> [ ]
734
**
atom -> [ ]
734
<
atom -> [ ]
734
(
atom -> [ ]
734
[
atom -> [ ]
735
%
atom -> { }
735
[
atom -> { }
735
not
atom -> { }
735
^
atom -> { }
735
or
atom -> { }
735
-
atom -> { }
735
>=
atom -> { }
735
<<
atom -> { }
735
/
atom -> { }
735
<=
atom -> { }
735
|
atom -> { }
735
>>
atom -> { }
735
:
atom -> { }
735
@
atom -> { }
735
is
atom -> { }
735
if
atom -> { }
735
as
atom -> { }
735
and
atom -> { }
735
==
atom -> { }
735
in
atom -> { }
735
**
atom -> { }
735
&
atom -> { }
735
>
atom -> { }
735
//
atom -> { }
735
(
atom -> { }
735
+
atom -> { }
735
<
atom -> { }
735
,
atom -> { }
735
!=
atom -> { }
735
.
atom -> { }
735
*
atom -> { }
736
|
atom -> ( )
736
**
atom -> ( )
736
>>
atom -> ( )
736
-
atom -> ( )
736
%
atom -> ( )
736
(
atom -> ( )
736
not
atom -> ( )
736
+
atom -> ( )
736
>=
atom -> ( )
736
&
atom -> ( )
736
*
atom -> ( )
736
!=
atom -> ( )
736
<=
atom -> ( )
736
and
atom -> ( )
736
<
atom -> ( )
736
^
atom -> ( )
736
==
atom -> ( )
736
if
atom -> ( )
736
in
atom -> ( )
736
/
atom -> ( )
736
>
atom -> ( )
736
//
atom -> ( )
736
.
atom -> ( )
736
as
atom -> ( )
736
or
atom -> ( )
736
@
atom -> ( )
736
is
atom -> ( )
736
:
atom -> ( )
736
<<
atom -> ( )
736
,
atom -> ( )
736
[
atom -> ( )
737
)
1296
738
>>
factor -> + factor
738
>=
factor -> + factor
738
as
factor -> + factor
738
or
factor -> + factor
738
==
factor -> + factor
738
-
factor -> + factor
738
:
factor -> + factor
738
*
factor -> + factor
738
<
factor -> + factor
738
^
factor -> + factor
738
,
factor -> + factor
738
&
factor -> + factor
738
@
factor -> + factor
738
|
factor -> + factor
738
<<
factor -> + factor
738
%
factor -> + factor
738
not
factor -> + factor
738
//
factor -> + factor
738
and
factor -> + factor
738
in
factor -> + factor
738
!=
factor -> + factor
738
>
factor -> + factor
738
/
factor -> + factor
738
is
factor -> + factor
738
+
factor -> + factor
738
if
factor -> + factor
738
<=
factor -> + factor
739
NAME
260
739
atom_expr
261
739
term
262
739
atom
263
739
-
264
739
factor
266
739
arith_expr
267
739
[
268
739
True
269
739
False
270
739
{
271
739
(
272
739
+
273
739
and_expr
274
739
STRING
276
739
xor_expr
1297
739
shift_expr
279
739
power
281
739
None
282
739
NUMBER
284
739
~
285
740
NAME
260
740
atom_expr
261
740
term
262
740
atom
263
740
-
264
740
factor
266
740
arith_expr
267
740
[
268
740
True
269
740
False
270
740
{
271
740
(
272
740
+
273
740
and_expr
274
740
and_test
275
740
STRING
276
740
xor_expr
277
740
comparison
278
740
shift_expr
279
740
not_test
280
740
power
281
740
None
282
740
expr
283
740
NUMBER
284
740
~
285
740
or_test
1298
740
not
290
741
NAME
260
741
atom_expr
261
741
term
262
741
atom
263
741
-
264
741
factor
266
741
arith_expr
267
741
[
268
741
True
269
741
False
270
741
{
271
741
(
272
741
+
273
741
and_expr
274
741
STRING
276
741
xor_expr
277
741
shift_expr
279
741
power
281
741
None
282
741
NUMBER
284
741
expr
1299
741
~
285
742
NAME
260
742
atom_expr
261
742
term
262
742
atom
263
742
-
264
742
factor
266
742
arith_expr
267
742
[
268
742
True
269
742
False
270
742
{
271
742
(
272
742
+
273
742
STRING
276
742
shift_expr
279
742
and_expr
1300
742
power
281
742
None
282
742
NUMBER
284
742
~
285
743
NAME
260
743
atom_expr
261
743
term
262
743
atom
263
743
and_test
1301
743
-
264
743
factor
266
743
arith_expr
267
743
[
268
743
True
269
743
False
270
743
{
271
743
(
272
743
+
273
743
and_expr
274
743
STRING
276
743
xor_expr
277
743
comparison
278
743
shift_expr
279
743
not_test
280
743
power
281
743
None
282
743
expr
283
743
NUMBER
284
743
~
285
743
not
290
744
NAME
260
744
atom_expr
261
744
term
262
744
atom
263
744
-
264
744
factor
266
744
arith_expr
267
744
[
268
744
True
269
744
False
270
744
{
271
744
(
272
744
+
273
744
and_expr
274
744
STRING
276
744
xor_expr
277
744
shift_expr
279
744
power
281
744
None
282
744
expr
283
744
NUMBER
284
744
~
285
744
comparison
1302
745
is
factor -> ~ factor
745
>=
factor -> ~ factor
745
<<
factor -> ~ factor
745
<=
factor -> ~ factor
745
if
factor -> ~ factor
745
==
factor -> ~ factor
745
//
factor -> ~ factor
745
or
factor -> ~ factor
745
+
factor -> ~ factor
745
as
factor -> ~ factor
745
and
factor -> ~ factor
745
!=
factor -> ~ factor
745
&
factor -> ~ factor
745
:
factor -> ~ factor
745
|
factor -> ~ factor
745
>>
factor -> ~ factor
745
in
factor -> ~ factor
745
>
factor -> ~ factor
745
/
factor -> ~ factor
745
not
factor -> ~ factor
745
@
factor -> ~ factor
745
-
factor -> ~ factor
745
^
factor -> ~ factor
745
,
factor -> ~ factor
745
*
factor -> ~ factor
745
<
factor -> ~ factor
745
%
factor -> ~ factor
746
:
1303
747
NAME
260
747
atom_expr
261
747
term
262
747
atom
263
747
-
264
747
factor
266
747
arith_expr
267
747
[
268
747
True
269
747
False
270
747
{
271
747
(
272
747
+
273
747
and_expr
274
747
and_test
275
747
STRING
276
747
xor_expr
277
747
comparison
278
747
shift_expr
279
747
not_test
280
747
power
281
747
None
282
747
expr
283
747
NUMBER
284
747
~
285
747
lambda
286
747
or_test
287
747
lambdef
289
747
not
290
747
test
1304
748
atom_expr
685
748
atom
686
748
-
687
748
factor
688
748
and_test
689
748
True
690
748
arith_expr
691
748
False
692
748
NAME
693
748
{
694
748
+
695
748
and_expr
696
748
[
697
748
(
698
748
STRING
699
748
term
700
748
comparison
701
748
shift_expr
702
748
not_test
703
748
power
704
748
xor_expr
706
748
None
707
748
NUMBER
708
748
expr
709
748
or_test
1305
748
~
710
748
not
711
749
NAME
260
749
atom_expr
261
749
term
262
749
atom
263
749
-
264
749
factor
266
749
arith_expr
267
749
[
268
749
True
269
749
False
270
749
{
271
749
(
272
749
+
273
749
and_expr
274
749
and_test
275
749
STRING
276
749
xor_expr
277
749
comparison
278
749
shift_expr
279
749
not_test
280
749
power
281
749
None
282
749
expr
283
749
NUMBER
284
749
~
285
749
lambda
286
749
or_test
287
749
with_item
288
749
lambdef
289
749
not
290
749
test
291
749
with_items
1306
750
,
not_test -> not not_test
750
:
not_test -> not not_test
750
or
not_test -> not not_test
750
if
not_test -> not not_test
750
as
not_test -> not not_test
750
and
not_test -> not not_test
751
~
1307
751
term
1308
751
atom
1309
751
False
1310
751
atom_expr
1311
751
NUMBER
1312
751
[
1313
751
True
1314
751
NAME
1315
751
(
1316
751
+
1317
751
factor
1318
751
None
1319
751
-
1320
751
{
1321
751
arith_expr
1322
751
xor_expr
1323
751
STRING
1324
751
power
1325
751
shift_expr
1326
751
and_expr
1327
751
expr
1328
752
is
expr -> xor_expr | expr
752
>
expr -> xor_expr | expr
752
/=
expr -> xor_expr | expr
752
**=
expr -> xor_expr | expr
752
if
expr -> xor_expr | expr
752
<=
expr -> xor_expr | expr
752
>=
expr -> xor_expr | expr
752
!=
expr -> xor_expr | expr
752
NEWLINE
expr -> xor_expr | expr
752
or
expr -> xor_expr | expr
752
+=
expr -> xor_expr | expr
752
and
expr -> xor_expr | expr
752
&=
expr -> xor_expr | expr
752
=
expr -> xor_expr | expr
752
<<=
expr -> xor_expr | expr
752
^=
expr -> xor_expr | expr
752
<
expr -> xor_expr | expr
752
%=
expr -> xor_expr | expr
752
@=
expr -> xor_expr | expr
752
not
expr -> xor_expr | expr
752
==
expr -> xor_expr | expr
752
*=
expr -> xor_expr | expr
752
,
expr -> xor_expr | expr
752
-=
expr -> xor_expr | expr
752
in
expr -> xor_expr | expr
752
//=
expr -> xor_expr | expr
752
>>=
expr -> xor_expr | expr
752
:
expr -> xor_expr | expr
752
|=
expr -> xor_expr | expr
753
^=
test_list -> test , test_list
753
//=
test_list -> test , test_list
753
|=
test_list -> test , test_list
753
<<=
test_list -> test , test_list
753
-=
test_list -> test , test_list
753
NEWLINE
test_list -> test , test_list
753
/=
test_list -> test , test_list
753
=
test_list -> test , test_list
753
+=
test_list -> test , test_list
753
:
test_list -> test , test_list
753
%=
test_list -> test , test_list
753
@=
test_list -> test , test_list
753
**=
test_list -> test , test_list
753
>>=
test_list -> test , test_list
753
*=
test_list -> test , test_list
753
&=
test_list -> test , test_list
754
/=
or_test -> and_test or or_test
754
:
or_test -> and_test or or_test
754
**=
or_test -> and_test or or_test
754
<<=
or_test -> and_test or or_test
754
%=
or_test -> and_test or or_test
754
*=
or_test -> and_test or or_test
754
|=
or_test -> and_test or or_test
754
//=
or_test -> and_test or or_test
754
+=
or_test -> and_test or or_test
754
^=
or_test -> and_test or or_test
754
-=
or_test -> and_test or or_test
754
,
or_test -> and_test or or_test
754
NEWLINE
or_test -> and_test or or_test
754
if
or_test -> and_test or or_test
754
=
or_test -> and_test or or_test
754
@=
or_test -> and_test or or_test
754
&=
or_test -> and_test or or_test
754
>>=
or_test -> and_test or or_test
755
NAME
300
755
atom_expr
301
755
atom
303
755
-
304
755
True
306
755
False
308
755
{
309
755
+
310
755
[
312
755
(
313
755
STRING
314
755
factor
1329
755
power
318
755
None
319
755
NUMBER
322
755
~
325
756
NAME
300
756
atom_expr
301
756
term
302
756
atom
303
756
-
304
756
factor
305
756
True
306
756
False
308
756
{
309
756
+
310
756
[
312
756
(
313
756
STRING
314
756
arith_expr
1330
756
power
318
756
None
319
756
NUMBER
322
756
~
325
757
NAME
300
757
atom_expr
301
757
term
302
757
atom
303
757
-
304
757
factor
305
757
True
306
757
False
308
757
{
309
757
+
310
757
[
312
757
(
313
757
STRING
314
757
arith_expr
1331
757
power
318
757
None
319
757
NUMBER
322
757
~
325
758
trailer
758
758
trailer_expr
1332
758
[
760
758
or
trailer_expr -> 
758
.
761
758
(
762
758
not
trailer_expr -> 
758
in
trailer_expr -> 
758
is
trailer_expr -> 
758
>=
trailer_expr -> 
758
-
trailer_expr -> 
758
@
trailer_expr -> 
758
<=
trailer_expr -> 
758
^
trailer_expr -> 
758
*
trailer_expr -> 
758
if
trailer_expr -> 
758
**
trailer_expr -> 
758
>
trailer_expr -> 
758
==
trailer_expr -> 
758
>>
trailer_expr -> 
758
<<
trailer_expr -> 
758
/
trailer_expr -> 
758
NEWLINE
trailer_expr -> 
758
//
trailer_expr -> 
758
!=
trailer_expr -> 
758
<
trailer_expr -> 
758
&
trailer_expr -> 
758
|
trailer_expr -> 
758
and
trailer_expr -> 
758
+
trailer_expr -> 
758
%
trailer_expr -> 
759
|
atom_expr -> atom trailer_expr
759
*
atom_expr -> atom trailer_expr
759
-
atom_expr -> atom trailer_expr
759
not
atom_expr -> atom trailer_expr
759
in
atom_expr -> atom trailer_expr
759
and
atom_expr -> atom trailer_expr
759
^
atom_expr -> atom trailer_expr
759
or
atom_expr -> atom trailer_expr
759
<=
atom_expr -> atom trailer_expr
759
<
atom_expr -> atom trailer_expr
759
>>
atom_expr -> atom trailer_expr
759
NEWLINE
atom_expr -> atom trailer_expr
759
//
atom_expr -> atom trailer_expr
759
!=
atom_expr -> atom trailer_expr
759
<<
atom_expr -> atom trailer_expr
759
+
atom_expr -> atom trailer_expr
759
>
atom_expr -> atom trailer_expr
759
/
atom_expr -> atom trailer_expr
759
==
atom_expr -> atom trailer_expr
759
%
atom_expr -> atom trailer_expr
759
&
atom_expr -> atom trailer_expr
759
@
atom_expr -> atom trailer_expr
759
if
atom_expr -> atom trailer_expr
759
>=
atom_expr -> atom trailer_expr
759
is
atom_expr -> atom trailer_expr
759
**
atom_expr -> atom trailer_expr
760
NAME
461
760
atom_expr
462
760
term
463
760
atom
464
760
-
465
760
factor
466
760
[
467
760
True
468
760
arith_expr
469
760
False
470
760
{
471
760
(
472
760
+
473
760
and_expr
474
760
and_test
475
760
STRING
476
760
subscriptlist
1333
760
comparison
478
760
shift_expr
479
760
not_test
480
760
power
481
760
None
482
760
xor_expr
483
760
expr
484
760
NUMBER
485
760
test
486
760
~
487
760
or_test
488
760
not
489
760
lambdef
490
760
:
maybe_test -> 
760
lambda
491
760
subscript
492
760
maybe_test
493
761
NAME
1334
762
NAME
496
762
atom_expr
497
762
atom
498
762
-
499
762
arglist
1335
762
factor
501
762
*
502
762
[
503
762
True
504
762
arith_expr
505
762
xor_expr
506
762
False
507
762
**
508
762
{
509
762
+
510
762
)
1336
762
and_expr
512
762
(
513
762
STRING
514
762
power
515
762
term
516
762
comparison
517
762
shift_expr
518
762
argument
519
762
not_test
520
762
or_test
521
762
lambdef
522
762
lambda
523
762
None
524
762
test
525
762
expr
526
762
NUMBER
527
762
and_test
528
762
~
529
762
not
530
763
>>
factor -> - factor
763
if
factor -> - factor
763
>
factor -> - factor
763
is
factor -> - factor
763
//
factor -> - factor
763
not
factor -> - factor
763
or
factor -> - factor
763
-
factor -> - factor
763
<<
factor -> - factor
763
>=
factor -> - factor
763
/
factor -> - factor
763
<=
factor -> - factor
763
<
factor -> - factor
763
in
factor -> - factor
763
*
factor -> - factor
763
|
factor -> - factor
763
NEWLINE
factor -> - factor
763
!=
factor -> - factor
763
&
factor -> - factor
763
and
factor -> - factor
763
^
factor -> - factor
763
+
factor -> - factor
763
%
factor -> - factor
763
==
factor -> - factor
763
@
factor -> - factor
764
NAME
300
764
atom_expr
301
764
atom
303
764
-
304
764
factor
305
764
True
306
764
False
308
764
{
309
764
+
310
764
[
312
764
(
313
764
STRING
314
764
term
1337
764
power
318
764
None
319
764
NUMBER
322
764
~
325
765
NAME
300
765
atom_expr
301
765
atom
303
765
-
304
765
factor
305
765
True
306
765
False
308
765
term
1338
765
{
309
765
+
310
765
[
312
765
(
313
765
STRING
314
765
power
318
765
None
319
765
NUMBER
322
765
~
325
766
NAME
300
766
atom_expr
301
766
atom
303
766
-
304
766
factor
305
766
True
306
766
False
308
766
{
309
766
+
310
766
[
312
766
(
313
766
STRING
314
766
power
318
766
None
319
766
NUMBER
322
766
~
325
766
term
1339
767
NAME
300
767
atom_expr
301
767
atom
303
767
-
304
767
factor
305
767
term
1340
767
True
306
767
False
308
767
{
309
767
+
310
767
[
312
767
(
313
767
STRING
314
767
power
318
767
None
319
767
NUMBER
322
767
~
325
768
NAME
300
768
atom_expr
301
768
atom
303
768
-
304
768
factor
305
768
True
306
768
False
308
768
{
309
768
+
310
768
[
312
768
(
313
768
STRING
314
768
term
1341
768
power
318
768
None
319
768
NUMBER
322
768
~
325
769
NAME
300
769
atom_expr
301
769
term
302
769
atom
303
769
-
304
769
factor
305
769
True
306
769
arith_expr
307
769
False
308
769
{
309
769
+
310
769
[
312
769
(
313
769
STRING
314
769
shift_expr
1342
769
power
318
769
None
319
769
NUMBER
322
769
~
325
770
NAME
300
770
atom_expr
301
770
term
302
770
atom
303
770
-
304
770
factor
305
770
True
306
770
arith_expr
307
770
False
308
770
{
309
770
shift_expr
1343
770
+
310
770
[
312
770
(
313
770
STRING
314
770
power
318
770
None
319
770
NUMBER
322
770
~
325
771
%
atom -> { }
771
[
atom -> { }
771
not
atom -> { }
771
^
atom -> { }
771
or
atom -> { }
771
-
atom -> { }
771
>=
atom -> { }
771
<<
atom -> { }
771
/
atom -> { }
771
<=
atom -> { }
771
|
atom -> { }
771
>>
atom -> { }
771
@
atom -> { }
771
is
atom -> { }
771
if
atom -> { }
771
NEWLINE
atom -> { }
771
and
atom -> { }
771
==
atom -> { }
771
in
atom -> { }
771
**
atom -> { }
771
&
atom -> { }
771
>
atom -> { }
771
//
atom -> { }
771
(
atom -> { }
771
+
atom -> { }
771
<
atom -> { }
771
!=
atom -> { }
771
.
atom -> { }
771
*
atom -> { }
772
>>
factor -> + factor
772
>=
factor -> + factor
772
or
factor -> + factor
772
==
factor -> + factor
772
-
factor -> + factor
772
*
factor -> + factor
772
NEWLINE
factor -> + factor
772
<
factor -> + factor
772
^
factor -> + factor
772
&
factor -> + factor
772
@
factor -> + factor
772
|
factor -> + factor
772
<<
factor -> + factor
772
%
factor -> + factor
772
not
factor -> + factor
772
//
factor -> + factor
772
and
factor -> + factor
772
in
factor -> + factor
772
!=
factor -> + factor
772
>
factor -> + factor
772
/
factor -> + factor
772
is
factor -> + factor
772
+
factor -> + factor
772
if
factor -> + factor
772
<=
factor -> + factor
773
NAME
300
773
atom_expr
301
773
term
302
773
atom
303
773
-
304
773
factor
305
773
True
306
773
arith_expr
307
773
False
308
773
{
309
773
+
310
773
and_expr
311
773
[
312
773
(
313
773
STRING
314
773
xor_expr
1344
773
shift_expr
316
773
power
318
773
None
319
773
NUMBER
322
773
~
325
774
]
1345
775
and
atom -> [ ]
775
<<
atom -> [ ]
775
//
atom -> [ ]
775
*
atom -> [ ]
775
+
atom -> [ ]
775
^
atom -> [ ]
775
==
atom -> [ ]
775
>>
atom -> [ ]
775
/
atom -> [ ]
775
in
atom -> [ ]
775
NEWLINE
atom -> [ ]
775
>
atom -> [ ]
775
<=
atom -> [ ]
775
.
atom -> [ ]
775
%
atom -> [ ]
775
&
atom -> [ ]
775
-
atom -> [ ]
775
>=
atom -> [ ]
775
not
atom -> [ ]
775
|
atom -> [ ]
775
@
atom -> [ ]
775
is
atom -> [ ]
775
or
atom -> [ ]
775
!=
atom -> [ ]
775
if
atom -> [ ]
775
**
atom -> [ ]
775
<
atom -> [ ]
775
(
atom -> [ ]
775
[
atom -> [ ]
776
NEWLINE
atom -> ( )
776
|
atom -> ( )
776
**
atom -> ( )
776
>>
atom -> ( )
776
-
atom -> ( )
776
%
atom -> ( )
776
(
atom -> ( )
776
not
atom -> ( )
776
+
atom -> ( )
776
>=
atom -> ( )
776
&
atom -> ( )
776
*
atom -> ( )
776
!=
atom -> ( )
776
<=
atom -> ( )
776
and
atom -> ( )
776
<
atom -> ( )
776
^
atom -> ( )
776
==
atom -> ( )
776
if
atom -> ( )
776
in
atom -> ( )
776
/
atom -> ( )
776
>
atom -> ( )
776
//
atom -> ( )
776
.
atom -> ( )
776
or
atom -> ( )
776
@
atom -> ( )
776
is
atom -> ( )
776
<<
atom -> ( )
776
[
atom -> ( )
777
)
1346
778
NAME
300
778
atom_expr
301
778
term
302
778
atom
303
778
-
304
778
factor
305
778
True
306
778
arith_expr
307
778
False
308
778
{
309
778
+
310
778
[
312
778
(
313
778
STRING
314
778
shift_expr
316
778
power
318
778
None
319
778
and_expr
1347
778
NUMBER
322
778
~
325
779
NAME
300
779
atom_expr
301
779
term
302
779
atom
303
779
-
304
779
factor
305
779
True
306
779
arith_expr
307
779
False
308
779
{
309
779
+
310
779
and_expr
311
779
[
312
779
(
313
779
STRING
314
779
comparison
315
779
shift_expr
316
779
not_test
317
779
power
318
779
None
319
779
xor_expr
320
779
expr
321
779
NUMBER
322
779
and_test
1348
779
~
325
779
not
328
780
NAME
300
780
atom_expr
301
780
term
302
780
atom
303
780
-
304
780
factor
305
780
True
306
780
arith_expr
307
780
False
308
780
{
309
780
+
310
780
and_expr
311
780
[
312
780
(
313
780
STRING
314
780
shift_expr
316
780
power
318
780
None
319
780
xor_expr
320
780
NUMBER
322
780
expr
1349
780
~
325
781
NAME
300
781
atom_expr
301
781
term
302
781
atom
303
781
-
304
781
factor
305
781
True
306
781
arith_expr
307
781
False
308
781
{
309
781
+
310
781
and_expr
311
781
[
312
781
(
313
781
STRING
314
781
shift_expr
316
781
power
318
781
None
319
781
xor_expr
320
781
expr
321
781
NUMBER
322
781
~
325
781
comparison
1350
782
NAME
300
782
atom_expr
301
782
term
302
782
atom
303
782
-
304
782
factor
305
782
True
306
782
arith_expr
307
782
False
308
782
{
309
782
+
310
782
and_expr
311
782
[
312
782
(
313
782
STRING
314
782
comparison
315
782
shift_expr
316
782
not_test
317
782
power
318
782
None
319
782
xor_expr
320
782
expr
321
782
NUMBER
322
782
and_test
323
782
~
325
782
or_test
1351
782
not
328
783
atom_expr
685
783
atom
686
783
-
687
783
factor
688
783
and_test
689
783
True
690
783
arith_expr
691
783
False
692
783
NAME
693
783
{
694
783
+
695
783
and_expr
696
783
[
697
783
(
698
783
STRING
699
783
term
700
783
comparison
701
783
shift_expr
702
783
not_test
703
783
power
704
783
xor_expr
706
783
None
707
783
NUMBER
708
783
expr
709
783
~
710
783
not
711
783
or_test
1352
784
is
factor -> ~ factor
784
>=
factor -> ~ factor
784
<<
factor -> ~ factor
784
<=
factor -> ~ factor
784
if
factor -> ~ factor
784
==
factor -> ~ factor
784
//
factor -> ~ factor
784
or
factor -> ~ factor
784
+
factor -> ~ factor
784
and
factor -> ~ factor
784
!=
factor -> ~ factor
784
&
factor -> ~ factor
784
|
factor -> ~ factor
784
>>
factor -> ~ factor
784
in
factor -> ~ factor
784
NEWLINE
factor -> ~ factor
784
>
factor -> ~ factor
784
/
factor -> ~ factor
784
not
factor -> ~ factor
784
@
factor -> ~ factor
784
-
factor -> ~ factor
784
^
factor -> ~ factor
784
*
factor -> ~ factor
784
<
factor -> ~ factor
784
%
factor -> ~ factor
785
NAME
300
785
atom_expr
301
785
term
302
785
atom
303
785
-
304
785
factor
305
785
True
306
785
arith_expr
307
785
False
308
785
{
309
785
+
310
785
and_expr
311
785
[
312
785
(
313
785
STRING
314
785
comparison
315
785
shift_expr
316
785
not_test
317
785
power
318
785
None
319
785
xor_expr
320
785
expr
321
785
NUMBER
322
785
and_test
323
785
or_test
324
785
~
325
785
lambda
326
785
lambdef
327
785
not
328
785
test
1353
786
:
1354
787
if
not_test -> not not_test
787
or
not_test -> not not_test
787
NEWLINE
not_test -> not not_test
787
and
not_test -> not not_test
788
True
comp_op -> is not
788
~
comp_op -> is not
788
STRING
comp_op -> is not
788
NUMBER
comp_op -> is not
788
None
comp_op -> is not
788
{
comp_op -> is not
788
False
comp_op -> is not
788
+
comp_op -> is not
788
(
comp_op -> is not
788
NAME
comp_op -> is not
788
-
comp_op -> is not
788
[
comp_op -> is not
789
>>=
comparison -> expr comp_op comparison
789
//=
comparison -> expr comp_op comparison
789
|=
comparison -> expr comp_op comparison
789
+=
comparison -> expr comp_op comparison
789
or
comparison -> expr comp_op comparison
789
:
comparison -> expr comp_op comparison
789
**=
comparison -> expr comp_op comparison
789
/=
comparison -> expr comp_op comparison
789
NEWLINE
comparison -> expr comp_op comparison
789
and
comparison -> expr comp_op comparison
789
@=
comparison -> expr comp_op comparison
789
,
comparison -> expr comp_op comparison
789
-=
comparison -> expr comp_op comparison
789
^=
comparison -> expr comp_op comparison
789
=
comparison -> expr comp_op comparison
789
*=
comparison -> expr comp_op comparison
789
&=
comparison -> expr comp_op comparison
789
<<=
comparison -> expr comp_op comparison
789
if
comparison -> expr comp_op comparison
789
%=
comparison -> expr comp_op comparison
790
(
comp_op -> not in
790
{
comp_op -> not in
790
None
comp_op -> not in
790
NAME
comp_op -> not in
790
+
comp_op -> not in
790
NUMBER
comp_op -> not in
790
False
comp_op -> not in
790
-
comp_op -> not in
790
True
comp_op -> not in
790
STRING
comp_op -> not in
790
[
comp_op -> not in
790
~
comp_op -> not in
791
NAME
12
791
True
1
791
atom_expr
5
791
term
29
791
atom
4
791
factor
11
791
shift_expr
7
791
arith_expr
8
791
False
27
791
and_expr
9
791
xor_expr
40
791
{
41
791
(
13
791
[
15
791
STRING
46
791
comparison
28
791
or_test
23
791
~
55
791
-
43
791
lambda
53
791
+
31
791
not_test
33
791
and_test
48
791
power
32
791
None
34
791
lambdef
37
791
not
42
791
NUMBER
39
791
expr
50
791
test
1355
792
<<=
lambdef -> lambda : test
792
^=
lambdef -> lambda : test
792
//=
lambdef -> lambda : test
792
:
lambdef -> lambda : test
792
%=
lambdef -> lambda : test
792
-=
lambdef -> lambda : test
792
NEWLINE
lambdef -> lambda : test
792
=
lambdef -> lambda : test
792
>>=
lambdef -> lambda : test
792
@=
lambdef -> lambda : test
792
,
lambdef -> lambda : test
792
&=
lambdef -> lambda : test
792
/=
lambdef -> lambda : test
792
*=
lambdef -> lambda : test
792
**=
lambdef -> lambda : test
792
|=
lambdef -> lambda : test
792
+=
lambdef -> lambda : test
793
NAME
342
793
vfpdef
343
793
varargslist
1356
794
+
factor -> ~ factor
794
/
factor -> ~ factor
794
&
factor -> ~ factor
794
|
factor -> ~ factor
794
//
factor -> ~ factor
794
@
factor -> ~ factor
794
-
factor -> ~ factor
794
^
factor -> ~ factor
794
<<
factor -> ~ factor
794
>>
factor -> ~ factor
794
,
factor -> ~ factor
794
*
factor -> ~ factor
794
%
factor -> ~ factor
794
NEWLINE
factor -> ~ factor
795
~
344
795
term
345
795
atom
346
795
False
347
795
atom_expr
348
795
[
349
795
NUMBER
350
795
True
351
795
NAME
352
795
None
353
795
+
354
795
factor
355
795
-
356
795
(
357
795
arith_expr
1357
795
{
359
795
STRING
360
795
power
361
796
~
344
796
term
345
796
atom
346
796
False
347
796
atom_expr
348
796
[
349
796
NUMBER
350
796
True
351
796
NAME
352
796
None
353
796
+
354
796
factor
355
796
-
356
796
(
357
796
{
359
796
STRING
360
796
arith_expr
1358
796
power
361
797
trailer
797
797
(
798
797
>>
trailer_expr -> 
797
trailer_expr
1359
797
[
800
797
<<
trailer_expr -> 
797
/
trailer_expr -> 
797
NEWLINE
trailer_expr -> 
797
//
trailer_expr -> 
797
.
801
797
-
trailer_expr -> 
797
@
trailer_expr -> 
797
&
trailer_expr -> 
797
,
trailer_expr -> 
797
^
trailer_expr -> 
797
*
trailer_expr -> 
797
**
trailer_expr -> 
797
|
trailer_expr -> 
797
+
trailer_expr -> 
797
%
trailer_expr -> 
798
NAME
496
798
atom_expr
497
798
atom
498
798
-
499
798
factor
501
798
*
502
798
[
503
798
True
504
798
arith_expr
505
798
xor_expr
506
798
False
507
798
**
508
798
{
509
798
+
510
798
and_expr
512
798
(
513
798
STRING
514
798
power
515
798
term
516
798
comparison
517
798
arglist
1360
798
shift_expr
518
798
argument
519
798
not_test
520
798
or_test
521
798
lambdef
522
798
lambda
523
798
None
524
798
)
1361
798
test
525
798
expr
526
798
NUMBER
527
798
and_test
528
798
~
529
798
not
530
799
|
atom_expr -> atom trailer_expr
799
/
atom_expr -> atom trailer_expr
799
*
atom_expr -> atom trailer_expr
799
-
atom_expr -> atom trailer_expr
799
NEWLINE
atom_expr -> atom trailer_expr
799
//
atom_expr -> atom trailer_expr
799
&
atom_expr -> atom trailer_expr
799
^
atom_expr -> atom trailer_expr
799
%
atom_expr -> atom trailer_expr
799
<<
atom_expr -> atom trailer_expr
799
@
atom_expr -> atom trailer_expr
799
+
atom_expr -> atom trailer_expr
799
,
atom_expr -> atom trailer_expr
799
**
atom_expr -> atom trailer_expr
799
>>
atom_expr -> atom trailer_expr
800
NAME
461
800
atom_expr
462
800
term
463
800
atom
464
800
-
465
800
factor
466
800
[
467
800
True
468
800
arith_expr
469
800
False
470
800
{
471
800
(
472
800
+
473
800
and_expr
474
800
and_test
475
800
STRING
476
800
comparison
478
800
shift_expr
479
800
not_test
480
800
power
481
800
None
482
800
xor_expr
483
800
expr
484
800
NUMBER
485
800
test
486
800
~
487
800
or_test
488
800
subscriptlist
1362
800
not
489
800
lambdef
490
800
:
maybe_test -> 
800
lambda
491
800
subscript
492
800
maybe_test
493
801
NAME
1363
802
~
344
802
atom
346
802
False
347
802
atom_expr
348
802
[
349
802
NUMBER
350
802
True
351
802
NAME
352
802
None
353
802
+
354
802
-
356
802
(
357
802
{
359
802
STRING
360
802
factor
1364
802
power
361
803
]
1365
804
&
atom -> [ ]
804
-
atom -> [ ]
804
>>
atom -> [ ]
804
/
atom -> [ ]
804
<<
atom -> [ ]
804
//
atom -> [ ]
804
,
atom -> [ ]
804
**
atom -> [ ]
804
|
atom -> [ ]
804
*
atom -> [ ]
804
+
atom -> [ ]
804
NEWLINE
atom -> [ ]
804
@
atom -> [ ]
804
.
atom -> [ ]
804
(
atom -> [ ]
804
%
atom -> [ ]
804
^
atom -> [ ]
804
[
atom -> [ ]
805
<<
factor -> + factor
805
>>
factor -> + factor
805
%
factor -> + factor
805
*
factor -> + factor
805
NEWLINE
factor -> + factor
805
//
factor -> + factor
805
/
factor -> + factor
805
^
factor -> + factor
805
,
factor -> + factor
805
&
factor -> + factor
805
+
factor -> + factor
805
-
factor -> + factor
805
@
factor -> + factor
805
|
factor -> + factor
806
~
344
806
atom
346
806
False
347
806
atom_expr
348
806
[
349
806
NUMBER
350
806
True
351
806
NAME
352
806
None
353
806
+
354
806
factor
355
806
-
356
806
(
357
806
term
1366
806
{
359
806
STRING
360
806
power
361
807
~
344
807
atom
346
807
False
347
807
atom_expr
348
807
[
349
807
NUMBER
350
807
True
351
807
NAME
352
807
None
353
807
+
354
807
factor
355
807
-
356
807
(
357
807
{
359
807
term
1367
807
STRING
360
807
power
361
808
~
344
808
atom
346
808
False
347
808
atom_expr
348
808
[
349
808
NUMBER
350
808
True
351
808
NAME
352
808
None
353
808
+
354
808
factor
355
808
-
356
808
(
357
808
{
359
808
STRING
360
808
term
1368
808
power
361
809
~
344
809
atom
346
809
False
347
809
atom_expr
348
809
[
349
809
NUMBER
350
809
True
351
809
NAME
352
809
None
353
809
+
354
809
factor
355
809
-
356
809
(
357
809
term
1369
809
{
359
809
STRING
360
809
power
361
810
~
344
810
term
1370
810
atom
346
810
False
347
810
atom_expr
348
810
[
349
810
NUMBER
350
810
True
351
810
NAME
352
810
None
353
810
+
354
810
factor
355
810
-
356
810
(
357
810
{
359
810
STRING
360
810
power
361
811
&
factor -> - factor
811
//
factor -> - factor
811
>>
factor -> - factor
811
/
factor -> - factor
811
-
factor -> - factor
811
*
factor -> - factor
811
,
factor -> - factor
811
^
factor -> - factor
811
+
factor -> - factor
811
<<
factor -> - factor
811
%
factor -> - factor
811
|
factor -> - factor
811
NEWLINE
factor -> - factor
811
@
factor -> - factor
812
NEWLINE
atom -> ( )
812
+
atom -> ( )
812
@
atom -> ( )
812
|
atom -> ( )
812
^
atom -> ( )
812
,
atom -> ( )
812
**
atom -> ( )
812
>>
atom -> ( )
812
/
atom -> ( )
812
-
atom -> ( )
812
&
atom -> ( )
812
%
atom -> ( )
812
(
atom -> ( )
812
<<
atom -> ( )
812
//
atom -> ( )
812
*
atom -> ( )
812
.
atom -> ( )
812
[
atom -> ( )
813
)
1371
814
~
344
814
term
345
814
atom
346
814
False
347
814
atom_expr
348
814
[
349
814
NUMBER
350
814
True
351
814
NAME
352
814
None
353
814
+
354
814
factor
355
814
-
356
814
(
357
814
arith_expr
358
814
{
359
814
STRING
360
814
power
361
814
shift_expr
1372
815
~
344
815
term
345
815
atom
346
815
False
347
815
atom_expr
348
815
[
349
815
NUMBER
350
815
True
351
815
NAME
352
815
None
353
815
+
354
815
factor
355
815
-
356
815
(
357
815
arith_expr
358
815
{
359
815
shift_expr
1373
815
STRING
360
815
power
361
816
%
atom -> { }
816
**
atom -> { }
816
[
atom -> { }
816
&
atom -> { }
816
//
atom -> { }
816
(
atom -> { }
816
+
atom -> { }
816
<<
atom -> { }
816
/
atom -> { }
816
|
atom -> { }
816
NEWLINE
atom -> { }
816
^
atom -> { }
816
,
atom -> { }
816
.
atom -> { }
816
>>
atom -> { }
816
*
atom -> { }
816
@
atom -> { }
816
-
atom -> { }
817
~
344
817
term
345
817
atom
346
817
False
347
817
atom_expr
348
817
[
349
817
NUMBER
350
817
True
351
817
NAME
352
817
None
353
817
+
354
817
factor
355
817
-
356
817
(
357
817
arith_expr
358
817
{
359
817
STRING
360
817
power
361
817
and_expr
1374
817
shift_expr
362
818
~
344
818
term
345
818
atom
346
818
False
347
818
atom_expr
348
818
[
349
818
NUMBER
350
818
True
351
818
NAME
352
818
None
353
818
+
354
818
factor
355
818
-
356
818
(
357
818
arith_expr
358
818
{
359
818
STRING
360
818
power
361
818
shift_expr
362
818
xor_expr
363
818
expr
1375
818
and_expr
364
819
~
344
819
term
345
819
atom
346
819
False
347
819
atom_expr
348
819
[
349
819
NUMBER
350
819
True
351
819
NAME
352
819
None
353
819
+
354
819
factor
355
819
-
356
819
(
357
819
arith_expr
358
819
{
359
819
STRING
360
819
xor_expr
1376
819
power
361
819
shift_expr
362
819
and_expr
364
820
~
344
820
term
345
820
atom
346
820
False
347
820
atom_expr
348
820
[
349
820
NUMBER
350
820
True
351
820
NAME
352
820
None
353
820
+
354
820
factor
355
820
-
356
820
(
357
820
arith_expr
358
820
{
359
820
STRING
360
820
power
361
820
shift_expr
362
820
xor_expr
363
820
expr_list
1377
820
and_expr
364
820
expr
366
821
NAME
496
821
atom_expr
497
821
atom
498
821
-
499
821
factor
501
821
*
502
821
[
503
821
True
504
821
arith_expr
505
821
xor_expr
506
821
False
507
821
**
508
821
{
509
821
+
510
821
and_expr
512
821
(
513
821
STRING
514
821
power
515
821
term
516
821
comparison
517
821
shift_expr
518
821
argument
519
821
not_test
520
821
or_test
521
821
lambdef
522
821
lambda
523
821
None
524
821
test
525
821
expr
526
821
NUMBER
527
821
and_test
528
821
)
1378
821
~
529
821
arglist
1379
821
not
530
822
@
decorator -> @ dotted_name NEWLINE
822
def
decorator -> @ dotted_name NEWLINE
822
class
decorator -> @ dotted_name NEWLINE
823
NAME
369
823
dotted_name
1380
824
NAME
371
824
atom_expr
372
824
atom
374
824
-
375
824
[
377
824
True
378
824
False
380
824
{
381
824
+
382
824
(
384
824
STRING
385
824
factor
1381
824
power
389
824
None
390
824
NUMBER
393
824
~
396
825
NAME
371
825
atom_expr
372
825
term
373
825
atom
374
825
-
375
825
factor
376
825
[
377
825
True
378
825
False
380
825
{
381
825
+
382
825
(
384
825
STRING
385
825
arith_expr
1382
825
power
389
825
None
390
825
NUMBER
393
825
~
396
826
NAME
371
826
atom_expr
372
826
term
373
826
atom
374
826
-
375
826
factor
376
826
[
377
826
True
378
826
False
380
826
{
381
826
+
382
826
(
384
826
STRING
385
826
arith_expr
1383
826
power
389
826
None
390
826
NUMBER
393
826
~
396
827
trailer
827
827
trailer_expr
1384
827
[
829
827
or
trailer_expr -> 
827
.
830
827
(
831
827
not
trailer_expr -> 
827
in
trailer_expr -> 
827
is
trailer_expr -> 
827
>=
trailer_expr -> 
827
-
trailer_expr -> 
827
@
trailer_expr -> 
827
<=
trailer_expr -> 
827
,
trailer_expr -> 
827
^
trailer_expr -> 
827
*
trailer_expr -> 
827
if
trailer_expr -> 
827
**
trailer_expr -> 
827
>
trailer_expr -> 
827
==
trailer_expr -> 
827
>>
trailer_expr -> 
827
<<
trailer_expr -> 
827
/
trailer_expr -> 
827
NEWLINE
trailer_expr -> 
827
//
trailer_expr -> 
827
!=
trailer_expr -> 
827
<
trailer_expr -> 
827
&
trailer_expr -> 
827
|
trailer_expr -> 
827
and
trailer_expr -> 
827
+
trailer_expr -> 
827
%
trailer_expr -> 
828
|
atom_expr -> atom trailer_expr
828
*
atom_expr -> atom trailer_expr
828
-
atom_expr -> atom trailer_expr
828
not
atom_expr -> atom trailer_expr
828
in
atom_expr -> atom trailer_expr
828
and
atom_expr -> atom trailer_expr
828
^
atom_expr -> atom trailer_expr
828
or
atom_expr -> atom trailer_expr
828
<=
atom_expr -> atom trailer_expr
828
<
atom_expr -> atom trailer_expr
828
>>
atom_expr -> atom trailer_expr
828
NEWLINE
atom_expr -> atom trailer_expr
828
//
atom_expr -> atom trailer_expr
828
!=
atom_expr -> atom trailer_expr
828
<<
atom_expr -> atom trailer_expr
828
+
atom_expr -> atom trailer_expr
828
>
atom_expr -> atom trailer_expr
828
/
atom_expr -> atom trailer_expr
828
==
atom_expr -> atom trailer_expr
828
%
atom_expr -> atom trailer_expr
828
&
atom_expr -> atom trailer_expr
828
@
atom_expr -> atom trailer_expr
828
if
atom_expr -> atom trailer_expr
828
>=
atom_expr -> atom trailer_expr
828
is
atom_expr -> atom trailer_expr
828
,
atom_expr -> atom trailer_expr
828
**
atom_expr -> atom trailer_expr
829
NAME
461
829
atom_expr
462
829
term
463
829
atom
464
829
-
465
829
factor
466
829
[
467
829
True
468
829
arith_expr
469
829
False
470
829
{
471
829
(
472
829
+
473
829
and_expr
474
829
and_test
475
829
STRING
476
829
subscriptlist
1385
829
comparison
478
829
shift_expr
479
829
not_test
480
829
power
481
829
None
482
829
xor_expr
483
829
expr
484
829
NUMBER
485
829
test
486
829
~
487
829
or_test
488
829
not
489
829
lambdef
490
829
:
maybe_test -> 
829
lambda
491
829
subscript
492
829
maybe_test
493
830
NAME
1386
831
NAME
496
831
atom_expr
497
831
atom
498
831
-
499
831
arglist
1387
831
factor
501
831
*
502
831
[
503
831
True
504
831
arith_expr
505
831
xor_expr
506
831
False
507
831
**
508
831
{
509
831
+
510
831
)
1388
831
and_expr
512
831
(
513
831
STRING
514
831
power
515
831
term
516
831
comparison
517
831
shift_expr
518
831
argument
519
831
not_test
520
831
or_test
521
831
lambdef
522
831
lambda
523
831
None
524
831
test
525
831
expr
526
831
NUMBER
527
831
and_test
528
831
~
529
831
not
530
832
>>
factor -> - factor
832
if
factor -> - factor
832
>
factor -> - factor
832
,
factor -> - factor
832
is
factor -> - factor
832
//
factor -> - factor
832
not
factor -> - factor
832
or
factor -> - factor
832
-
factor -> - factor
832
<<
factor -> - factor
832
>=
factor -> - factor
832
/
factor -> - factor
832
<=
factor -> - factor
832
<
factor -> - factor
832
in
factor -> - factor
832
*
factor -> - factor
832
|
factor -> - factor
832
NEWLINE
factor -> - factor
832
!=
factor -> - factor
832
&
factor -> - factor
832
and
factor -> - factor
832
^
factor -> - factor
832
+
factor -> - factor
832
%
factor -> - factor
832
==
factor -> - factor
832
@
factor -> - factor
833
NAME
371
833
atom_expr
372
833
atom
374
833
-
375
833
factor
376
833
[
377
833
True
378
833
False
380
833
{
381
833
+
382
833
(
384
833
STRING
385
833
term
1389
833
power
389
833
None
390
833
NUMBER
393
833
~
396
834
NAME
371
834
atom_expr
372
834
atom
374
834
-
375
834
factor
376
834
[
377
834
True
378
834
False
380
834
term
1390
834
{
381
834
+
382
834
(
384
834
STRING
385
834
power
389
834
None
390
834
NUMBER
393
834
~
396
835
NAME
371
835
atom_expr
372
835
atom
374
835
-
375
835
factor
376
835
[
377
835
True
378
835
False
380
835
{
381
835
+
382
835
(
384
835
STRING
385
835
term
1391
835
power
389
835
None
390
835
NUMBER
393
835
~
396
836
NAME
371
836
atom_expr
372
836
atom
374
836
-
375
836
factor
376
836
term
1392
836
[
377
836
True
378
836
False
380
836
{
381
836
+
382
836
(
384
836
STRING
385
836
power
389
836
None
390
836
NUMBER
393
836
~
396
837
NAME
371
837
atom_expr
372
837
atom
374
837
-
375
837
factor
376
837
[
377
837
True
378
837
False
380
837
{
381
837
+
382
837
(
384
837
STRING
385
837
term
1393
837
power
389
837
None
390
837
NUMBER
393
837
~
396
838
]
1394
839
and
atom -> [ ]
839
<<
atom -> [ ]
839
//
atom -> [ ]
839
*
atom -> [ ]
839
+
atom -> [ ]
839
^
atom -> [ ]
839
==
atom -> [ ]
839
>>
atom -> [ ]
839
/
atom -> [ ]
839
in
atom -> [ ]
839
NEWLINE
atom -> [ ]
839
>
atom -> [ ]
839
<=
atom -> [ ]
839
.
atom -> [ ]
839
%
atom -> [ ]
839
&
atom -> [ ]
839
-
atom -> [ ]
839
>=
atom -> [ ]
839
not
atom -> [ ]
839
|
atom -> [ ]
839
@
atom -> [ ]
839
is
atom -> [ ]
839
or
atom -> [ ]
839
!=
atom -> [ ]
839
if
atom -> [ ]
839
,
atom -> [ ]
839
**
atom -> [ ]
839
<
atom -> [ ]
839
(
atom -> [ ]
839
[
atom -> [ ]
840
NAME
371
840
atom_expr
372
840
term
373
840
atom
374
840
-
375
840
factor
376
840
[
377
840
True
378
840
arith_expr
379
840
False
380
840
{
381
840
+
382
840
(
384
840
STRING
385
840
shift_expr
1395
840
power
389
840
None
390
840
NUMBER
393
840
~
396
841
NAME
371
841
atom_expr
372
841
term
373
841
atom
374
841
-
375
841
factor
376
841
[
377
841
True
378
841
arith_expr
379
841
False
380
841
{
381
841
shift_expr
1396
841
+
382
841
(
384
841
STRING
385
841
power
389
841
None
390
841
NUMBER
393
841
~
396
842
%
atom -> { }
842
[
atom -> { }
842
not
atom -> { }
842
^
atom -> { }
842
or
atom -> { }
842
-
atom -> { }
842
>=
atom -> { }
842
<<
atom -> { }
842
/
atom -> { }
842
<=
atom -> { }
842
|
atom -> { }
842
>>
atom -> { }
842
@
atom -> { }
842
is
atom -> { }
842
if
atom -> { }
842
NEWLINE
atom -> { }
842
and
atom -> { }
842
==
atom -> { }
842
in
atom -> { }
842
**
atom -> { }
842
&
atom -> { }
842
>
atom -> { }
842
//
atom -> { }
842
(
atom -> { }
842
+
atom -> { }
842
<
atom -> { }
842
,
atom -> { }
842
!=
atom -> { }
842
.
atom -> { }
842
*
atom -> { }
843
>>
factor -> + factor
843
>=
factor -> + factor
843
or
factor -> + factor
843
==
factor -> + factor
843
-
factor -> + factor
843
*
factor -> + factor
843
NEWLINE
factor -> + factor
843
<
factor -> + factor
843
^
factor -> + factor
843
,
factor -> + factor
843
&
factor -> + factor
843
@
factor -> + factor
843
|
factor -> + factor
843
<<
factor -> + factor
843
%
factor -> + factor
843
not
factor -> + factor
843
//
factor -> + factor
843
and
factor -> + factor
843
in
factor -> + factor
843
!=
factor -> + factor
843
>
factor -> + factor
843
/
factor -> + factor
843
is
factor -> + factor
843
+
factor -> + factor
843
if
factor -> + factor
843
<=
factor -> + factor
844
NAME
371
844
atom_expr
372
844
term
373
844
atom
374
844
-
375
844
factor
376
844
[
377
844
True
378
844
arith_expr
379
844
False
380
844
{
381
844
+
382
844
and_expr
383
844
(
384
844
STRING
385
844
xor_expr
1397
844
shift_expr
387
844
power
389
844
None
390
844
NUMBER
393
844
~
396
845
NEWLINE
atom -> ( )
845
|
atom -> ( )
845
**
atom -> ( )
845
>>
atom -> ( )
845
-
atom -> ( )
845
%
atom -> ( )
845
(
atom -> ( )
845
not
atom -> ( )
845
+
atom -> ( )
845
>=
atom -> ( )
845
&
atom -> ( )
845
*
atom -> ( )
845
!=
atom -> ( )
845
<=
atom -> ( )
845
and
atom -> ( )
845
<
atom -> ( )
845
^
atom -> ( )
845
==
atom -> ( )
845
if
atom -> ( )
845
in
atom -> ( )
845
/
atom -> ( )
845
>
atom -> ( )
845
//
atom -> ( )
845
.
atom -> ( )
845
or
atom -> ( )
845
@
atom -> ( )
845
is
atom -> ( )
845
<<
atom -> ( )
845
,
atom -> ( )
845
[
atom -> ( )
846
)
1398
847
NAME
371
847
atom_expr
372
847
term
373
847
atom
374
847
-
375
847
factor
376
847
[
377
847
True
378
847
arith_expr
379
847
False
380
847
{
381
847
+
382
847
(
384
847
STRING
385
847
shift_expr
387
847
power
389
847
None
390
847
and_expr
1399
847
NUMBER
393
847
~
396
848
NAME
371
848
atom_expr
372
848
term
373
848
atom
374
848
-
375
848
factor
376
848
[
377
848
True
378
848
arith_expr
379
848
False
380
848
{
381
848
+
382
848
and_expr
383
848
(
384
848
STRING
385
848
comparison
386
848
shift_expr
387
848
not_test
388
848
power
389
848
None
390
848
xor_expr
391
848
expr
392
848
NUMBER
393
848
and_test
1400
848
~
396
848
not
400
849
NAME
371
849
atom_expr
372
849
term
373
849
atom
374
849
-
375
849
factor
376
849
[
377
849
True
378
849
arith_expr
379
849
False
380
849
{
381
849
+
382
849
and_expr
383
849
(
384
849
STRING
385
849
shift_expr
387
849
power
389
849
None
390
849
xor_expr
391
849
NUMBER
393
849
expr
1401
849
~
396
850
NAME
371
850
atom_expr
372
850
term
373
850
atom
374
850
-
375
850
factor
376
850
[
377
850
True
378
850
arith_expr
379
850
False
380
850
{
381
850
+
382
850
and_expr
383
850
(
384
850
STRING
385
850
shift_expr
387
850
power
389
850
None
390
850
xor_expr
391
850
expr
392
850
NUMBER
393
850
~
396
850
comparison
1402
851
NAME
371
851
atom_expr
372
851
term
373
851
atom
374
851
-
375
851
factor
376
851
[
377
851
True
378
851
arith_expr
379
851
False
380
851
{
381
851
+
382
851
and_expr
383
851
(
384
851
STRING
385
851
comparison
386
851
shift_expr
387
851
not_test
388
851
power
389
851
None
390
851
xor_expr
391
851
expr
392
851
NUMBER
393
851
and_test
394
851
~
396
851
or_test
1403
851
not
400
852
atom_expr
685
852
atom
686
852
-
687
852
factor
688
852
and_test
689
852
True
690
852
arith_expr
691
852
False
692
852
NAME
693
852
{
694
852
+
695
852
and_expr
696
852
[
697
852
(
698
852
STRING
699
852
term
700
852
comparison
701
852
shift_expr
702
852
not_test
703
852
power
704
852
xor_expr
706
852
None
707
852
NUMBER
708
852
expr
709
852
or_test
1404
852
~
710
852
not
711
853
is
factor -> ~ factor
853
>=
factor -> ~ factor
853
<<
factor -> ~ factor
853
<=
factor -> ~ factor
853
if
factor -> ~ factor
853
==
factor -> ~ factor
853
//
factor -> ~ factor
853
or
factor -> ~ factor
853
+
factor -> ~ factor
853
and
factor -> ~ factor
853
!=
factor -> ~ factor
853
&
factor -> ~ factor
853
|
factor -> ~ factor
853
>>
factor -> ~ factor
853
in
factor -> ~ factor
853
NEWLINE
factor -> ~ factor
853
>
factor -> ~ factor
853
/
factor -> ~ factor
853
not
factor -> ~ factor
853
@
factor -> ~ factor
853
-
factor -> ~ factor
853
^
factor -> ~ factor
853
,
factor -> ~ factor
853
*
factor -> ~ factor
853
<
factor -> ~ factor
853
%
factor -> ~ factor
854
NAME
371
854
atom_expr
372
854
term
373
854
atom
374
854
-
375
854
factor
376
854
[
377
854
True
378
854
arith_expr
379
854
False
380
854
{
381
854
+
382
854
and_expr
383
854
(
384
854
STRING
385
854
comparison
386
854
shift_expr
387
854
not_test
388
854
power
389
854
None
390
854
xor_expr
391
854
expr
392
854
NUMBER
393
854
and_test
394
854
or_test
395
854
~
396
854
lambda
397
854
lambdef
399
854
not
400
854
test
1405
855
:
1406
856
NAME
371
856
atom_expr
372
856
term
373
856
atom
374
856
-
375
856
factor
376
856
[
377
856
True
378
856
arith_expr
379
856
False
380
856
{
381
856
+
382
856
and_expr
383
856
(
384
856
STRING
385
856
comparison
386
856
shift_expr
387
856
not_test
388
856
power
389
856
None
390
856
xor_expr
391
856
expr
392
856
NUMBER
393
856
and_test
394
856
or_test
395
856
~
396
856
lambda
397
856
test
398
856
lambdef
399
856
not
400
856
test_list
1407
857
,
not_test -> not not_test
857
or
not_test -> not not_test
857
NEWLINE
not_test -> not not_test
857
if
not_test -> not not_test
857
and
not_test -> not not_test
858
namelist
1408
858
NAME
405
859
.
atom -> NAME
859
<
atom -> NAME
859
|
atom -> NAME
859
not
atom -> NAME
859
[
atom -> NAME
859
,
atom -> NAME
859
+
atom -> NAME
859
%
atom -> NAME
859
NEWLINE
atom -> NAME
859
<=
atom -> NAME
859
=
atom -> NAME
859
*
atom -> NAME
859
!=
atom -> NAME
859
in
atom -> NAME
859
if
atom -> NAME
859
is
atom -> NAME
859
(
atom -> NAME
859
^
atom -> NAME
859
@
atom -> NAME
859
&
atom -> NAME
859
>>
atom -> NAME
859
<<
atom -> NAME
859
-
atom -> NAME
859
/
atom -> NAME
859
or
atom -> NAME
859
//
atom -> NAME
859
>=
atom -> NAME
859
and
atom -> NAME
859
>
atom -> NAME
859
==
atom -> NAME
859
**
atom -> NAME
860
**
1409
860
and
power -> atom_expr
860
^
power -> atom_expr
860
or
power -> atom_expr
860
>>
power -> atom_expr
860
if
power -> atom_expr
860
<
power -> atom_expr
860
>=
power -> atom_expr
860
=
power -> atom_expr
860
NEWLINE
power -> atom_expr
860
!=
power -> atom_expr
860
is
power -> atom_expr
860
<=
power -> atom_expr
860
not
power -> atom_expr
860
//
power -> atom_expr
860
+
power -> atom_expr
860
==
power -> atom_expr
860
|
power -> atom_expr
860
-
power -> atom_expr
860
&
power -> atom_expr
860
/
power -> atom_expr
860
@
power -> atom_expr
860
<<
power -> atom_expr
860
,
power -> atom_expr
860
%
power -> atom_expr
860
*
power -> atom_expr
860
in
power -> atom_expr
860
>
power -> atom_expr
861
+
1410
861
or
arith_expr -> term
861
==
arith_expr -> term
861
NEWLINE
arith_expr -> term
861
-
1411
861
in
arith_expr -> term
861
<<
arith_expr -> term
861
>
arith_expr -> term
861
is
arith_expr -> term
861
>=
arith_expr -> term
861
=
arith_expr -> term
861
<=
arith_expr -> term
861
and
arith_expr -> term
861
>>
arith_expr -> term
861
!=
arith_expr -> term
861
not
arith_expr -> term
861
&
arith_expr -> term
861
,
arith_expr -> term
861
if
arith_expr -> term
861
<
arith_expr -> term
861
^
arith_expr -> term
861
|
arith_expr -> term
862
trailer
1412
862
trailer_expr
1413
862
[
1414
862
or
trailer_expr -> 
862
.
1415
862
(
1416
862
not
trailer_expr -> 
862
in
trailer_expr -> 
862
is
trailer_expr -> 
862
>=
trailer_expr -> 
862
-
trailer_expr -> 
862
@
trailer_expr -> 
862
<=
trailer_expr -> 
862
,
trailer_expr -> 
862
^
trailer_expr -> 
862
*
trailer_expr -> 
862
if
trailer_expr -> 
862
**
trailer_expr -> 
862
=
trailer_expr -> 
862
>
trailer_expr -> 
862
==
trailer_expr -> 
862
>>
trailer_expr -> 
862
<<
trailer_expr -> 
862
/
trailer_expr -> 
862
NEWLINE
trailer_expr -> 
862
//
trailer_expr -> 
862
!=
trailer_expr -> 
862
<
trailer_expr -> 
862
&
trailer_expr -> 
862
|
trailer_expr -> 
862
and
trailer_expr -> 
862
+
trailer_expr -> 
862
%
trailer_expr -> 
863
NAME
859
863
atom_expr
860
863
atom
862
863
-
863
863
factor
1417
863
[
865
863
True
866
863
False
869
863
{
870
863
+
871
863
(
873
863
STRING
874
863
power
879
863
None
881
863
NUMBER
883
863
~
887
864
%
1418
864
/
1419
864
*
1420
864
//
1421
864
@
1422
864
not
term -> factor
864
<<
term -> factor
864
or
term -> factor
864
^
term -> factor
864
NEWLINE
term -> factor
864
in
term -> factor
864
if
term -> factor
864
and
term -> factor
864
<=
term -> factor
864
&
term -> factor
864
,
term -> factor
864
>>
term -> factor
864
=
term -> factor
864
>
term -> factor
864
|
term -> factor
864
<
term -> factor
864
is
term -> factor
864
!=
term -> factor
864
>=
term -> factor
864
==
term -> factor
864
-
term -> factor
864
+
term -> factor
865
NAME
187
865
atom_expr
188
865
atom
189
865
-
190
865
factor
191
865
test_list_comp
1423
865
[
193
865
True
194
865
arith_expr
195
865
False
196
865
{
197
865
+
198
865
and_expr
199
865
(
200
865
STRING
201
865
]
1424
865
term
203
865
and_test
204
865
comparison
205
865
shift_expr
206
865
not_test
207
865
power
208
865
or_test
209
865
None
210
865
xor_expr
211
865
expr
212
865
NUMBER
213
865
lambda
214
865
~
215
865
lambdef
216
865
not
217
865
test
218
865
test_list
219
866
!=
atom -> True
866
&
atom -> True
866
+
atom -> True
866
<<
atom -> True
866
@
atom -> True
866
,
atom -> True
866
if
atom -> True
866
NEWLINE
atom -> True
866
and
atom -> True
866
is
atom -> True
866
|
atom -> True
866
<
atom -> True
866
>=
atom -> True
866
or
atom -> True
866
=
atom -> True
866
==
atom -> True
866
%
atom -> True
866
>
atom -> True
866
[
atom -> True
866
*
atom -> True
866
//
atom -> True
866
/
atom -> True
866
in
atom -> True
866
-
atom -> True
866
^
atom -> True
866
<=
atom -> True
866
(
atom -> True
866
**
atom -> True
866
.
atom -> True
866
not
atom -> True
866
>>
atom -> True
867
or
shift_expr -> arith_expr
867
>>
1425
867
<<
1426
867
^
shift_expr -> arith_expr
867
in
shift_expr -> arith_expr
867
,
shift_expr -> arith_expr
867
<=
shift_expr -> arith_expr
867
>=
shift_expr -> arith_expr
867
&
shift_expr -> arith_expr
867
==
shift_expr -> arith_expr
867
=
shift_expr -> arith_expr
867
not
shift_expr -> arith_expr
867
and
shift_expr -> arith_expr
867
>
shift_expr -> arith_expr
867
!=
shift_expr -> arith_expr
867
if
shift_expr -> arith_expr
867
|
shift_expr -> arith_expr
867
NEWLINE
shift_expr -> arith_expr
867
<
shift_expr -> arith_expr
867
is
shift_expr -> arith_expr
868
|
1427
868
>
expr -> xor_expr
868
<
expr -> xor_expr
868
and
expr -> xor_expr
868
>=
expr -> xor_expr
868
,
expr -> xor_expr
868
!=
expr -> xor_expr
868
or
expr -> xor_expr
868
NEWLINE
expr -> xor_expr
868
in
expr -> xor_expr
868
is
expr -> xor_expr
868
if
expr -> xor_expr
868
==
expr -> xor_expr
868
=
expr -> xor_expr
868
<=
expr -> xor_expr
868
not
expr -> xor_expr
869
not
atom -> False
869
==
atom -> False
869
*
atom -> False
869
>
atom -> False
869
,
atom -> False
869
[
atom -> False
869
if
atom -> False
869
@
atom -> False
869
&
atom -> False
869
is
atom -> False
869
.
atom -> False
869
=
atom -> False
869
+
atom -> False
869
NEWLINE
atom -> False
869
>=
atom -> False
869
%
atom -> False
869
and
atom -> False
869
(
atom -> False
869
|
atom -> False
869
-
atom -> False
869
/
atom -> False
869
in
atom -> False
869
<<
atom -> False
869
<=
atom -> False
869
^
atom -> False
869
//
atom -> False
869
>>
atom -> False
869
!=
atom -> False
869
**
atom -> False
869
or
atom -> False
869
<
atom -> False
870
}
1428
871
NAME
859
871
atom_expr
860
871
atom
862
871
-
863
871
[
865
871
True
866
871
False
869
871
{
870
871
+
871
871
(
873
871
STRING
874
871
power
879
871
factor
1429
871
None
881
871
NUMBER
883
871
~
887
872
^
1430
872
<
xor_expr -> and_expr
872
<=
xor_expr -> and_expr
872
|
xor_expr -> and_expr
872
not
xor_expr -> and_expr
872
and
xor_expr -> and_expr
872
!=
xor_expr -> and_expr
872
NEWLINE
xor_expr -> and_expr
872
or
xor_expr -> and_expr
872
>
xor_expr -> and_expr
872
>=
xor_expr -> and_expr
872
==
xor_expr -> and_expr
872
,
xor_expr -> and_expr
872
=
xor_expr -> and_expr
872
in
xor_expr -> and_expr
872
is
xor_expr -> and_expr
872
if
xor_expr -> and_expr
873
NAME
131
873
atom_expr
132
873
atom
133
873
-
134
873
)
1431
873
factor
136
873
[
137
873
True
138
873
arith_expr
139
873
False
140
873
{
141
873
+
142
873
and_expr
143
873
(
144
873
STRING
145
873
test_list_comp
1432
873
power
147
873
term
148
873
comparison
149
873
shift_expr
150
873
test
151
873
not_test
152
873
or_test
153
873
lambda
154
873
None
155
873
xor_expr
156
873
expr
157
873
NUMBER
158
873
and_test
159
873
~
160
873
lambdef
161
873
not
162
873
test_list
163
874
and
atom -> STRING
874
not
atom -> STRING
874
NEWLINE
atom -> STRING
874
.
atom -> STRING
874
//
atom -> STRING
874
-
atom -> STRING
874
*
atom -> STRING
874
(
atom -> STRING
874
>=
atom -> STRING
874
<=
atom -> STRING
874
<<
atom -> STRING
874
if
atom -> STRING
874
+
atom -> STRING
874
or
atom -> STRING
874
=
atom -> STRING
874
/
atom -> STRING
874
@
atom -> STRING
874
in
atom -> STRING
874
>>
atom -> STRING
874
%
atom -> STRING
874
!=
atom -> STRING
874
,
atom -> STRING
874
>
atom -> STRING
874
^
atom -> STRING
874
<
atom -> STRING
874
==
atom -> STRING
874
**
atom -> STRING
874
&
atom -> STRING
874
|
atom -> STRING
874
is
atom -> STRING
874
[
atom -> STRING
875
NEWLINE
test_list -> test
875
,
1433
875
=
test_list -> test
876
=
not_test -> comparison
876
if
not_test -> comparison
876
or
not_test -> comparison
876
and
not_test -> comparison
876
,
not_test -> comparison
876
NEWLINE
not_test -> comparison
877
==
and_expr -> shift_expr
877
&
1434
877
!=
and_expr -> shift_expr
877
<
and_expr -> shift_expr
877
<=
and_expr -> shift_expr
877
and
and_expr -> shift_expr
877
in
and_expr -> shift_expr
877
=
and_expr -> shift_expr
877
^
and_expr -> shift_expr
877
not
and_expr -> shift_expr
877
is
and_expr -> shift_expr
877
if
and_expr -> shift_expr
877
,
and_expr -> shift_expr
877
>
and_expr -> shift_expr
877
or
and_expr -> shift_expr
877
NEWLINE
and_expr -> shift_expr
877
>=
and_expr -> shift_expr
877
|
and_expr -> shift_expr
878
and
1435
878
if
and_test -> not_test
878
=
and_test -> not_test
878
NEWLINE
and_test -> not_test
878
or
and_test -> not_test
878
,
and_test -> not_test
879
<=
factor -> power
879
,
factor -> power
879
is
factor -> power
879
>
factor -> power
879
==
factor -> power
879
^
factor -> power
879
or
factor -> power
879
-
factor -> power
879
+
factor -> power
879
>>
factor -> power
879
/
factor -> power
879
*
factor -> power
879
<<
factor -> power
879
NEWLINE
factor -> power
879
|
factor -> power
879
and
factor -> power
879
<
factor -> power
879
not
factor -> power
879
!=
factor -> power
879
if
factor -> power
879
&
factor -> power
879
in
factor -> power
879
%
factor -> power
879
=
factor -> power
879
>=
factor -> power
879
//
factor -> power
879
@
factor -> power
880
NEWLINE
test -> lambdef
880
=
test -> lambdef
880
,
test -> lambdef
881
+
atom -> None
881
>>
atom -> None
881
/
atom -> None
881
or
atom -> None
881
*
atom -> None
881
in
atom -> None
881
**
atom -> None
881
==
atom -> None
881
-
atom -> None
881
if
atom -> None
881
NEWLINE
atom -> None
881
(
atom -> None
881
@
atom -> None
881
>=
atom -> None
881
[
atom -> None
881
=
atom -> None
881
^
atom -> None
881
&
atom -> None
881
<=
atom -> None
881
is
atom -> None
881
.
atom -> None
881
not
atom -> None
881
//
atom -> None
881
<
atom -> None
881
<<
atom -> None
881
!=
atom -> None
881
and
atom -> None
881
%
atom -> None
881
|
atom -> None
881
,
atom -> None
881
>
atom -> None
882
==
330
882
is
331
882
<=
332
882
comp_op
1436
882
and
comparison -> expr
882
!=
334
882
>
335
882
not
336
882
NEWLINE
comparison -> expr
882
in
337
882
or
comparison -> expr
882
<
338
882
>=
339
882
if
comparison -> expr
882
,
comparison -> expr
882
=
comparison -> expr
883
is
atom -> NUMBER
883
|
atom -> NUMBER
883
=
atom -> NUMBER
883
in
atom -> NUMBER
883
@
atom -> NUMBER
883
**
atom -> NUMBER
883
and
atom -> NUMBER
883
!=
atom -> NUMBER
883
if
atom -> NUMBER
883
-
atom -> NUMBER
883
<<
atom -> NUMBER
883
.
atom -> NUMBER
883
(
atom -> NUMBER
883
==
atom -> NUMBER
883
%
atom -> NUMBER
883
^
atom -> NUMBER
883
not
atom -> NUMBER
883
>=
atom -> NUMBER
883
,
atom -> NUMBER
883
/
atom -> NUMBER
883
//
atom -> NUMBER
883
>
atom -> NUMBER
883
&
atom -> NUMBER
883
[
atom -> NUMBER
883
<=
atom -> NUMBER
883
*
atom -> NUMBER
883
NEWLINE
atom -> NUMBER
883
or
atom -> NUMBER
883
+
atom -> NUMBER
883
>>
atom -> NUMBER
883
<
atom -> NUMBER
884
or
1437
884
=
or_test -> and_test
884
if
or_test -> and_test
884
NEWLINE
or_test -> and_test
884
,
or_test -> and_test
885
=
test -> or_test
885
if
1438
885
NEWLINE
test -> or_test
885
,
test -> or_test
886
=
418
886
assign
1439
886
NEWLINE
assign -> 
887
NAME
859
887
atom_expr
860
887
atom
862
887
-
863
887
[
865
887
True
866
887
False
869
887
{
870
887
+
871
887
factor
1440
887
(
873
887
STRING
874
887
power
879
887
None
881
887
NUMBER
883
887
~
887
888
NAME
859
888
atom_expr
860
888
term
861
888
atom
862
888
-
863
888
factor
864
888
[
865
888
True
866
888
arith_expr
867
888
xor_expr
868
888
False
869
888
{
870
888
+
871
888
and_expr
872
888
(
873
888
STRING
874
888
test
875
888
comparison
876
888
shift_expr
877
888
not_test
878
888
power
879
888
lambdef
880
888
None
881
888
expr
882
888
NUMBER
883
888
and_test
884
888
or_test
885
888
~
887
888
test_list
1441
888
from
1442
888
lambda
889
888
NEWLINE
yield_expr -> yield
888
not
890
888
yield_arg
1443
888
=
yield_expr -> yield
889
:
1444
889
vfpdef
343
889
NAME
342
889
varargslist
1445
890
NAME
859
890
atom_expr
860
890
term
861
890
atom
862
890
-
863
890
factor
864
890
[
865
890
True
866
890
arith_expr
867
890
xor_expr
868
890
False
869
890
{
870
890
+
871
890
and_expr
872
890
(
873
890
STRING
874
890
comparison
876
890
shift_expr
877
890
power
879
890
None
881
890
expr
882
890
NUMBER
883
890
~
887
890
not
890
890
not_test
1446
891
=
418
891
NEWLINE
assign -> 
891
assign
1447
892
NAME
371
892
atom_expr
372
892
term
373
892
atom
374
892
-
375
892
factor
376
892
[
377
892
True
378
892
arith_expr
379
892
False
380
892
{
381
892
+
382
892
and_expr
383
892
(
384
892
STRING
385
892
comparison
386
892
shift_expr
387
892
not_test
388
892
power
389
892
None
390
892
xor_expr
391
892
expr
392
892
NUMBER
393
892
and_test
394
892
or_test
395
892
~
396
892
test_list
1448
892
from
1449
892
lambda
397
892
NEWLINE
yield_expr -> yield
892
test
398
892
lambdef
399
892
not
400
892
yield_arg
1450
893
NEWLINE
yield_or_testlist -> test_list
894
NEWLINE
expr_stmt -> test_list augassign yield_or_testlist
895
NEWLINE
yield_or_testlist -> yield_expr
896
.
atom -> NAME
896
<
atom -> NAME
896
|
atom -> NAME
896
not
atom -> NAME
896
[
atom -> NAME
896
+
atom -> NAME
896
%
atom -> NAME
896
<=
atom -> NAME
896
=
atom -> NAME
896
*
atom -> NAME
896
!=
atom -> NAME
896
in
atom -> NAME
896
if
atom -> NAME
896
is
atom -> NAME
896
(
atom -> NAME
896
^
atom -> NAME
896
@
atom -> NAME
896
&
atom -> NAME
896
>>
atom -> NAME
896
<<
atom -> NAME
896
-
atom -> NAME
896
/
atom -> NAME
896
or
atom -> NAME
896
//
atom -> NAME
896
>=
atom -> NAME
896
and
atom -> NAME
896
>
atom -> NAME
896
==
atom -> NAME
896
**
atom -> NAME
897
**
1451
897
and
power -> atom_expr
897
^
power -> atom_expr
897
or
power -> atom_expr
897
>>
power -> atom_expr
897
if
power -> atom_expr
897
<
power -> atom_expr
897
>=
power -> atom_expr
897
=
power -> atom_expr
897
!=
power -> atom_expr
897
is
power -> atom_expr
897
<=
power -> atom_expr
897
not
power -> atom_expr
897
//
power -> atom_expr
897
+
power -> atom_expr
897
==
power -> atom_expr
897
|
power -> atom_expr
897
-
power -> atom_expr
897
&
power -> atom_expr
897
/
power -> atom_expr
897
@
power -> atom_expr
897
<<
power -> atom_expr
897
%
power -> atom_expr
897
*
power -> atom_expr
897
in
power -> atom_expr
897
>
power -> atom_expr
898
trailer
1452
898
trailer_expr
1453
898
[
1454
898
or
trailer_expr -> 
898
.
1455
898
(
1456
898
not
trailer_expr -> 
898
in
trailer_expr -> 
898
is
trailer_expr -> 
898
>=
trailer_expr -> 
898
-
trailer_expr -> 
898
@
trailer_expr -> 
898
<=
trailer_expr -> 
898
^
trailer_expr -> 
898
*
trailer_expr -> 
898
if
trailer_expr -> 
898
**
trailer_expr -> 
898
=
trailer_expr -> 
898
>
trailer_expr -> 
898
==
trailer_expr -> 
898
>>
trailer_expr -> 
898
<<
trailer_expr -> 
898
/
trailer_expr -> 
898
//
trailer_expr -> 
898
!=
trailer_expr -> 
898
<
trailer_expr -> 
898
&
trailer_expr -> 
898
|
trailer_expr -> 
898
and
trailer_expr -> 
898
+
trailer_expr -> 
898
%
trailer_expr -> 
899
NAME
896
899
atom_expr
897
899
atom
898
899
-
899
899
factor
1457
899
True
901
899
False
904
899
{
905
899
+
906
899
[
908
899
(
909
899
STRING
910
899
power
915
899
None
918
899
NUMBER
920
899
~
921
900
%
1458
900
/
1459
900
*
1460
900
@
1461
900
//
1462
900
not
term -> factor
900
<<
term -> factor
900
or
term -> factor
900
^
term -> factor
900
in
term -> factor
900
if
term -> factor
900
and
term -> factor
900
<=
term -> factor
900
&
term -> factor
900
>>
term -> factor
900
=
term -> factor
900
>
term -> factor
900
|
term -> factor
900
<
term -> factor
900
is
term -> factor
900
!=
term -> factor
900
>=
term -> factor
900
==
term -> factor
900
-
term -> factor
900
+
term -> factor
901
!=
atom -> True
901
&
atom -> True
901
+
atom -> True
901
<<
atom -> True
901
@
atom -> True
901
if
atom -> True
901
and
atom -> True
901
is
atom -> True
901
|
atom -> True
901
<
atom -> True
901
>=
atom -> True
901
or
atom -> True
901
=
atom -> True
901
==
atom -> True
901
%
atom -> True
901
>
atom -> True
901
[
atom -> True
901
*
atom -> True
901
//
atom -> True
901
/
atom -> True
901
in
atom -> True
901
-
atom -> True
901
^
atom -> True
901
<=
atom -> True
901
(
atom -> True
901
**
atom -> True
901
.
atom -> True
901
not
atom -> True
901
>>
atom -> True
902
or
shift_expr -> arith_expr
902
>>
1463
902
<<
1464
902
^
shift_expr -> arith_expr
902
in
shift_expr -> arith_expr
902
<=
shift_expr -> arith_expr
902
>=
shift_expr -> arith_expr
902
&
shift_expr -> arith_expr
902
==
shift_expr -> arith_expr
902
=
shift_expr -> arith_expr
902
not
shift_expr -> arith_expr
902
and
shift_expr -> arith_expr
902
>
shift_expr -> arith_expr
902
!=
shift_expr -> arith_expr
902
if
shift_expr -> arith_expr
902
|
shift_expr -> arith_expr
902
<
shift_expr -> arith_expr
902
is
shift_expr -> arith_expr
903
|
1465
903
>
expr -> xor_expr
903
<
expr -> xor_expr
903
and
expr -> xor_expr
903
>=
expr -> xor_expr
903
!=
expr -> xor_expr
903
or
expr -> xor_expr
903
in
expr -> xor_expr
903
is
expr -> xor_expr
903
if
expr -> xor_expr
903
==
expr -> xor_expr
903
=
expr -> xor_expr
903
<=
expr -> xor_expr
903
not
expr -> xor_expr
904
not
atom -> False
904
==
atom -> False
904
*
atom -> False
904
>
atom -> False
904
[
atom -> False
904
if
atom -> False
904
@
atom -> False
904
&
atom -> False
904
is
atom -> False
904
.
atom -> False
904
=
atom -> False
904
+
atom -> False
904
%
atom -> False
904
>=
atom -> False
904
and
atom -> False
904
(
atom -> False
904
|
atom -> False
904
-
atom -> False
904
/
atom -> False
904
in
atom -> False
904
<<
atom -> False
904
<=
atom -> False
904
^
atom -> False
904
//
atom -> False
904
>>
atom -> False
904
!=
atom -> False
904
**
atom -> False
904
or
atom -> False
904
<
atom -> False
905
}
1466
906
NAME
896
906
atom_expr
897
906
atom
898
906
-
899
906
True
901
906
False
904
906
{
905
906
+
906
906
[
908
906
(
909
906
STRING
910
906
power
915
906
factor
1467
906
None
918
906
NUMBER
920
906
~
921
907
^
1468
907
<
xor_expr -> and_expr
907
<=
xor_expr -> and_expr
907
|
xor_expr -> and_expr
907
not
xor_expr -> and_expr
907
and
xor_expr -> and_expr
907
!=
xor_expr -> and_expr
907
or
xor_expr -> and_expr
907
>
xor_expr -> and_expr
907
>=
xor_expr -> and_expr
907
==
xor_expr -> and_expr
907
=
xor_expr -> and_expr
907
in
xor_expr -> and_expr
907
is
xor_expr -> and_expr
907
if
xor_expr -> and_expr
908
NAME
187
908
atom_expr
188
908
atom
189
908
-
190
908
factor
191
908
test_list_comp
1469
908
[
193
908
True
194
908
arith_expr
195
908
False
196
908
{
197
908
+
198
908
and_expr
199
908
(
200
908
STRING
201
908
]
1470
908
term
203
908
and_test
204
908
comparison
205
908
shift_expr
206
908
not_test
207
908
power
208
908
or_test
209
908
None
210
908
xor_expr
211
908
expr
212
908
NUMBER
213
908
lambda
214
908
~
215
908
lambdef
216
908
not
217
908
test
218
908
test_list
219
909
NAME
131
909
atom_expr
132
909
atom
133
909
-
134
909
)
1471
909
factor
136
909
[
137
909
True
138
909
arith_expr
139
909
False
140
909
{
141
909
+
142
909
and_expr
143
909
(
144
909
STRING
145
909
test_list_comp
1472
909
power
147
909
term
148
909
comparison
149
909
shift_expr
150
909
test
151
909
not_test
152
909
or_test
153
909
lambda
154
909
None
155
909
xor_expr
156
909
expr
157
909
NUMBER
158
909
and_test
159
909
~
160
909
lambdef
161
909
not
162
909
test_list
163
910
and
atom -> STRING
910
not
atom -> STRING
910
.
atom -> STRING
910
//
atom -> STRING
910
-
atom -> STRING
910
*
atom -> STRING
910
(
atom -> STRING
910
>=
atom -> STRING
910
<=
atom -> STRING
910
<<
atom -> STRING
910
if
atom -> STRING
910
+
atom -> STRING
910
or
atom -> STRING
910
=
atom -> STRING
910
/
atom -> STRING
910
@
atom -> STRING
910
in
atom -> STRING
910
>>
atom -> STRING
910
%
atom -> STRING
910
!=
atom -> STRING
910
>
atom -> STRING
910
^
atom -> STRING
910
<
atom -> STRING
910
==
atom -> STRING
910
**
atom -> STRING
910
&
atom -> STRING
910
|
atom -> STRING
910
is
atom -> STRING
910
[
atom -> STRING
911
+
1473
911
or
arith_expr -> term
911
==
arith_expr -> term
911
-
1474
911
in
arith_expr -> term
911
<<
arith_expr -> term
911
>
arith_expr -> term
911
is
arith_expr -> term
911
>=
arith_expr -> term
911
=
arith_expr -> term
911
<=
arith_expr -> term
911
and
arith_expr -> term
911
>>
arith_expr -> term
911
!=
arith_expr -> term
911
not
arith_expr -> term
911
&
arith_expr -> term
911
if
arith_expr -> term
911
<
arith_expr -> term
911
^
arith_expr -> term
911
|
arith_expr -> term
912
if
not_test -> comparison
912
=
not_test -> comparison
912
or
not_test -> comparison
912
and
not_test -> comparison
913
==
and_expr -> shift_expr
913
&
1475
913
!=
and_expr -> shift_expr
913
<
and_expr -> shift_expr
913
<=
and_expr -> shift_expr
913
and
and_expr -> shift_expr
913
in
and_expr -> shift_expr
913
=
and_expr -> shift_expr
913
^
and_expr -> shift_expr
913
not
and_expr -> shift_expr
913
is
and_expr -> shift_expr
913
if
and_expr -> shift_expr
913
>
and_expr -> shift_expr
913
or
and_expr -> shift_expr
913
>=
and_expr -> shift_expr
913
|
and_expr -> shift_expr
914
and
1476
914
if
and_test -> not_test
914
=
and_test -> not_test
914
or
and_test -> not_test
915
<=
factor -> power
915
is
factor -> power
915
>
factor -> power
915
==
factor -> power
915
^
factor -> power
915
or
factor -> power
915
-
factor -> power
915
+
factor -> power
915
>>
factor -> power
915
/
factor -> power
915
*
factor -> power
915
<<
factor -> power
915
|
factor -> power
915
and
factor -> power
915
<
factor -> power
915
not
factor -> power
915
!=
factor -> power
915
if
factor -> power
915
&
factor -> power
915
in
factor -> power
915
%
factor -> power
915
=
factor -> power
915
>=
factor -> power
915
//
factor -> power
915
@
factor -> power
916
=
test -> lambdef
917
=
1477
918
+
atom -> None
918
>>
atom -> None
918
/
atom -> None
918
or
atom -> None
918
*
atom -> None
918
in
atom -> None
918
**
atom -> None
918
==
atom -> None
918
-
atom -> None
918
if
atom -> None
918
(
atom -> None
918
@
atom -> None
918
>=
atom -> None
918
[
atom -> None
918
=
atom -> None
918
^
atom -> None
918
&
atom -> None
918
<=
atom -> None
918
is
atom -> None
918
.
atom -> None
918
not
atom -> None
918
//
atom -> None
918
<
atom -> None
918
<<
atom -> None
918
!=
atom -> None
918
and
atom -> None
918
%
atom -> None
918
|
atom -> None
918
>
atom -> None
919
==
330
919
is
331
919
<=
332
919
and
comparison -> expr
919
!=
334
919
>
335
919
not
336
919
comp_op
1478
919
in
337
919
or
comparison -> expr
919
<
338
919
>=
339
919
if
comparison -> expr
919
=
comparison -> expr
920
is
atom -> NUMBER
920
|
atom -> NUMBER
920
=
atom -> NUMBER
920
in
atom -> NUMBER
920
@
atom -> NUMBER
920
**
atom -> NUMBER
920
and
atom -> NUMBER
920
!=
atom -> NUMBER
920
if
atom -> NUMBER
920
-
atom -> NUMBER
920
<<
atom -> NUMBER
920
.
atom -> NUMBER
920
(
atom -> NUMBER
920
==
atom -> NUMBER
920
%
atom -> NUMBER
920
^
atom -> NUMBER
920
not
atom -> NUMBER
920
>=
atom -> NUMBER
920
/
atom -> NUMBER
920
//
atom -> NUMBER
920
>
atom -> NUMBER
920
&
atom -> NUMBER
920
[
atom -> NUMBER
920
<=
atom -> NUMBER
920
*
atom -> NUMBER
920
or
atom -> NUMBER
920
+
atom -> NUMBER
920
>>
atom -> NUMBER
920
<
atom -> NUMBER
921
NAME
896
921
atom_expr
897
921
atom
898
921
-
899
921
True
901
921
False
904
921
{
905
921
+
906
921
factor
1479
921
[
908
921
(
909
921
STRING
910
921
power
915
921
None
918
921
NUMBER
920
921
~
921
922
=
test -> or_test
922
if
1480
923
NAME
896
923
atom_expr
897
923
atom
898
923
-
899
923
factor
900
923
True
901
923
arith_expr
902
923
xor_expr
903
923
False
904
923
{
905
923
+
906
923
and_expr
907
923
[
908
923
(
909
923
STRING
910
923
term
911
923
comparison
912
923
shift_expr
913
923
power
915
923
None
918
923
expr
919
923
NUMBER
920
923
~
921
923
not
923
923
not_test
1481
924
or
1482
924
=
or_test -> and_test
924
if
or_test -> and_test
925
:
1483
925
vfpdef
343
925
NAME
342
925
varargslist
1484
926
>>
power -> atom_expr ** factor
926
<=
power -> atom_expr ** factor
926
:
power -> atom_expr ** factor
926
//
power -> atom_expr ** factor
926
/
power -> atom_expr ** factor
926
&
power -> atom_expr ** factor
926
if
power -> atom_expr ** factor
926
not
power -> atom_expr ** factor
926
<
power -> atom_expr ** factor
926
!=
power -> atom_expr ** factor
926
>
power -> atom_expr ** factor
926
*
power -> atom_expr ** factor
926
|
power -> atom_expr ** factor
926
==
power -> atom_expr ** factor
926
is
power -> atom_expr ** factor
926
and
power -> atom_expr ** factor
926
<<
power -> atom_expr ** factor
926
-
power -> atom_expr ** factor
926
@
power -> atom_expr ** factor
926
in
power -> atom_expr ** factor
926
^
power -> atom_expr ** factor
926
%
power -> atom_expr ** factor
926
>=
power -> atom_expr ** factor
926
+
power -> atom_expr ** factor
926
or
power -> atom_expr ** factor
927
<=
arith_expr -> term + arith_expr
927
and
arith_expr -> term + arith_expr
927
==
arith_expr -> term + arith_expr
927
<
arith_expr -> term + arith_expr
927
if
arith_expr -> term + arith_expr
927
not
arith_expr -> term + arith_expr
927
<<
arith_expr -> term + arith_expr
927
|
arith_expr -> term + arith_expr
927
>
arith_expr -> term + arith_expr
927
^
arith_expr -> term + arith_expr
927
>=
arith_expr -> term + arith_expr
927
>>
arith_expr -> term + arith_expr
927
in
arith_expr -> term + arith_expr
927
!=
arith_expr -> term + arith_expr
927
is
arith_expr -> term + arith_expr
927
or
arith_expr -> term + arith_expr
927
:
arith_expr -> term + arith_expr
927
&
arith_expr -> term + arith_expr
928
>>
arith_expr -> term - arith_expr
928
&
arith_expr -> term - arith_expr
928
>=
arith_expr -> term - arith_expr
928
<<
arith_expr -> term - arith_expr
928
if
arith_expr -> term - arith_expr
928
|
arith_expr -> term - arith_expr
928
:
arith_expr -> term - arith_expr
928
^
arith_expr -> term - arith_expr
928
<
arith_expr -> term - arith_expr
928
>
arith_expr -> term - arith_expr
928
!=
arith_expr -> term - arith_expr
928
not
arith_expr -> term - arith_expr
928
is
arith_expr -> term - arith_expr
928
==
arith_expr -> term - arith_expr
928
or
arith_expr -> term - arith_expr
928
<=
arith_expr -> term - arith_expr
928
and
arith_expr -> term - arith_expr
928
in
arith_expr -> term - arith_expr
929
*
trailer_expr -> trailer trailer_expr
929
+
trailer_expr -> trailer trailer_expr
929
if
trailer_expr -> trailer trailer_expr
929
-
trailer_expr -> trailer trailer_expr
929
<=
trailer_expr -> trailer trailer_expr
929
|
trailer_expr -> trailer trailer_expr
929
@
trailer_expr -> trailer trailer_expr
929
%
trailer_expr -> trailer trailer_expr
929
in
trailer_expr -> trailer trailer_expr
929
<<
trailer_expr -> trailer trailer_expr
929
**
trailer_expr -> trailer trailer_expr
929
==
trailer_expr -> trailer trailer_expr
929
not
trailer_expr -> trailer trailer_expr
929
and
trailer_expr -> trailer trailer_expr
929
//
trailer_expr -> trailer trailer_expr
929
^
trailer_expr -> trailer trailer_expr
929
or
trailer_expr -> trailer trailer_expr
929
>
trailer_expr -> trailer trailer_expr
929
!=
trailer_expr -> trailer trailer_expr
929
is
trailer_expr -> trailer trailer_expr
929
:
trailer_expr -> trailer trailer_expr
929
&
trailer_expr -> trailer trailer_expr
929
>>
trailer_expr -> trailer trailer_expr
929
/
trailer_expr -> trailer trailer_expr
929
<
trailer_expr -> trailer trailer_expr
929
>=
trailer_expr -> trailer trailer_expr
930
]
1485
931
^
trailer -> . NAME
931
%
trailer -> . NAME
931
**
trailer -> . NAME
931
>>
trailer -> . NAME
931
>
trailer -> . NAME
931
in
trailer -> . NAME
931
[
trailer -> . NAME
931
is
trailer -> . NAME
931
<<
trailer -> . NAME
931
or
trailer -> . NAME
931
and
trailer -> . NAME
931
>=
trailer -> . NAME
931
|
trailer -> . NAME
931
==
trailer -> . NAME
931
.
trailer -> . NAME
931
+
trailer -> . NAME
931
<
trailer -> . NAME
931
-
trailer -> . NAME
931
&
trailer -> . NAME
931
*
trailer -> . NAME
931
if
trailer -> . NAME
931
<=
trailer -> . NAME
931
:
trailer -> . NAME
931
(
trailer -> . NAME
931
not
trailer -> . NAME
931
//
trailer -> . NAME
931
@
trailer -> . NAME
931
!=
trailer -> . NAME
931
/
trailer -> . NAME
932
)
1486
933
[
trailer -> ( )
933
not
trailer -> ( )
933
==
trailer -> ( )
933
**
trailer -> ( )
933
:
trailer -> ( )
933
<=
trailer -> ( )
933
//
trailer -> ( )
933
<<
trailer -> ( )
933
<
trailer -> ( )
933
in
trailer -> ( )
933
or
trailer -> ( )
933
-
trailer -> ( )
933
+
trailer -> ( )
933
&
trailer -> ( )
933
*
trailer -> ( )
933
is
trailer -> ( )
933
>
trailer -> ( )
933
!=
trailer -> ( )
933
>>
trailer -> ( )
933
%
trailer -> ( )
933
|
trailer -> ( )
933
.
trailer -> ( )
933
>=
trailer -> ( )
933
(
trailer -> ( )
933
and
trailer -> ( )
933
@
trailer -> ( )
933
/
trailer -> ( )
933
^
trailer -> ( )
933
if
trailer -> ( )
934
|
term -> factor % term
934
<<
term -> factor % term
934
^
term -> factor % term
934
==
term -> factor % term
934
-
term -> factor % term
934
:
term -> factor % term
934
is
term -> factor % term
934
>=
term -> factor % term
934
>>
term -> factor % term
934
>
term -> factor % term
934
in
term -> factor % term
934
&
term -> factor % term
934
if
term -> factor % term
934
<
term -> factor % term
934
!=
term -> factor % term
934
<=
term -> factor % term
934
not
term -> factor % term
934
+
term -> factor % term
934
and
term -> factor % term
934
or
term -> factor % term
935
if
term -> factor // term
935
<
term -> factor // term
935
and
term -> factor // term
935
in
term -> factor // term
935
>>
term -> factor // term
935
<=
term -> factor // term
935
!=
term -> factor // term
935
^
term -> factor // term
935
|
term -> factor // term
935
or
term -> factor // term
935
>=
term -> factor // term
935
&
term -> factor // term
935
>
term -> factor // term
935
+
term -> factor // term
935
is
term -> factor // term
935
not
term -> factor // term
935
<<
term -> factor // term
935
:
term -> factor // term
935
-
term -> factor // term
935
==
term -> factor // term
936
>>
term -> factor / term
936
^
term -> factor / term
936
or
term -> factor / term
936
:
term -> factor / term
936
+
term -> factor / term
936
if
term -> factor / term
936
>=
term -> factor / term
936
>
term -> factor / term
936
-
term -> factor / term
936
and
term -> factor / term
936
not
term -> factor / term
936
<
term -> factor / term
936
in
term -> factor / term
936
==
term -> factor / term
936
<=
term -> factor / term
936
is
term -> factor / term
936
&
term -> factor / term
936
<<
term -> factor / term
936
!=
term -> factor / term
936
|
term -> factor / term
937
-
term -> factor * term
937
&
term -> factor * term
937
and
term -> factor * term
937
!=
term -> factor * term
937
|
term -> factor * term
937
<<
term -> factor * term
937
<
term -> factor * term
937
if
term -> factor * term
937
^
term -> factor * term
937
+
term -> factor * term
937
in
term -> factor * term
937
or
term -> factor * term
937
>>
term -> factor * term
937
not
term -> factor * term
937
:
term -> factor * term
937
==
term -> factor * term
937
>=
term -> factor * term
937
<=
term -> factor * term
937
>
term -> factor * term
937
is
term -> factor * term
938
>>
term -> factor @ term
938
^
term -> factor @ term
938
&
term -> factor @ term
938
|
term -> factor @ term
938
if
term -> factor @ term
938
is
term -> factor @ term
938
<
term -> factor @ term
938
<<
term -> factor @ term
938
and
term -> factor @ term
938
==
term -> factor @ term
938
>
term -> factor @ term
938
in
term -> factor @ term
938
>=
term -> factor @ term
938
:
term -> factor @ term
938
+
term -> factor @ term
938
not
term -> factor @ term
938
!=
term -> factor @ term
938
<=
term -> factor @ term
938
or
term -> factor @ term
938
-
term -> factor @ term
939
<
shift_expr -> arith_expr >> shift_expr
939
^
shift_expr -> arith_expr >> shift_expr
939
in
shift_expr -> arith_expr >> shift_expr
939
==
shift_expr -> arith_expr >> shift_expr
939
!=
shift_expr -> arith_expr >> shift_expr
939
>=
shift_expr -> arith_expr >> shift_expr
939
not
shift_expr -> arith_expr >> shift_expr
939
and
shift_expr -> arith_expr >> shift_expr
939
is
shift_expr -> arith_expr >> shift_expr
939
&
shift_expr -> arith_expr >> shift_expr
939
>
shift_expr -> arith_expr >> shift_expr
939
|
shift_expr -> arith_expr >> shift_expr
939
:
shift_expr -> arith_expr >> shift_expr
939
<=
shift_expr -> arith_expr >> shift_expr
939
or
shift_expr -> arith_expr >> shift_expr
939
if
shift_expr -> arith_expr >> shift_expr
940
if
shift_expr -> arith_expr << shift_expr
940
&
shift_expr -> arith_expr << shift_expr
940
>=
shift_expr -> arith_expr << shift_expr
940
<=
shift_expr -> arith_expr << shift_expr
940
or
shift_expr -> arith_expr << shift_expr
940
in
shift_expr -> arith_expr << shift_expr
940
:
shift_expr -> arith_expr << shift_expr
940
!=
shift_expr -> arith_expr << shift_expr
940
^
shift_expr -> arith_expr << shift_expr
940
<
shift_expr -> arith_expr << shift_expr
940
|
shift_expr -> arith_expr << shift_expr
940
==
shift_expr -> arith_expr << shift_expr
940
is
shift_expr -> arith_expr << shift_expr
940
and
shift_expr -> arith_expr << shift_expr
940
>
shift_expr -> arith_expr << shift_expr
940
not
shift_expr -> arith_expr << shift_expr
941
False
suite -> simple_stmt
941
if
suite -> simple_stmt
941
NUMBER
suite -> simple_stmt
941
NEWLINE
suite -> simple_stmt
941
{
suite -> simple_stmt
941
@
suite -> simple_stmt
941
begsim
suite -> simple_stmt
941
endsim
suite -> simple_stmt
941
nonlocal
suite -> simple_stmt
941
STRING
suite -> simple_stmt
941
(
suite -> simple_stmt
941
global
suite -> simple_stmt
941
yield
suite -> simple_stmt
941
try
suite -> simple_stmt
941
conf
suite -> simple_stmt
941
for
suite -> simple_stmt
941
not
suite -> simple_stmt
941
else
suite -> simple_stmt
941
while
suite -> simple_stmt
941
lambda
suite -> simple_stmt
941
None
suite -> simple_stmt
941
elif
suite -> simple_stmt
941
break
suite -> simple_stmt
941
resetstats
suite -> simple_stmt
941
True
suite -> simple_stmt
941
~
suite -> simple_stmt
941
-
suite -> simple_stmt
941
pass
suite -> simple_stmt
941
def
suite -> simple_stmt
941
raise
suite -> simple_stmt
941
with
suite -> simple_stmt
941
class
suite -> simple_stmt
941
[
suite -> simple_stmt
941
return
suite -> simple_stmt
941
del
suite -> simple_stmt
941
continue
suite -> simple_stmt
941
assert
suite -> simple_stmt
941
+
suite -> simple_stmt
941
$
suite -> simple_stmt
941
NAME
suite -> simple_stmt
942
NEWLINE
1487
943
elif_clause
1488
943
False
elif_clause -> 
943
elif
1489
943
class
elif_clause -> 
943
~
elif_clause -> 
943
not
elif_clause -> 
943
else
elif_clause -> 
943
@
elif_clause -> 
943
True
elif_clause -> 
943
if
elif_clause -> 
943
STRING
elif_clause -> 
943
assert
elif_clause -> 
943
for
elif_clause -> 
943
(
elif_clause -> 
943
nonlocal
elif_clause -> 
943
endsim
elif_clause -> 
943
None
elif_clause -> 
943
global
elif_clause -> 
943
break
elif_clause -> 
943
$
elif_clause -> 
943
continue
elif_clause -> 
943
try
elif_clause -> 
943
def
elif_clause -> 
943
begsim
elif_clause -> 
943
raise
elif_clause -> 
943
+
elif_clause -> 
943
with
elif_clause -> 
943
pass
elif_clause -> 
943
NEWLINE
elif_clause -> 
943
[
elif_clause -> 
943
conf
elif_clause -> 
943
while
elif_clause -> 
943
lambda
elif_clause -> 
943
resetstats
elif_clause -> 
943
return
elif_clause -> 
943
NAME
elif_clause -> 
943
yield
elif_clause -> 
943
NUMBER
elif_clause -> 
943
del
elif_clause -> 
943
-
elif_clause -> 
943
{
elif_clause -> 
944
INDENT
1490
945
@
atom -> ( test_list_comp )
945
<
atom -> ( test_list_comp )
945
and
atom -> ( test_list_comp )
945
if
atom -> ( test_list_comp )
945
&
atom -> ( test_list_comp )
945
*
atom -> ( test_list_comp )
945
%
atom -> ( test_list_comp )
945
[
atom -> ( test_list_comp )
945
//
atom -> ( test_list_comp )
945
<<
atom -> ( test_list_comp )
945
.
atom -> ( test_list_comp )
945
/
atom -> ( test_list_comp )
945
>=
atom -> ( test_list_comp )
945
or
atom -> ( test_list_comp )
945
>
atom -> ( test_list_comp )
945
-
atom -> ( test_list_comp )
945
|
atom -> ( test_list_comp )
945
**
atom -> ( test_list_comp )
945
is
atom -> ( test_list_comp )
945
:
atom -> ( test_list_comp )
945
==
atom -> ( test_list_comp )
945
not
atom -> ( test_list_comp )
945
in
atom -> ( test_list_comp )
945
!=
atom -> ( test_list_comp )
945
^
atom -> ( test_list_comp )
945
(
atom -> ( test_list_comp )
945
<=
atom -> ( test_list_comp )
945
+
atom -> ( test_list_comp )
945
>>
atom -> ( test_list_comp )
946
>=
xor_expr -> and_expr ^ xor_expr
946
>
xor_expr -> and_expr ^ xor_expr
946
or
xor_expr -> and_expr ^ xor_expr
946
and
xor_expr -> and_expr ^ xor_expr
946
<=
xor_expr -> and_expr ^ xor_expr
946
in
xor_expr -> and_expr ^ xor_expr
946
==
xor_expr -> and_expr ^ xor_expr
946
if
xor_expr -> and_expr ^ xor_expr
946
!=
xor_expr -> and_expr ^ xor_expr
946
not
xor_expr -> and_expr ^ xor_expr
946
<
xor_expr -> and_expr ^ xor_expr
946
is
xor_expr -> and_expr ^ xor_expr
946
:
xor_expr -> and_expr ^ xor_expr
946
|
xor_expr -> and_expr ^ xor_expr
947
:
or_test -> and_test or or_test
947
if
or_test -> and_test or or_test
948
<<
atom -> [ test_list_comp ]
948
:
atom -> [ test_list_comp ]
948
>>
atom -> [ test_list_comp ]
948
+
atom -> [ test_list_comp ]
948
-
atom -> [ test_list_comp ]
948
not
atom -> [ test_list_comp ]
948
<=
atom -> [ test_list_comp ]
948
is
atom -> [ test_list_comp ]
948
[
atom -> [ test_list_comp ]
948
*
atom -> [ test_list_comp ]
948
==
atom -> [ test_list_comp ]
948
@
atom -> [ test_list_comp ]
948
>
atom -> [ test_list_comp ]
948
%
atom -> [ test_list_comp ]
948
if
atom -> [ test_list_comp ]
948
>=
atom -> [ test_list_comp ]
948
//
atom -> [ test_list_comp ]
948
.
atom -> [ test_list_comp ]
948
in
atom -> [ test_list_comp ]
948
**
atom -> [ test_list_comp ]
948
and
atom -> [ test_list_comp ]
948
/
atom -> [ test_list_comp ]
948
or
atom -> [ test_list_comp ]
948
!=
atom -> [ test_list_comp ]
948
<
atom -> [ test_list_comp ]
948
^
atom -> [ test_list_comp ]
948
&
atom -> [ test_list_comp ]
948
(
atom -> [ test_list_comp ]
948
|
atom -> [ test_list_comp ]
949
>=
and_expr -> shift_expr & and_expr
949
!=
and_expr -> shift_expr & and_expr
949
or
and_expr -> shift_expr & and_expr
949
is
and_expr -> shift_expr & and_expr
949
^
and_expr -> shift_expr & and_expr
949
if
and_expr -> shift_expr & and_expr
949
==
and_expr -> shift_expr & and_expr
949
not
and_expr -> shift_expr & and_expr
949
<
and_expr -> shift_expr & and_expr
949
>
and_expr -> shift_expr & and_expr
949
in
and_expr -> shift_expr & and_expr
949
and
and_expr -> shift_expr & and_expr
949
|
and_expr -> shift_expr & and_expr
949
:
and_expr -> shift_expr & and_expr
949
<=
and_expr -> shift_expr & and_expr
950
or
and_test -> not_test and and_test
950
:
and_test -> not_test and and_test
950
if
and_test -> not_test and and_test
951
is
expr -> xor_expr | expr
951
or
expr -> xor_expr | expr
951
>
expr -> xor_expr | expr
951
and
expr -> xor_expr | expr
951
in
expr -> xor_expr | expr
951
if
expr -> xor_expr | expr
951
<=
expr -> xor_expr | expr
951
not
expr -> xor_expr | expr
951
==
expr -> xor_expr | expr
951
>=
expr -> xor_expr | expr
951
<
expr -> xor_expr | expr
951
:
expr -> xor_expr | expr
951
!=
expr -> xor_expr | expr
952
:
comparison -> expr comp_op comparison
952
if
comparison -> expr comp_op comparison
952
and
comparison -> expr comp_op comparison
952
or
comparison -> expr comp_op comparison
953
else
1491
954
:
lambdef -> lambda : test
955
NAME
85
955
atom_expr
86
955
term
87
955
atom
88
955
-
89
955
factor
90
955
True
91
955
arith_expr
92
955
False
94
955
{
96
955
(
97
955
+
95
955
and_expr
98
955
and_test
99
955
[
100
955
STRING
101
955
comparison
102
955
shift_expr
103
955
not_test
104
955
power
105
955
None
106
955
xor_expr
107
955
expr
108
955
NUMBER
109
955
~
110
955
test
1492
955
not
111
955
or_test
112
955
lambda
113
955
lambdef
114
956
NAME
461
956
atom_expr
462
956
atom
464
956
-
465
956
[
467
956
True
468
956
False
470
956
{
471
956
(
472
956
+
473
956
STRING
476
956
factor
1493
956
power
481
956
None
482
956
NUMBER
485
956
~
487
957
NAME
461
957
atom_expr
462
957
term
463
957
atom
464
957
-
465
957
factor
466
957
[
467
957
True
468
957
False
470
957
{
471
957
(
472
957
+
473
957
STRING
476
957
arith_expr
1494
957
power
481
957
None
482
957
NUMBER
485
957
~
487
958
NAME
461
958
atom_expr
462
958
term
463
958
atom
464
958
-
465
958
factor
466
958
[
467
958
True
468
958
False
470
958
{
471
958
(
472
958
+
473
958
STRING
476
958
arith_expr
1495
958
power
481
958
None
482
958
NUMBER
485
958
~
487
959
trailer
959
959
trailer_expr
1496
959
[
961
959
or
trailer_expr -> 
959
.
962
959
(
963
959
not
trailer_expr -> 
959
in
trailer_expr -> 
959
is
trailer_expr -> 
959
>=
trailer_expr -> 
959
-
trailer_expr -> 
959
@
trailer_expr -> 
959
<=
trailer_expr -> 
959
,
trailer_expr -> 
959
^
trailer_expr -> 
959
*
trailer_expr -> 
959
if
trailer_expr -> 
959
**
trailer_expr -> 
959
>
trailer_expr -> 
959
==
trailer_expr -> 
959
>>
trailer_expr -> 
959
<<
trailer_expr -> 
959
/
trailer_expr -> 
959
//
trailer_expr -> 
959
!=
trailer_expr -> 
959
<
trailer_expr -> 
959
&
trailer_expr -> 
959
:
trailer_expr -> 
959
]
trailer_expr -> 
959
|
trailer_expr -> 
959
and
trailer_expr -> 
959
+
trailer_expr -> 
959
%
trailer_expr -> 
960
|
atom_expr -> atom trailer_expr
960
*
atom_expr -> atom trailer_expr
960
-
atom_expr -> atom trailer_expr
960
:
atom_expr -> atom trailer_expr
960
not
atom_expr -> atom trailer_expr
960
in
atom_expr -> atom trailer_expr
960
and
atom_expr -> atom trailer_expr
960
^
atom_expr -> atom trailer_expr
960
or
atom_expr -> atom trailer_expr
960
<=
atom_expr -> atom trailer_expr
960
<
atom_expr -> atom trailer_expr
960
>>
atom_expr -> atom trailer_expr
960
//
atom_expr -> atom trailer_expr
960
!=
atom_expr -> atom trailer_expr
960
<<
atom_expr -> atom trailer_expr
960
+
atom_expr -> atom trailer_expr
960
>
atom_expr -> atom trailer_expr
960
/
atom_expr -> atom trailer_expr
960
==
atom_expr -> atom trailer_expr
960
%
atom_expr -> atom trailer_expr
960
&
atom_expr -> atom trailer_expr
960
@
atom_expr -> atom trailer_expr
960
if
atom_expr -> atom trailer_expr
960
>=
atom_expr -> atom trailer_expr
960
]
atom_expr -> atom trailer_expr
960
is
atom_expr -> atom trailer_expr
960
,
atom_expr -> atom trailer_expr
960
**
atom_expr -> atom trailer_expr
961
NAME
461
961
atom_expr
462
961
term
463
961
atom
464
961
-
465
961
factor
466
961
[
467
961
True
468
961
arith_expr
469
961
False
470
961
{
471
961
(
472
961
+
473
961
and_expr
474
961
and_test
475
961
STRING
476
961
subscriptlist
1497
961
comparison
478
961
shift_expr
479
961
not_test
480
961
power
481
961
None
482
961
xor_expr
483
961
expr
484
961
NUMBER
485
961
test
486
961
~
487
961
or_test
488
961
not
489
961
lambdef
490
961
:
maybe_test -> 
961
lambda
491
961
subscript
492
961
maybe_test
493
962
NAME
1498
963
NAME
496
963
atom_expr
497
963
atom
498
963
-
499
963
arglist
1499
963
factor
501
963
*
502
963
[
503
963
True
504
963
arith_expr
505
963
xor_expr
506
963
False
507
963
**
508
963
{
509
963
+
510
963
)
1500
963
and_expr
512
963
(
513
963
STRING
514
963
power
515
963
term
516
963
comparison
517
963
shift_expr
518
963
argument
519
963
not_test
520
963
or_test
521
963
lambdef
522
963
lambda
523
963
None
524
963
test
525
963
expr
526
963
NUMBER
527
963
and_test
528
963
~
529
963
not
530
964
>>
factor -> - factor
964
if
factor -> - factor
964
>
factor -> - factor
964
,
factor -> - factor
964
is
factor -> - factor
964
//
factor -> - factor
964
not
factor -> - factor
964
or
factor -> - factor
964
-
factor -> - factor
964
<<
factor -> - factor
964
]
factor -> - factor
964
>=
factor -> - factor
964
/
factor -> - factor
964
<=
factor -> - factor
964
<
factor -> - factor
964
in
factor -> - factor
964
|
factor -> - factor
964
*
factor -> - factor
964
!=
factor -> - factor
964
&
factor -> - factor
964
and
factor -> - factor
964
^
factor -> - factor
964
+
factor -> - factor
964
:
factor -> - factor
964
%
factor -> - factor
964
==
factor -> - factor
964
@
factor -> - factor
965
NAME
461
965
atom_expr
462
965
atom
464
965
-
465
965
factor
466
965
[
467
965
True
468
965
False
470
965
{
471
965
(
472
965
+
473
965
STRING
476
965
term
1501
965
power
481
965
None
482
965
NUMBER
485
965
~
487
966
NAME
461
966
atom_expr
462
966
atom
464
966
-
465
966
factor
466
966
[
467
966
True
468
966
False
470
966
{
471
966
(
472
966
+
473
966
STRING
476
966
term
1502
966
power
481
966
None
482
966
NUMBER
485
966
~
487
967
NAME
461
967
atom_expr
462
967
atom
464
967
-
465
967
factor
466
967
[
467
967
True
468
967
False
470
967
term
1503
967
{
471
967
(
472
967
+
473
967
STRING
476
967
power
481
967
None
482
967
NUMBER
485
967
~
487
968
NAME
461
968
atom_expr
462
968
atom
464
968
-
465
968
factor
466
968
[
467
968
True
468
968
False
470
968
{
471
968
(
472
968
+
473
968
STRING
476
968
term
1504
968
power
481
968
None
482
968
NUMBER
485
968
~
487
969
NAME
461
969
atom_expr
462
969
atom
464
969
-
465
969
factor
466
969
[
467
969
True
468
969
False
470
969
{
471
969
(
472
969
+
473
969
STRING
476
969
term
1505
969
power
481
969
None
482
969
NUMBER
485
969
~
487
970
]
1506
971
and
atom -> [ ]
971
<<
atom -> [ ]
971
//
atom -> [ ]
971
*
atom -> [ ]
971
+
atom -> [ ]
971
^
atom -> [ ]
971
==
atom -> [ ]
971
>>
atom -> [ ]
971
/
atom -> [ ]
971
]
atom -> [ ]
971
:
atom -> [ ]
971
in
atom -> [ ]
971
>
atom -> [ ]
971
<=
atom -> [ ]
971
.
atom -> [ ]
971
%
atom -> [ ]
971
&
atom -> [ ]
971
-
atom -> [ ]
971
>=
atom -> [ ]
971
not
atom -> [ ]
971
|
atom -> [ ]
971
@
atom -> [ ]
971
is
atom -> [ ]
971
or
atom -> [ ]
971
!=
atom -> [ ]
971
if
atom -> [ ]
971
,
atom -> [ ]
971
**
atom -> [ ]
971
<
atom -> [ ]
971
(
atom -> [ ]
971
[
atom -> [ ]
972
NAME
461
972
atom_expr
462
972
term
463
972
atom
464
972
-
465
972
factor
466
972
[
467
972
True
468
972
arith_expr
469
972
False
470
972
{
471
972
(
472
972
+
473
972
STRING
476
972
shift_expr
1507
972
power
481
972
None
482
972
NUMBER
485
972
~
487
973
NAME
461
973
atom_expr
462
973
term
463
973
atom
464
973
-
465
973
factor
466
973
[
467
973
True
468
973
arith_expr
469
973
False
470
973
{
471
973
shift_expr
1508
973
+
473
973
(
472
973
STRING
476
973
power
481
973
None
482
973
NUMBER
485
973
~
487
974
%
atom -> { }
974
[
atom -> { }
974
not
atom -> { }
974
]
atom -> { }
974
^
atom -> { }
974
or
atom -> { }
974
-
atom -> { }
974
>=
atom -> { }
974
<<
atom -> { }
974
/
atom -> { }
974
<=
atom -> { }
974
|
atom -> { }
974
>>
atom -> { }
974
:
atom -> { }
974
@
atom -> { }
974
is
atom -> { }
974
if
atom -> { }
974
and
atom -> { }
974
==
atom -> { }
974
in
atom -> { }
974
**
atom -> { }
974
&
atom -> { }
974
>
atom -> { }
974
//
atom -> { }
974
(
atom -> { }
974
+
atom -> { }
974
<
atom -> { }
974
,
atom -> { }
974
!=
atom -> { }
974
.
atom -> { }
974
*
atom -> { }
975
|
atom -> ( )
975
**
atom -> ( )
975
]
atom -> ( )
975
>>
atom -> ( )
975
-
atom -> ( )
975
%
atom -> ( )
975
(
atom -> ( )
975
not
atom -> ( )
975
+
atom -> ( )
975
>=
atom -> ( )
975
&
atom -> ( )
975
*
atom -> ( )
975
!=
atom -> ( )
975
<=
atom -> ( )
975
and
atom -> ( )
975
<
atom -> ( )
975
^
atom -> ( )
975
==
atom -> ( )
975
if
atom -> ( )
975
in
atom -> ( )
975
/
atom -> ( )
975
>
atom -> ( )
975
//
atom -> ( )
975
.
atom -> ( )
975
or
atom -> ( )
975
@
atom -> ( )
975
is
atom -> ( )
975
:
atom -> ( )
975
<<
atom -> ( )
975
,
atom -> ( )
975
[
atom -> ( )
976
)
1509
977
>>
factor -> + factor
977
>=
factor -> + factor
977
or
factor -> + factor
977
==
factor -> + factor
977
-
factor -> + factor
977
:
factor -> + factor
977
*
factor -> + factor
977
]
factor -> + factor
977
<
factor -> + factor
977
^
factor -> + factor
977
,
factor -> + factor
977
&
factor -> + factor
977
@
factor -> + factor
977
|
factor -> + factor
977
<<
factor -> + factor
977
%
factor -> + factor
977
not
factor -> + factor
977
//
factor -> + factor
977
and
factor -> + factor
977
in
factor -> + factor
977
!=
factor -> + factor
977
>
factor -> + factor
977
/
factor -> + factor
977
is
factor -> + factor
977
+
factor -> + factor
977
if
factor -> + factor
977
<=
factor -> + factor
978
NAME
461
978
atom_expr
462
978
term
463
978
atom
464
978
-
465
978
factor
466
978
[
467
978
True
468
978
arith_expr
469
978
False
470
978
{
471
978
(
472
978
+
473
978
and_expr
474
978
STRING
476
978
xor_expr
1510
978
shift_expr
479
978
power
481
978
None
482
978
NUMBER
485
978
~
487
979
NAME
461
979
atom_expr
462
979
term
463
979
atom
464
979
-
465
979
factor
466
979
[
467
979
True
468
979
arith_expr
469
979
False
470
979
{
471
979
(
472
979
+
473
979
and_expr
474
979
and_test
475
979
STRING
476
979
comparison
478
979
shift_expr
479
979
not_test
480
979
power
481
979
None
482
979
xor_expr
483
979
expr
484
979
NUMBER
485
979
~
487
979
not
489
979
or_test
1511
980
(
trailer -> [ subscriptlist ]
980
//
trailer -> [ subscriptlist ]
980
&
trailer -> [ subscriptlist ]
980
*=
trailer -> [ subscriptlist ]
980
>
trailer -> [ subscriptlist ]
980
//=
trailer -> [ subscriptlist ]
980
-=
trailer -> [ subscriptlist ]
980
in
trailer -> [ subscriptlist ]
980
>>
trailer -> [ subscriptlist ]
980
|=
trailer -> [ subscriptlist ]
980
[
trailer -> [ subscriptlist ]
980
<=
trailer -> [ subscriptlist ]
980
>>=
trailer -> [ subscriptlist ]
980
-
trailer -> [ subscriptlist ]
980
@=
trailer -> [ subscriptlist ]
980
!=
trailer -> [ subscriptlist ]
980
|
trailer -> [ subscriptlist ]
980
=
trailer -> [ subscriptlist ]
980
not
trailer -> [ subscriptlist ]
980
.
trailer -> [ subscriptlist ]
980
%=
trailer -> [ subscriptlist ]
980
>=
trailer -> [ subscriptlist ]
980
*
trailer -> [ subscriptlist ]
980
<<
trailer -> [ subscriptlist ]
980
or
trailer -> [ subscriptlist ]
980
^=
trailer -> [ subscriptlist ]
980
**
trailer -> [ subscriptlist ]
980
==
trailer -> [ subscriptlist ]
980
+
trailer -> [ subscriptlist ]
980
is
trailer -> [ subscriptlist ]
980
/
trailer -> [ subscriptlist ]
980
^
trailer -> [ subscriptlist ]
980
/=
trailer -> [ subscriptlist ]
980
%
trailer -> [ subscriptlist ]
980
&=
trailer -> [ subscriptlist ]
980
and
trailer -> [ subscriptlist ]
980
NEWLINE
trailer -> [ subscriptlist ]
980
+=
trailer -> [ subscriptlist ]
980
,
trailer -> [ subscriptlist ]
980
<<=
trailer -> [ subscriptlist ]
980
@
trailer -> [ subscriptlist ]
980
if
trailer -> [ subscriptlist ]
980
<
trailer -> [ subscriptlist ]
980
:
trailer -> [ subscriptlist ]
980
**=
trailer -> [ subscriptlist ]
981
NAME
461
981
atom_expr
462
981
term
463
981
atom
464
981
-
465
981
factor
466
981
[
467
981
True
468
981
arith_expr
469
981
False
470
981
{
471
981
(
472
981
+
473
981
STRING
476
981
shift_expr
479
981
and_expr
1512
981
power
481
981
None
482
981
NUMBER
485
981
~
487
982
NAME
461
982
atom_expr
462
982
term
463
982
atom
464
982
-
465
982
factor
466
982
[
467
982
True
468
982
arith_expr
469
982
False
470
982
{
471
982
(
472
982
+
473
982
and_expr
474
982
STRING
476
982
comparison
478
982
shift_expr
479
982
not_test
480
982
power
481
982
None
482
982
xor_expr
483
982
expr
484
982
NUMBER
485
982
and_test
1513
982
~
487
982
not
489
983
NAME
461
983
atom_expr
462
983
term
463
983
atom
464
983
-
465
983
factor
466
983
[
467
983
True
468
983
arith_expr
469
983
False
470
983
{
471
983
(
472
983
+
473
983
and_expr
474
983
STRING
476
983
shift_expr
479
983
power
481
983
None
482
983
xor_expr
483
983
NUMBER
485
983
expr
1514
983
~
487
984
NAME
461
984
atom_expr
462
984
term
463
984
atom
464
984
-
465
984
factor
466
984
[
467
984
True
468
984
arith_expr
469
984
False
470
984
{
471
984
(
472
984
+
473
984
and_expr
474
984
STRING
476
984
shift_expr
479
984
power
481
984
None
482
984
xor_expr
483
984
expr
484
984
NUMBER
485
984
~
487
984
comparison
1515
985
is
factor -> ~ factor
985
>=
factor -> ~ factor
985
<<
factor -> ~ factor
985
<=
factor -> ~ factor
985
if
factor -> ~ factor
985
==
factor -> ~ factor
985
//
factor -> ~ factor
985
or
factor -> ~ factor
985
+
factor -> ~ factor
985
and
factor -> ~ factor
985
!=
factor -> ~ factor
985
&
factor -> ~ factor
985
%
factor -> ~ factor
985
:
factor -> ~ factor
985
|
factor -> ~ factor
985
>>
factor -> ~ factor
985
in
factor -> ~ factor
985
>
factor -> ~ factor
985
/
factor -> ~ factor
985
not
factor -> ~ factor
985
@
factor -> ~ factor
985
-
factor -> ~ factor
985
^
factor -> ~ factor
985
,
factor -> ~ factor
985
*
factor -> ~ factor
985
<
factor -> ~ factor
985
]
factor -> ~ factor
986
atom_expr
685
986
atom
686
986
-
687
986
factor
688
986
and_test
689
986
True
690
986
arith_expr
691
986
False
692
986
NAME
693
986
{
694
986
+
695
986
and_expr
696
986
[
697
986
(
698
986
STRING
699
986
term
700
986
comparison
701
986
shift_expr
702
986
not_test
703
986
power
704
986
xor_expr
706
986
None
707
986
NUMBER
708
986
expr
709
986
or_test
1516
986
~
710
986
not
711
987
,
not_test -> not not_test
987
:
not_test -> not not_test
987
or
not_test -> not not_test
987
]
not_test -> not not_test
987
if
not_test -> not not_test
987
and
not_test -> not not_test
988
NAME
461
988
atom_expr
462
988
term
463
988
atom
464
988
-
465
988
factor
466
988
[
467
988
True
468
988
arith_expr
469
988
False
470
988
{
471
988
(
472
988
+
473
988
and_expr
474
988
and_test
475
988
STRING
476
988
comparison
478
988
shift_expr
479
988
not_test
480
988
power
481
988
None
482
988
xor_expr
483
988
expr
484
988
NUMBER
485
988
~
487
988
or_test
488
988
not
489
988
lambdef
490
988
lambda
491
988
test
1517
989
:
1518
990
NAME
461
990
atom_expr
462
990
term
463
990
atom
464
990
-
465
990
factor
466
990
[
467
990
True
468
990
arith_expr
469
990
False
470
990
{
471
990
(
472
990
+
473
990
and_expr
474
990
and_test
475
990
STRING
476
990
comparison
478
990
shift_expr
479
990
not_test
480
990
power
481
990
None
482
990
xor_expr
483
990
expr
484
990
NUMBER
485
990
subscriptlist
1519
990
test
486
990
~
487
990
or_test
488
990
not
489
990
lambdef
490
990
:
maybe_test -> 
990
lambda
491
990
subscript
492
990
maybe_test
493
991
NAME
461
991
atom_expr
462
991
term
463
991
atom
464
991
-
465
991
factor
466
991
[
467
991
True
468
991
arith_expr
469
991
False
470
991
{
471
991
(
472
991
+
473
991
and_expr
474
991
and_test
475
991
STRING
476
991
comparison
478
991
]
maybe_test -> 
991
shift_expr
479
991
not_test
480
991
power
481
991
None
482
991
xor_expr
483
991
expr
484
991
NUMBER
485
991
test
1520
991
~
487
991
or_test
488
991
not
489
991
lambdef
490
991
maybe_test
1521
991
:
maybe_test -> 
991
,
maybe_test -> 
991
lambda
491
992
NAME
496
992
atom_expr
497
992
atom
498
992
-
499
992
[
503
992
True
504
992
False
507
992
{
509
992
+
510
992
(
513
992
STRING
514
992
power
515
992
factor
1522
992
None
524
992
NUMBER
527
992
~
529
993
trailer
993
993
trailer_expr
1523
993
[
995
993
.
996
993
or
trailer_expr -> 
993
(
997
993
not
trailer_expr -> 
993
in
trailer_expr -> 
993
is
trailer_expr -> 
993
>=
trailer_expr -> 
993
-
trailer_expr -> 
993
@
trailer_expr -> 
993
<=
trailer_expr -> 
993
)
trailer_expr -> 
993
,
trailer_expr -> 
993
^
trailer_expr -> 
993
*
trailer_expr -> 
993
for
trailer_expr -> 
993
if
trailer_expr -> 
993
**
trailer_expr -> 
993
=
trailer_expr -> 
993
>
trailer_expr -> 
993
==
trailer_expr -> 
993
>>
trailer_expr -> 
993
<<
trailer_expr -> 
993
/
trailer_expr -> 
993
//
trailer_expr -> 
993
!=
trailer_expr -> 
993
<
trailer_expr -> 
993
&
trailer_expr -> 
993
|
trailer_expr -> 
993
and
trailer_expr -> 
993
+
trailer_expr -> 
993
%
trailer_expr -> 
994
|
atom_expr -> atom trailer_expr
994
)
atom_expr -> atom trailer_expr
994
*
atom_expr -> atom trailer_expr
994
-
atom_expr -> atom trailer_expr
994
not
atom_expr -> atom trailer_expr
994
in
atom_expr -> atom trailer_expr
994
and
atom_expr -> atom trailer_expr
994
^
atom_expr -> atom trailer_expr
994
or
atom_expr -> atom trailer_expr
994
<=
atom_expr -> atom trailer_expr
994
<
atom_expr -> atom trailer_expr
994
>>
atom_expr -> atom trailer_expr
994
//
atom_expr -> atom trailer_expr
994
!=
atom_expr -> atom trailer_expr
994
<<
atom_expr -> atom trailer_expr
994
+
atom_expr -> atom trailer_expr
994
>
atom_expr -> atom trailer_expr
994
/
atom_expr -> atom trailer_expr
994
==
atom_expr -> atom trailer_expr
994
%
atom_expr -> atom trailer_expr
994
&
atom_expr -> atom trailer_expr
994
@
atom_expr -> atom trailer_expr
994
if
atom_expr -> atom trailer_expr
994
for
atom_expr -> atom trailer_expr
994
=
atom_expr -> atom trailer_expr
994
>=
atom_expr -> atom trailer_expr
994
is
atom_expr -> atom trailer_expr
994
,
atom_expr -> atom trailer_expr
994
**
atom_expr -> atom trailer_expr
995
NAME
461
995
atom_expr
462
995
term
463
995
atom
464
995
-
465
995
factor
466
995
[
467
995
True
468
995
arith_expr
469
995
False
470
995
{
471
995
(
472
995
+
473
995
and_expr
474
995
and_test
475
995
STRING
476
995
subscriptlist
1524
995
comparison
478
995
shift_expr
479
995
not_test
480
995
power
481
995
None
482
995
xor_expr
483
995
expr
484
995
NUMBER
485
995
test
486
995
~
487
995
or_test
488
995
not
489
995
lambdef
490
995
:
maybe_test -> 
995
lambda
491
995
subscript
492
995
maybe_test
493
996
NAME
1525
997
NAME
496
997
atom_expr
497
997
atom
498
997
-
499
997
arglist
1526
997
factor
501
997
*
502
997
[
503
997
True
504
997
arith_expr
505
997
xor_expr
506
997
False
507
997
**
508
997
{
509
997
+
510
997
)
1527
997
and_expr
512
997
(
513
997
STRING
514
997
power
515
997
term
516
997
comparison
517
997
shift_expr
518
997
argument
519
997
not_test
520
997
or_test
521
997
lambdef
522
997
lambda
523
997
None
524
997
test
525
997
expr
526
997
NUMBER
527
997
and_test
528
997
~
529
997
not
530
998
>>
factor -> - factor
998
if
factor -> - factor
998
>
factor -> - factor
998
,
factor -> - factor
998
@
factor -> - factor
998
is
factor -> - factor
998
//
factor -> - factor
998
)
factor -> - factor
998
not
factor -> - factor
998
or
factor -> - factor
998
-
factor -> - factor
998
<<
factor -> - factor
998
for
factor -> - factor
998
>=
factor -> - factor
998
/
factor -> - factor
998
<=
factor -> - factor
998
<
factor -> - factor
998
in
factor -> - factor
998
|
factor -> - factor
998
*
factor -> - factor
998
!=
factor -> - factor
998
&
factor -> - factor
998
and
factor -> - factor
998
^
factor -> - factor
998
+
factor -> - factor
998
%
factor -> - factor
998
==
factor -> - factor
998
=
factor -> - factor
999
or
trailer -> ( arglist )
999
+=
trailer -> ( arglist )
999
NEWLINE
trailer -> ( arglist )
999
>>
trailer -> ( arglist )
999
<=
trailer -> ( arglist )
999
**
trailer -> ( arglist )
999
-=
trailer -> ( arglist )
999
>>=
trailer -> ( arglist )
999
<
trailer -> ( arglist )
999
(
trailer -> ( arglist )
999
-
trailer -> ( arglist )
999
%=
trailer -> ( arglist )
999
not
trailer -> ( arglist )
999
if
trailer -> ( arglist )
999
and
trailer -> ( arglist )
999
.
trailer -> ( arglist )
999
is
trailer -> ( arglist )
999
>
trailer -> ( arglist )
999
in
trailer -> ( arglist )
999
!=
trailer -> ( arglist )
999
,
trailer -> ( arglist )
999
==
trailer -> ( arglist )
999
&=
trailer -> ( arglist )
999
/=
trailer -> ( arglist )
999
%
trailer -> ( arglist )
999
@
trailer -> ( arglist )
999
^
trailer -> ( arglist )
999
<<
trailer -> ( arglist )
999
|=
trailer -> ( arglist )
999
@=
trailer -> ( arglist )
999
//
trailer -> ( arglist )
999
*
trailer -> ( arglist )
999
:
trailer -> ( arglist )
999
^=
trailer -> ( arglist )
999
//=
trailer -> ( arglist )
999
&
trailer -> ( arglist )
999
|
trailer -> ( arglist )
999
>=
trailer -> ( arglist )
999
+
trailer -> ( arglist )
999
/
trailer -> ( arglist )
999
=
trailer -> ( arglist )
999
<<=
trailer -> ( arglist )
999
**=
trailer -> ( arglist )
999
*=
trailer -> ( arglist )
999
[
trailer -> ( arglist )
1000
NAME
496
1000
atom_expr
497
1000
atom
498
1000
-
499
1000
factor
501
1000
[
503
1000
True
504
1000
False
507
1000
{
509
1000
+
510
1000
(
513
1000
STRING
514
1000
power
515
1000
term
1528
1000
None
524
1000
NUMBER
527
1000
~
529
1001
NAME
496
1001
atom_expr
497
1001
atom
498
1001
-
499
1001
factor
501
1001
[
503
1001
True
504
1001
False
507
1001
term
1529
1001
{
509
1001
+
510
1001
(
513
1001
STRING
514
1001
power
515
1001
None
524
1001
NUMBER
527
1001
~
529
1002
NAME
496
1002
atom_expr
497
1002
atom
498
1002
-
499
1002
factor
501
1002
[
503
1002
True
504
1002
False
507
1002
{
509
1002
+
510
1002
(
513
1002
STRING
514
1002
power
515
1002
term
1530
1002
None
524
1002
NUMBER
527
1002
~
529
1003
NAME
496
1003
atom_expr
497
1003
atom
498
1003
-
499
1003
factor
501
1003
[
503
1003
True
504
1003
False
507
1003
{
509
1003
+
510
1003
(
513
1003
STRING
514
1003
term
1531
1003
power
515
1003
None
524
1003
NUMBER
527
1003
~
529
1004
NAME
496
1004
atom_expr
497
1004
atom
498
1004
-
499
1004
factor
501
1004
[
503
1004
True
504
1004
False
507
1004
{
509
1004
+
510
1004
(
513
1004
STRING
514
1004
power
515
1004
term
1532
1004
None
524
1004
NUMBER
527
1004
~
529
1005
.
atom -> NAME
1005
<
atom -> NAME
1005
|
atom -> NAME
1005
not
atom -> NAME
1005
[
atom -> NAME
1005
,
atom -> NAME
1005
+
atom -> NAME
1005
%
atom -> NAME
1005
)
atom -> NAME
1005
<=
atom -> NAME
1005
*
atom -> NAME
1005
!=
atom -> NAME
1005
in
atom -> NAME
1005
if
atom -> NAME
1005
is
atom -> NAME
1005
(
atom -> NAME
1005
^
atom -> NAME
1005
@
atom -> NAME
1005
&
atom -> NAME
1005
>>
atom -> NAME
1005
<<
atom -> NAME
1005
-
atom -> NAME
1005
/
atom -> NAME
1005
or
atom -> NAME
1005
//
atom -> NAME
1005
>=
atom -> NAME
1005
and
atom -> NAME
1005
>
atom -> NAME
1005
==
atom -> NAME
1005
**
atom -> NAME
1006
**
1533
1006
)
power -> atom_expr
1006
and
power -> atom_expr
1006
^
power -> atom_expr
1006
or
power -> atom_expr
1006
>>
power -> atom_expr
1006
if
power -> atom_expr
1006
<
power -> atom_expr
1006
>=
power -> atom_expr
1006
!=
power -> atom_expr
1006
is
power -> atom_expr
1006
<=
power -> atom_expr
1006
not
power -> atom_expr
1006
//
power -> atom_expr
1006
+
power -> atom_expr
1006
==
power -> atom_expr
1006
|
power -> atom_expr
1006
-
power -> atom_expr
1006
&
power -> atom_expr
1006
/
power -> atom_expr
1006
@
power -> atom_expr
1006
<<
power -> atom_expr
1006
,
power -> atom_expr
1006
%
power -> atom_expr
1006
*
power -> atom_expr
1006
in
power -> atom_expr
1006
>
power -> atom_expr
1007
trailer
1534
1007
trailer_expr
1535
1007
[
1536
1007
or
trailer_expr -> 
1007
.
1537
1007
(
1538
1007
not
trailer_expr -> 
1007
in
trailer_expr -> 
1007
is
trailer_expr -> 
1007
>=
trailer_expr -> 
1007
-
trailer_expr -> 
1007
@
trailer_expr -> 
1007
<=
trailer_expr -> 
1007
)
trailer_expr -> 
1007
,
trailer_expr -> 
1007
^
trailer_expr -> 
1007
*
trailer_expr -> 
1007
if
trailer_expr -> 
1007
**
trailer_expr -> 
1007
>
trailer_expr -> 
1007
==
trailer_expr -> 
1007
>>
trailer_expr -> 
1007
<<
trailer_expr -> 
1007
/
trailer_expr -> 
1007
//
trailer_expr -> 
1007
!=
trailer_expr -> 
1007
<
trailer_expr -> 
1007
&
trailer_expr -> 
1007
|
trailer_expr -> 
1007
and
trailer_expr -> 
1007
+
trailer_expr -> 
1007
%
trailer_expr -> 
1008
NAME
1005
1008
atom_expr
1006
1008
atom
1007
1008
-
1008
1008
factor
1539
1008
[
1010
1008
True
1011
1008
False
1013
1008
{
1014
1008
+
1015
1008
(
1017
1008
STRING
1018
1008
power
1019
1008
None
1026
1008
NUMBER
1029
1008
~
1031
1009
%
1540
1009
/
1541
1009
*
1542
1009
//
1543
1009
@
1544
1009
not
term -> factor
1009
<<
term -> factor
1009
or
term -> factor
1009
^
term -> factor
1009
in
term -> factor
1009
if
term -> factor
1009
and
term -> factor
1009
<=
term -> factor
1009
&
term -> factor
1009
,
term -> factor
1009
>>
term -> factor
1009
>
term -> factor
1009
|
term -> factor
1009
<
term -> factor
1009
is
term -> factor
1009
!=
term -> factor
1009
>=
term -> factor
1009
==
term -> factor
1009
-
term -> factor
1009
+
term -> factor
1009
)
term -> factor
1010
NAME
187
1010
atom_expr
188
1010
atom
189
1010
-
190
1010
factor
191
1010
test_list_comp
1545
1010
[
193
1010
True
194
1010
arith_expr
195
1010
False
196
1010
{
197
1010
+
198
1010
and_expr
199
1010
(
200
1010
STRING
201
1010
]
1546
1010
term
203
1010
and_test
204
1010
comparison
205
1010
shift_expr
206
1010
not_test
207
1010
power
208
1010
or_test
209
1010
None
210
1010
xor_expr
211
1010
expr
212
1010
NUMBER
213
1010
lambda
214
1010
~
215
1010
lambdef
216
1010
not
217
1010
test
218
1010
test_list
219
1011
!=
atom -> True
1011
&
atom -> True
1011
+
atom -> True
1011
<<
atom -> True
1011
@
atom -> True
1011
,
atom -> True
1011
if
atom -> True
1011
and
atom -> True
1011
is
atom -> True
1011
|
atom -> True
1011
<
atom -> True
1011
>=
atom -> True
1011
or
atom -> True
1011
==
atom -> True
1011
%
atom -> True
1011
>
atom -> True
1011
[
atom -> True
1011
*
atom -> True
1011
)
atom -> True
1011
//
atom -> True
1011
/
atom -> True
1011
in
atom -> True
1011
-
atom -> True
1011
^
atom -> True
1011
<=
atom -> True
1011
(
atom -> True
1011
**
atom -> True
1011
.
atom -> True
1011
not
atom -> True
1011
>>
atom -> True
1012
or
shift_expr -> arith_expr
1012
>>
1547
1012
<<
1548
1012
)
shift_expr -> arith_expr
1012
^
shift_expr -> arith_expr
1012
in
shift_expr -> arith_expr
1012
,
shift_expr -> arith_expr
1012
<=
shift_expr -> arith_expr
1012
>=
shift_expr -> arith_expr
1012
&
shift_expr -> arith_expr
1012
==
shift_expr -> arith_expr
1012
not
shift_expr -> arith_expr
1012
and
shift_expr -> arith_expr
1012
>
shift_expr -> arith_expr
1012
!=
shift_expr -> arith_expr
1012
if
shift_expr -> arith_expr
1012
|
shift_expr -> arith_expr
1012
<
shift_expr -> arith_expr
1012
is
shift_expr -> arith_expr
1013
not
atom -> False
1013
==
atom -> False
1013
)
atom -> False
1013
*
atom -> False
1013
>
atom -> False
1013
,
atom -> False
1013
[
atom -> False
1013
if
atom -> False
1013
@
atom -> False
1013
&
atom -> False
1013
is
atom -> False
1013
.
atom -> False
1013
+
atom -> False
1013
%
atom -> False
1013
>=
atom -> False
1013
and
atom -> False
1013
(
atom -> False
1013
|
atom -> False
1013
-
atom -> False
1013
/
atom -> False
1013
in
atom -> False
1013
<<
atom -> False
1013
<=
atom -> False
1013
^
atom -> False
1013
//
atom -> False
1013
>>
atom -> False
1013
!=
atom -> False
1013
**
atom -> False
1013
or
atom -> False
1013
<
atom -> False
1014
}
1549
1015
NAME
1005
1015
atom_expr
1006
1015
atom
1007
1015
-
1008
1015
[
1010
1015
True
1011
1015
False
1013
1015
{
1014
1015
+
1015
1015
(
1017
1015
STRING
1018
1015
power
1019
1015
factor
1550
1015
None
1026
1015
NUMBER
1029
1015
~
1031
1016
^
1551
1016
<
xor_expr -> and_expr
1016
<=
xor_expr -> and_expr
1016
|
xor_expr -> and_expr
1016
not
xor_expr -> and_expr
1016
and
xor_expr -> and_expr
1016
)
xor_expr -> and_expr
1016
!=
xor_expr -> and_expr
1016
or
xor_expr -> and_expr
1016
>
xor_expr -> and_expr
1016
>=
xor_expr -> and_expr
1016
==
xor_expr -> and_expr
1016
,
xor_expr -> and_expr
1016
in
xor_expr -> and_expr
1016
is
xor_expr -> and_expr
1016
if
xor_expr -> and_expr
1017
NAME
131
1017
atom_expr
132
1017
atom
133
1017
-
134
1017
factor
136
1017
)
1552
1017
[
137
1017
True
138
1017
arith_expr
139
1017
False
140
1017
{
141
1017
+
142
1017
and_expr
143
1017
(
144
1017
STRING
145
1017
test_list_comp
1553
1017
power
147
1017
term
148
1017
comparison
149
1017
shift_expr
150
1017
test
151
1017
not_test
152
1017
or_test
153
1017
lambda
154
1017
None
155
1017
xor_expr
156
1017
expr
157
1017
NUMBER
158
1017
and_test
159
1017
~
160
1017
lambdef
161
1017
not
162
1017
test_list
163
1018
and
atom -> STRING
1018
not
atom -> STRING
1018
.
atom -> STRING
1018
//
atom -> STRING
1018
-
atom -> STRING
1018
*
atom -> STRING
1018
(
atom -> STRING
1018
>=
atom -> STRING
1018
<=
atom -> STRING
1018
<<
atom -> STRING
1018
if
atom -> STRING
1018
+
atom -> STRING
1018
or
atom -> STRING
1018
/
atom -> STRING
1018
@
atom -> STRING
1018
in
atom -> STRING
1018
>>
atom -> STRING
1018
%
atom -> STRING
1018
!=
atom -> STRING
1018
,
atom -> STRING
1018
>
atom -> STRING
1018
^
atom -> STRING
1018
<
atom -> STRING
1018
==
atom -> STRING
1018
**
atom -> STRING
1018
&
atom -> STRING
1018
|
atom -> STRING
1018
is
atom -> STRING
1018
)
atom -> STRING
1018
[
atom -> STRING
1019
<=
factor -> power
1019
,
factor -> power
1019
is
factor -> power
1019
>
factor -> power
1019
)
factor -> power
1019
==
factor -> power
1019
^
factor -> power
1019
or
factor -> power
1019
-
factor -> power
1019
+
factor -> power
1019
>>
factor -> power
1019
/
factor -> power
1019
*
factor -> power
1019
<<
factor -> power
1019
|
factor -> power
1019
and
factor -> power
1019
<
factor -> power
1019
not
factor -> power
1019
!=
factor -> power
1019
if
factor -> power
1019
&
factor -> power
1019
in
factor -> power
1019
%
factor -> power
1019
>=
factor -> power
1019
//
factor -> power
1019
@
factor -> power
1020
+
1554
1020
or
arith_expr -> term
1020
)
arith_expr -> term
1020
==
arith_expr -> term
1020
-
1555
1020
in
arith_expr -> term
1020
<<
arith_expr -> term
1020
>
arith_expr -> term
1020
is
arith_expr -> term
1020
>=
arith_expr -> term
1020
<=
arith_expr -> term
1020
and
arith_expr -> term
1020
>>
arith_expr -> term
1020
!=
arith_expr -> term
1020
not
arith_expr -> term
1020
&
arith_expr -> term
1020
,
arith_expr -> term
1020
if
arith_expr -> term
1020
<
arith_expr -> term
1020
^
arith_expr -> term
1020
|
arith_expr -> term
1021
,
not_test -> comparison
1021
)
not_test -> comparison
1021
or
not_test -> comparison
1021
if
not_test -> comparison
1021
and
not_test -> comparison
1022
==
and_expr -> shift_expr
1022
&
1556
1022
!=
and_expr -> shift_expr
1022
<
and_expr -> shift_expr
1022
<=
and_expr -> shift_expr
1022
and
and_expr -> shift_expr
1022
in
and_expr -> shift_expr
1022
^
and_expr -> shift_expr
1022
not
and_expr -> shift_expr
1022
is
and_expr -> shift_expr
1022
if
and_expr -> shift_expr
1022
,
and_expr -> shift_expr
1022
>
and_expr -> shift_expr
1022
or
and_expr -> shift_expr
1022
>=
and_expr -> shift_expr
1022
)
and_expr -> shift_expr
1022
|
and_expr -> shift_expr
1023
and
1557
1023
if
and_test -> not_test
1023
)
and_test -> not_test
1023
or
and_test -> not_test
1023
,
and_test -> not_test
1024
if
1558
1024
)
test -> or_test
1024
,
test -> or_test
1025
NAME
342
1025
vfpdef
343
1025
varargslist
1559
1025
:
1560
1026
+
atom -> None
1026
>>
atom -> None
1026
/
atom -> None
1026
or
atom -> None
1026
*
atom -> None
1026
in
atom -> None
1026
**
atom -> None
1026
==
atom -> None
1026
-
atom -> None
1026
if
atom -> None
1026
(
atom -> None
1026
@
atom -> None
1026
>=
atom -> None
1026
)
atom -> None
1026
[
atom -> None
1026
^
atom -> None
1026
&
atom -> None
1026
<=
atom -> None
1026
is
atom -> None
1026
.
atom -> None
1026
not
atom -> None
1026
//
atom -> None
1026
<
atom -> None
1026
<<
atom -> None
1026
!=
atom -> None
1026
and
atom -> None
1026
%
atom -> None
1026
|
atom -> None
1026
,
atom -> None
1026
>
atom -> None
1027
|
1561
1027
>
expr -> xor_expr
1027
<
expr -> xor_expr
1027
and
expr -> xor_expr
1027
>=
expr -> xor_expr
1027
,
expr -> xor_expr
1027
!=
expr -> xor_expr
1027
or
expr -> xor_expr
1027
in
expr -> xor_expr
1027
is
expr -> xor_expr
1027
if
expr -> xor_expr
1027
==
expr -> xor_expr
1027
)
expr -> xor_expr
1027
<=
expr -> xor_expr
1027
not
expr -> xor_expr
1028
==
330
1028
is
331
1028
<=
332
1028
comp_op
1562
1028
and
comparison -> expr
1028
!=
334
1028
>
335
1028
not
336
1028
in
337
1028
or
comparison -> expr
1028
<
338
1028
>=
339
1028
)
comparison -> expr
1028
if
comparison -> expr
1028
,
comparison -> expr
1029
is
atom -> NUMBER
1029
|
atom -> NUMBER
1029
in
atom -> NUMBER
1029
@
atom -> NUMBER
1029
**
atom -> NUMBER
1029
and
atom -> NUMBER
1029
!=
atom -> NUMBER
1029
if
atom -> NUMBER
1029
-
atom -> NUMBER
1029
<<
atom -> NUMBER
1029
.
atom -> NUMBER
1029
(
atom -> NUMBER
1029
==
atom -> NUMBER
1029
%
atom -> NUMBER
1029
^
atom -> NUMBER
1029
not
atom -> NUMBER
1029
>=
atom -> NUMBER
1029
,
atom -> NUMBER
1029
/
atom -> NUMBER
1029
)
atom -> NUMBER
1029
//
atom -> NUMBER
1029
>
atom -> NUMBER
1029
&
atom -> NUMBER
1029
[
atom -> NUMBER
1029
<=
atom -> NUMBER
1029
*
atom -> NUMBER
1029
or
atom -> NUMBER
1029
+
atom -> NUMBER
1029
>>
atom -> NUMBER
1029
<
atom -> NUMBER
1030
or
1563
1030
)
or_test -> and_test
1030
if
or_test -> and_test
1030
,
or_test -> and_test
1031
NAME
1005
1031
atom_expr
1006
1031
atom
1007
1031
-
1008
1031
[
1010
1031
True
1011
1031
False
1013
1031
{
1014
1031
+
1015
1031
factor
1564
1031
(
1017
1031
STRING
1018
1031
power
1019
1031
None
1026
1031
NUMBER
1029
1031
~
1031
1032
,
argument -> * test
1032
)
argument -> * test
1033
)
test -> lambdef
1033
,
test -> lambdef
1034
NAME
1005
1034
atom_expr
1006
1034
atom
1007
1034
-
1008
1034
factor
1009
1034
[
1010
1034
True
1011
1034
arith_expr
1012
1034
False
1013
1034
{
1014
1034
+
1015
1034
and_expr
1016
1034
(
1017
1034
STRING
1018
1034
power
1019
1034
term
1020
1034
comparison
1021
1034
shift_expr
1022
1034
not_test
1565
1034
None
1026
1034
xor_expr
1027
1034
expr
1028
1034
NUMBER
1029
1034
~
1031
1034
not
1034
1035
]
1566
1036
and
atom -> [ ]
1036
<<
atom -> [ ]
1036
//
atom -> [ ]
1036
*
atom -> [ ]
1036
+
atom -> [ ]
1036
=
atom -> [ ]
1036
^
atom -> [ ]
1036
==
atom -> [ ]
1036
>>
atom -> [ ]
1036
/
atom -> [ ]
1036
in
atom -> [ ]
1036
>
atom -> [ ]
1036
<=
atom -> [ ]
1036
.
atom -> [ ]
1036
)
atom -> [ ]
1036
%
atom -> [ ]
1036
&
atom -> [ ]
1036
-
atom -> [ ]
1036
>=
atom -> [ ]
1036
not
atom -> [ ]
1036
|
atom -> [ ]
1036
@
atom -> [ ]
1036
is
atom -> [ ]
1036
or
atom -> [ ]
1036
!=
atom -> [ ]
1036
if
atom -> [ ]
1036
,
atom -> [ ]
1036
**
atom -> [ ]
1036
for
atom -> [ ]
1036
<
atom -> [ ]
1036
(
atom -> [ ]
1036
[
atom -> [ ]
1037
NAME
496
1037
atom_expr
497
1037
atom
498
1037
-
499
1037
factor
501
1037
[
503
1037
True
504
1037
arith_expr
505
1037
False
507
1037
{
509
1037
+
510
1037
(
513
1037
STRING
514
1037
power
515
1037
shift_expr
1567
1037
term
516
1037
None
524
1037
NUMBER
527
1037
~
529
1038
NAME
496
1038
atom_expr
497
1038
atom
498
1038
-
499
1038
factor
501
1038
[
503
1038
True
504
1038
arith_expr
505
1038
False
507
1038
{
509
1038
shift_expr
1568
1038
+
510
1038
(
513
1038
STRING
514
1038
power
515
1038
term
516
1038
None
524
1038
NUMBER
527
1038
~
529
1039
NAME
496
1039
atom_expr
497
1039
atom
498
1039
-
499
1039
factor
501
1039
[
503
1039
True
504
1039
arith_expr
505
1039
xor_expr
506
1039
False
507
1039
{
509
1039
+
510
1039
and_expr
512
1039
(
513
1039
STRING
514
1039
power
515
1039
term
516
1039
shift_expr
518
1039
None
524
1039
expr
1569
1039
NUMBER
527
1039
~
529
1040
,
argument -> ** test
1040
)
argument -> ** test
1041
%
atom -> { }
1041
[
atom -> { }
1041
not
atom -> { }
1041
^
atom -> { }
1041
or
atom -> { }
1041
-
atom -> { }
1041
=
atom -> { }
1041
>=
atom -> { }
1041
<<
atom -> { }
1041
/
atom -> { }
1041
<=
atom -> { }
1041
|
atom -> { }
1041
for
atom -> { }
1041
)
atom -> { }
1041
>>
atom -> { }
1041
@
atom -> { }
1041
is
atom -> { }
1041
if
atom -> { }
1041
and
atom -> { }
1041
==
atom -> { }
1041
in
atom -> { }
1041
**
atom -> { }
1041
&
atom -> { }
1041
>
atom -> { }
1041
//
atom -> { }
1041
(
atom -> { }
1041
+
atom -> { }
1041
<
atom -> { }
1041
,
atom -> { }
1041
!=
atom -> { }
1041
.
atom -> { }
1041
*
atom -> { }
1042
>>
factor -> + factor
1042
>=
factor -> + factor
1042
or
factor -> + factor
1042
==
factor -> + factor
1042
-
factor -> + factor
1042
*
factor -> + factor
1042
<
factor -> + factor
1042
^
factor -> + factor
1042
,
factor -> + factor
1042
&
factor -> + factor
1042
)
factor -> + factor
1042
@
factor -> + factor
1042
|
factor -> + factor
1042
<<
factor -> + factor
1042
%
factor -> + factor
1042
not
factor -> + factor
1042
//
factor -> + factor
1042
and
factor -> + factor
1042
in
factor -> + factor
1042
!=
factor -> + factor
1042
=
factor -> + factor
1042
>
factor -> + factor
1042
/
factor -> + factor
1042
is
factor -> + factor
1042
+
factor -> + factor
1042
if
factor -> + factor
1042
for
factor -> + factor
1042
<=
factor -> + factor
1043
NAME
496
1043
atom_expr
497
1043
atom
498
1043
-
499
1043
factor
501
1043
[
503
1043
True
504
1043
arith_expr
505
1043
False
507
1043
{
509
1043
+
510
1043
and_expr
512
1043
(
513
1043
STRING
514
1043
power
515
1043
xor_expr
1570
1043
term
516
1043
shift_expr
518
1043
None
524
1043
NUMBER
527
1043
~
529
1044
|
atom -> ( )
1044
**
atom -> ( )
1044
>>
atom -> ( )
1044
-
atom -> ( )
1044
%
atom -> ( )
1044
(
atom -> ( )
1044
not
atom -> ( )
1044
+
atom -> ( )
1044
>=
atom -> ( )
1044
&
atom -> ( )
1044
*
atom -> ( )
1044
!=
atom -> ( )
1044
<=
atom -> ( )
1044
and
atom -> ( )
1044
<
atom -> ( )
1044
^
atom -> ( )
1044
==
atom -> ( )
1044
if
atom -> ( )
1044
in
atom -> ( )
1044
/
atom -> ( )
1044
>
atom -> ( )
1044
//
atom -> ( )
1044
.
atom -> ( )
1044
or
atom -> ( )
1044
@
atom -> ( )
1044
is
atom -> ( )
1044
=
atom -> ( )
1044
)
atom -> ( )
1044
<<
atom -> ( )
1044
,
atom -> ( )
1044
for
atom -> ( )
1044
[
atom -> ( )
1045
)
1571
1046
NAME
496
1046
atom_expr
497
1046
atom
498
1046
-
499
1046
factor
501
1046
[
503
1046
True
504
1046
False
507
1046
{
509
1046
+
510
1046
(
513
1046
STRING
514
1046
power
515
1046
arith_expr
1572
1046
term
516
1046
None
524
1046
NUMBER
527
1046
~
529
1047
NAME
496
1047
atom_expr
497
1047
atom
498
1047
-
499
1047
factor
501
1047
[
503
1047
True
504
1047
False
507
1047
{
509
1047
+
510
1047
(
513
1047
STRING
514
1047
power
515
1047
term
516
1047
arith_expr
1573
1047
None
524
1047
NUMBER
527
1047
~
529
1048
NAME
496
1048
atom_expr
497
1048
atom
498
1048
-
499
1048
factor
501
1048
[
503
1048
True
504
1048
arith_expr
505
1048
False
507
1048
{
509
1048
+
510
1048
(
513
1048
STRING
514
1048
power
515
1048
term
516
1048
shift_expr
518
1048
None
524
1048
and_expr
1574
1048
NUMBER
527
1048
~
529
1049
NAME
496
1049
atom_expr
497
1049
atom
498
1049
-
499
1049
factor
501
1049
*
502
1049
[
503
1049
True
504
1049
arith_expr
505
1049
xor_expr
506
1049
False
507
1049
**
508
1049
{
509
1049
+
510
1049
and_expr
512
1049
(
513
1049
STRING
514
1049
power
515
1049
term
516
1049
comparison
517
1049
shift_expr
518
1049
argument
519
1049
not_test
520
1049
or_test
521
1049
lambdef
522
1049
lambda
523
1049
None
524
1049
arglist
1575
1049
test
525
1049
expr
526
1049
NUMBER
527
1049
and_test
528
1049
~
529
1049
not
530
1050
NAME
496
1050
atom_expr
497
1050
atom
498
1050
-
499
1050
factor
501
1050
[
503
1050
True
504
1050
arith_expr
505
1050
xor_expr
506
1050
False
507
1050
{
509
1050
+
510
1050
and_expr
512
1050
(
513
1050
STRING
514
1050
power
515
1050
term
516
1050
comparison
517
1050
and_test
1576
1050
shift_expr
518
1050
not_test
520
1050
None
524
1050
expr
526
1050
NUMBER
527
1050
~
529
1050
not
530
1051
atom_expr
685
1051
atom
686
1051
-
687
1051
factor
688
1051
and_test
689
1051
True
690
1051
arith_expr
691
1051
False
692
1051
NAME
693
1051
{
694
1051
+
695
1051
and_expr
696
1051
[
697
1051
(
698
1051
STRING
699
1051
term
700
1051
comparison
701
1051
shift_expr
702
1051
not_test
703
1051
power
704
1051
xor_expr
706
1051
or_test
1577
1051
None
707
1051
NUMBER
708
1051
expr
709
1051
~
710
1051
not
711
1052
:
1578
1053
NAME
496
1053
atom_expr
497
1053
atom
498
1053
-
499
1053
factor
501
1053
[
503
1053
True
504
1053
arith_expr
505
1053
xor_expr
506
1053
False
507
1053
{
509
1053
+
510
1053
and_expr
512
1053
(
513
1053
STRING
514
1053
power
515
1053
term
516
1053
comparison
517
1053
shift_expr
518
1053
test
1579
1053
not_test
520
1053
or_test
521
1053
lambdef
522
1053
lambda
523
1053
None
524
1053
expr
526
1053
NUMBER
527
1053
and_test
528
1053
~
529
1053
not
530
1054
,
argument -> test comp_for
1054
)
argument -> test comp_for
1055
~
164
1055
atom
165
1055
False
166
1055
atom_expr
167
1055
NUMBER
168
1055
[
169
1055
True
171
1055
NAME
172
1055
None
173
1055
+
174
1055
factor
175
1055
term
176
1055
-
177
1055
(
178
1055
{
179
1055
arith_expr
180
1055
STRING
181
1055
power
182
1055
shift_expr
183
1055
and_expr
184
1055
xor_expr
185
1055
expr
186
1055
expr_list
1580
1056
NAME
1005
1056
atom_expr
1006
1056
atom
1007
1056
-
1008
1056
factor
1009
1056
[
1010
1056
True
1011
1056
test
1581
1056
arith_expr
1012
1056
False
1013
1056
{
1014
1056
+
1015
1056
and_expr
1016
1056
(
1017
1056
STRING
1018
1056
power
1019
1056
term
1020
1056
comparison
1021
1056
shift_expr
1022
1056
not_test
1023
1056
or_test
1024
1056
lambda
1025
1056
None
1026
1056
xor_expr
1027
1056
expr
1028
1056
NUMBER
1029
1056
and_test
1030
1056
~
1031
1056
lambdef
1033
1056
not
1034
1057
NAME
496
1057
atom_expr
497
1057
atom
498
1057
-
499
1057
factor
501
1057
[
503
1057
True
504
1057
arith_expr
505
1057
xor_expr
506
1057
False
507
1057
{
509
1057
+
510
1057
and_expr
512
1057
comparison
1582
1057
(
513
1057
STRING
514
1057
power
515
1057
term
516
1057
shift_expr
518
1057
None
524
1057
expr
526
1057
NUMBER
527
1057
~
529
1058
NAME
496
1058
atom_expr
497
1058
atom
498
1058
-
499
1058
factor
501
1058
[
503
1058
True
504
1058
arith_expr
505
1058
xor_expr
506
1058
False
507
1058
{
509
1058
+
510
1058
and_expr
512
1058
(
513
1058
STRING
514
1058
power
515
1058
term
516
1058
comparison
517
1058
shift_expr
518
1058
not_test
520
1058
None
524
1058
expr
526
1058
NUMBER
527
1058
and_test
528
1058
~
529
1058
or_test
1583
1058
not
530
1059
is
factor -> ~ factor
1059
>=
factor -> ~ factor
1059
<<
factor -> ~ factor
1059
<=
factor -> ~ factor
1059
if
factor -> ~ factor
1059
==
factor -> ~ factor
1059
for
factor -> ~ factor
1059
//
factor -> ~ factor
1059
or
factor -> ~ factor
1059
+
factor -> ~ factor
1059
)
factor -> ~ factor
1059
and
factor -> ~ factor
1059
!=
factor -> ~ factor
1059
&
factor -> ~ factor
1059
|
factor -> ~ factor
1059
>>
factor -> ~ factor
1059
in
factor -> ~ factor
1059
=
factor -> ~ factor
1059
>
factor -> ~ factor
1059
/
factor -> ~ factor
1059
not
factor -> ~ factor
1059
@
factor -> ~ factor
1059
-
factor -> ~ factor
1059
^
factor -> ~ factor
1059
,
factor -> ~ factor
1059
*
factor -> ~ factor
1059
<
factor -> ~ factor
1059
%
factor -> ~ factor
1060
)
not_test -> not not_test
1060
,
not_test -> not not_test
1060
for
not_test -> not not_test
1060
or
not_test -> not not_test
1060
=
not_test -> not not_test
1060
if
not_test -> not not_test
1060
and
not_test -> not not_test
1061
INDENT
1584
1062
>>
power -> atom_expr ** factor
1062
<=
power -> atom_expr ** factor
1062
//
power -> atom_expr ** factor
1062
for
power -> atom_expr ** factor
1062
/
power -> atom_expr ** factor
1062
&
power -> atom_expr ** factor
1062
if
power -> atom_expr ** factor
1062
not
power -> atom_expr ** factor
1062
<
power -> atom_expr ** factor
1062
!=
power -> atom_expr ** factor
1062
,
power -> atom_expr ** factor
1062
>
power -> atom_expr ** factor
1062
*
power -> atom_expr ** factor
1062
==
power -> atom_expr ** factor
1062
|
power -> atom_expr ** factor
1062
is
power -> atom_expr ** factor
1062
and
power -> atom_expr ** factor
1062
<<
power -> atom_expr ** factor
1062
-
power -> atom_expr ** factor
1062
)
power -> atom_expr ** factor
1062
@
power -> atom_expr ** factor
1062
in
power -> atom_expr ** factor
1062
^
power -> atom_expr ** factor
1062
%
power -> atom_expr ** factor
1062
>=
power -> atom_expr ** factor
1062
+
power -> atom_expr ** factor
1062
or
power -> atom_expr ** factor
1063
*
trailer_expr -> trailer trailer_expr
1063
+
trailer_expr -> trailer trailer_expr
1063
if
trailer_expr -> trailer trailer_expr
1063
-
trailer_expr -> trailer trailer_expr
1063
<=
trailer_expr -> trailer trailer_expr
1063
|
trailer_expr -> trailer trailer_expr
1063
@
trailer_expr -> trailer trailer_expr
1063
%
trailer_expr -> trailer trailer_expr
1063
in
trailer_expr -> trailer trailer_expr
1063
<<
trailer_expr -> trailer trailer_expr
1063
**
trailer_expr -> trailer trailer_expr
1063
==
trailer_expr -> trailer trailer_expr
1063
not
trailer_expr -> trailer trailer_expr
1063
,
trailer_expr -> trailer trailer_expr
1063
and
trailer_expr -> trailer trailer_expr
1063
//
trailer_expr -> trailer trailer_expr
1063
^
trailer_expr -> trailer trailer_expr
1063
for
trailer_expr -> trailer trailer_expr
1063
or
trailer_expr -> trailer trailer_expr
1063
>
trailer_expr -> trailer trailer_expr
1063
!=
trailer_expr -> trailer trailer_expr
1063
is
trailer_expr -> trailer trailer_expr
1063
&
trailer_expr -> trailer trailer_expr
1063
>>
trailer_expr -> trailer trailer_expr
1063
/
trailer_expr -> trailer trailer_expr
1063
)
trailer_expr -> trailer trailer_expr
1063
<
trailer_expr -> trailer trailer_expr
1063
>=
trailer_expr -> trailer trailer_expr
1064
]
1585
1065
^
trailer -> . NAME
1065
%
trailer -> . NAME
1065
**
trailer -> . NAME
1065
>>
trailer -> . NAME
1065
>
trailer -> . NAME
1065
in
trailer -> . NAME
1065
[
trailer -> . NAME
1065
is
trailer -> . NAME
1065
,
trailer -> . NAME
1065
<<
trailer -> . NAME
1065
or
trailer -> . NAME
1065
and
trailer -> . NAME
1065
>=
trailer -> . NAME
1065
|
trailer -> . NAME
1065
==
trailer -> . NAME
1065
)
trailer -> . NAME
1065
.
trailer -> . NAME
1065
+
trailer -> . NAME
1065
<
trailer -> . NAME
1065
for
trailer -> . NAME
1065
-
trailer -> . NAME
1065
&
trailer -> . NAME
1065
*
trailer -> . NAME
1065
if
trailer -> . NAME
1065
<=
trailer -> . NAME
1065
(
trailer -> . NAME
1065
not
trailer -> . NAME
1065
//
trailer -> . NAME
1065
@
trailer -> . NAME
1065
!=
trailer -> . NAME
1065
/
trailer -> . NAME
1066
)
1586
1067
[
trailer -> ( )
1067
not
trailer -> ( )
1067
==
trailer -> ( )
1067
**
trailer -> ( )
1067
,
trailer -> ( )
1067
<=
trailer -> ( )
1067
//
trailer -> ( )
1067
<<
trailer -> ( )
1067
<
trailer -> ( )
1067
for
trailer -> ( )
1067
in
trailer -> ( )
1067
or
trailer -> ( )
1067
-
trailer -> ( )
1067
+
trailer -> ( )
1067
&
trailer -> ( )
1067
*
trailer -> ( )
1067
is
trailer -> ( )
1067
>
trailer -> ( )
1067
!=
trailer -> ( )
1067
>>
trailer -> ( )
1067
%
trailer -> ( )
1067
|
trailer -> ( )
1067
)
trailer -> ( )
1067
.
trailer -> ( )
1067
>=
trailer -> ( )
1067
(
trailer -> ( )
1067
and
trailer -> ( )
1067
@
trailer -> ( )
1067
/
trailer -> ( )
1067
^
trailer -> ( )
1067
if
trailer -> ( )
1068
|
term -> factor % term
1068
<<
term -> factor % term
1068
^
term -> factor % term
1068
==
term -> factor % term
1068
-
term -> factor % term
1068
,
term -> factor % term
1068
is
term -> factor % term
1068
>=
term -> factor % term
1068
>>
term -> factor % term
1068
>
term -> factor % term
1068
in
term -> factor % term
1068
)
term -> factor % term
1068
&
term -> factor % term
1068
if
term -> factor % term
1068
<
term -> factor % term
1068
!=
term -> factor % term
1068
<=
term -> factor % term
1068
not
term -> factor % term
1068
+
term -> factor % term
1068
and
term -> factor % term
1068
or
term -> factor % term
1068
for
term -> factor % term
1069
,
term -> factor / term
1069
>>
term -> factor / term
1069
^
term -> factor / term
1069
or
term -> factor / term
1069
for
term -> factor / term
1069
+
term -> factor / term
1069
if
term -> factor / term
1069
>=
term -> factor / term
1069
>
term -> factor / term
1069
-
term -> factor / term
1069
and
term -> factor / term
1069
)
term -> factor / term
1069
not
term -> factor / term
1069
<
term -> factor / term
1069
in
term -> factor / term
1069
==
term -> factor / term
1069
<=
term -> factor / term
1069
is
term -> factor / term
1069
&
term -> factor / term
1069
<<
term -> factor / term
1069
!=
term -> factor / term
1069
|
term -> factor / term
1070
-
term -> factor * term
1070
&
term -> factor * term
1070
and
term -> factor * term
1070
,
term -> factor * term
1070
!=
term -> factor * term
1070
|
term -> factor * term
1070
<<
term -> factor * term
1070
for
term -> factor * term
1070
<
term -> factor * term
1070
if
term -> factor * term
1070
^
term -> factor * term
1070
+
term -> factor * term
1070
in
term -> factor * term
1070
or
term -> factor * term
1070
>>
term -> factor * term
1070
not
term -> factor * term
1070
)
term -> factor * term
1070
==
term -> factor * term
1070
>=
term -> factor * term
1070
<=
term -> factor * term
1070
>
term -> factor * term
1070
is
term -> factor * term
1071
if
term -> factor // term
1071
<
term -> factor // term
1071
and
term -> factor // term
1071
in
term -> factor // term
1071
,
term -> factor // term
1071
>>
term -> factor // term
1071
)
term -> factor // term
1071
<=
term -> factor // term
1071
!=
term -> factor // term
1071
^
term -> factor // term
1071
for
term -> factor // term
1071
|
term -> factor // term
1071
or
term -> factor // term
1071
>=
term -> factor // term
1071
&
term -> factor // term
1071
>
term -> factor // term
1071
+
term -> factor // term
1071
is
term -> factor // term
1071
not
term -> factor // term
1071
<<
term -> factor // term
1071
-
term -> factor // term
1071
==
term -> factor // term
1072
>>
term -> factor @ term
1072
^
term -> factor @ term
1072
&
term -> factor @ term
1072
|
term -> factor @ term
1072
if
term -> factor @ term
1072
is
term -> factor @ term
1072
)
term -> factor @ term
1072
<
term -> factor @ term
1072
for
term -> factor @ term
1072
<<
term -> factor @ term
1072
and
term -> factor @ term
1072
==
term -> factor @ term
1072
>
term -> factor @ term
1072
in
term -> factor @ term
1072
,
term -> factor @ term
1072
>=
term -> factor @ term
1072
+
term -> factor @ term
1072
not
term -> factor @ term
1072
!=
term -> factor @ term
1072
<=
term -> factor @ term
1072
or
term -> factor @ term
1072
-
term -> factor @ term
1073
<<
atom -> [ test_list_comp ]
1073
,
atom -> [ test_list_comp ]
1073
>>
atom -> [ test_list_comp ]
1073
for
atom -> [ test_list_comp ]
1073
+
atom -> [ test_list_comp ]
1073
-
atom -> [ test_list_comp ]
1073
not
atom -> [ test_list_comp ]
1073
<=
atom -> [ test_list_comp ]
1073
is
atom -> [ test_list_comp ]
1073
[
atom -> [ test_list_comp ]
1073
*
atom -> [ test_list_comp ]
1073
==
atom -> [ test_list_comp ]
1073
@
atom -> [ test_list_comp ]
1073
)
atom -> [ test_list_comp ]
1073
>
atom -> [ test_list_comp ]
1073
%
atom -> [ test_list_comp ]
1073
if
atom -> [ test_list_comp ]
1073
>=
atom -> [ test_list_comp ]
1073
//
atom -> [ test_list_comp ]
1073
.
atom -> [ test_list_comp ]
1073
in
atom -> [ test_list_comp ]
1073
**
atom -> [ test_list_comp ]
1073
and
atom -> [ test_list_comp ]
1073
/
atom -> [ test_list_comp ]
1073
or
atom -> [ test_list_comp ]
1073
!=
atom -> [ test_list_comp ]
1073
<
atom -> [ test_list_comp ]
1073
^
atom -> [ test_list_comp ]
1073
&
atom -> [ test_list_comp ]
1073
(
atom -> [ test_list_comp ]
1073
|
atom -> [ test_list_comp ]
1074
for
shift_expr -> arith_expr >> shift_expr
1074
)
shift_expr -> arith_expr >> shift_expr
1074
<
shift_expr -> arith_expr >> shift_expr
1074
^
shift_expr -> arith_expr >> shift_expr
1074
in
shift_expr -> arith_expr >> shift_expr
1074
==
shift_expr -> arith_expr >> shift_expr
1074
!=
shift_expr -> arith_expr >> shift_expr
1074
>=
shift_expr -> arith_expr >> shift_expr
1074
not
shift_expr -> arith_expr >> shift_expr
1074
and
shift_expr -> arith_expr >> shift_expr
1074
is
shift_expr -> arith_expr >> shift_expr
1074
,
shift_expr -> arith_expr >> shift_expr
1074
>
shift_expr -> arith_expr >> shift_expr
1074
&
shift_expr -> arith_expr >> shift_expr
1074
|
shift_expr -> arith_expr >> shift_expr
1074
<=
shift_expr -> arith_expr >> shift_expr
1074
or
shift_expr -> arith_expr >> shift_expr
1074
if
shift_expr -> arith_expr >> shift_expr
1075
,
shift_expr -> arith_expr << shift_expr
1075
if
shift_expr -> arith_expr << shift_expr
1075
&
shift_expr -> arith_expr << shift_expr
1075
>=
shift_expr -> arith_expr << shift_expr
1075
<=
shift_expr -> arith_expr << shift_expr
1075
or
shift_expr -> arith_expr << shift_expr
1075
in
shift_expr -> arith_expr << shift_expr
1075
!=
shift_expr -> arith_expr << shift_expr
1075
^
shift_expr -> arith_expr << shift_expr
1075
<
shift_expr -> arith_expr << shift_expr
1075
|
shift_expr -> arith_expr << shift_expr
1075
==
shift_expr -> arith_expr << shift_expr
1075
not
shift_expr -> arith_expr << shift_expr
1075
is
shift_expr -> arith_expr << shift_expr
1075
and
shift_expr -> arith_expr << shift_expr
1075
>
shift_expr -> arith_expr << shift_expr
1075
for
shift_expr -> arith_expr << shift_expr
1075
)
shift_expr -> arith_expr << shift_expr
1076
>=
xor_expr -> and_expr ^ xor_expr
1076
>
xor_expr -> and_expr ^ xor_expr
1076
or
xor_expr -> and_expr ^ xor_expr
1076
and
xor_expr -> and_expr ^ xor_expr
1076
<=
xor_expr -> and_expr ^ xor_expr
1076
in
xor_expr -> and_expr ^ xor_expr
1076
==
xor_expr -> and_expr ^ xor_expr
1076
)
xor_expr -> and_expr ^ xor_expr
1076
if
xor_expr -> and_expr ^ xor_expr
1076
,
xor_expr -> and_expr ^ xor_expr
1076
!=
xor_expr -> and_expr ^ xor_expr
1076
not
xor_expr -> and_expr ^ xor_expr
1076
<
xor_expr -> and_expr ^ xor_expr
1076
for
xor_expr -> and_expr ^ xor_expr
1076
is
xor_expr -> and_expr ^ xor_expr
1076
|
xor_expr -> and_expr ^ xor_expr
1077
@
atom -> ( test_list_comp )
1077
<
atom -> ( test_list_comp )
1077
and
atom -> ( test_list_comp )
1077
)
atom -> ( test_list_comp )
1077
if
atom -> ( test_list_comp )
1077
&
atom -> ( test_list_comp )
1077
*
atom -> ( test_list_comp )
1077
%
atom -> ( test_list_comp )
1077
[
atom -> ( test_list_comp )
1077
//
atom -> ( test_list_comp )
1077
<<
atom -> ( test_list_comp )
1077
.
atom -> ( test_list_comp )
1077
/
atom -> ( test_list_comp )
1077
>=
atom -> ( test_list_comp )
1077
or
atom -> ( test_list_comp )
1077
>
atom -> ( test_list_comp )
1077
for
atom -> ( test_list_comp )
1077
-
atom -> ( test_list_comp )
1077
|
atom -> ( test_list_comp )
1077
**
atom -> ( test_list_comp )
1077
is
atom -> ( test_list_comp )
1077
==
atom -> ( test_list_comp )
1077
not
atom -> ( test_list_comp )
1077
in
atom -> ( test_list_comp )
1077
!=
atom -> ( test_list_comp )
1077
^
atom -> ( test_list_comp )
1077
,
atom -> ( test_list_comp )
1077
(
atom -> ( test_list_comp )
1077
<=
atom -> ( test_list_comp )
1077
+
atom -> ( test_list_comp )
1077
>>
atom -> ( test_list_comp )
1078
and
arith_expr -> term + arith_expr
1078
<
arith_expr -> term + arith_expr
1078
|
arith_expr -> term + arith_expr
1078
>=
arith_expr -> term + arith_expr
1078
>>
arith_expr -> term + arith_expr
1078
,
arith_expr -> term + arith_expr
1078
if
arith_expr -> term + arith_expr
1078
>
arith_expr -> term + arith_expr
1078
in
arith_expr -> term + arith_expr
1078
or
arith_expr -> term + arith_expr
1078
<=
arith_expr -> term + arith_expr
1078
)
arith_expr -> term + arith_expr
1078
not
arith_expr -> term + arith_expr
1078
^
arith_expr -> term + arith_expr
1078
!=
arith_expr -> term + arith_expr
1078
&
arith_expr -> term + arith_expr
1078
==
arith_expr -> term + arith_expr
1078
for
arith_expr -> term + arith_expr
1078
<<
arith_expr -> term + arith_expr
1078
is
arith_expr -> term + arith_expr
1079
<<
arith_expr -> term - arith_expr
1079
if
arith_expr -> term - arith_expr
1079
<
arith_expr -> term - arith_expr
1079
<=
arith_expr -> term - arith_expr
1079
for
arith_expr -> term - arith_expr
1079
and
arith_expr -> term - arith_expr
1079
in
arith_expr -> term - arith_expr
1079
&
arith_expr -> term - arith_expr
1079
|
arith_expr -> term - arith_expr
1079
==
arith_expr -> term - arith_expr
1079
is
arith_expr -> term - arith_expr
1079
)
arith_expr -> term - arith_expr
1079
>>
arith_expr -> term - arith_expr
1079
!=
arith_expr -> term - arith_expr
1079
>
arith_expr -> term - arith_expr
1079
or
arith_expr -> term - arith_expr
1079
,
arith_expr -> term - arith_expr
1079
>=
arith_expr -> term - arith_expr
1079
^
arith_expr -> term - arith_expr
1079
not
arith_expr -> term - arith_expr
1080
,
and_expr -> shift_expr & and_expr
1080
>=
and_expr -> shift_expr & and_expr
1080
!=
and_expr -> shift_expr & and_expr
1080
or
and_expr -> shift_expr & and_expr
1080
is
and_expr -> shift_expr & and_expr
1080
^
and_expr -> shift_expr & and_expr
1080
if
and_expr -> shift_expr & and_expr
1080
==
and_expr -> shift_expr & and_expr
1080
not
and_expr -> shift_expr & and_expr
1080
<
and_expr -> shift_expr & and_expr
1080
)
and_expr -> shift_expr & and_expr
1080
>
and_expr -> shift_expr & and_expr
1080
in
and_expr -> shift_expr & and_expr
1080
and
and_expr -> shift_expr & and_expr
1080
|
and_expr -> shift_expr & and_expr
1080
for
and_expr -> shift_expr & and_expr
1080
<=
and_expr -> shift_expr & and_expr
1081
,
567
1081
)
test_list -> test
1082
)
test_list -> test , test_list
1083
in
1587
1084
if
and_test -> not_test and and_test
1084
,
and_test -> not_test and and_test
1084
or
and_test -> not_test and and_test
1084
for
and_test -> not_test and and_test
1084
)
and_test -> not_test and and_test
1085
else
1588
1086
NAME
131
1086
atom_expr
132
1086
atom
133
1086
-
134
1086
factor
136
1086
[
137
1086
True
138
1086
arith_expr
139
1086
False
140
1086
{
141
1086
+
142
1086
and_expr
143
1086
(
144
1086
STRING
145
1086
power
147
1086
term
148
1086
comparison
149
1086
shift_expr
150
1086
not_test
152
1086
or_test
153
1086
lambda
154
1086
None
155
1086
xor_expr
156
1086
expr
157
1086
NUMBER
158
1086
and_test
159
1086
~
160
1086
lambdef
161
1086
test
1589
1086
not
162
1087
for
lambdef -> lambda : test
1087
,
lambdef -> lambda : test
1087
)
lambdef -> lambda : test
1088
is
expr -> xor_expr | expr
1088
)
expr -> xor_expr | expr
1088
or
expr -> xor_expr | expr
1088
>
expr -> xor_expr | expr
1088
and
expr -> xor_expr | expr
1088
,
expr -> xor_expr | expr
1088
for
expr -> xor_expr | expr
1088
in
expr -> xor_expr | expr
1088
if
expr -> xor_expr | expr
1088
<=
expr -> xor_expr | expr
1088
not
expr -> xor_expr | expr
1088
==
expr -> xor_expr | expr
1088
>=
expr -> xor_expr | expr
1088
<
expr -> xor_expr | expr
1088
!=
expr -> xor_expr | expr
1089
for
comparison -> expr comp_op comparison
1089
)
comparison -> expr comp_op comparison
1089
,
comparison -> expr comp_op comparison
1089
and
comparison -> expr comp_op comparison
1089
if
comparison -> expr comp_op comparison
1089
or
comparison -> expr comp_op comparison
1090
)
or_test -> and_test or or_test
1090
,
or_test -> and_test or or_test
1090
for
or_test -> and_test or or_test
1090
if
or_test -> and_test or or_test
1091
//
trailer_expr -> trailer trailer_expr
1091
*
trailer_expr -> trailer trailer_expr
1091
&
trailer_expr -> trailer trailer_expr
1091
+
trailer_expr -> trailer trailer_expr
1091
^
trailer_expr -> trailer trailer_expr
1091
-
trailer_expr -> trailer trailer_expr
1091
**
trailer_expr -> trailer trailer_expr
1091
|
trailer_expr -> trailer trailer_expr
1091
>>
trailer_expr -> trailer trailer_expr
1091
@
trailer_expr -> trailer trailer_expr
1091
%
trailer_expr -> trailer trailer_expr
1091
in
trailer_expr -> trailer trailer_expr
1091
,
trailer_expr -> trailer trailer_expr
1091
/
trailer_expr -> trailer trailer_expr
1091
<<
trailer_expr -> trailer trailer_expr
1092
)
1590
1093
*
trailer -> ( )
1093
//
trailer -> ( )
1093
**
trailer -> ( )
1093
<<
trailer -> ( )
1093
(
trailer -> ( )
1093
/
trailer -> ( )
1093
[
trailer -> ( )
1093
@
trailer -> ( )
1093
^
trailer -> ( )
1093
&
trailer -> ( )
1093
>>
trailer -> ( )
1093
in
trailer -> ( )
1093
%
trailer -> ( )
1093
-
trailer -> ( )
1093
+
trailer -> ( )
1093
|
trailer -> ( )
1093
,
trailer -> ( )
1093
.
trailer -> ( )
1094
]
1591
1095
**
trailer -> . NAME
1095
>>
trailer -> . NAME
1095
%
trailer -> . NAME
1095
+
trailer -> . NAME
1095
,
trailer -> . NAME
1095
^
trailer -> . NAME
1095
-
trailer -> . NAME
1095
<<
trailer -> . NAME
1095
(
trailer -> . NAME
1095
&
trailer -> . NAME
1095
in
trailer -> . NAME
1095
/
trailer -> . NAME
1095
//
trailer -> . NAME
1095
[
trailer -> . NAME
1095
|
trailer -> . NAME
1095
@
trailer -> . NAME
1095
*
trailer -> . NAME
1095
.
trailer -> . NAME
1096
@
power -> atom_expr ** factor
1096
in
power -> atom_expr ** factor
1096
|
power -> atom_expr ** factor
1096
&
power -> atom_expr ** factor
1096
>>
power -> atom_expr ** factor
1096
/
power -> atom_expr ** factor
1096
^
power -> atom_expr ** factor
1096
%
power -> atom_expr ** factor
1096
*
power -> atom_expr ** factor
1096
//
power -> atom_expr ** factor
1096
,
power -> atom_expr ** factor
1096
<<
power -> atom_expr ** factor
1096
-
power -> atom_expr ** factor
1096
+
power -> atom_expr ** factor
1097
in
atom -> [ test_list_comp ]
1097
<<
atom -> [ test_list_comp ]
1097
**
atom -> [ test_list_comp ]
1097
/
atom -> [ test_list_comp ]
1097
(
atom -> [ test_list_comp ]
1097
%
atom -> [ test_list_comp ]
1097
,
atom -> [ test_list_comp ]
1097
>>
atom -> [ test_list_comp ]
1097
^
atom -> [ test_list_comp ]
1097
[
atom -> [ test_list_comp ]
1097
*
atom -> [ test_list_comp ]
1097
&
atom -> [ test_list_comp ]
1097
+
atom -> [ test_list_comp ]
1097
-
atom -> [ test_list_comp ]
1097
|
atom -> [ test_list_comp ]
1097
@
atom -> [ test_list_comp ]
1097
//
atom -> [ test_list_comp ]
1097
.
atom -> [ test_list_comp ]
1098
.
atom -> NAME
1098
<
atom -> NAME
1098
|
atom -> NAME
1098
not
atom -> NAME
1098
[
atom -> NAME
1098
,
atom -> NAME
1098
+
atom -> NAME
1098
%
atom -> NAME
1098
<=
atom -> NAME
1098
*
atom -> NAME
1098
!=
atom -> NAME
1098
in
atom -> NAME
1098
:
atom -> NAME
1098
if
atom -> NAME
1098
is
atom -> NAME
1098
(
atom -> NAME
1098
^
atom -> NAME
1098
@
atom -> NAME
1098
&
atom -> NAME
1098
>>
atom -> NAME
1098
<<
atom -> NAME
1098
-
atom -> NAME
1098
/
atom -> NAME
1098
or
atom -> NAME
1098
//
atom -> NAME
1098
>=
atom -> NAME
1098
and
atom -> NAME
1098
>
atom -> NAME
1098
==
atom -> NAME
1098
**
atom -> NAME
1099
**
1592
1099
and
power -> atom_expr
1099
^
power -> atom_expr
1099
or
power -> atom_expr
1099
>>
power -> atom_expr
1099
if
power -> atom_expr
1099
<
power -> atom_expr
1099
>=
power -> atom_expr
1099
:
power -> atom_expr
1099
!=
power -> atom_expr
1099
is
power -> atom_expr
1099
<=
power -> atom_expr
1099
not
power -> atom_expr
1099
//
power -> atom_expr
1099
+
power -> atom_expr
1099
==
power -> atom_expr
1099
|
power -> atom_expr
1099
-
power -> atom_expr
1099
&
power -> atom_expr
1099
/
power -> atom_expr
1099
@
power -> atom_expr
1099
<<
power -> atom_expr
1099
,
power -> atom_expr
1099
%
power -> atom_expr
1099
*
power -> atom_expr
1099
in
power -> atom_expr
1099
>
power -> atom_expr
1100
+
1593
1100
or
arith_expr -> term
1100
==
arith_expr -> term
1100
-
1594
1100
in
arith_expr -> term
1100
<<
arith_expr -> term
1100
>
arith_expr -> term
1100
is
arith_expr -> term
1100
>=
arith_expr -> term
1100
:
arith_expr -> term
1100
<=
arith_expr -> term
1100
and
arith_expr -> term
1100
>>
arith_expr -> term
1100
!=
arith_expr -> term
1100
not
arith_expr -> term
1100
&
arith_expr -> term
1100
,
arith_expr -> term
1100
if
arith_expr -> term
1100
<
arith_expr -> term
1100
^
arith_expr -> term
1100
|
arith_expr -> term
1101
trailer
1595
1101
trailer_expr
1596
1101
[
1597
1101
or
trailer_expr -> 
1101
.
1598
1101
(
1599
1101
not
trailer_expr -> 
1101
in
trailer_expr -> 
1101
is
trailer_expr -> 
1101
>=
trailer_expr -> 
1101
-
trailer_expr -> 
1101
@
trailer_expr -> 
1101
<=
trailer_expr -> 
1101
,
trailer_expr -> 
1101
^
trailer_expr -> 
1101
*
trailer_expr -> 
1101
if
trailer_expr -> 
1101
**
trailer_expr -> 
1101
>
trailer_expr -> 
1101
==
trailer_expr -> 
1101
>>
trailer_expr -> 
1101
<<
trailer_expr -> 
1101
/
trailer_expr -> 
1101
//
trailer_expr -> 
1101
!=
trailer_expr -> 
1101
<
trailer_expr -> 
1101
&
trailer_expr -> 
1101
:
trailer_expr -> 
1101
|
trailer_expr -> 
1101
and
trailer_expr -> 
1101
+
trailer_expr -> 
1101
%
trailer_expr -> 
1102
NAME
1098
1102
atom_expr
1099
1102
atom
1101
1102
-
1102
1102
factor
1600
1102
[
1105
1102
True
1106
1102
False
1108
1102
{
1109
1102
(
1110
1102
+
1111
1102
STRING
1114
1102
power
1118
1102
None
1119
1102
NUMBER
1122
1102
~
1123
1103
%
1601
1103
//
1602
1103
/
1603
1103
*
1604
1103
@
1605
1103
not
term -> factor
1103
<<
term -> factor
1103
or
term -> factor
1103
^
term -> factor
1103
in
term -> factor
1103
if
term -> factor
1103
and
term -> factor
1103
<=
term -> factor
1103
&
term -> factor
1103
:
term -> factor
1103
,
term -> factor
1103
>>
term -> factor
1103
>
term -> factor
1103
|
term -> factor
1103
<
term -> factor
1103
is
term -> factor
1103
!=
term -> factor
1103
>=
term -> factor
1103
==
term -> factor
1103
-
term -> factor
1103
+
term -> factor
1104
:
1606
1105
NAME
187
1105
atom_expr
188
1105
atom
189
1105
-
190
1105
factor
191
1105
test_list_comp
1607
1105
[
193
1105
True
194
1105
arith_expr
195
1105
False
196
1105
{
197
1105
+
198
1105
and_expr
199
1105
(
200
1105
STRING
201
1105
]
1608
1105
term
203
1105
and_test
204
1105
comparison
205
1105
shift_expr
206
1105
not_test
207
1105
power
208
1105
or_test
209
1105
None
210
1105
xor_expr
211
1105
expr
212
1105
NUMBER
213
1105
lambda
214
1105
~
215
1105
lambdef
216
1105
not
217
1105
test
218
1105
test_list
219
1106
!=
atom -> True
1106
&
atom -> True
1106
+
atom -> True
1106
<<
atom -> True
1106
@
atom -> True
1106
,
atom -> True
1106
if
atom -> True
1106
and
atom -> True
1106
is
atom -> True
1106
|
atom -> True
1106
<
atom -> True
1106
>=
atom -> True
1106
or
atom -> True
1106
==
atom -> True
1106
%
atom -> True
1106
>
atom -> True
1106
[
atom -> True
1106
*
atom -> True
1106
//
atom -> True
1106
/
atom -> True
1106
in
atom -> True
1106
-
atom -> True
1106
^
atom -> True
1106
<=
atom -> True
1106
(
atom -> True
1106
**
atom -> True
1106
.
atom -> True
1106
not
atom -> True
1106
:
atom -> True
1106
>>
atom -> True
1107
>>
1609
1107
or
shift_expr -> arith_expr
1107
<<
1610
1107
^
shift_expr -> arith_expr
1107
in
shift_expr -> arith_expr
1107
,
shift_expr -> arith_expr
1107
<=
shift_expr -> arith_expr
1107
>=
shift_expr -> arith_expr
1107
&
shift_expr -> arith_expr
1107
==
shift_expr -> arith_expr
1107
:
shift_expr -> arith_expr
1107
not
shift_expr -> arith_expr
1107
and
shift_expr -> arith_expr
1107
>
shift_expr -> arith_expr
1107
!=
shift_expr -> arith_expr
1107
if
shift_expr -> arith_expr
1107
|
shift_expr -> arith_expr
1107
<
shift_expr -> arith_expr
1107
is
shift_expr -> arith_expr
1108
not
atom -> False
1108
==
atom -> False
1108
*
atom -> False
1108
>
atom -> False
1108
,
atom -> False
1108
[
atom -> False
1108
if
atom -> False
1108
@
atom -> False
1108
&
atom -> False
1108
is
atom -> False
1108
.
atom -> False
1108
+
atom -> False
1108
%
atom -> False
1108
>=
atom -> False
1108
and
atom -> False
1108
(
atom -> False
1108
|
atom -> False
1108
-
atom -> False
1108
:
atom -> False
1108
/
atom -> False
1108
in
atom -> False
1108
<<
atom -> False
1108
<=
atom -> False
1108
^
atom -> False
1108
//
atom -> False
1108
>>
atom -> False
1108
!=
atom -> False
1108
**
atom -> False
1108
or
atom -> False
1108
<
atom -> False
1109
}
1611
1110
NAME
131
1110
atom_expr
132
1110
atom
133
1110
-
134
1110
factor
136
1110
)
1612
1110
[
137
1110
True
138
1110
arith_expr
139
1110
False
140
1110
{
141
1110
+
142
1110
and_expr
143
1110
(
144
1110
STRING
145
1110
test_list_comp
1613
1110
power
147
1110
term
148
1110
comparison
149
1110
shift_expr
150
1110
test
151
1110
not_test
152
1110
or_test
153
1110
lambda
154
1110
None
155
1110
xor_expr
156
1110
expr
157
1110
NUMBER
158
1110
and_test
159
1110
~
160
1110
lambdef
161
1110
not
162
1110
test_list
163
1111
NAME
1098
1111
atom_expr
1099
1111
atom
1101
1111
-
1102
1111
[
1105
1111
True
1106
1111
False
1108
1111
{
1109
1111
(
1110
1111
+
1111
1111
STRING
1114
1111
factor
1614
1111
power
1118
1111
None
1119
1111
NUMBER
1122
1111
~
1123
1112
^
1615
1112
<
xor_expr -> and_expr
1112
<=
xor_expr -> and_expr
1112
|
xor_expr -> and_expr
1112
not
xor_expr -> and_expr
1112
and
xor_expr -> and_expr
1112
!=
xor_expr -> and_expr
1112
or
xor_expr -> and_expr
1112
>
xor_expr -> and_expr
1112
>=
xor_expr -> and_expr
1112
==
xor_expr -> and_expr
1112
,
xor_expr -> and_expr
1112
in
xor_expr -> and_expr
1112
is
xor_expr -> and_expr
1112
:
xor_expr -> and_expr
1112
if
xor_expr -> and_expr
1113
or
1616
1113
if
or_test -> and_test
1113
,
or_test -> and_test
1113
:
or_test -> and_test
1114
and
atom -> STRING
1114
not
atom -> STRING
1114
.
atom -> STRING
1114
//
atom -> STRING
1114
-
atom -> STRING
1114
*
atom -> STRING
1114
(
atom -> STRING
1114
>=
atom -> STRING
1114
<=
atom -> STRING
1114
<<
atom -> STRING
1114
if
atom -> STRING
1114
+
atom -> STRING
1114
or
atom -> STRING
1114
/
atom -> STRING
1114
@
atom -> STRING
1114
in
atom -> STRING
1114
>>
atom -> STRING
1114
%
atom -> STRING
1114
!=
atom -> STRING
1114
,
atom -> STRING
1114
>
atom -> STRING
1114
^
atom -> STRING
1114
<
atom -> STRING
1114
:
atom -> STRING
1114
==
atom -> STRING
1114
**
atom -> STRING
1114
&
atom -> STRING
1114
|
atom -> STRING
1114
is
atom -> STRING
1114
[
atom -> STRING
1115
:
not_test -> comparison
1115
,
not_test -> comparison
1115
or
not_test -> comparison
1115
if
not_test -> comparison
1115
and
not_test -> comparison
1116
==
and_expr -> shift_expr
1116
&
1617
1116
!=
and_expr -> shift_expr
1116
<
and_expr -> shift_expr
1116
<=
and_expr -> shift_expr
1116
and
and_expr -> shift_expr
1116
in
and_expr -> shift_expr
1116
^
and_expr -> shift_expr
1116
:
and_expr -> shift_expr
1116
not
and_expr -> shift_expr
1116
is
and_expr -> shift_expr
1116
if
and_expr -> shift_expr
1116
,
and_expr -> shift_expr
1116
>
and_expr -> shift_expr
1116
or
and_expr -> shift_expr
1116
>=
and_expr -> shift_expr
1116
|
and_expr -> shift_expr
1117
and
1618
1117
if
and_test -> not_test
1117
:
and_test -> not_test
1117
or
and_test -> not_test
1117
,
and_test -> not_test
1118
<=
factor -> power
1118
,
factor -> power
1118
is
factor -> power
1118
>
factor -> power
1118
==
factor -> power
1118
^
factor -> power
1118
or
factor -> power
1118
-
factor -> power
1118
+
factor -> power
1118
>>
factor -> power
1118
/
factor -> power
1118
*
factor -> power
1118
<<
factor -> power
1118
|
factor -> power
1118
and
factor -> power
1118
<
factor -> power
1118
not
factor -> power
1118
!=
factor -> power
1118
:
factor -> power
1118
if
factor -> power
1118
&
factor -> power
1118
in
factor -> power
1118
%
factor -> power
1118
>=
factor -> power
1118
//
factor -> power
1118
@
factor -> power
1119
+
atom -> None
1119
>>
atom -> None
1119
/
atom -> None
1119
or
atom -> None
1119
*
atom -> None
1119
in
atom -> None
1119
**
atom -> None
1119
==
atom -> None
1119
-
atom -> None
1119
if
atom -> None
1119
(
atom -> None
1119
@
atom -> None
1119
:
atom -> None
1119
>=
atom -> None
1119
[
atom -> None
1119
^
atom -> None
1119
&
atom -> None
1119
<=
atom -> None
1119
is
atom -> None
1119
.
atom -> None
1119
not
atom -> None
1119
//
atom -> None
1119
<
atom -> None
1119
<<
atom -> None
1119
!=
atom -> None
1119
and
atom -> None
1119
%
atom -> None
1119
|
atom -> None
1119
,
atom -> None
1119
>
atom -> None
1120
|
1619
1120
>
expr -> xor_expr
1120
<
expr -> xor_expr
1120
and
expr -> xor_expr
1120
>=
expr -> xor_expr
1120
,
expr -> xor_expr
1120
!=
expr -> xor_expr
1120
or
expr -> xor_expr
1120
in
expr -> xor_expr
1120
is
expr -> xor_expr
1120
if
expr -> xor_expr
1120
==
expr -> xor_expr
1120
<=
expr -> xor_expr
1120
:
expr -> xor_expr
1120
not
expr -> xor_expr
1121
==
330
1121
is
331
1121
<=
332
1121
comp_op
1620
1121
and
comparison -> expr
1121
!=
334
1121
>
335
1121
not
336
1121
in
337
1121
or
comparison -> expr
1121
<
338
1121
>=
339
1121
if
comparison -> expr
1121
,
comparison -> expr
1121
:
comparison -> expr
1122
is
atom -> NUMBER
1122
|
atom -> NUMBER
1122
in
atom -> NUMBER
1122
@
atom -> NUMBER
1122
**
atom -> NUMBER
1122
and
atom -> NUMBER
1122
!=
atom -> NUMBER
1122
if
atom -> NUMBER
1122
-
atom -> NUMBER
1122
<<
atom -> NUMBER
1122
.
atom -> NUMBER
1122
(
atom -> NUMBER
1122
==
atom -> NUMBER
1122
%
atom -> NUMBER
1122
^
atom -> NUMBER
1122
not
atom -> NUMBER
1122
>=
atom -> NUMBER
1122
:
atom -> NUMBER
1122
,
atom -> NUMBER
1122
/
atom -> NUMBER
1122
//
atom -> NUMBER
1122
>
atom -> NUMBER
1122
&
atom -> NUMBER
1122
[
atom -> NUMBER
1122
<=
atom -> NUMBER
1122
*
atom -> NUMBER
1122
or
atom -> NUMBER
1122
+
atom -> NUMBER
1122
>>
atom -> NUMBER
1122
<
atom -> NUMBER
1123
NAME
1098
1123
atom_expr
1099
1123
atom
1101
1123
-
1102
1123
[
1105
1123
True
1106
1123
False
1108
1123
{
1109
1123
(
1110
1123
+
1111
1123
factor
1621
1123
STRING
1114
1123
power
1118
1123
None
1119
1123
NUMBER
1122
1123
~
1123
1124
:
test_list -> test
1124
,
1622
1125
:
test -> lambdef
1125
,
test -> lambdef
1126
NAME
1098
1126
atom_expr
1099
1126
term
1100
1126
atom
1101
1126
-
1102
1126
factor
1103
1126
[
1105
1126
True
1106
1126
arith_expr
1107
1126
False
1108
1126
{
1109
1126
(
1110
1126
+
1111
1126
and_expr
1112
1126
not_test
1623
1126
STRING
1114
1126
comparison
1115
1126
shift_expr
1116
1126
power
1118
1126
None
1119
1126
xor_expr
1120
1126
expr
1121
1126
NUMBER
1122
1126
~
1123
1126
not
1126
1127
if
1624
1127
:
test -> or_test
1127
,
test -> or_test
1128
:
1625
1128
NAME
342
1128
vfpdef
343
1128
varargslist
1626
1129
in
term -> factor % term
1129
|
term -> factor % term
1129
<<
term -> factor % term
1129
^
term -> factor % term
1129
+
term -> factor % term
1129
-
term -> factor % term
1129
>>
term -> factor % term
1129
,
term -> factor % term
1129
&
term -> factor % term
1130
+
term -> factor * term
1130
in
term -> factor * term
1130
<<
term -> factor * term
1130
^
term -> factor * term
1130
-
term -> factor * term
1130
&
term -> factor * term
1130
,
term -> factor * term
1130
>>
term -> factor * term
1130
|
term -> factor * term
1131
>>
term -> factor @ term
1131
&
term -> factor @ term
1131
^
term -> factor @ term
1131
<<
term -> factor @ term
1131
|
term -> factor @ term
1131
+
term -> factor @ term
1131
in
term -> factor @ term
1131
,
term -> factor @ term
1131
-
term -> factor @ term
1132
&
term -> factor / term
1132
+
term -> factor / term
1132
-
term -> factor / term
1132
<<
term -> factor / term
1132
,
term -> factor / term
1132
>>
term -> factor / term
1132
|
term -> factor / term
1132
^
term -> factor / term
1132
in
term -> factor / term
1133
<<
term -> factor // term
1133
-
term -> factor // term
1133
&
term -> factor // term
1133
^
term -> factor // term
1133
+
term -> factor // term
1133
in
term -> factor // term
1133
,
term -> factor // term
1133
|
term -> factor // term
1133
>>
term -> factor // term
1134
,
arith_expr -> term + arith_expr
1134
|
arith_expr -> term + arith_expr
1134
^
arith_expr -> term + arith_expr
1134
>>
arith_expr -> term + arith_expr
1134
in
arith_expr -> term + arith_expr
1134
<<
arith_expr -> term + arith_expr
1134
&
arith_expr -> term + arith_expr
1135
>>
arith_expr -> term - arith_expr
1135
&
arith_expr -> term - arith_expr
1135
<<
arith_expr -> term - arith_expr
1135
|
arith_expr -> term - arith_expr
1135
^
arith_expr -> term - arith_expr
1135
,
arith_expr -> term - arith_expr
1135
in
arith_expr -> term - arith_expr
1136
^
atom -> ( test_list_comp )
1136
-
atom -> ( test_list_comp )
1136
|
atom -> ( test_list_comp )
1136
&
atom -> ( test_list_comp )
1136
,
atom -> ( test_list_comp )
1136
(
atom -> ( test_list_comp )
1136
@
atom -> ( test_list_comp )
1136
**
atom -> ( test_list_comp )
1136
*
atom -> ( test_list_comp )
1136
//
atom -> ( test_list_comp )
1136
%
atom -> ( test_list_comp )
1136
[
atom -> ( test_list_comp )
1136
<<
atom -> ( test_list_comp )
1136
.
atom -> ( test_list_comp )
1136
/
atom -> ( test_list_comp )
1136
>>
atom -> ( test_list_comp )
1136
+
atom -> ( test_list_comp )
1136
in
atom -> ( test_list_comp )
1137
^
shift_expr -> arith_expr >> shift_expr
1137
in
shift_expr -> arith_expr >> shift_expr
1137
,
shift_expr -> arith_expr >> shift_expr
1137
&
shift_expr -> arith_expr >> shift_expr
1137
|
shift_expr -> arith_expr >> shift_expr
1138
,
shift_expr -> arith_expr << shift_expr
1138
&
shift_expr -> arith_expr << shift_expr
1138
in
shift_expr -> arith_expr << shift_expr
1138
^
shift_expr -> arith_expr << shift_expr
1138
|
shift_expr -> arith_expr << shift_expr
1139
,
and_expr -> shift_expr & and_expr
1139
|
and_expr -> shift_expr & and_expr
1139
in
and_expr -> shift_expr & and_expr
1139
^
and_expr -> shift_expr & and_expr
1140
,
xor_expr -> and_expr ^ xor_expr
1140
in
xor_expr -> and_expr ^ xor_expr
1140
|
xor_expr -> and_expr ^ xor_expr
1141
,
expr -> xor_expr | expr
1141
in
expr -> xor_expr | expr
1142
in
expr_list -> expr , expr_list
1143
>>
power -> atom_expr ** factor
1143
<=
power -> atom_expr ** factor
1143
//
power -> atom_expr ** factor
1143
for
power -> atom_expr ** factor
1143
/
power -> atom_expr ** factor
1143
&
power -> atom_expr ** factor
1143
if
power -> atom_expr ** factor
1143
not
power -> atom_expr ** factor
1143
<
power -> atom_expr ** factor
1143
!=
power -> atom_expr ** factor
1143
,
power -> atom_expr ** factor
1143
>
power -> atom_expr ** factor
1143
*
power -> atom_expr ** factor
1143
==
power -> atom_expr ** factor
1143
|
power -> atom_expr ** factor
1143
is
power -> atom_expr ** factor
1143
and
power -> atom_expr ** factor
1143
<<
power -> atom_expr ** factor
1143
-
power -> atom_expr ** factor
1143
]
power -> atom_expr ** factor
1143
@
power -> atom_expr ** factor
1143
in
power -> atom_expr ** factor
1143
^
power -> atom_expr ** factor
1143
%
power -> atom_expr ** factor
1143
>=
power -> atom_expr ** factor
1143
+
power -> atom_expr ** factor
1143
or
power -> atom_expr ** factor
1144
*
trailer_expr -> trailer trailer_expr
1144
+
trailer_expr -> trailer trailer_expr
1144
if
trailer_expr -> trailer trailer_expr
1144
-
trailer_expr -> trailer trailer_expr
1144
<=
trailer_expr -> trailer trailer_expr
1144
|
trailer_expr -> trailer trailer_expr
1144
@
trailer_expr -> trailer trailer_expr
1144
%
trailer_expr -> trailer trailer_expr
1144
in
trailer_expr -> trailer trailer_expr
1144
<<
trailer_expr -> trailer trailer_expr
1144
]
trailer_expr -> trailer trailer_expr
1144
**
trailer_expr -> trailer trailer_expr
1144
==
trailer_expr -> trailer trailer_expr
1144
not
trailer_expr -> trailer trailer_expr
1144
,
trailer_expr -> trailer trailer_expr
1144
and
trailer_expr -> trailer trailer_expr
1144
//
trailer_expr -> trailer trailer_expr
1144
^
trailer_expr -> trailer trailer_expr
1144
for
trailer_expr -> trailer trailer_expr
1144
or
trailer_expr -> trailer trailer_expr
1144
>
trailer_expr -> trailer trailer_expr
1144
!=
trailer_expr -> trailer trailer_expr
1144
is
trailer_expr -> trailer trailer_expr
1144
&
trailer_expr -> trailer trailer_expr
1144
>>
trailer_expr -> trailer trailer_expr
1144
/
trailer_expr -> trailer trailer_expr
1144
<
trailer_expr -> trailer trailer_expr
1144
>=
trailer_expr -> trailer trailer_expr
1145
]
1627
1146
^
trailer -> . NAME
1146
%
trailer -> . NAME
1146
**
trailer -> . NAME
1146
>>
trailer -> . NAME
1146
>
trailer -> . NAME
1146
in
trailer -> . NAME
1146
[
trailer -> . NAME
1146
is
trailer -> . NAME
1146
,
trailer -> . NAME
1146
<<
trailer -> . NAME
1146
or
trailer -> . NAME
1146
and
trailer -> . NAME
1146
>=
trailer -> . NAME
1146
|
trailer -> . NAME
1146
==
trailer -> . NAME
1146
.
trailer -> . NAME
1146
+
trailer -> . NAME
1146
<
trailer -> . NAME
1146
for
trailer -> . NAME
1146
-
trailer -> . NAME
1146
&
trailer -> . NAME
1146
*
trailer -> . NAME
1146
if
trailer -> . NAME
1146
<=
trailer -> . NAME
1146
(
trailer -> . NAME
1146
]
trailer -> . NAME
1146
not
trailer -> . NAME
1146
//
trailer -> . NAME
1146
@
trailer -> . NAME
1146
!=
trailer -> . NAME
1146
/
trailer -> . NAME
1147
)
1628
1148
[
trailer -> ( )
1148
not
trailer -> ( )
1148
==
trailer -> ( )
1148
**
trailer -> ( )
1148
,
trailer -> ( )
1148
<=
trailer -> ( )
1148
//
trailer -> ( )
1148
<<
trailer -> ( )
1148
<
trailer -> ( )
1148
]
trailer -> ( )
1148
for
trailer -> ( )
1148
in
trailer -> ( )
1148
or
trailer -> ( )
1148
-
trailer -> ( )
1148
+
trailer -> ( )
1148
&
trailer -> ( )
1148
*
trailer -> ( )
1148
is
trailer -> ( )
1148
>
trailer -> ( )
1148
!=
trailer -> ( )
1148
>>
trailer -> ( )
1148
%
trailer -> ( )
1148
|
trailer -> ( )
1148
.
trailer -> ( )
1148
>=
trailer -> ( )
1148
(
trailer -> ( )
1148
and
trailer -> ( )
1148
@
trailer -> ( )
1148
/
trailer -> ( )
1148
^
trailer -> ( )
1148
if
trailer -> ( )
1149
|
term -> factor % term
1149
<<
term -> factor % term
1149
^
term -> factor % term
1149
==
term -> factor % term
1149
]
term -> factor % term
1149
-
term -> factor % term
1149
,
term -> factor % term
1149
is
term -> factor % term
1149
>=
term -> factor % term
1149
>>
term -> factor % term
1149
>
term -> factor % term
1149
in
term -> factor % term
1149
&
term -> factor % term
1149
if
term -> factor % term
1149
<
term -> factor % term
1149
!=
term -> factor % term
1149
<=
term -> factor % term
1149
not
term -> factor % term
1149
+
term -> factor % term
1149
and
term -> factor % term
1149
or
term -> factor % term
1149
for
term -> factor % term
1150
if
term -> factor // term
1150
<
term -> factor // term
1150
and
term -> factor // term
1150
in
term -> factor // term
1150
,
term -> factor // term
1150
>>
term -> factor // term
1150
<=
term -> factor // term
1150
!=
term -> factor // term
1150
]
term -> factor // term
1150
^
term -> factor // term
1150
for
term -> factor // term
1150
|
term -> factor // term
1150
or
term -> factor // term
1150
>=
term -> factor // term
1150
&
term -> factor // term
1150
>
term -> factor // term
1150
+
term -> factor // term
1150
is
term -> factor // term
1150
not
term -> factor // term
1150
<<
term -> factor // term
1150
-
term -> factor // term
1150
==
term -> factor // term
1151
]
term -> factor / term
1151
,
term -> factor / term
1151
>>
term -> factor / term
1151
^
term -> factor / term
1151
or
term -> factor / term
1151
for
term -> factor / term
1151
+
term -> factor / term
1151
if
term -> factor / term
1151
>=
term -> factor / term
1151
>
term -> factor / term
1151
-
term -> factor / term
1151
and
term -> factor / term
1151
not
term -> factor / term
1151
<
term -> factor / term
1151
in
term -> factor / term
1151
==
term -> factor / term
1151
<=
term -> factor / term
1151
is
term -> factor / term
1151
&
term -> factor / term
1151
<<
term -> factor / term
1151
!=
term -> factor / term
1151
|
term -> factor / term
1152
-
term -> factor * term
1152
&
term -> factor * term
1152
and
term -> factor * term
1152
,
term -> factor * term
1152
!=
term -> factor * term
1152
|
term -> factor * term
1152
<<
term -> factor * term
1152
for
term -> factor * term
1152
<
term -> factor * term
1152
if
term -> factor * term
1152
^
term -> factor * term
1152
+
term -> factor * term
1152
in
term -> factor * term
1152
or
term -> factor * term
1152
>>
term -> factor * term
1152
not
term -> factor * term
1152
]
term -> factor * term
1152
==
term -> factor * term
1152
>=
term -> factor * term
1152
<=
term -> factor * term
1152
>
term -> factor * term
1152
is
term -> factor * term
1153
>>
term -> factor @ term
1153
^
term -> factor @ term
1153
&
term -> factor @ term
1153
|
term -> factor @ term
1153
if
term -> factor @ term
1153
is
term -> factor @ term
1153
<
term -> factor @ term
1153
for
term -> factor @ term
1153
<<
term -> factor @ term
1153
and
term -> factor @ term
1153
==
term -> factor @ term
1153
>
term -> factor @ term
1153
in
term -> factor @ term
1153
]
term -> factor @ term
1153
,
term -> factor @ term
1153
>=
term -> factor @ term
1153
+
term -> factor @ term
1153
not
term -> factor @ term
1153
!=
term -> factor @ term
1153
<=
term -> factor @ term
1153
or
term -> factor @ term
1153
-
term -> factor @ term
1154
<<
atom -> [ test_list_comp ]
1154
,
atom -> [ test_list_comp ]
1154
>>
atom -> [ test_list_comp ]
1154
for
atom -> [ test_list_comp ]
1154
+
atom -> [ test_list_comp ]
1154
-
atom -> [ test_list_comp ]
1154
not
atom -> [ test_list_comp ]
1154
<=
atom -> [ test_list_comp ]
1154
is
atom -> [ test_list_comp ]
1154
[
atom -> [ test_list_comp ]
1154
*
atom -> [ test_list_comp ]
1154
==
atom -> [ test_list_comp ]
1154
@
atom -> [ test_list_comp ]
1154
>
atom -> [ test_list_comp ]
1154
%
atom -> [ test_list_comp ]
1154
if
atom -> [ test_list_comp ]
1154
>=
atom -> [ test_list_comp ]
1154
]
atom -> [ test_list_comp ]
1154
//
atom -> [ test_list_comp ]
1154
.
atom -> [ test_list_comp ]
1154
in
atom -> [ test_list_comp ]
1154
**
atom -> [ test_list_comp ]
1154
and
atom -> [ test_list_comp ]
1154
/
atom -> [ test_list_comp ]
1154
or
atom -> [ test_list_comp ]
1154
!=
atom -> [ test_list_comp ]
1154
<
atom -> [ test_list_comp ]
1154
^
atom -> [ test_list_comp ]
1154
&
atom -> [ test_list_comp ]
1154
(
atom -> [ test_list_comp ]
1154
|
atom -> [ test_list_comp ]
1155
for
shift_expr -> arith_expr >> shift_expr
1155
]
shift_expr -> arith_expr >> shift_expr
1155
<
shift_expr -> arith_expr >> shift_expr
1155
^
shift_expr -> arith_expr >> shift_expr
1155
in
shift_expr -> arith_expr >> shift_expr
1155
==
shift_expr -> arith_expr >> shift_expr
1155
!=
shift_expr -> arith_expr >> shift_expr
1155
>=
shift_expr -> arith_expr >> shift_expr
1155
not
shift_expr -> arith_expr >> shift_expr
1155
and
shift_expr -> arith_expr >> shift_expr
1155
is
shift_expr -> arith_expr >> shift_expr
1155
,
shift_expr -> arith_expr >> shift_expr
1155
>
shift_expr -> arith_expr >> shift_expr
1155
&
shift_expr -> arith_expr >> shift_expr
1155
|
shift_expr -> arith_expr >> shift_expr
1155
<=
shift_expr -> arith_expr >> shift_expr
1155
or
shift_expr -> arith_expr >> shift_expr
1155
if
shift_expr -> arith_expr >> shift_expr
1156
,
shift_expr -> arith_expr << shift_expr
1156
if
shift_expr -> arith_expr << shift_expr
1156
&
shift_expr -> arith_expr << shift_expr
1156
>=
shift_expr -> arith_expr << shift_expr
1156
<=
shift_expr -> arith_expr << shift_expr
1156
or
shift_expr -> arith_expr << shift_expr
1156
in
shift_expr -> arith_expr << shift_expr
1156
!=
shift_expr -> arith_expr << shift_expr
1156
^
shift_expr -> arith_expr << shift_expr
1156
<
shift_expr -> arith_expr << shift_expr
1156
|
shift_expr -> arith_expr << shift_expr
1156
==
shift_expr -> arith_expr << shift_expr
1156
is
shift_expr -> arith_expr << shift_expr
1156
and
shift_expr -> arith_expr << shift_expr
1156
]
shift_expr -> arith_expr << shift_expr
1156
>
shift_expr -> arith_expr << shift_expr
1156
for
shift_expr -> arith_expr << shift_expr
1156
not
shift_expr -> arith_expr << shift_expr
1157
>=
xor_expr -> and_expr ^ xor_expr
1157
>
xor_expr -> and_expr ^ xor_expr
1157
or
xor_expr -> and_expr ^ xor_expr
1157
and
xor_expr -> and_expr ^ xor_expr
1157
<=
xor_expr -> and_expr ^ xor_expr
1157
in
xor_expr -> and_expr ^ xor_expr
1157
==
xor_expr -> and_expr ^ xor_expr
1157
,
xor_expr -> and_expr ^ xor_expr
1157
if
xor_expr -> and_expr ^ xor_expr
1157
]
xor_expr -> and_expr ^ xor_expr
1157
!=
xor_expr -> and_expr ^ xor_expr
1157
not
xor_expr -> and_expr ^ xor_expr
1157
<
xor_expr -> and_expr ^ xor_expr
1157
for
xor_expr -> and_expr ^ xor_expr
1157
is
xor_expr -> and_expr ^ xor_expr
1157
|
xor_expr -> and_expr ^ xor_expr
1158
@
atom -> ( test_list_comp )
1158
]
atom -> ( test_list_comp )
1158
<
atom -> ( test_list_comp )
1158
and
atom -> ( test_list_comp )
1158
if
atom -> ( test_list_comp )
1158
&
atom -> ( test_list_comp )
1158
*
atom -> ( test_list_comp )
1158
%
atom -> ( test_list_comp )
1158
[
atom -> ( test_list_comp )
1158
//
atom -> ( test_list_comp )
1158
<<
atom -> ( test_list_comp )
1158
.
atom -> ( test_list_comp )
1158
/
atom -> ( test_list_comp )
1158
>=
atom -> ( test_list_comp )
1158
or
atom -> ( test_list_comp )
1158
>
atom -> ( test_list_comp )
1158
for
atom -> ( test_list_comp )
1158
-
atom -> ( test_list_comp )
1158
|
atom -> ( test_list_comp )
1158
**
atom -> ( test_list_comp )
1158
is
atom -> ( test_list_comp )
1158
==
atom -> ( test_list_comp )
1158
not
atom -> ( test_list_comp )
1158
in
atom -> ( test_list_comp )
1158
!=
atom -> ( test_list_comp )
1158
^
atom -> ( test_list_comp )
1158
,
atom -> ( test_list_comp )
1158
(
atom -> ( test_list_comp )
1158
<=
atom -> ( test_list_comp )
1158
+
atom -> ( test_list_comp )
1158
>>
atom -> ( test_list_comp )
1159
and
arith_expr -> term + arith_expr
1159
<
arith_expr -> term + arith_expr
1159
|
arith_expr -> term + arith_expr
1159
>=
arith_expr -> term + arith_expr
1159
>>
arith_expr -> term + arith_expr
1159
,
arith_expr -> term + arith_expr
1159
if
arith_expr -> term + arith_expr
1159
>
arith_expr -> term + arith_expr
1159
in
arith_expr -> term + arith_expr
1159
or
arith_expr -> term + arith_expr
1159
<=
arith_expr -> term + arith_expr
1159
not
arith_expr -> term + arith_expr
1159
^
arith_expr -> term + arith_expr
1159
!=
arith_expr -> term + arith_expr
1159
&
arith_expr -> term + arith_expr
1159
==
arith_expr -> term + arith_expr
1159
]
arith_expr -> term + arith_expr
1159
for
arith_expr -> term + arith_expr
1159
<<
arith_expr -> term + arith_expr
1159
is
arith_expr -> term + arith_expr
1160
<<
arith_expr -> term - arith_expr
1160
if
arith_expr -> term - arith_expr
1160
<
arith_expr -> term - arith_expr
1160
<=
arith_expr -> term - arith_expr
1160
for
arith_expr -> term - arith_expr
1160
and
arith_expr -> term - arith_expr
1160
in
arith_expr -> term - arith_expr
1160
&
arith_expr -> term - arith_expr
1160
|
arith_expr -> term - arith_expr
1160
==
arith_expr -> term - arith_expr
1160
is
arith_expr -> term - arith_expr
1160
>>
arith_expr -> term - arith_expr
1160
!=
arith_expr -> term - arith_expr
1160
>
arith_expr -> term - arith_expr
1160
or
arith_expr -> term - arith_expr
1160
,
arith_expr -> term - arith_expr
1160
]
arith_expr -> term - arith_expr
1160
>=
arith_expr -> term - arith_expr
1160
^
arith_expr -> term - arith_expr
1160
not
arith_expr -> term - arith_expr
1161
]
or_test -> and_test or or_test
1161
,
or_test -> and_test or or_test
1161
for
or_test -> and_test or or_test
1161
if
or_test -> and_test or or_test
1162
,
and_expr -> shift_expr & and_expr
1162
>=
and_expr -> shift_expr & and_expr
1162
!=
and_expr -> shift_expr & and_expr
1162
or
and_expr -> shift_expr & and_expr
1162
is
and_expr -> shift_expr & and_expr
1162
^
and_expr -> shift_expr & and_expr
1162
]
and_expr -> shift_expr & and_expr
1162
if
and_expr -> shift_expr & and_expr
1162
==
and_expr -> shift_expr & and_expr
1162
not
and_expr -> shift_expr & and_expr
1162
<
and_expr -> shift_expr & and_expr
1162
>
and_expr -> shift_expr & and_expr
1162
in
and_expr -> shift_expr & and_expr
1162
and
and_expr -> shift_expr & and_expr
1162
|
and_expr -> shift_expr & and_expr
1162
for
and_expr -> shift_expr & and_expr
1162
<=
and_expr -> shift_expr & and_expr
1163
if
and_test -> not_test and and_test
1163
]
and_test -> not_test and and_test
1163
,
and_test -> not_test and and_test
1163
or
and_test -> not_test and and_test
1163
for
and_test -> not_test and and_test
1164
else
1629
1165
]
expr -> xor_expr | expr
1165
is
expr -> xor_expr | expr
1165
or
expr -> xor_expr | expr
1165
>
expr -> xor_expr | expr
1165
and
expr -> xor_expr | expr
1165
,
expr -> xor_expr | expr
1165
for
expr -> xor_expr | expr
1165
in
expr -> xor_expr | expr
1165
if
expr -> xor_expr | expr
1165
<=
expr -> xor_expr | expr
1165
not
expr -> xor_expr | expr
1165
==
expr -> xor_expr | expr
1165
>=
expr -> xor_expr | expr
1165
<
expr -> xor_expr | expr
1165
!=
expr -> xor_expr | expr
1166
for
comparison -> expr comp_op comparison
1166
]
comparison -> expr comp_op comparison
1166
,
comparison -> expr comp_op comparison
1166
and
comparison -> expr comp_op comparison
1166
if
comparison -> expr comp_op comparison
1166
or
comparison -> expr comp_op comparison
1167
NAME
187
1167
atom_expr
188
1167
atom
189
1167
-
190
1167
factor
191
1167
[
193
1167
True
194
1167
arith_expr
195
1167
False
196
1167
{
197
1167
+
198
1167
and_expr
199
1167
(
200
1167
STRING
201
1167
term
203
1167
and_test
204
1167
comparison
205
1167
shift_expr
206
1167
not_test
207
1167
power
208
1167
or_test
209
1167
None
210
1167
xor_expr
211
1167
expr
212
1167
NUMBER
213
1167
lambda
214
1167
~
215
1167
lambdef
216
1167
not
217
1167
test
1630
1168
for
lambdef -> lambda : test
1168
]
lambdef -> lambda : test
1168
,
lambdef -> lambda : test
1169
.
atom -> NAME
1169
<
atom -> NAME
1169
|
atom -> NAME
1169
not
atom -> NAME
1169
[
atom -> NAME
1169
,
atom -> NAME
1169
+
atom -> NAME
1169
%
atom -> NAME
1169
]
atom -> NAME
1169
<=
atom -> NAME
1169
*
atom -> NAME
1169
!=
atom -> NAME
1169
in
atom -> NAME
1169
if
atom -> NAME
1169
is
atom -> NAME
1169
(
atom -> NAME
1169
^
atom -> NAME
1169
@
atom -> NAME
1169
&
atom -> NAME
1169
>>
atom -> NAME
1169
<<
atom -> NAME
1169
-
atom -> NAME
1169
/
atom -> NAME
1169
or
atom -> NAME
1169
//
atom -> NAME
1169
>=
atom -> NAME
1169
and
atom -> NAME
1169
>
atom -> NAME
1169
==
atom -> NAME
1169
**
atom -> NAME
1170
**
1631
1170
and
power -> atom_expr
1170
^
power -> atom_expr
1170
or
power -> atom_expr
1170
>>
power -> atom_expr
1170
]
power -> atom_expr
1170
if
power -> atom_expr
1170
<
power -> atom_expr
1170
>=
power -> atom_expr
1170
!=
power -> atom_expr
1170
is
power -> atom_expr
1170
<=
power -> atom_expr
1170
not
power -> atom_expr
1170
//
power -> atom_expr
1170
+
power -> atom_expr
1170
==
power -> atom_expr
1170
|
power -> atom_expr
1170
-
power -> atom_expr
1170
&
power -> atom_expr
1170
/
power -> atom_expr
1170
@
power -> atom_expr
1170
<<
power -> atom_expr
1170
,
power -> atom_expr
1170
%
power -> atom_expr
1170
*
power -> atom_expr
1170
in
power -> atom_expr
1170
>
power -> atom_expr
1171
trailer
1632
1171
trailer_expr
1633
1171
[
1634
1171
or
trailer_expr -> 
1171
.
1635
1171
(
1636
1171
not
trailer_expr -> 
1171
in
trailer_expr -> 
1171
is
trailer_expr -> 
1171
>=
trailer_expr -> 
1171
-
trailer_expr -> 
1171
@
trailer_expr -> 
1171
<=
trailer_expr -> 
1171
,
trailer_expr -> 
1171
^
trailer_expr -> 
1171
*
trailer_expr -> 
1171
if
trailer_expr -> 
1171
**
trailer_expr -> 
1171
>
trailer_expr -> 
1171
==
trailer_expr -> 
1171
>>
trailer_expr -> 
1171
<<
trailer_expr -> 
1171
/
trailer_expr -> 
1171
//
trailer_expr -> 
1171
!=
trailer_expr -> 
1171
<
trailer_expr -> 
1171
&
trailer_expr -> 
1171
]
trailer_expr -> 
1171
|
trailer_expr -> 
1171
and
trailer_expr -> 
1171
+
trailer_expr -> 
1171
%
trailer_expr -> 
1172
NAME
1169
1172
atom_expr
1170
1172
atom
1171
1172
-
1172
1172
factor
1637
1172
[
1174
1172
True
1175
1172
False
1177
1172
{
1178
1172
+
1179
1172
(
1181
1172
STRING
1182
1172
power
1188
1172
None
1189
1172
NUMBER
1192
1172
~
1193
1173
%
1638
1173
//
1639
1173
/
1640
1173
*
1641
1173
@
1642
1173
not
term -> factor
1173
<<
term -> factor
1173
or
term -> factor
1173
^
term -> factor
1173
in
term -> factor
1173
if
term -> factor
1173
and
term -> factor
1173
<=
term -> factor
1173
&
term -> factor
1173
,
term -> factor
1173
>>
term -> factor
1173
>
term -> factor
1173
|
term -> factor
1173
<
term -> factor
1173
is
term -> factor
1173
!=
term -> factor
1173
>=
term -> factor
1173
==
term -> factor
1173
-
term -> factor
1173
+
term -> factor
1173
]
term -> factor
1174
NAME
187
1174
atom_expr
188
1174
atom
189
1174
-
190
1174
factor
191
1174
test_list_comp
1643
1174
[
193
1174
True
194
1174
arith_expr
195
1174
False
196
1174
{
197
1174
+
198
1174
and_expr
199
1174
(
200
1174
STRING
201
1174
]
1644
1174
term
203
1174
and_test
204
1174
comparison
205
1174
shift_expr
206
1174
not_test
207
1174
power
208
1174
or_test
209
1174
None
210
1174
xor_expr
211
1174
expr
212
1174
NUMBER
213
1174
lambda
214
1174
~
215
1174
lambdef
216
1174
not
217
1174
test
218
1174
test_list
219
1175
!=
atom -> True
1175
&
atom -> True
1175
+
atom -> True
1175
<<
atom -> True
1175
@
atom -> True
1175
,
atom -> True
1175
if
atom -> True
1175
and
atom -> True
1175
is
atom -> True
1175
|
atom -> True
1175
<
atom -> True
1175
>=
atom -> True
1175
]
atom -> True
1175
or
atom -> True
1175
==
atom -> True
1175
%
atom -> True
1175
>
atom -> True
1175
[
atom -> True
1175
*
atom -> True
1175
//
atom -> True
1175
/
atom -> True
1175
in
atom -> True
1175
-
atom -> True
1175
^
atom -> True
1175
<=
atom -> True
1175
(
atom -> True
1175
**
atom -> True
1175
.
atom -> True
1175
not
atom -> True
1175
>>
atom -> True
1176
or
shift_expr -> arith_expr
1176
>>
1645
1176
<<
1646
1176
]
shift_expr -> arith_expr
1176
^
shift_expr -> arith_expr
1176
in
shift_expr -> arith_expr
1176
,
shift_expr -> arith_expr
1176
<=
shift_expr -> arith_expr
1176
>=
shift_expr -> arith_expr
1176
&
shift_expr -> arith_expr
1176
==
shift_expr -> arith_expr
1176
not
shift_expr -> arith_expr
1176
and
shift_expr -> arith_expr
1176
>
shift_expr -> arith_expr
1176
!=
shift_expr -> arith_expr
1176
if
shift_expr -> arith_expr
1176
|
shift_expr -> arith_expr
1176
<
shift_expr -> arith_expr
1176
is
shift_expr -> arith_expr
1177
not
atom -> False
1177
==
atom -> False
1177
*
atom -> False
1177
>
atom -> False
1177
,
atom -> False
1177
[
atom -> False
1177
if
atom -> False
1177
@
atom -> False
1177
&
atom -> False
1177
is
atom -> False
1177
.
atom -> False
1177
+
atom -> False
1177
]
atom -> False
1177
%
atom -> False
1177
>=
atom -> False
1177
and
atom -> False
1177
(
atom -> False
1177
|
atom -> False
1177
-
atom -> False
1177
/
atom -> False
1177
in
atom -> False
1177
<<
atom -> False
1177
<=
atom -> False
1177
^
atom -> False
1177
//
atom -> False
1177
>>
atom -> False
1177
!=
atom -> False
1177
**
atom -> False
1177
or
atom -> False
1177
<
atom -> False
1178
}
1647
1179
NAME
1169
1179
atom_expr
1170
1179
atom
1171
1179
-
1172
1179
[
1174
1179
True
1175
1179
False
1177
1179
{
1178
1179
+
1179
1179
(
1181
1179
STRING
1182
1179
power
1188
1179
factor
1648
1179
None
1189
1179
NUMBER
1192
1179
~
1193
1180
^
1649
1180
<
xor_expr -> and_expr
1180
]
xor_expr -> and_expr
1180
<=
xor_expr -> and_expr
1180
|
xor_expr -> and_expr
1180
not
xor_expr -> and_expr
1180
and
xor_expr -> and_expr
1180
!=
xor_expr -> and_expr
1180
or
xor_expr -> and_expr
1180
>
xor_expr -> and_expr
1180
>=
xor_expr -> and_expr
1180
==
xor_expr -> and_expr
1180
,
xor_expr -> and_expr
1180
in
xor_expr -> and_expr
1180
is
xor_expr -> and_expr
1180
if
xor_expr -> and_expr
1181
NAME
131
1181
atom_expr
132
1181
atom
133
1181
-
134
1181
factor
136
1181
)
1650
1181
[
137
1181
True
138
1181
arith_expr
139
1181
False
140
1181
{
141
1181
+
142
1181
and_expr
143
1181
(
144
1181
STRING
145
1181
test_list_comp
1651
1181
power
147
1181
term
148
1181
comparison
149
1181
shift_expr
150
1181
test
151
1181
not_test
152
1181
or_test
153
1181
lambda
154
1181
None
155
1181
xor_expr
156
1181
expr
157
1181
NUMBER
158
1181
and_test
159
1181
~
160
1181
lambdef
161
1181
not
162
1181
test_list
163
1182
and
atom -> STRING
1182
not
atom -> STRING
1182
]
atom -> STRING
1182
.
atom -> STRING
1182
//
atom -> STRING
1182
-
atom -> STRING
1182
*
atom -> STRING
1182
(
atom -> STRING
1182
>=
atom -> STRING
1182
<=
atom -> STRING
1182
<<
atom -> STRING
1182
if
atom -> STRING
1182
+
atom -> STRING
1182
or
atom -> STRING
1182
/
atom -> STRING
1182
@
atom -> STRING
1182
in
atom -> STRING
1182
>>
atom -> STRING
1182
%
atom -> STRING
1182
!=
atom -> STRING
1182
,
atom -> STRING
1182
>
atom -> STRING
1182
^
atom -> STRING
1182
<
atom -> STRING
1182
==
atom -> STRING
1182
**
atom -> STRING
1182
&
atom -> STRING
1182
|
atom -> STRING
1182
is
atom -> STRING
1182
[
atom -> STRING
1183
+
1652
1183
or
arith_expr -> term
1183
==
arith_expr -> term
1183
-
1653
1183
in
arith_expr -> term
1183
<<
arith_expr -> term
1183
>
arith_expr -> term
1183
is
arith_expr -> term
1183
>=
arith_expr -> term
1183
<=
arith_expr -> term
1183
and
arith_expr -> term
1183
>>
arith_expr -> term
1183
!=
arith_expr -> term
1183
not
arith_expr -> term
1183
&
arith_expr -> term
1183
]
arith_expr -> term
1183
,
arith_expr -> term
1183
if
arith_expr -> term
1183
<
arith_expr -> term
1183
^
arith_expr -> term
1183
|
arith_expr -> term
1184
]
or_test -> and_test
1184
or
1654
1184
if
or_test -> and_test
1184
,
or_test -> and_test
1185
,
not_test -> comparison
1185
or
not_test -> comparison
1185
]
not_test -> comparison
1185
if
not_test -> comparison
1185
and
not_test -> comparison
1186
==
and_expr -> shift_expr
1186
&
1655
1186
!=
and_expr -> shift_expr
1186
<
and_expr -> shift_expr
1186
<=
and_expr -> shift_expr
1186
and
and_expr -> shift_expr
1186
in
and_expr -> shift_expr
1186
^
and_expr -> shift_expr
1186
not
and_expr -> shift_expr
1186
]
and_expr -> shift_expr
1186
is
and_expr -> shift_expr
1186
if
and_expr -> shift_expr
1186
,
and_expr -> shift_expr
1186
>
and_expr -> shift_expr
1186
or
and_expr -> shift_expr
1186
>=
and_expr -> shift_expr
1186
|
and_expr -> shift_expr
1187
and
1656
1187
]
and_test -> not_test
1187
if
and_test -> not_test
1187
or
and_test -> not_test
1187
,
and_test -> not_test
1188
<=
factor -> power
1188
,
factor -> power
1188
is
factor -> power
1188
>
factor -> power
1188
==
factor -> power
1188
^
factor -> power
1188
or
factor -> power
1188
-
factor -> power
1188
+
factor -> power
1188
>>
factor -> power
1188
]
factor -> power
1188
/
factor -> power
1188
*
factor -> power
1188
<<
factor -> power
1188
|
factor -> power
1188
and
factor -> power
1188
<
factor -> power
1188
not
factor -> power
1188
!=
factor -> power
1188
if
factor -> power
1188
&
factor -> power
1188
in
factor -> power
1188
%
factor -> power
1188
>=
factor -> power
1188
//
factor -> power
1188
@
factor -> power
1189
+
atom -> None
1189
>>
atom -> None
1189
/
atom -> None
1189
or
atom -> None
1189
*
atom -> None
1189
in
atom -> None
1189
**
atom -> None
1189
==
atom -> None
1189
-
atom -> None
1189
if
atom -> None
1189
(
atom -> None
1189
@
atom -> None
1189
>=
atom -> None
1189
[
atom -> None
1189
^
atom -> None
1189
&
atom -> None
1189
<=
atom -> None
1189
is
atom -> None
1189
]
atom -> None
1189
.
atom -> None
1189
not
atom -> None
1189
//
atom -> None
1189
<
atom -> None
1189
<<
atom -> None
1189
!=
atom -> None
1189
and
atom -> None
1189
%
atom -> None
1189
|
atom -> None
1189
,
atom -> None
1189
>
atom -> None
1190
|
1657
1190
>
expr -> xor_expr
1190
<
expr -> xor_expr
1190
]
expr -> xor_expr
1190
and
expr -> xor_expr
1190
>=
expr -> xor_expr
1190
,
expr -> xor_expr
1190
!=
expr -> xor_expr
1190
or
expr -> xor_expr
1190
in
expr -> xor_expr
1190
is
expr -> xor_expr
1190
if
expr -> xor_expr
1190
==
expr -> xor_expr
1190
<=
expr -> xor_expr
1190
not
expr -> xor_expr
1191
==
330
1191
is
331
1191
<=
332
1191
comp_op
1658
1191
and
comparison -> expr
1191
!=
334
1191
>
335
1191
not
336
1191
in
337
1191
]
comparison -> expr
1191
or
comparison -> expr
1191
<
338
1191
>=
339
1191
if
comparison -> expr
1191
,
comparison -> expr
1192
is
atom -> NUMBER
1192
|
atom -> NUMBER
1192
]
atom -> NUMBER
1192
@
atom -> NUMBER
1192
**
atom -> NUMBER
1192
in
atom -> NUMBER
1192
and
atom -> NUMBER
1192
!=
atom -> NUMBER
1192
if
atom -> NUMBER
1192
-
atom -> NUMBER
1192
<<
atom -> NUMBER
1192
.
atom -> NUMBER
1192
(
atom -> NUMBER
1192
==
atom -> NUMBER
1192
%
atom -> NUMBER
1192
^
atom -> NUMBER
1192
not
atom -> NUMBER
1192
>=
atom -> NUMBER
1192
,
atom -> NUMBER
1192
/
atom -> NUMBER
1192
//
atom -> NUMBER
1192
>
atom -> NUMBER
1192
&
atom -> NUMBER
1192
[
atom -> NUMBER
1192
<=
atom -> NUMBER
1192
*
atom -> NUMBER
1192
or
atom -> NUMBER
1192
+
atom -> NUMBER
1192
>>
atom -> NUMBER
1192
<
atom -> NUMBER
1193
NAME
1169
1193
atom_expr
1170
1193
atom
1171
1193
-
1172
1193
[
1174
1193
True
1175
1193
False
1177
1193
{
1178
1193
+
1179
1193
factor
1659
1193
(
1181
1193
STRING
1182
1193
power
1188
1193
None
1189
1193
NUMBER
1192
1193
~
1193
1194
if
1660
1194
]
test -> or_test
1194
,
test -> or_test
1195
NAME
1169
1195
atom_expr
1170
1195
atom
1171
1195
-
1172
1195
factor
1173
1195
[
1174
1195
True
1175
1195
arith_expr
1176
1195
False
1177
1195
{
1178
1195
+
1179
1195
and_expr
1180
1195
(
1181
1195
STRING
1182
1195
term
1183
1195
comparison
1185
1195
shift_expr
1186
1195
power
1188
1195
None
1189
1195
xor_expr
1190
1195
expr
1191
1195
NUMBER
1192
1195
~
1193
1195
not
1195
1195
not_test
1661
1196
]
test -> lambdef
1196
,
test -> lambdef
1197
,
641
1197
]
test_list -> test
1198
]
test_list -> test , test_list
1199
:
1662
1199
NAME
342
1199
vfpdef
343
1199
varargslist
1663
1200
in
1664
1201
False
suite -> simple_stmt
1201
if
suite -> simple_stmt
1201
NUMBER
suite -> simple_stmt
1201
NEWLINE
suite -> simple_stmt
1201
{
suite -> simple_stmt
1201
@
suite -> simple_stmt
1201
begsim
suite -> simple_stmt
1201
endsim
suite -> simple_stmt
1201
nonlocal
suite -> simple_stmt
1201
STRING
suite -> simple_stmt
1201
(
suite -> simple_stmt
1201
global
suite -> simple_stmt
1201
yield
suite -> simple_stmt
1201
try
suite -> simple_stmt
1201
conf
suite -> simple_stmt
1201
for
suite -> simple_stmt
1201
not
suite -> simple_stmt
1201
else
suite -> simple_stmt
1201
while
suite -> simple_stmt
1201
lambda
suite -> simple_stmt
1201
None
suite -> simple_stmt
1201
break
suite -> simple_stmt
1201
resetstats
suite -> simple_stmt
1201
True
suite -> simple_stmt
1201
~
suite -> simple_stmt
1201
-
suite -> simple_stmt
1201
pass
suite -> simple_stmt
1201
def
suite -> simple_stmt
1201
raise
suite -> simple_stmt
1201
with
suite -> simple_stmt
1201
class
suite -> simple_stmt
1201
[
suite -> simple_stmt
1201
return
suite -> simple_stmt
1201
del
suite -> simple_stmt
1201
continue
suite -> simple_stmt
1201
assert
suite -> simple_stmt
1201
+
suite -> simple_stmt
1201
$
suite -> simple_stmt
1201
NAME
suite -> simple_stmt
1202
True
while_stmt -> while test : suite
1202
with
while_stmt -> while test : suite
1202
else
1665
1202
endsim
while_stmt -> while test : suite
1202
while
while_stmt -> while test : suite
1202
raise
while_stmt -> while test : suite
1202
if
while_stmt -> while test : suite
1202
nonlocal
while_stmt -> while test : suite
1202
~
while_stmt -> while test : suite
1202
conf
while_stmt -> while test : suite
1202
lambda
while_stmt -> while test : suite
1202
$
while_stmt -> while test : suite
1202
(
while_stmt -> while test : suite
1202
pass
while_stmt -> while test : suite
1202
continue
while_stmt -> while test : suite
1202
NEWLINE
while_stmt -> while test : suite
1202
NAME
while_stmt -> while test : suite
1202
def
while_stmt -> while test : suite
1202
class
while_stmt -> while test : suite
1202
break
while_stmt -> while test : suite
1202
return
while_stmt -> while test : suite
1202
begsim
while_stmt -> while test : suite
1202
try
while_stmt -> while test : suite
1202
False
while_stmt -> while test : suite
1202
yield
while_stmt -> while test : suite
1202
resetstats
while_stmt -> while test : suite
1202
global
while_stmt -> while test : suite
1202
-
while_stmt -> while test : suite
1202
[
while_stmt -> while test : suite
1202
for
while_stmt -> while test : suite
1202
not
while_stmt -> while test : suite
1202
{
while_stmt -> while test : suite
1202
@
while_stmt -> while test : suite
1202
None
while_stmt -> while test : suite
1202
NUMBER
while_stmt -> while test : suite
1202
STRING
while_stmt -> while test : suite
1202
+
while_stmt -> while test : suite
1202
assert
while_stmt -> while test : suite
1202
del
while_stmt -> while test : suite
1203
NEWLINE
1666
1204
INDENT
1667
1205
NEWLINE
lambdef -> lambda : test
1205
from
lambdef -> lambda : test
1206
NAME
221
1206
lambda
222
1206
atom_expr
223
1206
term
224
1206
atom
225
1206
-
226
1206
factor
227
1206
{
228
1206
True
229
1206
arith_expr
230
1206
False
231
1206
+
233
1206
and_expr
234
1206
[
235
1206
(
236
1206
STRING
237
1206
comparison
238
1206
shift_expr
239
1206
not_test
240
1206
power
241
1206
None
242
1206
xor_expr
243
1206
expr
244
1206
NUMBER
245
1206
and_test
246
1206
or_test
247
1206
~
248
1206
lambdef
249
1206
test
1668
1206
not
250
1207
>>
power -> atom_expr ** factor
1207
<=
power -> atom_expr ** factor
1207
//
power -> atom_expr ** factor
1207
/
power -> atom_expr ** factor
1207
&
power -> atom_expr ** factor
1207
if
power -> atom_expr ** factor
1207
not
power -> atom_expr ** factor
1207
<
power -> atom_expr ** factor
1207
!=
power -> atom_expr ** factor
1207
>
power -> atom_expr ** factor
1207
*
power -> atom_expr ** factor
1207
|
power -> atom_expr ** factor
1207
==
power -> atom_expr ** factor
1207
NEWLINE
power -> atom_expr ** factor
1207
from
power -> atom_expr ** factor
1207
is
power -> atom_expr ** factor
1207
and
power -> atom_expr ** factor
1207
<<
power -> atom_expr ** factor
1207
-
power -> atom_expr ** factor
1207
@
power -> atom_expr ** factor
1207
in
power -> atom_expr ** factor
1207
^
power -> atom_expr ** factor
1207
%
power -> atom_expr ** factor
1207
>=
power -> atom_expr ** factor
1207
+
power -> atom_expr ** factor
1207
or
power -> atom_expr ** factor
1208
and
arith_expr -> term + arith_expr
1208
<
arith_expr -> term + arith_expr
1208
|
arith_expr -> term + arith_expr
1208
>=
arith_expr -> term + arith_expr
1208
>>
arith_expr -> term + arith_expr
1208
from
arith_expr -> term + arith_expr
1208
if
arith_expr -> term + arith_expr
1208
>
arith_expr -> term + arith_expr
1208
in
arith_expr -> term + arith_expr
1208
or
arith_expr -> term + arith_expr
1208
<=
arith_expr -> term + arith_expr
1208
not
arith_expr -> term + arith_expr
1208
^
arith_expr -> term + arith_expr
1208
!=
arith_expr -> term + arith_expr
1208
&
arith_expr -> term + arith_expr
1208
==
arith_expr -> term + arith_expr
1208
NEWLINE
arith_expr -> term + arith_expr
1208
<<
arith_expr -> term + arith_expr
1208
is
arith_expr -> term + arith_expr
1209
from
arith_expr -> term - arith_expr
1209
NEWLINE
arith_expr -> term - arith_expr
1209
<<
arith_expr -> term - arith_expr
1209
if
arith_expr -> term - arith_expr
1209
<
arith_expr -> term - arith_expr
1209
<=
arith_expr -> term - arith_expr
1209
and
arith_expr -> term - arith_expr
1209
in
arith_expr -> term - arith_expr
1209
&
arith_expr -> term - arith_expr
1209
|
arith_expr -> term - arith_expr
1209
==
arith_expr -> term - arith_expr
1209
is
arith_expr -> term - arith_expr
1209
>>
arith_expr -> term - arith_expr
1209
!=
arith_expr -> term - arith_expr
1209
>
arith_expr -> term - arith_expr
1209
or
arith_expr -> term - arith_expr
1209
>=
arith_expr -> term - arith_expr
1209
^
arith_expr -> term - arith_expr
1209
not
arith_expr -> term - arith_expr
1210
*
trailer_expr -> trailer trailer_expr
1210
+
trailer_expr -> trailer trailer_expr
1210
if
trailer_expr -> trailer trailer_expr
1210
-
trailer_expr -> trailer trailer_expr
1210
<=
trailer_expr -> trailer trailer_expr
1210
|
trailer_expr -> trailer trailer_expr
1210
@
trailer_expr -> trailer trailer_expr
1210
%
trailer_expr -> trailer trailer_expr
1210
in
trailer_expr -> trailer trailer_expr
1210
<<
trailer_expr -> trailer trailer_expr
1210
**
trailer_expr -> trailer trailer_expr
1210
==
trailer_expr -> trailer trailer_expr
1210
not
trailer_expr -> trailer trailer_expr
1210
from
trailer_expr -> trailer trailer_expr
1210
and
trailer_expr -> trailer trailer_expr
1210
//
trailer_expr -> trailer trailer_expr
1210
NEWLINE
trailer_expr -> trailer trailer_expr
1210
^
trailer_expr -> trailer trailer_expr
1210
or
trailer_expr -> trailer trailer_expr
1210
>
trailer_expr -> trailer trailer_expr
1210
!=
trailer_expr -> trailer trailer_expr
1210
is
trailer_expr -> trailer trailer_expr
1210
&
trailer_expr -> trailer trailer_expr
1210
>>
trailer_expr -> trailer trailer_expr
1210
/
trailer_expr -> trailer trailer_expr
1210
<
trailer_expr -> trailer trailer_expr
1210
>=
trailer_expr -> trailer trailer_expr
1211
]
1669
1212
^
trailer -> . NAME
1212
%
trailer -> . NAME
1212
**
trailer -> . NAME
1212
>>
trailer -> . NAME
1212
>
trailer -> . NAME
1212
in
trailer -> . NAME
1212
[
trailer -> . NAME
1212
is
trailer -> . NAME
1212
from
trailer -> . NAME
1212
<<
trailer -> . NAME
1212
or
trailer -> . NAME
1212
and
trailer -> . NAME
1212
>=
trailer -> . NAME
1212
|
trailer -> . NAME
1212
==
trailer -> . NAME
1212
.
trailer -> . NAME
1212
+
trailer -> . NAME
1212
<
trailer -> . NAME
1212
-
trailer -> . NAME
1212
&
trailer -> . NAME
1212
NEWLINE
trailer -> . NAME
1212
*
trailer -> . NAME
1212
if
trailer -> . NAME
1212
<=
trailer -> . NAME
1212
(
trailer -> . NAME
1212
not
trailer -> . NAME
1212
//
trailer -> . NAME
1212
@
trailer -> . NAME
1212
!=
trailer -> . NAME
1212
/
trailer -> . NAME
1213
)
1670
1214
[
trailer -> ( )
1214
not
trailer -> ( )
1214
==
trailer -> ( )
1214
**
trailer -> ( )
1214
<=
trailer -> ( )
1214
//
trailer -> ( )
1214
<<
trailer -> ( )
1214
<
trailer -> ( )
1214
from
trailer -> ( )
1214
in
trailer -> ( )
1214
or
trailer -> ( )
1214
-
trailer -> ( )
1214
+
trailer -> ( )
1214
&
trailer -> ( )
1214
*
trailer -> ( )
1214
is
trailer -> ( )
1214
>
trailer -> ( )
1214
!=
trailer -> ( )
1214
>>
trailer -> ( )
1214
%
trailer -> ( )
1214
|
trailer -> ( )
1214
.
trailer -> ( )
1214
>=
trailer -> ( )
1214
(
trailer -> ( )
1214
and
trailer -> ( )
1214
@
trailer -> ( )
1214
NEWLINE
trailer -> ( )
1214
/
trailer -> ( )
1214
^
trailer -> ( )
1214
if
trailer -> ( )
1215
NEWLINE
term -> factor % term
1215
|
term -> factor % term
1215
<<
term -> factor % term
1215
^
term -> factor % term
1215
==
term -> factor % term
1215
from
term -> factor % term
1215
-
term -> factor % term
1215
is
term -> factor % term
1215
>=
term -> factor % term
1215
>>
term -> factor % term
1215
>
term -> factor % term
1215
in
term -> factor % term
1215
&
term -> factor % term
1215
if
term -> factor % term
1215
<
term -> factor % term
1215
!=
term -> factor % term
1215
<=
term -> factor % term
1215
not
term -> factor % term
1215
+
term -> factor % term
1215
and
term -> factor % term
1215
or
term -> factor % term
1216
from
term -> factor / term
1216
>>
term -> factor / term
1216
^
term -> factor / term
1216
NEWLINE
term -> factor / term
1216
or
term -> factor / term
1216
+
term -> factor / term
1216
if
term -> factor / term
1216
>=
term -> factor / term
1216
>
term -> factor / term
1216
-
term -> factor / term
1216
and
term -> factor / term
1216
not
term -> factor / term
1216
<
term -> factor / term
1216
in
term -> factor / term
1216
==
term -> factor / term
1216
<=
term -> factor / term
1216
is
term -> factor / term
1216
&
term -> factor / term
1216
<<
term -> factor / term
1216
!=
term -> factor / term
1216
|
term -> factor / term
1217
from
term -> factor * term
1217
NEWLINE
term -> factor * term
1217
-
term -> factor * term
1217
&
term -> factor * term
1217
and
term -> factor * term
1217
!=
term -> factor * term
1217
|
term -> factor * term
1217
<<
term -> factor * term
1217
<
term -> factor * term
1217
if
term -> factor * term
1217
^
term -> factor * term
1217
+
term -> factor * term
1217
in
term -> factor * term
1217
or
term -> factor * term
1217
>>
term -> factor * term
1217
not
term -> factor * term
1217
==
term -> factor * term
1217
>=
term -> factor * term
1217
<=
term -> factor * term
1217
>
term -> factor * term
1217
is
term -> factor * term
1218
if
term -> factor // term
1218
<
term -> factor // term
1218
and
term -> factor // term
1218
in
term -> factor // term
1218
>>
term -> factor // term
1218
<=
term -> factor // term
1218
!=
term -> factor // term
1218
^
term -> factor // term
1218
|
term -> factor // term
1218
or
term -> factor // term
1218
NEWLINE
term -> factor // term
1218
>=
term -> factor // term
1218
&
term -> factor // term
1218
>
term -> factor // term
1218
+
term -> factor // term
1218
is
term -> factor // term
1218
from
term -> factor // term
1218
not
term -> factor // term
1218
<<
term -> factor // term
1218
-
term -> factor // term
1218
==
term -> factor // term
1219
>>
term -> factor @ term
1219
^
term -> factor @ term
1219
&
term -> factor @ term
1219
|
term -> factor @ term
1219
if
term -> factor @ term
1219
is
term -> factor @ term
1219
<
term -> factor @ term
1219
<<
term -> factor @ term
1219
NEWLINE
term -> factor @ term
1219
and
term -> factor @ term
1219
==
term -> factor @ term
1219
>
term -> factor @ term
1219
in
term -> factor @ term
1219
from
term -> factor @ term
1219
>=
term -> factor @ term
1219
+
term -> factor @ term
1219
not
term -> factor @ term
1219
!=
term -> factor @ term
1219
<=
term -> factor @ term
1219
or
term -> factor @ term
1219
-
term -> factor @ term
1220
NEWLINE
shift_expr -> arith_expr >> shift_expr
1220
from
shift_expr -> arith_expr >> shift_expr
1220
<
shift_expr -> arith_expr >> shift_expr
1220
^
shift_expr -> arith_expr >> shift_expr
1220
in
shift_expr -> arith_expr >> shift_expr
1220
==
shift_expr -> arith_expr >> shift_expr
1220
!=
shift_expr -> arith_expr >> shift_expr
1220
>=
shift_expr -> arith_expr >> shift_expr
1220
not
shift_expr -> arith_expr >> shift_expr
1220
and
shift_expr -> arith_expr >> shift_expr
1220
is
shift_expr -> arith_expr >> shift_expr
1220
>
shift_expr -> arith_expr >> shift_expr
1220
&
shift_expr -> arith_expr >> shift_expr
1220
|
shift_expr -> arith_expr >> shift_expr
1220
<=
shift_expr -> arith_expr >> shift_expr
1220
or
shift_expr -> arith_expr >> shift_expr
1220
if
shift_expr -> arith_expr >> shift_expr
1221
if
shift_expr -> arith_expr << shift_expr
1221
from
shift_expr -> arith_expr << shift_expr
1221
&
shift_expr -> arith_expr << shift_expr
1221
>=
shift_expr -> arith_expr << shift_expr
1221
<=
shift_expr -> arith_expr << shift_expr
1221
or
shift_expr -> arith_expr << shift_expr
1221
in
shift_expr -> arith_expr << shift_expr
1221
!=
shift_expr -> arith_expr << shift_expr
1221
^
shift_expr -> arith_expr << shift_expr
1221
<
shift_expr -> arith_expr << shift_expr
1221
|
shift_expr -> arith_expr << shift_expr
1221
==
shift_expr -> arith_expr << shift_expr
1221
is
shift_expr -> arith_expr << shift_expr
1221
and
shift_expr -> arith_expr << shift_expr
1221
NEWLINE
shift_expr -> arith_expr << shift_expr
1221
>
shift_expr -> arith_expr << shift_expr
1221
not
shift_expr -> arith_expr << shift_expr
1222
NEWLINE
raise_stmt -> raise test from test
1223
>=
xor_expr -> and_expr ^ xor_expr
1223
>
xor_expr -> and_expr ^ xor_expr
1223
or
xor_expr -> and_expr ^ xor_expr
1223
and
xor_expr -> and_expr ^ xor_expr
1223
<=
xor_expr -> and_expr ^ xor_expr
1223
in
xor_expr -> and_expr ^ xor_expr
1223
==
xor_expr -> and_expr ^ xor_expr
1223
if
xor_expr -> and_expr ^ xor_expr
1223
!=
xor_expr -> and_expr ^ xor_expr
1223
not
xor_expr -> and_expr ^ xor_expr
1223
<
xor_expr -> and_expr ^ xor_expr
1223
from
xor_expr -> and_expr ^ xor_expr
1223
is
xor_expr -> and_expr ^ xor_expr
1223
NEWLINE
xor_expr -> and_expr ^ xor_expr
1223
|
xor_expr -> and_expr ^ xor_expr
1224
<<
atom -> [ test_list_comp ]
1224
>>
atom -> [ test_list_comp ]
1224
+
atom -> [ test_list_comp ]
1224
-
atom -> [ test_list_comp ]
1224
not
atom -> [ test_list_comp ]
1224
<=
atom -> [ test_list_comp ]
1224
is
atom -> [ test_list_comp ]
1224
[
atom -> [ test_list_comp ]
1224
*
atom -> [ test_list_comp ]
1224
==
atom -> [ test_list_comp ]
1224
@
atom -> [ test_list_comp ]
1224
NEWLINE
atom -> [ test_list_comp ]
1224
>
atom -> [ test_list_comp ]
1224
%
atom -> [ test_list_comp ]
1224
if
atom -> [ test_list_comp ]
1224
>=
atom -> [ test_list_comp ]
1224
from
atom -> [ test_list_comp ]
1224
//
atom -> [ test_list_comp ]
1224
.
atom -> [ test_list_comp ]
1224
in
atom -> [ test_list_comp ]
1224
**
atom -> [ test_list_comp ]
1224
and
atom -> [ test_list_comp ]
1224
/
atom -> [ test_list_comp ]
1224
or
atom -> [ test_list_comp ]
1224
!=
atom -> [ test_list_comp ]
1224
<
atom -> [ test_list_comp ]
1224
^
atom -> [ test_list_comp ]
1224
&
atom -> [ test_list_comp ]
1224
(
atom -> [ test_list_comp ]
1224
|
atom -> [ test_list_comp ]
1225
@
atom -> ( test_list_comp )
1225
<
atom -> ( test_list_comp )
1225
and
atom -> ( test_list_comp )
1225
if
atom -> ( test_list_comp )
1225
&
atom -> ( test_list_comp )
1225
*
atom -> ( test_list_comp )
1225
%
atom -> ( test_list_comp )
1225
[
atom -> ( test_list_comp )
1225
//
atom -> ( test_list_comp )
1225
<<
atom -> ( test_list_comp )
1225
.
atom -> ( test_list_comp )
1225
/
atom -> ( test_list_comp )
1225
>=
atom -> ( test_list_comp )
1225
from
atom -> ( test_list_comp )
1225
or
atom -> ( test_list_comp )
1225
>
atom -> ( test_list_comp )
1225
-
atom -> ( test_list_comp )
1225
|
atom -> ( test_list_comp )
1225
**
atom -> ( test_list_comp )
1225
is
atom -> ( test_list_comp )
1225
==
atom -> ( test_list_comp )
1225
not
atom -> ( test_list_comp )
1225
in
atom -> ( test_list_comp )
1225
!=
atom -> ( test_list_comp )
1225
^
atom -> ( test_list_comp )
1225
(
atom -> ( test_list_comp )
1225
NEWLINE
atom -> ( test_list_comp )
1225
<=
atom -> ( test_list_comp )
1225
+
atom -> ( test_list_comp )
1225
>>
atom -> ( test_list_comp )
1226
>=
and_expr -> shift_expr & and_expr
1226
!=
and_expr -> shift_expr & and_expr
1226
or
and_expr -> shift_expr & and_expr
1226
is
and_expr -> shift_expr & and_expr
1226
^
and_expr -> shift_expr & and_expr
1226
==
and_expr -> shift_expr & and_expr
1226
if
and_expr -> shift_expr & and_expr
1226
not
and_expr -> shift_expr & and_expr
1226
<
and_expr -> shift_expr & and_expr
1226
>
and_expr -> shift_expr & and_expr
1226
in
and_expr -> shift_expr & and_expr
1226
and
and_expr -> shift_expr & and_expr
1226
|
and_expr -> shift_expr & and_expr
1226
NEWLINE
and_expr -> shift_expr & and_expr
1226
from
and_expr -> shift_expr & and_expr
1226
<=
and_expr -> shift_expr & and_expr
1227
NEWLINE
and_test -> not_test and and_test
1227
or
and_test -> not_test and and_test
1227
from
and_test -> not_test and and_test
1227
if
and_test -> not_test and and_test
1228
NEWLINE
expr -> xor_expr | expr
1228
is
expr -> xor_expr | expr
1228
or
expr -> xor_expr | expr
1228
>
expr -> xor_expr | expr
1228
and
expr -> xor_expr | expr
1228
in
expr -> xor_expr | expr
1228
if
expr -> xor_expr | expr
1228
<=
expr -> xor_expr | expr
1228
from
expr -> xor_expr | expr
1228
not
expr -> xor_expr | expr
1228
==
expr -> xor_expr | expr
1228
>=
expr -> xor_expr | expr
1228
<
expr -> xor_expr | expr
1228
!=
expr -> xor_expr | expr
1229
NEWLINE
comparison -> expr comp_op comparison
1229
from
comparison -> expr comp_op comparison
1229
and
comparison -> expr comp_op comparison
1229
if
comparison -> expr comp_op comparison
1229
or
comparison -> expr comp_op comparison
1230
from
or_test -> and_test or or_test
1230
if
or_test -> and_test or or_test
1230
NEWLINE
or_test -> and_test or or_test
1231
else
1671
1232
)
1672
1233
:
1673
1234
False
suite -> simple_stmt
1234
if
suite -> simple_stmt
1234
NUMBER
suite -> simple_stmt
1234
NEWLINE
suite -> simple_stmt
1234
{
suite -> simple_stmt
1234
@
suite -> simple_stmt
1234
begsim
suite -> simple_stmt
1234
endsim
suite -> simple_stmt
1234
nonlocal
suite -> simple_stmt
1234
STRING
suite -> simple_stmt
1234
(
suite -> simple_stmt
1234
global
suite -> simple_stmt
1234
yield
suite -> simple_stmt
1234
try
suite -> simple_stmt
1234
conf
suite -> simple_stmt
1234
for
suite -> simple_stmt
1234
not
suite -> simple_stmt
1234
while
suite -> simple_stmt
1234
lambda
suite -> simple_stmt
1234
None
suite -> simple_stmt
1234
resetstats
suite -> simple_stmt
1234
break
suite -> simple_stmt
1234
True
suite -> simple_stmt
1234
~
suite -> simple_stmt
1234
-
suite -> simple_stmt
1234
pass
suite -> simple_stmt
1234
def
suite -> simple_stmt
1234
raise
suite -> simple_stmt
1234
with
suite -> simple_stmt
1234
class
suite -> simple_stmt
1234
[
suite -> simple_stmt
1234
return
suite -> simple_stmt
1234
del
suite -> simple_stmt
1234
continue
suite -> simple_stmt
1234
assert
suite -> simple_stmt
1234
+
suite -> simple_stmt
1234
$
suite -> simple_stmt
1234
NAME
suite -> simple_stmt
1235
$
classdef -> class NAME : suite
1235
resetstats
classdef -> class NAME : suite
1235
with
classdef -> class NAME : suite
1235
def
classdef -> class NAME : suite
1235
True
classdef -> class NAME : suite
1235
lambda
classdef -> class NAME : suite
1235
None
classdef -> class NAME : suite
1235
conf
classdef -> class NAME : suite
1235
NAME
classdef -> class NAME : suite
1235
@
classdef -> class NAME : suite
1235
False
classdef -> class NAME : suite
1235
nonlocal
classdef -> class NAME : suite
1235
class
classdef -> class NAME : suite
1235
yield
classdef -> class NAME : suite
1235
continue
classdef -> class NAME : suite
1235
break
classdef -> class NAME : suite
1235
try
classdef -> class NAME : suite
1235
~
classdef -> class NAME : suite
1235
STRING
classdef -> class NAME : suite
1235
{
classdef -> class NAME : suite
1235
if
classdef -> class NAME : suite
1235
not
classdef -> class NAME : suite
1235
global
classdef -> class NAME : suite
1235
while
classdef -> class NAME : suite
1235
return
classdef -> class NAME : suite
1235
endsim
classdef -> class NAME : suite
1235
pass
classdef -> class NAME : suite
1235
[
classdef -> class NAME : suite
1235
(
classdef -> class NAME : suite
1235
-
classdef -> class NAME : suite
1235
del
classdef -> class NAME : suite
1235
raise
classdef -> class NAME : suite
1235
assert
classdef -> class NAME : suite
1235
NUMBER
classdef -> class NAME : suite
1235
for
classdef -> class NAME : suite
1235
+
classdef -> class NAME : suite
1235
begsim
classdef -> class NAME : suite
1235
NEWLINE
classdef -> class NAME : suite
1236
INDENT
1674
1237
else
1675
1237
finally
1676
1237
if
try_stmt -> try : suite except_clause
1237
resetstats
try_stmt -> try : suite except_clause
1237
class
try_stmt -> try : suite except_clause
1237
NEWLINE
try_stmt -> try : suite except_clause
1237
conf
try_stmt -> try : suite except_clause
1237
-
try_stmt -> try : suite except_clause
1237
+
try_stmt -> try : suite except_clause
1237
try
try_stmt -> try : suite except_clause
1237
STRING
try_stmt -> try : suite except_clause
1237
False
try_stmt -> try : suite except_clause
1237
for
try_stmt -> try : suite except_clause
1237
~
try_stmt -> try : suite except_clause
1237
not
try_stmt -> try : suite except_clause
1237
while
try_stmt -> try : suite except_clause
1237
[
try_stmt -> try : suite except_clause
1237
True
try_stmt -> try : suite except_clause
1237
NUMBER
try_stmt -> try : suite except_clause
1237
endsim
try_stmt -> try : suite except_clause
1237
NAME
try_stmt -> try : suite except_clause
1237
{
try_stmt -> try : suite except_clause
1237
global
try_stmt -> try : suite except_clause
1237
pass
try_stmt -> try : suite except_clause
1237
None
try_stmt -> try : suite except_clause
1237
begsim
try_stmt -> try : suite except_clause
1237
with
try_stmt -> try : suite except_clause
1237
(
try_stmt -> try : suite except_clause
1237
nonlocal
try_stmt -> try : suite except_clause
1237
assert
try_stmt -> try : suite except_clause
1237
yield
try_stmt -> try : suite except_clause
1237
lambda
try_stmt -> try : suite except_clause
1237
@
try_stmt -> try : suite except_clause
1237
def
try_stmt -> try : suite except_clause
1237
return
try_stmt -> try : suite except_clause
1237
del
try_stmt -> try : suite except_clause
1237
continue
try_stmt -> try : suite except_clause
1237
break
try_stmt -> try : suite except_clause
1237
raise
try_stmt -> try : suite except_clause
1237
$
try_stmt -> try : suite except_clause
1238
NAME
1677
1238
atom_expr
1678
1238
test
1679
1238
term
1680
1238
atom
1681
1238
-
1682
1238
factor
1683
1238
:
1684
1238
arith_expr
1685
1238
True
1686
1238
False
1687
1238
{
1688
1238
(
1689
1238
+
1690
1238
and_expr
1691
1238
and_test
1692
1238
[
1693
1238
STRING
1694
1238
xor_expr
1695
1238
comparison
1696
1238
shift_expr
1697
1238
not_test
1698
1238
power
1699
1238
None
1700
1238
expr
1701
1238
NUMBER
1702
1238
~
1703
1238
lambda
1704
1238
or_test
1705
1238
not
1706
1238
lambdef
1707
1239
True
1
1239
if
1708
1239
decorated
1709
1239
atom
4
1239
atom_expr
5
1239
while_stmt
1710
1239
try
1711
1239
shift_expr
7
1239
arith_expr
8
1239
and_expr
9
1239
conf
1712
1239
factor
11
1239
NAME
12
1239
(
13
1239
for
1713
1239
[
15
1239
resetstats
16
1239
compound_stmt
1714
1239
while
1715
1239
raise
19
1239
class
1716
1239
small_stmt
1717
1239
or_test
23
1239
for_stmt
1718
1239
try_stmt
1719
1239
def
1720
1239
False
27
1239
comparison
28
1239
term
29
1239
simple_stmt
1721
1239
+
31
1239
power
32
1239
not_test
33
1239
None
34
1239
with
1722
1239
classdef
1723
1239
lambdef
37
1239
if_stmt
1724
1239
NUMBER
39
1239
xor_expr
40
1239
{
41
1239
not
42
1239
-
43
1239
funcdef
1725
1239
decorators
1726
1239
STRING
46
1239
test
47
1239
and_test
48
1239
begsim
49
1239
expr
50
1239
with_stmt
1727
1239
lambda
53
1239
return
54
1239
~
55
1239
confdef
1728
1239
return_stmt
56
1239
endsim
57
1239
@
58
1239
raise_stmt
59
1239
global_stmt
61
1239
continue_stmt
62
1239
assert
63
1239
break_stmt
64
1239
del
66
1239
global
67
1239
pass_stmt
68
1239
test_list
70
1239
flow_stmt
71
1239
yield_stmt
72
1239
stmt
1729
1239
pass
73
1239
continue
74
1239
del_stmt
75
1239
nonlocal
76
1239
decorator
77
1239
assert_stmt
78
1239
stat_stmt
79
1239
nonlocal_stmt
80
1239
expr_stmt
81
1239
break
82
1239
yield
83
1239
stmt_list
1730
1239
sim_stmt
84
1240
except
simple_stmt -> small_stmt NEWLINE
1241
~
710
1241
atom_expr
685
1241
atom
686
1241
False
692
1241
-
687
1241
(
698
1241
NUMBER
708
1241
True
690
1241
factor
1731
1241
+
695
1241
NAME
693
1241
{
694
1241
None
707
1241
[
697
1241
STRING
699
1241
power
704
1242
trailer
1242
1242
trailer_expr
1732
1242
[
1244
1242
or
trailer_expr -> 
1242
.
1245
1242
(
1246
1242
not
trailer_expr -> 
1242
in
trailer_expr -> 
1242
is
trailer_expr -> 
1242
>=
trailer_expr -> 
1242
-
trailer_expr -> 
1242
@
trailer_expr -> 
1242
<=
trailer_expr -> 
1242
^
trailer_expr -> 
1242
*
trailer_expr -> 
1242
**
trailer_expr -> 
1242
>
trailer_expr -> 
1242
==
trailer_expr -> 
1242
>>
trailer_expr -> 
1242
<<
trailer_expr -> 
1242
/
trailer_expr -> 
1242
//
trailer_expr -> 
1242
!=
trailer_expr -> 
1242
<
trailer_expr -> 
1242
&
trailer_expr -> 
1242
|
trailer_expr -> 
1242
else
trailer_expr -> 
1242
and
trailer_expr -> 
1242
+
trailer_expr -> 
1242
%
trailer_expr -> 
1243
|
atom_expr -> atom trailer_expr
1243
*
atom_expr -> atom trailer_expr
1243
-
atom_expr -> atom trailer_expr
1243
not
atom_expr -> atom trailer_expr
1243
in
atom_expr -> atom trailer_expr
1243
and
atom_expr -> atom trailer_expr
1243
^
atom_expr -> atom trailer_expr
1243
or
atom_expr -> atom trailer_expr
1243
<=
atom_expr -> atom trailer_expr
1243
<
atom_expr -> atom trailer_expr
1243
>>
atom_expr -> atom trailer_expr
1243
//
atom_expr -> atom trailer_expr
1243
!=
atom_expr -> atom trailer_expr
1243
<<
atom_expr -> atom trailer_expr
1243
+
atom_expr -> atom trailer_expr
1243
else
atom_expr -> atom trailer_expr
1243
>
atom_expr -> atom trailer_expr
1243
/
atom_expr -> atom trailer_expr
1243
==
atom_expr -> atom trailer_expr
1243
%
atom_expr -> atom trailer_expr
1243
&
atom_expr -> atom trailer_expr
1243
@
atom_expr -> atom trailer_expr
1243
>=
atom_expr -> atom trailer_expr
1243
is
atom_expr -> atom trailer_expr
1243
**
atom_expr -> atom trailer_expr
1244
NAME
461
1244
atom_expr
462
1244
term
463
1244
atom
464
1244
-
465
1244
factor
466
1244
[
467
1244
True
468
1244
arith_expr
469
1244
False
470
1244
{
471
1244
(
472
1244
+
473
1244
and_expr
474
1244
and_test
475
1244
STRING
476
1244
subscriptlist
1733
1244
comparison
478
1244
shift_expr
479
1244
not_test
480
1244
power
481
1244
None
482
1244
xor_expr
483
1244
expr
484
1244
NUMBER
485
1244
test
486
1244
~
487
1244
or_test
488
1244
not
489
1244
lambdef
490
1244
:
maybe_test -> 
1244
lambda
491
1244
subscript
492
1244
maybe_test
493
1245
NAME
1734
1246
NAME
496
1246
atom_expr
497
1246
atom
498
1246
-
499
1246
arglist
1735
1246
factor
501
1246
*
502
1246
[
503
1246
True
504
1246
arith_expr
505
1246
xor_expr
506
1246
False
507
1246
**
508
1246
{
509
1246
+
510
1246
)
1736
1246
and_expr
512
1246
(
513
1246
STRING
514
1246
power
515
1246
term
516
1246
comparison
517
1246
shift_expr
518
1246
argument
519
1246
not_test
520
1246
or_test
521
1246
lambdef
522
1246
lambda
523
1246
None
524
1246
test
525
1246
expr
526
1246
NUMBER
527
1246
and_test
528
1246
~
529
1246
not
530
1247
else
factor -> - factor
1247
>>
factor -> - factor
1247
>
factor -> - factor
1247
is
factor -> - factor
1247
//
factor -> - factor
1247
or
factor -> - factor
1247
not
factor -> - factor
1247
-
factor -> - factor
1247
<<
factor -> - factor
1247
>=
factor -> - factor
1247
/
factor -> - factor
1247
<=
factor -> - factor
1247
<
factor -> - factor
1247
in
factor -> - factor
1247
*
factor -> - factor
1247
|
factor -> - factor
1247
!=
factor -> - factor
1247
&
factor -> - factor
1247
and
factor -> - factor
1247
^
factor -> - factor
1247
+
factor -> - factor
1247
%
factor -> - factor
1247
==
factor -> - factor
1247
@
factor -> - factor
1248
atom_expr
685
1248
atom
686
1248
-
687
1248
factor
688
1248
True
690
1248
False
692
1248
NAME
693
1248
{
694
1248
+
695
1248
[
697
1248
(
698
1248
STRING
699
1248
term
1737
1248
power
704
1248
None
707
1248
NUMBER
708
1248
~
710
1249
atom_expr
685
1249
atom
686
1249
-
687
1249
factor
688
1249
True
690
1249
False
692
1249
NAME
693
1249
{
694
1249
+
695
1249
[
697
1249
(
698
1249
STRING
699
1249
power
704
1249
term
1738
1249
None
707
1249
NUMBER
708
1249
~
710
1250
term
1739
1250
atom_expr
685
1250
atom
686
1250
-
687
1250
factor
688
1250
True
690
1250
False
692
1250
NAME
693
1250
{
694
1250
+
695
1250
[
697
1250
(
698
1250
STRING
699
1250
power
704
1250
None
707
1250
NUMBER
708
1250
~
710
1251
atom_expr
685
1251
atom
686
1251
-
687
1251
factor
688
1251
True
690
1251
False
692
1251
NAME
693
1251
{
694
1251
+
695
1251
[
697
1251
(
698
1251
STRING
699
1251
term
1740
1251
power
704
1251
None
707
1251
NUMBER
708
1251
~
710
1252
atom_expr
685
1252
atom
686
1252
-
687
1252
factor
688
1252
True
690
1252
False
692
1252
NAME
693
1252
{
694
1252
+
695
1252
[
697
1252
(
698
1252
STRING
699
1252
term
1741
1252
power
704
1252
None
707
1252
NUMBER
708
1252
~
710
1253
atom_expr
685
1253
atom
686
1253
-
687
1253
factor
688
1253
and_test
689
1253
True
690
1253
arith_expr
691
1253
False
692
1253
NAME
693
1253
{
694
1253
+
695
1253
and_expr
696
1253
[
697
1253
(
698
1253
STRING
699
1253
term
700
1253
comparison
701
1253
shift_expr
702
1253
not_test
703
1253
power
704
1253
xor_expr
706
1253
None
707
1253
NUMBER
708
1253
expr
709
1253
~
710
1253
or_test
1742
1253
not
711
1254
atom_expr
685
1254
atom
686
1254
-
687
1254
factor
688
1254
True
690
1254
arith_expr
691
1254
False
692
1254
NAME
693
1254
{
694
1254
+
695
1254
[
697
1254
(
698
1254
STRING
699
1254
term
700
1254
shift_expr
1743
1254
power
704
1254
None
707
1254
NUMBER
708
1254
~
710
1255
atom_expr
685
1255
atom
686
1255
-
687
1255
factor
688
1255
True
690
1255
arith_expr
691
1255
False
692
1255
NAME
693
1255
{
694
1255
shift_expr
1744
1255
+
695
1255
[
697
1255
(
698
1255
STRING
699
1255
term
700
1255
power
704
1255
None
707
1255
NUMBER
708
1255
~
710
1256
%
atom -> { }
1256
[
atom -> { }
1256
not
atom -> { }
1256
^
atom -> { }
1256
or
atom -> { }
1256
-
atom -> { }
1256
>=
atom -> { }
1256
<<
atom -> { }
1256
/
atom -> { }
1256
<=
atom -> { }
1256
|
atom -> { }
1256
>>
atom -> { }
1256
@
atom -> { }
1256
is
atom -> { }
1256
and
atom -> { }
1256
else
atom -> { }
1256
==
atom -> { }
1256
in
atom -> { }
1256
**
atom -> { }
1256
&
atom -> { }
1256
>
atom -> { }
1256
//
atom -> { }
1256
(
atom -> { }
1256
+
atom -> { }
1256
<
atom -> { }
1256
!=
atom -> { }
1256
.
atom -> { }
1256
*
atom -> { }
1257
>>
factor -> + factor
1257
>=
factor -> + factor
1257
or
factor -> + factor
1257
==
factor -> + factor
1257
-
factor -> + factor
1257
*
factor -> + factor
1257
<
factor -> + factor
1257
^
factor -> + factor
1257
&
factor -> + factor
1257
@
factor -> + factor
1257
else
factor -> + factor
1257
|
factor -> + factor
1257
<<
factor -> + factor
1257
%
factor -> + factor
1257
not
factor -> + factor
1257
//
factor -> + factor
1257
and
factor -> + factor
1257
in
factor -> + factor
1257
!=
factor -> + factor
1257
>
factor -> + factor
1257
/
factor -> + factor
1257
is
factor -> + factor
1257
+
factor -> + factor
1257
<=
factor -> + factor
1258
atom_expr
685
1258
atom
686
1258
-
687
1258
factor
688
1258
True
690
1258
arith_expr
691
1258
False
692
1258
NAME
693
1258
{
694
1258
+
695
1258
and_expr
696
1258
[
697
1258
(
698
1258
STRING
699
1258
term
700
1258
xor_expr
1745
1258
shift_expr
702
1258
power
704
1258
None
707
1258
NUMBER
708
1258
~
710
1259
]
1746
1260
and
atom -> [ ]
1260
<<
atom -> [ ]
1260
//
atom -> [ ]
1260
*
atom -> [ ]
1260
+
atom -> [ ]
1260
^
atom -> [ ]
1260
==
atom -> [ ]
1260
>>
atom -> [ ]
1260
/
atom -> [ ]
1260
in
atom -> [ ]
1260
>
atom -> [ ]
1260
<=
atom -> [ ]
1260
.
atom -> [ ]
1260
%
atom -> [ ]
1260
&
atom -> [ ]
1260
-
atom -> [ ]
1260
>=
atom -> [ ]
1260
not
atom -> [ ]
1260
|
atom -> [ ]
1260
@
atom -> [ ]
1260
is
atom -> [ ]
1260
or
atom -> [ ]
1260
!=
atom -> [ ]
1260
else
atom -> [ ]
1260
**
atom -> [ ]
1260
<
atom -> [ ]
1260
(
atom -> [ ]
1260
[
atom -> [ ]
1261
|
atom -> ( )
1261
**
atom -> ( )
1261
>>
atom -> ( )
1261
-
atom -> ( )
1261
%
atom -> ( )
1261
(
atom -> ( )
1261
not
atom -> ( )
1261
+
atom -> ( )
1261
>=
atom -> ( )
1261
&
atom -> ( )
1261
*
atom -> ( )
1261
else
atom -> ( )
1261
!=
atom -> ( )
1261
<=
atom -> ( )
1261
and
atom -> ( )
1261
<
atom -> ( )
1261
^
atom -> ( )
1261
==
atom -> ( )
1261
in
atom -> ( )
1261
/
atom -> ( )
1261
>
atom -> ( )
1261
//
atom -> ( )
1261
.
atom -> ( )
1261
or
atom -> ( )
1261
@
atom -> ( )
1261
is
atom -> ( )
1261
<<
atom -> ( )
1261
[
atom -> ( )
1262
)
1747
1263
atom_expr
685
1263
atom
686
1263
-
687
1263
factor
688
1263
True
690
1263
False
692
1263
NAME
693
1263
{
694
1263
+
695
1263
[
697
1263
(
698
1263
STRING
699
1263
term
700
1263
arith_expr
1748
1263
power
704
1263
None
707
1263
NUMBER
708
1263
~
710
1264
atom_expr
685
1264
atom
686
1264
-
687
1264
factor
688
1264
True
690
1264
False
692
1264
NAME
693
1264
{
694
1264
+
695
1264
[
697
1264
(
698
1264
STRING
699
1264
term
700
1264
arith_expr
1749
1264
power
704
1264
None
707
1264
NUMBER
708
1264
~
710
1265
atom_expr
685
1265
atom
686
1265
-
687
1265
factor
688
1265
True
690
1265
arith_expr
691
1265
False
692
1265
NAME
693
1265
{
694
1265
+
695
1265
[
697
1265
(
698
1265
STRING
699
1265
term
700
1265
shift_expr
702
1265
power
704
1265
and_expr
1750
1265
None
707
1265
NUMBER
708
1265
~
710
1266
atom_expr
685
1266
atom
686
1266
-
687
1266
factor
688
1266
True
690
1266
arith_expr
691
1266
False
692
1266
NAME
693
1266
{
694
1266
+
695
1266
and_expr
696
1266
[
697
1266
(
698
1266
STRING
699
1266
term
700
1266
comparison
701
1266
shift_expr
702
1266
not_test
703
1266
power
704
1266
xor_expr
706
1266
None
707
1266
NUMBER
708
1266
expr
709
1266
~
710
1266
not
711
1266
and_test
1751
1267
NAME
12
1267
True
1
1267
atom_expr
5
1267
term
29
1267
atom
4
1267
factor
11
1267
shift_expr
7
1267
arith_expr
8
1267
False
27
1267
and_expr
9
1267
xor_expr
40
1267
{
41
1267
(
13
1267
[
15
1267
STRING
46
1267
comparison
28
1267
or_test
23
1267
~
55
1267
-
43
1267
lambda
53
1267
+
31
1267
not_test
33
1267
and_test
48
1267
power
32
1267
None
34
1267
test
1752
1267
lambdef
37
1267
not
42
1267
NUMBER
39
1267
expr
50
1268
atom_expr
685
1268
atom
686
1268
-
687
1268
factor
688
1268
True
690
1268
arith_expr
691
1268
False
692
1268
NAME
693
1268
{
694
1268
+
695
1268
and_expr
696
1268
[
697
1268
(
698
1268
STRING
699
1268
term
700
1268
shift_expr
702
1268
power
704
1268
xor_expr
706
1268
None
707
1268
NUMBER
708
1268
expr
1753
1268
~
710
1269
atom_expr
685
1269
atom
686
1269
-
687
1269
factor
688
1269
True
690
1269
arith_expr
691
1269
False
692
1269
NAME
693
1269
{
694
1269
+
695
1269
and_expr
696
1269
[
697
1269
(
698
1269
STRING
699
1269
term
700
1269
shift_expr
702
1269
power
704
1269
xor_expr
706
1269
None
707
1269
NUMBER
708
1269
expr
709
1269
~
710
1269
comparison
1754
1270
is
factor -> ~ factor
1270
>=
factor -> ~ factor
1270
<<
factor -> ~ factor
1270
<=
factor -> ~ factor
1270
==
factor -> ~ factor
1270
//
factor -> ~ factor
1270
or
factor -> ~ factor
1270
+
factor -> ~ factor
1270
and
factor -> ~ factor
1270
&
factor -> ~ factor
1270
!=
factor -> ~ factor
1270
|
factor -> ~ factor
1270
else
factor -> ~ factor
1270
>>
factor -> ~ factor
1270
in
factor -> ~ factor
1270
>
factor -> ~ factor
1270
/
factor -> ~ factor
1270
not
factor -> ~ factor
1270
@
factor -> ~ factor
1270
-
factor -> ~ factor
1270
^
factor -> ~ factor
1270
*
factor -> ~ factor
1270
<
factor -> ~ factor
1270
%
factor -> ~ factor
1271
else
not_test -> not not_test
1271
or
not_test -> not not_test
1271
and
not_test -> not not_test
1272
:
1755
1273
)
1756
1274
,
tfpdef -> NAME
1274
:
1757
1274
)
tfpdef -> NAME
1274
=
tfpdef -> NAME
1275
=
1758
1275
)
param -> tfpdef
1275
,
param -> tfpdef
1276
NAME
1759
1276
tfpdef
1760
1277
,
1761
1277
)
parameters -> param
1278
NAME
1759
1278
tfpdef
1762
1279
as
power -> atom_expr ** factor
1279
>>
power -> atom_expr ** factor
1279
<=
power -> atom_expr ** factor
1279
:
power -> atom_expr ** factor
1279
//
power -> atom_expr ** factor
1279
/
power -> atom_expr ** factor
1279
&
power -> atom_expr ** factor
1279
if
power -> atom_expr ** factor
1279
not
power -> atom_expr ** factor
1279
<
power -> atom_expr ** factor
1279
!=
power -> atom_expr ** factor
1279
,
power -> atom_expr ** factor
1279
>
power -> atom_expr ** factor
1279
*
power -> atom_expr ** factor
1279
==
power -> atom_expr ** factor
1279
|
power -> atom_expr ** factor
1279
is
power -> atom_expr ** factor
1279
and
power -> atom_expr ** factor
1279
<<
power -> atom_expr ** factor
1279
-
power -> atom_expr ** factor
1279
@
power -> atom_expr ** factor
1279
in
power -> atom_expr ** factor
1279
^
power -> atom_expr ** factor
1279
%
power -> atom_expr ** factor
1279
>=
power -> atom_expr ** factor
1279
+
power -> atom_expr ** factor
1279
or
power -> atom_expr ** factor
1280
and
arith_expr -> term + arith_expr
1280
<
arith_expr -> term + arith_expr
1280
|
arith_expr -> term + arith_expr
1280
>=
arith_expr -> term + arith_expr
1280
>>
arith_expr -> term + arith_expr
1280
:
arith_expr -> term + arith_expr
1280
,
arith_expr -> term + arith_expr
1280
if
arith_expr -> term + arith_expr
1280
>
arith_expr -> term + arith_expr
1280
in
arith_expr -> term + arith_expr
1280
or
arith_expr -> term + arith_expr
1280
<=
arith_expr -> term + arith_expr
1280
not
arith_expr -> term + arith_expr
1280
^
arith_expr -> term + arith_expr
1280
!=
arith_expr -> term + arith_expr
1280
&
arith_expr -> term + arith_expr
1280
==
arith_expr -> term + arith_expr
1280
as
arith_expr -> term + arith_expr
1280
<<
arith_expr -> term + arith_expr
1280
is
arith_expr -> term + arith_expr
1281
as
arith_expr -> term - arith_expr
1281
<<
arith_expr -> term - arith_expr
1281
if
arith_expr -> term - arith_expr
1281
:
arith_expr -> term - arith_expr
1281
<
arith_expr -> term - arith_expr
1281
<=
arith_expr -> term - arith_expr
1281
and
arith_expr -> term - arith_expr
1281
in
arith_expr -> term - arith_expr
1281
&
arith_expr -> term - arith_expr
1281
|
arith_expr -> term - arith_expr
1281
==
arith_expr -> term - arith_expr
1281
is
arith_expr -> term - arith_expr
1281
>>
arith_expr -> term - arith_expr
1281
!=
arith_expr -> term - arith_expr
1281
>
arith_expr -> term - arith_expr
1281
or
arith_expr -> term - arith_expr
1281
,
arith_expr -> term - arith_expr
1281
>=
arith_expr -> term - arith_expr
1281
^
arith_expr -> term - arith_expr
1281
not
arith_expr -> term - arith_expr
1282
*
trailer_expr -> trailer trailer_expr
1282
+
trailer_expr -> trailer trailer_expr
1282
if
trailer_expr -> trailer trailer_expr
1282
-
trailer_expr -> trailer trailer_expr
1282
<=
trailer_expr -> trailer trailer_expr
1282
|
trailer_expr -> trailer trailer_expr
1282
@
trailer_expr -> trailer trailer_expr
1282
%
trailer_expr -> trailer trailer_expr
1282
in
trailer_expr -> trailer trailer_expr
1282
<<
trailer_expr -> trailer trailer_expr
1282
**
trailer_expr -> trailer trailer_expr
1282
==
trailer_expr -> trailer trailer_expr
1282
not
trailer_expr -> trailer trailer_expr
1282
,
trailer_expr -> trailer trailer_expr
1282
and
trailer_expr -> trailer trailer_expr
1282
//
trailer_expr -> trailer trailer_expr
1282
^
trailer_expr -> trailer trailer_expr
1282
or
trailer_expr -> trailer trailer_expr
1282
>
trailer_expr -> trailer trailer_expr
1282
!=
trailer_expr -> trailer trailer_expr
1282
is
trailer_expr -> trailer trailer_expr
1282
:
trailer_expr -> trailer trailer_expr
1282
as
trailer_expr -> trailer trailer_expr
1282
&
trailer_expr -> trailer trailer_expr
1282
>>
trailer_expr -> trailer trailer_expr
1282
/
trailer_expr -> trailer trailer_expr
1282
<
trailer_expr -> trailer trailer_expr
1282
>=
trailer_expr -> trailer trailer_expr
1283
]
1763
1284
)
1764
1285
as
trailer -> ( )
1285
[
trailer -> ( )
1285
not
trailer -> ( )
1285
==
trailer -> ( )
1285
**
trailer -> ( )
1285
,
trailer -> ( )
1285
:
trailer -> ( )
1285
<=
trailer -> ( )
1285
//
trailer -> ( )
1285
<<
trailer -> ( )
1285
<
trailer -> ( )
1285
in
trailer -> ( )
1285
or
trailer -> ( )
1285
-
trailer -> ( )
1285
+
trailer -> ( )
1285
&
trailer -> ( )
1285
*
trailer -> ( )
1285
is
trailer -> ( )
1285
>
trailer -> ( )
1285
!=
trailer -> ( )
1285
>>
trailer -> ( )
1285
%
trailer -> ( )
1285
|
trailer -> ( )
1285
.
trailer -> ( )
1285
>=
trailer -> ( )
1285
(
trailer -> ( )
1285
and
trailer -> ( )
1285
@
trailer -> ( )
1285
/
trailer -> ( )
1285
^
trailer -> ( )
1285
if
trailer -> ( )
1286
^
trailer -> . NAME
1286
%
trailer -> . NAME
1286
**
trailer -> . NAME
1286
>>
trailer -> . NAME
1286
>
trailer -> . NAME
1286
in
trailer -> . NAME
1286
[
trailer -> . NAME
1286
is
trailer -> . NAME
1286
,
trailer -> . NAME
1286
<<
trailer -> . NAME
1286
or
trailer -> . NAME
1286
and
trailer -> . NAME
1286
as
trailer -> . NAME
1286
>=
trailer -> . NAME
1286
|
trailer -> . NAME
1286
==
trailer -> . NAME
1286
.
trailer -> . NAME
1286
+
trailer -> . NAME
1286
<
trailer -> . NAME
1286
-
trailer -> . NAME
1286
&
trailer -> . NAME
1286
*
trailer -> . NAME
1286
if
trailer -> . NAME
1286
<=
trailer -> . NAME
1286
:
trailer -> . NAME
1286
(
trailer -> . NAME
1286
not
trailer -> . NAME
1286
//
trailer -> . NAME
1286
@
trailer -> . NAME
1286
!=
trailer -> . NAME
1286
/
trailer -> . NAME
1287
yield
with_stmt -> with with_items : suite
1287
NAME
with_stmt -> with with_items : suite
1287
del
with_stmt -> with with_items : suite
1287
False
with_stmt -> with with_items : suite
1287
if
with_stmt -> with with_items : suite
1287
with
with_stmt -> with with_items : suite
1287
pass
with_stmt -> with with_items : suite
1287
begsim
with_stmt -> with with_items : suite
1287
try
with_stmt -> with with_items : suite
1287
NUMBER
with_stmt -> with with_items : suite
1287
nonlocal
with_stmt -> with with_items : suite
1287
not
with_stmt -> with with_items : suite
1287
endsim
with_stmt -> with with_items : suite
1287
NEWLINE
with_stmt -> with with_items : suite
1287
True
with_stmt -> with with_items : suite
1287
continue
with_stmt -> with with_items : suite
1287
STRING
with_stmt -> with with_items : suite
1287
raise
with_stmt -> with with_items : suite
1287
global
with_stmt -> with with_items : suite
1287
~
with_stmt -> with with_items : suite
1287
lambda
with_stmt -> with with_items : suite
1287
assert
with_stmt -> with with_items : suite
1287
for
with_stmt -> with with_items : suite
1287
(
with_stmt -> with with_items : suite
1287
None
with_stmt -> with with_items : suite
1287
while
with_stmt -> with with_items : suite
1287
resetstats
with_stmt -> with with_items : suite
1287
[
with_stmt -> with with_items : suite
1287
def
with_stmt -> with with_items : suite
1287
-
with_stmt -> with with_items : suite
1287
+
with_stmt -> with with_items : suite
1287
return
with_stmt -> with with_items : suite
1287
class
with_stmt -> with with_items : suite
1287
@
with_stmt -> with with_items : suite
1287
conf
with_stmt -> with with_items : suite
1287
$
with_stmt -> with with_items : suite
1287
break
with_stmt -> with with_items : suite
1287
{
with_stmt -> with with_items : suite
1288
|
term -> factor % term
1288
<<
term -> factor % term
1288
^
term -> factor % term
1288
==
term -> factor % term
1288
-
term -> factor % term
1288
,
term -> factor % term
1288
:
term -> factor % term
1288
as
term -> factor % term
1288
is
term -> factor % term
1288
>=
term -> factor % term
1288
>>
term -> factor % term
1288
>
term -> factor % term
1288
in
term -> factor % term
1288
&
term -> factor % term
1288
if
term -> factor % term
1288
<
term -> factor % term
1288
!=
term -> factor % term
1288
<=
term -> factor % term
1288
not
term -> factor % term
1288
+
term -> factor % term
1288
and
term -> factor % term
1288
or
term -> factor % term
1289
if
term -> factor // term
1289
<
term -> factor // term
1289
and
term -> factor // term
1289
as
term -> factor // term
1289
in
term -> factor // term
1289
,
term -> factor // term
1289
>>
term -> factor // term
1289
<=
term -> factor // term
1289
!=
term -> factor // term
1289
^
term -> factor // term
1289
|
term -> factor // term
1289
or
term -> factor // term
1289
>=
term -> factor // term
1289
&
term -> factor // term
1289
>
term -> factor // term
1289
+
term -> factor // term
1289
is
term -> factor // term
1289
not
term -> factor // term
1289
<<
term -> factor // term
1289
:
term -> factor // term
1289
-
term -> factor // term
1289
==
term -> factor // term
1290
,
term -> factor / term
1290
>>
term -> factor / term
1290
^
term -> factor / term
1290
or
term -> factor / term
1290
:
term -> factor / term
1290
+
term -> factor / term
1290
if
term -> factor / term
1290
>=
term -> factor / term
1290
>
term -> factor / term
1290
-
term -> factor / term
1290
and
term -> factor / term
1290
not
term -> factor / term
1290
<
term -> factor / term
1290
in
term -> factor / term
1290
==
term -> factor / term
1290
<=
term -> factor / term
1290
is
term -> factor / term
1290
&
term -> factor / term
1290
<<
term -> factor / term
1290
as
term -> factor / term
1290
!=
term -> factor / term
1290
|
term -> factor / term
1291
-
term -> factor * term
1291
&
term -> factor * term
1291
and
term -> factor * term
1291
,
term -> factor * term
1291
!=
term -> factor * term
1291
|
term -> factor * term
1291
<<
term -> factor * term
1291
<
term -> factor * term
1291
if
term -> factor * term
1291
^
term -> factor * term
1291
+
term -> factor * term
1291
in
term -> factor * term
1291
or
term -> factor * term
1291
>>
term -> factor * term
1291
not
term -> factor * term
1291
as
term -> factor * term
1291
:
term -> factor * term
1291
==
term -> factor * term
1291
>=
term -> factor * term
1291
<=
term -> factor * term
1291
>
term -> factor * term
1291
is
term -> factor * term
1292
>>
term -> factor @ term
1292
^
term -> factor @ term
1292
&
term -> factor @ term
1292
|
term -> factor @ term
1292
if
term -> factor @ term
1292
is
term -> factor @ term
1292
<
term -> factor @ term
1292
<<
term -> factor @ term
1292
as
term -> factor @ term
1292
and
term -> factor @ term
1292
==
term -> factor @ term
1292
>
term -> factor @ term
1292
in
term -> factor @ term
1292
,
term -> factor @ term
1292
>=
term -> factor @ term
1292
:
term -> factor @ term
1292
+
term -> factor @ term
1292
not
term -> factor @ term
1292
!=
term -> factor @ term
1292
<=
term -> factor @ term
1292
or
term -> factor @ term
1292
-
term -> factor @ term
1293
<
shift_expr -> arith_expr >> shift_expr
1293
^
shift_expr -> arith_expr >> shift_expr
1293
in
shift_expr -> arith_expr >> shift_expr
1293
==
shift_expr -> arith_expr >> shift_expr
1293
!=
shift_expr -> arith_expr >> shift_expr
1293
>=
shift_expr -> arith_expr >> shift_expr
1293
not
shift_expr -> arith_expr >> shift_expr
1293
and
shift_expr -> arith_expr >> shift_expr
1293
is
shift_expr -> arith_expr >> shift_expr
1293
,
shift_expr -> arith_expr >> shift_expr
1293
&
shift_expr -> arith_expr >> shift_expr
1293
>
shift_expr -> arith_expr >> shift_expr
1293
|
shift_expr -> arith_expr >> shift_expr
1293
:
shift_expr -> arith_expr >> shift_expr
1293
<=
shift_expr -> arith_expr >> shift_expr
1293
as
shift_expr -> arith_expr >> shift_expr
1293
or
shift_expr -> arith_expr >> shift_expr
1293
if
shift_expr -> arith_expr >> shift_expr
1294
,
shift_expr -> arith_expr << shift_expr
1294
if
shift_expr -> arith_expr << shift_expr
1294
&
shift_expr -> arith_expr << shift_expr
1294
>=
shift_expr -> arith_expr << shift_expr
1294
<=
shift_expr -> arith_expr << shift_expr
1294
or
shift_expr -> arith_expr << shift_expr
1294
in
shift_expr -> arith_expr << shift_expr
1294
:
shift_expr -> arith_expr << shift_expr
1294
!=
shift_expr -> arith_expr << shift_expr
1294
^
shift_expr -> arith_expr << shift_expr
1294
<
shift_expr -> arith_expr << shift_expr
1294
|
shift_expr -> arith_expr << shift_expr
1294
==
shift_expr -> arith_expr << shift_expr
1294
is
shift_expr -> arith_expr << shift_expr
1294
as
shift_expr -> arith_expr << shift_expr
1294
and
shift_expr -> arith_expr << shift_expr
1294
>
shift_expr -> arith_expr << shift_expr
1294
not
shift_expr -> arith_expr << shift_expr
1295
<<
atom -> [ test_list_comp ]
1295
:
atom -> [ test_list_comp ]
1295
,
atom -> [ test_list_comp ]
1295
>>
atom -> [ test_list_comp ]
1295
+
atom -> [ test_list_comp ]
1295
-
atom -> [ test_list_comp ]
1295
not
atom -> [ test_list_comp ]
1295
<=
atom -> [ test_list_comp ]
1295
is
atom -> [ test_list_comp ]
1295
[
atom -> [ test_list_comp ]
1295
*
atom -> [ test_list_comp ]
1295
==
atom -> [ test_list_comp ]
1295
@
atom -> [ test_list_comp ]
1295
>
atom -> [ test_list_comp ]
1295
%
atom -> [ test_list_comp ]
1295
if
atom -> [ test_list_comp ]
1295
>=
atom -> [ test_list_comp ]
1295
//
atom -> [ test_list_comp ]
1295
.
atom -> [ test_list_comp ]
1295
in
atom -> [ test_list_comp ]
1295
**
atom -> [ test_list_comp ]
1295
and
atom -> [ test_list_comp ]
1295
/
atom -> [ test_list_comp ]
1295
or
atom -> [ test_list_comp ]
1295
!=
atom -> [ test_list_comp ]
1295
<
atom -> [ test_list_comp ]
1295
^
atom -> [ test_list_comp ]
1295
&
atom -> [ test_list_comp ]
1295
as
atom -> [ test_list_comp ]
1295
(
atom -> [ test_list_comp ]
1295
|
atom -> [ test_list_comp ]
1296
@
atom -> ( test_list_comp )
1296
<
atom -> ( test_list_comp )
1296
and
atom -> ( test_list_comp )
1296
if
atom -> ( test_list_comp )
1296
as
atom -> ( test_list_comp )
1296
&
atom -> ( test_list_comp )
1296
*
atom -> ( test_list_comp )
1296
%
atom -> ( test_list_comp )
1296
[
atom -> ( test_list_comp )
1296
//
atom -> ( test_list_comp )
1296
<<
atom -> ( test_list_comp )
1296
.
atom -> ( test_list_comp )
1296
/
atom -> ( test_list_comp )
1296
>=
atom -> ( test_list_comp )
1296
or
atom -> ( test_list_comp )
1296
>
atom -> ( test_list_comp )
1296
-
atom -> ( test_list_comp )
1296
|
atom -> ( test_list_comp )
1296
**
atom -> ( test_list_comp )
1296
is
atom -> ( test_list_comp )
1296
:
atom -> ( test_list_comp )
1296
==
atom -> ( test_list_comp )
1296
not
atom -> ( test_list_comp )
1296
in
atom -> ( test_list_comp )
1296
!=
atom -> ( test_list_comp )
1296
^
atom -> ( test_list_comp )
1296
,
atom -> ( test_list_comp )
1296
(
atom -> ( test_list_comp )
1296
<=
atom -> ( test_list_comp )
1296
+
atom -> ( test_list_comp )
1296
>>
atom -> ( test_list_comp )
1297
>=
xor_expr -> and_expr ^ xor_expr
1297
>
xor_expr -> and_expr ^ xor_expr
1297
or
xor_expr -> and_expr ^ xor_expr
1297
and
xor_expr -> and_expr ^ xor_expr
1297
<=
xor_expr -> and_expr ^ xor_expr
1297
in
xor_expr -> and_expr ^ xor_expr
1297
==
xor_expr -> and_expr ^ xor_expr
1297
,
xor_expr -> and_expr ^ xor_expr
1297
if
xor_expr -> and_expr ^ xor_expr
1297
!=
xor_expr -> and_expr ^ xor_expr
1297
as
xor_expr -> and_expr ^ xor_expr
1297
not
xor_expr -> and_expr ^ xor_expr
1297
<
xor_expr -> and_expr ^ xor_expr
1297
is
xor_expr -> and_expr ^ xor_expr
1297
:
xor_expr -> and_expr ^ xor_expr
1297
|
xor_expr -> and_expr ^ xor_expr
1298
:
or_test -> and_test or or_test
1298
as
or_test -> and_test or or_test
1298
,
or_test -> and_test or or_test
1298
if
or_test -> and_test or or_test
1299
is
expr -> xor_expr | expr
1299
or
expr -> xor_expr | expr
1299
>
expr -> xor_expr | expr
1299
and
expr -> xor_expr | expr
1299
,
expr -> xor_expr | expr
1299
in
expr -> xor_expr | expr
1299
if
expr -> xor_expr | expr
1299
as
expr -> xor_expr | expr
1299
<=
expr -> xor_expr | expr
1299
not
expr -> xor_expr | expr
1299
==
expr -> xor_expr | expr
1299
>=
expr -> xor_expr | expr
1299
<
expr -> xor_expr | expr
1299
:
expr -> xor_expr | expr
1299
!=
expr -> xor_expr | expr
1300
,
and_expr -> shift_expr & and_expr
1300
>=
and_expr -> shift_expr & and_expr
1300
!=
and_expr -> shift_expr & and_expr
1300
or
and_expr -> shift_expr & and_expr
1300
is
and_expr -> shift_expr & and_expr
1300
^
and_expr -> shift_expr & and_expr
1300
if
and_expr -> shift_expr & and_expr
1300
==
and_expr -> shift_expr & and_expr
1300
not
and_expr -> shift_expr & and_expr
1300
<
and_expr -> shift_expr & and_expr
1300
>
and_expr -> shift_expr & and_expr
1300
in
and_expr -> shift_expr & and_expr
1300
and
and_expr -> shift_expr & and_expr
1300
as
and_expr -> shift_expr & and_expr
1300
|
and_expr -> shift_expr & and_expr
1300
:
and_expr -> shift_expr & and_expr
1300
<=
and_expr -> shift_expr & and_expr
1301
if
and_test -> not_test and and_test
1301
,
and_test -> not_test and and_test
1301
or
and_test -> not_test and and_test
1301
:
and_test -> not_test and and_test
1301
as
and_test -> not_test and and_test
1302
:
comparison -> expr comp_op comparison
1302
as
comparison -> expr comp_op comparison
1302
,
comparison -> expr comp_op comparison
1302
and
comparison -> expr comp_op comparison
1302
if
comparison -> expr comp_op comparison
1302
or
comparison -> expr comp_op comparison
1303
NAME
260
1303
atom_expr
261
1303
term
262
1303
atom
263
1303
-
264
1303
factor
266
1303
arith_expr
267
1303
[
268
1303
True
269
1303
False
270
1303
{
271
1303
(
272
1303
+
273
1303
and_expr
274
1303
and_test
275
1303
STRING
276
1303
xor_expr
277
1303
comparison
278
1303
shift_expr
279
1303
not_test
280
1303
power
281
1303
None
282
1303
expr
283
1303
NUMBER
284
1303
~
285
1303
lambda
286
1303
test
1765
1303
or_test
287
1303
lambdef
289
1303
not
290
1304
as
lambdef -> lambda : test
1304
,
lambdef -> lambda : test
1304
:
lambdef -> lambda : test
1305
else
1766
1306
:
with_items -> with_item , with_items
1307
~
1307
1307
atom
1309
1307
False
1310
1307
atom_expr
1311
1307
NUMBER
1312
1307
factor
1767
1307
[
1313
1307
True
1314
1307
NAME
1315
1307
(
1316
1307
+
1317
1307
None
1319
1307
-
1320
1307
{
1321
1307
STRING
1324
1307
power
1325
1308
+
1768
1308
<<
arith_expr -> term
1308
-
1769
1308
:
arith_expr -> term
1308
>>
arith_expr -> term
1308
&
arith_expr -> term
1308
,
arith_expr -> term
1308
^
arith_expr -> term
1308
|
arith_expr -> term
1309
trailer
1770
1309
(
1771
1309
>>
trailer_expr -> 
1309
trailer_expr
1772
1309
[
1773
1309
<<
trailer_expr -> 
1309
/
trailer_expr -> 
1309
//
trailer_expr -> 
1309
.
1774
1309
-
trailer_expr -> 
1309
@
trailer_expr -> 
1309
&
trailer_expr -> 
1309
:
trailer_expr -> 
1309
,
trailer_expr -> 
1309
^
trailer_expr -> 
1309
*
trailer_expr -> 
1309
**
trailer_expr -> 
1309
|
trailer_expr -> 
1309
+
trailer_expr -> 
1309
%
trailer_expr -> 
1310
|
atom -> False
1310
-
atom -> False
1310
%
atom -> False
1310
:
atom -> False
1310
/
atom -> False
1310
<<
atom -> False
1310
@
atom -> False
1310
&
atom -> False
1310
*
atom -> False
1310
//
atom -> False
1310
^
atom -> False
1310
,
atom -> False
1310
>>
atom -> False
1310
**
atom -> False
1310
+
atom -> False
1310
[
atom -> False
1310
.
atom -> False
1310
(
atom -> False
1311
**
1775
1311
^
power -> atom_expr
1311
>>
power -> atom_expr
1311
:
power -> atom_expr
1311
//
power -> atom_expr
1311
+
power -> atom_expr
1311
|
power -> atom_expr
1311
-
power -> atom_expr
1311
&
power -> atom_expr
1311
/
power -> atom_expr
1311
@
power -> atom_expr
1311
<<
power -> atom_expr
1311
,
power -> atom_expr
1311
%
power -> atom_expr
1311
*
power -> atom_expr
1312
,
atom -> NUMBER
1312
|
atom -> NUMBER
1312
(
atom -> NUMBER
1312
/
atom -> NUMBER
1312
//
atom -> NUMBER
1312
@
atom -> NUMBER
1312
%
atom -> NUMBER
1312
**
atom -> NUMBER
1312
&
atom -> NUMBER
1312
[
atom -> NUMBER
1312
+
atom -> NUMBER
1312
>>
atom -> NUMBER
1312
^
atom -> NUMBER
1312
-
atom -> NUMBER
1312
<<
atom -> NUMBER
1312
.
atom -> NUMBER
1312
*
atom -> NUMBER
1312
:
atom -> NUMBER
1313
NAME
187
1313
atom_expr
188
1313
atom
189
1313
-
190
1313
factor
191
1313
test_list_comp
1776
1313
[
193
1313
True
194
1313
arith_expr
195
1313
False
196
1313
{
197
1313
+
198
1313
and_expr
199
1313
(
200
1313
STRING
201
1313
term
203
1313
and_test
204
1313
comparison
205
1313
shift_expr
206
1313
not_test
207
1313
]
1777
1313
power
208
1313
or_test
209
1313
None
210
1313
xor_expr
211
1313
expr
212
1313
NUMBER
213
1313
lambda
214
1313
~
215
1313
lambdef
216
1313
not
217
1313
test
218
1313
test_list
219
1314
%
atom -> True
1314
[
atom -> True
1314
*
atom -> True
1314
(
atom -> True
1314
&
atom -> True
1314
>>
atom -> True
1314
|
atom -> True
1314
**
atom -> True
1314
/
atom -> True
1314
//
atom -> True
1314
.
atom -> True
1314
-
atom -> True
1314
+
atom -> True
1314
:
atom -> True
1314
^
atom -> True
1314
<<
atom -> True
1314
@
atom -> True
1314
,
atom -> True
1315
:
atom -> NAME
1315
@
atom -> NAME
1315
.
atom -> NAME
1315
&
atom -> NAME
1315
>>
atom -> NAME
1315
|
atom -> NAME
1315
<<
atom -> NAME
1315
-
atom -> NAME
1315
/
atom -> NAME
1315
(
atom -> NAME
1315
,
atom -> NAME
1315
+
atom -> NAME
1315
%
atom -> NAME
1315
[
atom -> NAME
1315
//
atom -> NAME
1315
^
atom -> NAME
1315
*
atom -> NAME
1315
**
atom -> NAME
1316
NAME
131
1316
atom_expr
132
1316
atom
133
1316
-
134
1316
factor
136
1316
)
1778
1316
[
137
1316
True
138
1316
arith_expr
139
1316
False
140
1316
{
141
1316
+
142
1316
and_expr
143
1316
(
144
1316
STRING
145
1316
test_list_comp
1779
1316
power
147
1316
term
148
1316
comparison
149
1316
shift_expr
150
1316
test
151
1316
not_test
152
1316
or_test
153
1316
lambda
154
1316
None
155
1316
xor_expr
156
1316
expr
157
1316
NUMBER
158
1316
and_test
159
1316
~
160
1316
lambdef
161
1316
not
162
1316
test_list
163
1317
~
1307
1317
atom
1309
1317
False
1310
1317
atom_expr
1311
1317
NUMBER
1312
1317
[
1313
1317
True
1314
1317
NAME
1315
1317
(
1316
1317
+
1317
1317
None
1319
1317
-
1320
1317
{
1321
1317
factor
1780
1317
STRING
1324
1317
power
1325
1318
%
1781
1318
@
1782
1318
-
term -> factor
1318
*
1783
1318
//
1784
1318
/
1785
1318
+
term -> factor
1318
|
term -> factor
1318
&
term -> factor
1318
:
term -> factor
1318
<<
term -> factor
1318
,
term -> factor
1318
^
term -> factor
1318
>>
term -> factor
1319
+
atom -> None
1319
//
atom -> None
1319
-
atom -> None
1319
<<
atom -> None
1319
&
atom -> None
1319
(
atom -> None
1319
>>
atom -> None
1319
/
atom -> None
1319
@
atom -> None
1319
:
atom -> None
1319
%
atom -> None
1319
|
atom -> None
1319
*
atom -> None
1319
,
atom -> None
1319
[
atom -> None
1319
^
atom -> None
1319
**
atom -> None
1319
.
atom -> None
1320
~
1307
1320
factor
1786
1320
atom
1309
1320
False
1310
1320
atom_expr
1311
1320
NUMBER
1312
1320
[
1313
1320
True
1314
1320
NAME
1315
1320
(
1316
1320
+
1317
1320
None
1319
1320
-
1320
1320
{
1321
1320
STRING
1324
1320
power
1325
1321
}
1787
1322
>>
1788
1322
<<
1789
1322
^
shift_expr -> arith_expr
1322
:
shift_expr -> arith_expr
1322
|
shift_expr -> arith_expr
1322
,
shift_expr -> arith_expr
1322
&
shift_expr -> arith_expr
1323
:
expr -> xor_expr
1323
|
1790
1323
,
expr -> xor_expr
1324
>>
atom -> STRING
1324
%
atom -> STRING
1324
:
atom -> STRING
1324
+
atom -> STRING
1324
/
atom -> STRING
1324
(
atom -> STRING
1324
.
atom -> STRING
1324
//
atom -> STRING
1324
**
atom -> STRING
1324
*
atom -> STRING
1324
,
atom -> STRING
1324
&
atom -> STRING
1324
-
atom -> STRING
1324
|
atom -> STRING
1324
^
atom -> STRING
1324
[
atom -> STRING
1324
<<
atom -> STRING
1324
@
atom -> STRING
1325
&
factor -> power
1325
<<
factor -> power
1325
+
factor -> power
1325
,
factor -> power
1325
%
factor -> power
1325
|
factor -> power
1325
//
factor -> power
1325
>>
factor -> power
1325
^
factor -> power
1325
/
factor -> power
1325
@
factor -> power
1325
-
factor -> power
1325
:
factor -> power
1325
*
factor -> power
1326
&
1791
1326
|
and_expr -> shift_expr
1326
^
and_expr -> shift_expr
1326
:
and_expr -> shift_expr
1326
,
and_expr -> shift_expr
1327
|
xor_expr -> and_expr
1327
^
1792
1327
,
xor_expr -> and_expr
1327
:
xor_expr -> and_expr
1328
:
with_item -> test as expr
1328
,
with_item -> test as expr
1329
>>
power -> atom_expr ** factor
1329
<=
power -> atom_expr ** factor
1329
//
power -> atom_expr ** factor
1329
/
power -> atom_expr ** factor
1329
&
power -> atom_expr ** factor
1329
if
power -> atom_expr ** factor
1329
not
power -> atom_expr ** factor
1329
<
power -> atom_expr ** factor
1329
!=
power -> atom_expr ** factor
1329
>
power -> atom_expr ** factor
1329
*
power -> atom_expr ** factor
1329
|
power -> atom_expr ** factor
1329
==
power -> atom_expr ** factor
1329
NEWLINE
power -> atom_expr ** factor
1329
is
power -> atom_expr ** factor
1329
and
power -> atom_expr ** factor
1329
<<
power -> atom_expr ** factor
1329
-
power -> atom_expr ** factor
1329
@
power -> atom_expr ** factor
1329
in
power -> atom_expr ** factor
1329
^
power -> atom_expr ** factor
1329
%
power -> atom_expr ** factor
1329
>=
power -> atom_expr ** factor
1329
+
power -> atom_expr ** factor
1329
or
power -> atom_expr ** factor
1330
<=
arith_expr -> term + arith_expr
1330
and
arith_expr -> term + arith_expr
1330
==
arith_expr -> term + arith_expr
1330
<
arith_expr -> term + arith_expr
1330
if
arith_expr -> term + arith_expr
1330
not
arith_expr -> term + arith_expr
1330
|
arith_expr -> term + arith_expr
1330
>
arith_expr -> term + arith_expr
1330
^
arith_expr -> term + arith_expr
1330
NEWLINE
arith_expr -> term + arith_expr
1330
>=
arith_expr -> term + arith_expr
1330
>>
arith_expr -> term + arith_expr
1330
in
arith_expr -> term + arith_expr
1330
!=
arith_expr -> term + arith_expr
1330
is
arith_expr -> term + arith_expr
1330
or
arith_expr -> term + arith_expr
1330
<<
arith_expr -> term + arith_expr
1330
&
arith_expr -> term + arith_expr
1331
>>
arith_expr -> term - arith_expr
1331
&
arith_expr -> term - arith_expr
1331
>=
arith_expr -> term - arith_expr
1331
NEWLINE
arith_expr -> term - arith_expr
1331
<<
arith_expr -> term - arith_expr
1331
if
arith_expr -> term - arith_expr
1331
|
arith_expr -> term - arith_expr
1331
^
arith_expr -> term - arith_expr
1331
<
arith_expr -> term - arith_expr
1331
>
arith_expr -> term - arith_expr
1331
!=
arith_expr -> term - arith_expr
1331
not
arith_expr -> term - arith_expr
1331
is
arith_expr -> term - arith_expr
1331
==
arith_expr -> term - arith_expr
1331
or
arith_expr -> term - arith_expr
1331
<=
arith_expr -> term - arith_expr
1331
and
arith_expr -> term - arith_expr
1331
in
arith_expr -> term - arith_expr
1332
*
trailer_expr -> trailer trailer_expr
1332
+
trailer_expr -> trailer trailer_expr
1332
if
trailer_expr -> trailer trailer_expr
1332
-
trailer_expr -> trailer trailer_expr
1332
<=
trailer_expr -> trailer trailer_expr
1332
|
trailer_expr -> trailer trailer_expr
1332
@
trailer_expr -> trailer trailer_expr
1332
%
trailer_expr -> trailer trailer_expr
1332
in
trailer_expr -> trailer trailer_expr
1332
<<
trailer_expr -> trailer trailer_expr
1332
**
trailer_expr -> trailer trailer_expr
1332
==
trailer_expr -> trailer trailer_expr
1332
not
trailer_expr -> trailer trailer_expr
1332
and
trailer_expr -> trailer trailer_expr
1332
//
trailer_expr -> trailer trailer_expr
1332
NEWLINE
trailer_expr -> trailer trailer_expr
1332
^
trailer_expr -> trailer trailer_expr
1332
or
trailer_expr -> trailer trailer_expr
1332
>
trailer_expr -> trailer trailer_expr
1332
!=
trailer_expr -> trailer trailer_expr
1332
is
trailer_expr -> trailer trailer_expr
1332
&
trailer_expr -> trailer trailer_expr
1332
>>
trailer_expr -> trailer trailer_expr
1332
/
trailer_expr -> trailer trailer_expr
1332
<
trailer_expr -> trailer trailer_expr
1332
>=
trailer_expr -> trailer trailer_expr
1333
]
1793
1334
^
trailer -> . NAME
1334
%
trailer -> . NAME
1334
**
trailer -> . NAME
1334
>>
trailer -> . NAME
1334
>
trailer -> . NAME
1334
in
trailer -> . NAME
1334
[
trailer -> . NAME
1334
is
trailer -> . NAME
1334
<<
trailer -> . NAME
1334
or
trailer -> . NAME
1334
and
trailer -> . NAME
1334
>=
trailer -> . NAME
1334
|
trailer -> . NAME
1334
==
trailer -> . NAME
1334
.
trailer -> . NAME
1334
+
trailer -> . NAME
1334
<
trailer -> . NAME
1334
-
trailer -> . NAME
1334
&
trailer -> . NAME
1334
NEWLINE
trailer -> . NAME
1334
*
trailer -> . NAME
1334
if
trailer -> . NAME
1334
<=
trailer -> . NAME
1334
(
trailer -> . NAME
1334
not
trailer -> . NAME
1334
//
trailer -> . NAME
1334
@
trailer -> . NAME
1334
!=
trailer -> . NAME
1334
/
trailer -> . NAME
1335
)
1794
1336
[
trailer -> ( )
1336
not
trailer -> ( )
1336
==
trailer -> ( )
1336
**
trailer -> ( )
1336
<=
trailer -> ( )
1336
//
trailer -> ( )
1336
<<
trailer -> ( )
1336
<
trailer -> ( )
1336
in
trailer -> ( )
1336
or
trailer -> ( )
1336
-
trailer -> ( )
1336
+
trailer -> ( )
1336
&
trailer -> ( )
1336
*
trailer -> ( )
1336
is
trailer -> ( )
1336
>
trailer -> ( )
1336
!=
trailer -> ( )
1336
>>
trailer -> ( )
1336
%
trailer -> ( )
1336
|
trailer -> ( )
1336
.
trailer -> ( )
1336
>=
trailer -> ( )
1336
(
trailer -> ( )
1336
and
trailer -> ( )
1336
@
trailer -> ( )
1336
NEWLINE
trailer -> ( )
1336
/
trailer -> ( )
1336
^
trailer -> ( )
1336
if
trailer -> ( )
1337
NEWLINE
term -> factor % term
1337
|
term -> factor % term
1337
<<
term -> factor % term
1337
^
term -> factor % term
1337
==
term -> factor % term
1337
-
term -> factor % term
1337
is
term -> factor % term
1337
>=
term -> factor % term
1337
>>
term -> factor % term
1337
>
term -> factor % term
1337
in
term -> factor % term
1337
&
term -> factor % term
1337
if
term -> factor % term
1337
<
term -> factor % term
1337
!=
term -> factor % term
1337
<=
term -> factor % term
1337
not
term -> factor % term
1337
+
term -> factor % term
1337
and
term -> factor % term
1337
or
term -> factor % term
1338
>>
term -> factor / term
1338
^
term -> factor / term
1338
NEWLINE
term -> factor / term
1338
or
term -> factor / term
1338
+
term -> factor / term
1338
if
term -> factor / term
1338
>=
term -> factor / term
1338
>
term -> factor / term
1338
-
term -> factor / term
1338
and
term -> factor / term
1338
not
term -> factor / term
1338
<
term -> factor / term
1338
in
term -> factor / term
1338
==
term -> factor / term
1338
<=
term -> factor / term
1338
is
term -> factor / term
1338
&
term -> factor / term
1338
<<
term -> factor / term
1338
!=
term -> factor / term
1338
|
term -> factor / term
1339
NEWLINE
term -> factor * term
1339
-
term -> factor * term
1339
&
term -> factor * term
1339
and
term -> factor * term
1339
!=
term -> factor * term
1339
|
term -> factor * term
1339
<<
term -> factor * term
1339
<
term -> factor * term
1339
if
term -> factor * term
1339
^
term -> factor * term
1339
+
term -> factor * term
1339
in
term -> factor * term
1339
or
term -> factor * term
1339
>>
term -> factor * term
1339
not
term -> factor * term
1339
==
term -> factor * term
1339
>=
term -> factor * term
1339
<=
term -> factor * term
1339
>
term -> factor * term
1339
is
term -> factor * term
1340
if
term -> factor // term
1340
<
term -> factor // term
1340
and
term -> factor // term
1340
in
term -> factor // term
1340
>>
term -> factor // term
1340
<=
term -> factor // term
1340
!=
term -> factor // term
1340
^
term -> factor // term
1340
|
term -> factor // term
1340
or
term -> factor // term
1340
NEWLINE
term -> factor // term
1340
>=
term -> factor // term
1340
&
term -> factor // term
1340
>
term -> factor // term
1340
+
term -> factor // term
1340
is
term -> factor // term
1340
not
term -> factor // term
1340
<<
term -> factor // term
1340
-
term -> factor // term
1340
==
term -> factor // term
1341
>>
term -> factor @ term
1341
^
term -> factor @ term
1341
&
term -> factor @ term
1341
|
term -> factor @ term
1341
if
term -> factor @ term
1341
is
term -> factor @ term
1341
<
term -> factor @ term
1341
<<
term -> factor @ term
1341
NEWLINE
term -> factor @ term
1341
and
term -> factor @ term
1341
==
term -> factor @ term
1341
>
term -> factor @ term
1341
in
term -> factor @ term
1341
>=
term -> factor @ term
1341
+
term -> factor @ term
1341
not
term -> factor @ term
1341
!=
term -> factor @ term
1341
<=
term -> factor @ term
1341
or
term -> factor @ term
1341
-
term -> factor @ term
1342
NEWLINE
shift_expr -> arith_expr >> shift_expr
1342
<
shift_expr -> arith_expr >> shift_expr
1342
^
shift_expr -> arith_expr >> shift_expr
1342
in
shift_expr -> arith_expr >> shift_expr
1342
==
shift_expr -> arith_expr >> shift_expr
1342
!=
shift_expr -> arith_expr >> shift_expr
1342
>=
shift_expr -> arith_expr >> shift_expr
1342
not
shift_expr -> arith_expr >> shift_expr
1342
and
shift_expr -> arith_expr >> shift_expr
1342
is
shift_expr -> arith_expr >> shift_expr
1342
&
shift_expr -> arith_expr >> shift_expr
1342
>
shift_expr -> arith_expr >> shift_expr
1342
|
shift_expr -> arith_expr >> shift_expr
1342
<=
shift_expr -> arith_expr >> shift_expr
1342
or
shift_expr -> arith_expr >> shift_expr
1342
if
shift_expr -> arith_expr >> shift_expr
1343
if
shift_expr -> arith_expr << shift_expr
1343
&
shift_expr -> arith_expr << shift_expr
1343
>=
shift_expr -> arith_expr << shift_expr
1343
<=
shift_expr -> arith_expr << shift_expr
1343
or
shift_expr -> arith_expr << shift_expr
1343
in
shift_expr -> arith_expr << shift_expr
1343
!=
shift_expr -> arith_expr << shift_expr
1343
^
shift_expr -> arith_expr << shift_expr
1343
<
shift_expr -> arith_expr << shift_expr
1343
|
shift_expr -> arith_expr << shift_expr
1343
==
shift_expr -> arith_expr << shift_expr
1343
is
shift_expr -> arith_expr << shift_expr
1343
and
shift_expr -> arith_expr << shift_expr
1343
NEWLINE
shift_expr -> arith_expr << shift_expr
1343
>
shift_expr -> arith_expr << shift_expr
1343
not
shift_expr -> arith_expr << shift_expr
1344
>=
xor_expr -> and_expr ^ xor_expr
1344
>
xor_expr -> and_expr ^ xor_expr
1344
or
xor_expr -> and_expr ^ xor_expr
1344
and
xor_expr -> and_expr ^ xor_expr
1344
<=
xor_expr -> and_expr ^ xor_expr
1344
in
xor_expr -> and_expr ^ xor_expr
1344
==
xor_expr -> and_expr ^ xor_expr
1344
if
xor_expr -> and_expr ^ xor_expr
1344
!=
xor_expr -> and_expr ^ xor_expr
1344
not
xor_expr -> and_expr ^ xor_expr
1344
<
xor_expr -> and_expr ^ xor_expr
1344
is
xor_expr -> and_expr ^ xor_expr
1344
NEWLINE
xor_expr -> and_expr ^ xor_expr
1344
|
xor_expr -> and_expr ^ xor_expr
1345
<<
atom -> [ test_list_comp ]
1345
>>
atom -> [ test_list_comp ]
1345
+
atom -> [ test_list_comp ]
1345
-
atom -> [ test_list_comp ]
1345
not
atom -> [ test_list_comp ]
1345
<=
atom -> [ test_list_comp ]
1345
is
atom -> [ test_list_comp ]
1345
[
atom -> [ test_list_comp ]
1345
*
atom -> [ test_list_comp ]
1345
==
atom -> [ test_list_comp ]
1345
@
atom -> [ test_list_comp ]
1345
NEWLINE
atom -> [ test_list_comp ]
1345
>
atom -> [ test_list_comp ]
1345
%
atom -> [ test_list_comp ]
1345
if
atom -> [ test_list_comp ]
1345
>=
atom -> [ test_list_comp ]
1345
//
atom -> [ test_list_comp ]
1345
.
atom -> [ test_list_comp ]
1345
in
atom -> [ test_list_comp ]
1345
**
atom -> [ test_list_comp ]
1345
and
atom -> [ test_list_comp ]
1345
/
atom -> [ test_list_comp ]
1345
or
atom -> [ test_list_comp ]
1345
!=
atom -> [ test_list_comp ]
1345
<
atom -> [ test_list_comp ]
1345
^
atom -> [ test_list_comp ]
1345
&
atom -> [ test_list_comp ]
1345
(
atom -> [ test_list_comp ]
1345
|
atom -> [ test_list_comp ]
1346
@
atom -> ( test_list_comp )
1346
<
atom -> ( test_list_comp )
1346
and
atom -> ( test_list_comp )
1346
if
atom -> ( test_list_comp )
1346
&
atom -> ( test_list_comp )
1346
*
atom -> ( test_list_comp )
1346
%
atom -> ( test_list_comp )
1346
[
atom -> ( test_list_comp )
1346
//
atom -> ( test_list_comp )
1346
<<
atom -> ( test_list_comp )
1346
.
atom -> ( test_list_comp )
1346
/
atom -> ( test_list_comp )
1346
>=
atom -> ( test_list_comp )
1346
or
atom -> ( test_list_comp )
1346
>
atom -> ( test_list_comp )
1346
-
atom -> ( test_list_comp )
1346
|
atom -> ( test_list_comp )
1346
**
atom -> ( test_list_comp )
1346
is
atom -> ( test_list_comp )
1346
==
atom -> ( test_list_comp )
1346
not
atom -> ( test_list_comp )
1346
in
atom -> ( test_list_comp )
1346
!=
atom -> ( test_list_comp )
1346
^
atom -> ( test_list_comp )
1346
(
atom -> ( test_list_comp )
1346
NEWLINE
atom -> ( test_list_comp )
1346
<=
atom -> ( test_list_comp )
1346
+
atom -> ( test_list_comp )
1346
>>
atom -> ( test_list_comp )
1347
>=
and_expr -> shift_expr & and_expr
1347
!=
and_expr -> shift_expr & and_expr
1347
or
and_expr -> shift_expr & and_expr
1347
is
and_expr -> shift_expr & and_expr
1347
^
and_expr -> shift_expr & and_expr
1347
==
and_expr -> shift_expr & and_expr
1347
if
and_expr -> shift_expr & and_expr
1347
not
and_expr -> shift_expr & and_expr
1347
<
and_expr -> shift_expr & and_expr
1347
>
and_expr -> shift_expr & and_expr
1347
in
and_expr -> shift_expr & and_expr
1347
and
and_expr -> shift_expr & and_expr
1347
|
and_expr -> shift_expr & and_expr
1347
NEWLINE
and_expr -> shift_expr & and_expr
1347
<=
and_expr -> shift_expr & and_expr
1348
NEWLINE
and_test -> not_test and and_test
1348
or
and_test -> not_test and and_test
1348
if
and_test -> not_test and and_test
1349
NEWLINE
expr -> xor_expr | expr
1349
is
expr -> xor_expr | expr
1349
or
expr -> xor_expr | expr
1349
>
expr -> xor_expr | expr
1349
and
expr -> xor_expr | expr
1349
in
expr -> xor_expr | expr
1349
if
expr -> xor_expr | expr
1349
<=
expr -> xor_expr | expr
1349
not
expr -> xor_expr | expr
1349
==
expr -> xor_expr | expr
1349
>=
expr -> xor_expr | expr
1349
<
expr -> xor_expr | expr
1349
!=
expr -> xor_expr | expr
1350
and
comparison -> expr comp_op comparison
1350
if
comparison -> expr comp_op comparison
1350
or
comparison -> expr comp_op comparison
1350
NEWLINE
comparison -> expr comp_op comparison
1351
if
or_test -> and_test or or_test
1351
NEWLINE
or_test -> and_test or or_test
1352
else
1795
1353
NEWLINE
lambdef -> lambda : test
1354
NAME
300
1354
atom_expr
301
1354
term
302
1354
atom
303
1354
-
304
1354
factor
305
1354
True
306
1354
arith_expr
307
1354
False
308
1354
{
309
1354
+
310
1354
and_expr
311
1354
[
312
1354
(
313
1354
STRING
314
1354
comparison
315
1354
shift_expr
316
1354
not_test
317
1354
power
318
1354
None
319
1354
xor_expr
320
1354
expr
321
1354
NUMBER
322
1354
and_test
323
1354
or_test
324
1354
~
325
1354
test
1796
1354
lambda
326
1354
lambdef
327
1354
not
328
1355
@=
lambdef -> lambda varargslist : test
1355
&=
lambdef -> lambda varargslist : test
1355
//=
lambdef -> lambda varargslist : test
1355
:
lambdef -> lambda varargslist : test
1355
,
lambdef -> lambda varargslist : test
1355
=
lambdef -> lambda varargslist : test
1355
-=
lambdef -> lambda varargslist : test
1355
*=
lambdef -> lambda varargslist : test
1355
NEWLINE
lambdef -> lambda varargslist : test
1355
|=
lambdef -> lambda varargslist : test
1355
+=
lambdef -> lambda varargslist : test
1355
%=
lambdef -> lambda varargslist : test
1355
**=
lambdef -> lambda varargslist : test
1355
^=
lambdef -> lambda varargslist : test
1355
<<=
lambdef -> lambda varargslist : test
1355
>>=
lambdef -> lambda varargslist : test
1355
/=
lambdef -> lambda varargslist : test
1356
:
varargslist -> vfpdef , varargslist
1357
&
arith_expr -> term + arith_expr
1357
|
arith_expr -> term + arith_expr
1357
^
arith_expr -> term + arith_expr
1357
NEWLINE
arith_expr -> term + arith_expr
1357
>>
arith_expr -> term + arith_expr
1357
<<
arith_expr -> term + arith_expr
1357
,
arith_expr -> term + arith_expr
1358
>>
arith_expr -> term - arith_expr
1358
&
arith_expr -> term - arith_expr
1358
NEWLINE
arith_expr -> term - arith_expr
1358
<<
arith_expr -> term - arith_expr
1358
|
arith_expr -> term - arith_expr
1358
^
arith_expr -> term - arith_expr
1358
,
arith_expr -> term - arith_expr
1359
//
trailer_expr -> trailer trailer_expr
1359
*
trailer_expr -> trailer trailer_expr
1359
NEWLINE
trailer_expr -> trailer trailer_expr
1359
&
trailer_expr -> trailer trailer_expr
1359
+
trailer_expr -> trailer trailer_expr
1359
^
trailer_expr -> trailer trailer_expr
1359
-
trailer_expr -> trailer trailer_expr
1359
**
trailer_expr -> trailer trailer_expr
1359
|
trailer_expr -> trailer trailer_expr
1359
>>
trailer_expr -> trailer trailer_expr
1359
@
trailer_expr -> trailer trailer_expr
1359
%
trailer_expr -> trailer trailer_expr
1359
/
trailer_expr -> trailer trailer_expr
1359
,
trailer_expr -> trailer trailer_expr
1359
<<
trailer_expr -> trailer trailer_expr
1360
)
1797
1361
*
trailer -> ( )
1361
//
trailer -> ( )
1361
**
trailer -> ( )
1361
<<
trailer -> ( )
1361
(
trailer -> ( )
1361
/
trailer -> ( )
1361
[
trailer -> ( )
1361
@
trailer -> ( )
1361
NEWLINE
trailer -> ( )
1361
^
trailer -> ( )
1361
&
trailer -> ( )
1361
>>
trailer -> ( )
1361
%
trailer -> ( )
1361
-
trailer -> ( )
1361
+
trailer -> ( )
1361
|
trailer -> ( )
1361
,
trailer -> ( )
1361
.
trailer -> ( )
1362
]
1798
1363
**
trailer -> . NAME
1363
>>
trailer -> . NAME
1363
%
trailer -> . NAME
1363
+
trailer -> . NAME
1363
,
trailer -> . NAME
1363
^
trailer -> . NAME
1363
-
trailer -> . NAME
1363
<<
trailer -> . NAME
1363
(
trailer -> . NAME
1363
&
trailer -> . NAME
1363
NEWLINE
trailer -> . NAME
1363
/
trailer -> . NAME
1363
//
trailer -> . NAME
1363
[
trailer -> . NAME
1363
|
trailer -> . NAME
1363
@
trailer -> . NAME
1363
*
trailer -> . NAME
1363
.
trailer -> . NAME
1364
@
power -> atom_expr ** factor
1364
|
power -> atom_expr ** factor
1364
/
power -> atom_expr ** factor
1364
&
power -> atom_expr ** factor
1364
>>
power -> atom_expr ** factor
1364
^
power -> atom_expr ** factor
1364
%
power -> atom_expr ** factor
1364
*
power -> atom_expr ** factor
1364
//
power -> atom_expr ** factor
1364
,
power -> atom_expr ** factor
1364
<<
power -> atom_expr ** factor
1364
-
power -> atom_expr ** factor
1364
NEWLINE
power -> atom_expr ** factor
1364
+
power -> atom_expr ** factor
1365
<<
atom -> [ test_list_comp ]
1365
**
atom -> [ test_list_comp ]
1365
/
atom -> [ test_list_comp ]
1365
(
atom -> [ test_list_comp ]
1365
%
atom -> [ test_list_comp ]
1365
,
atom -> [ test_list_comp ]
1365
>>
atom -> [ test_list_comp ]
1365
^
atom -> [ test_list_comp ]
1365
[
atom -> [ test_list_comp ]
1365
*
atom -> [ test_list_comp ]
1365
&
atom -> [ test_list_comp ]
1365
+
atom -> [ test_list_comp ]
1365
-
atom -> [ test_list_comp ]
1365
|
atom -> [ test_list_comp ]
1365
@
atom -> [ test_list_comp ]
1365
//
atom -> [ test_list_comp ]
1365
NEWLINE
atom -> [ test_list_comp ]
1365
.
atom -> [ test_list_comp ]
1366
NEWLINE
term -> factor % term
1366
|
term -> factor % term
1366
<<
term -> factor % term
1366
^
term -> factor % term
1366
+
term -> factor % term
1366
-
term -> factor % term
1366
>>
term -> factor % term
1366
,
term -> factor % term
1366
&
term -> factor % term
1367
>>
term -> factor @ term
1367
&
term -> factor @ term
1367
^
term -> factor @ term
1367
<<
term -> factor @ term
1367
|
term -> factor @ term
1367
+
term -> factor @ term
1367
NEWLINE
term -> factor @ term
1367
,
term -> factor @ term
1367
-
term -> factor @ term
1368
+
term -> factor * term
1368
<<
term -> factor * term
1368
NEWLINE
term -> factor * term
1368
^
term -> factor * term
1368
-
term -> factor * term
1368
&
term -> factor * term
1368
,
term -> factor * term
1368
>>
term -> factor * term
1368
|
term -> factor * term
1369
&
term -> factor / term
1369
+
term -> factor / term
1369
<<
term -> factor / term
1369
-
term -> factor / term
1369
,
term -> factor / term
1369
>>
term -> factor / term
1369
|
term -> factor / term
1369
^
term -> factor / term
1369
NEWLINE
term -> factor / term
1370
<<
term -> factor // term
1370
NEWLINE
term -> factor // term
1370
-
term -> factor // term
1370
&
term -> factor // term
1370
^
term -> factor // term
1370
+
term -> factor // term
1370
,
term -> factor // term
1370
|
term -> factor // term
1370
>>
term -> factor // term
1371
^
atom -> ( test_list_comp )
1371
-
atom -> ( test_list_comp )
1371
|
atom -> ( test_list_comp )
1371
&
atom -> ( test_list_comp )
1371
,
atom -> ( test_list_comp )
1371
(
atom -> ( test_list_comp )
1371
@
atom -> ( test_list_comp )
1371
**
atom -> ( test_list_comp )
1371
*
atom -> ( test_list_comp )
1371
NEWLINE
atom -> ( test_list_comp )
1371
%
atom -> ( test_list_comp )
1371
//
atom -> ( test_list_comp )
1371
[
atom -> ( test_list_comp )
1371
<<
atom -> ( test_list_comp )
1371
.
atom -> ( test_list_comp )
1371
/
atom -> ( test_list_comp )
1371
+
atom -> ( test_list_comp )
1371
>>
atom -> ( test_list_comp )
1372
NEWLINE
shift_expr -> arith_expr >> shift_expr
1372
^
shift_expr -> arith_expr >> shift_expr
1372
,
shift_expr -> arith_expr >> shift_expr
1372
&
shift_expr -> arith_expr >> shift_expr
1372
|
shift_expr -> arith_expr >> shift_expr
1373
,
shift_expr -> arith_expr << shift_expr
1373
&
shift_expr -> arith_expr << shift_expr
1373
^
shift_expr -> arith_expr << shift_expr
1373
|
shift_expr -> arith_expr << shift_expr
1373
NEWLINE
shift_expr -> arith_expr << shift_expr
1374
,
and_expr -> shift_expr & and_expr
1374
|
and_expr -> shift_expr & and_expr
1374
NEWLINE
and_expr -> shift_expr & and_expr
1374
^
and_expr -> shift_expr & and_expr
1375
NEWLINE
expr -> xor_expr | expr
1375
,
expr -> xor_expr | expr
1376
,
xor_expr -> and_expr ^ xor_expr
1376
NEWLINE
xor_expr -> and_expr ^ xor_expr
1376
|
xor_expr -> and_expr ^ xor_expr
1377
NEWLINE
expr_list -> expr , expr_list
1378
NEWLINE
1799
1379
)
1800
1380
NEWLINE
dotted_name -> NAME . dotted_name
1380
(
dotted_name -> NAME . dotted_name
1381
>>
power -> atom_expr ** factor
1381
<=
power -> atom_expr ** factor
1381
//
power -> atom_expr ** factor
1381
/
power -> atom_expr ** factor
1381
&
power -> atom_expr ** factor
1381
if
power -> atom_expr ** factor
1381
not
power -> atom_expr ** factor
1381
<
power -> atom_expr ** factor
1381
!=
power -> atom_expr ** factor
1381
,
power -> atom_expr ** factor
1381
>
power -> atom_expr ** factor
1381
*
power -> atom_expr ** factor
1381
==
power -> atom_expr ** factor
1381
|
power -> atom_expr ** factor
1381
NEWLINE
power -> atom_expr ** factor
1381
is
power -> atom_expr ** factor
1381
and
power -> atom_expr ** factor
1381
<<
power -> atom_expr ** factor
1381
-
power -> atom_expr ** factor
1381
@
power -> atom_expr ** factor
1381
in
power -> atom_expr ** factor
1381
^
power -> atom_expr ** factor
1381
%
power -> atom_expr ** factor
1381
>=
power -> atom_expr ** factor
1381
+
power -> atom_expr ** factor
1381
or
power -> atom_expr ** factor
1382
and
arith_expr -> term + arith_expr
1382
<
arith_expr -> term + arith_expr
1382
|
arith_expr -> term + arith_expr
1382
>=
arith_expr -> term + arith_expr
1382
>>
arith_expr -> term + arith_expr
1382
,
arith_expr -> term + arith_expr
1382
if
arith_expr -> term + arith_expr
1382
>
arith_expr -> term + arith_expr
1382
in
arith_expr -> term + arith_expr
1382
is
arith_expr -> term + arith_expr
1382
or
arith_expr -> term + arith_expr
1382
<=
arith_expr -> term + arith_expr
1382
not
arith_expr -> term + arith_expr
1382
^
arith_expr -> term + arith_expr
1382
!=
arith_expr -> term + arith_expr
1382
==
arith_expr -> term + arith_expr
1382
NEWLINE
arith_expr -> term + arith_expr
1382
<<
arith_expr -> term + arith_expr
1382
&
arith_expr -> term + arith_expr
1383
NEWLINE
arith_expr -> term - arith_expr
1383
<<
arith_expr -> term - arith_expr
1383
if
arith_expr -> term - arith_expr
1383
<
arith_expr -> term - arith_expr
1383
<=
arith_expr -> term - arith_expr
1383
and
arith_expr -> term - arith_expr
1383
in
arith_expr -> term - arith_expr
1383
&
arith_expr -> term - arith_expr
1383
|
arith_expr -> term - arith_expr
1383
==
arith_expr -> term - arith_expr
1383
is
arith_expr -> term - arith_expr
1383
>>
arith_expr -> term - arith_expr
1383
!=
arith_expr -> term - arith_expr
1383
>
arith_expr -> term - arith_expr
1383
or
arith_expr -> term - arith_expr
1383
,
arith_expr -> term - arith_expr
1383
>=
arith_expr -> term - arith_expr
1383
^
arith_expr -> term - arith_expr
1383
not
arith_expr -> term - arith_expr
1384
*
trailer_expr -> trailer trailer_expr
1384
+
trailer_expr -> trailer trailer_expr
1384
if
trailer_expr -> trailer trailer_expr
1384
-
trailer_expr -> trailer trailer_expr
1384
<=
trailer_expr -> trailer trailer_expr
1384
|
trailer_expr -> trailer trailer_expr
1384
@
trailer_expr -> trailer trailer_expr
1384
%
trailer_expr -> trailer trailer_expr
1384
in
trailer_expr -> trailer trailer_expr
1384
<<
trailer_expr -> trailer trailer_expr
1384
**
trailer_expr -> trailer trailer_expr
1384
==
trailer_expr -> trailer trailer_expr
1384
not
trailer_expr -> trailer trailer_expr
1384
,
trailer_expr -> trailer trailer_expr
1384
and
trailer_expr -> trailer trailer_expr
1384
//
trailer_expr -> trailer trailer_expr
1384
NEWLINE
trailer_expr -> trailer trailer_expr
1384
^
trailer_expr -> trailer trailer_expr
1384
or
trailer_expr -> trailer trailer_expr
1384
>
trailer_expr -> trailer trailer_expr
1384
!=
trailer_expr -> trailer trailer_expr
1384
is
trailer_expr -> trailer trailer_expr
1384
&
trailer_expr -> trailer trailer_expr
1384
>>
trailer_expr -> trailer trailer_expr
1384
/
trailer_expr -> trailer trailer_expr
1384
<
trailer_expr -> trailer trailer_expr
1384
>=
trailer_expr -> trailer trailer_expr
1385
]
1801
1386
^
trailer -> . NAME
1386
%
trailer -> . NAME
1386
**
trailer -> . NAME
1386
>>
trailer -> . NAME
1386
>
trailer -> . NAME
1386
in
trailer -> . NAME
1386
[
trailer -> . NAME
1386
is
trailer -> . NAME
1386
,
trailer -> . NAME
1386
<<
trailer -> . NAME
1386
or
trailer -> . NAME
1386
and
trailer -> . NAME
1386
>=
trailer -> . NAME
1386
|
trailer -> . NAME
1386
==
trailer -> . NAME
1386
.
trailer -> . NAME
1386
+
trailer -> . NAME
1386
<
trailer -> . NAME
1386
-
trailer -> . NAME
1386
&
trailer -> . NAME
1386
NEWLINE
trailer -> . NAME
1386
*
trailer -> . NAME
1386
if
trailer -> . NAME
1386
<=
trailer -> . NAME
1386
(
trailer -> . NAME
1386
not
trailer -> . NAME
1386
//
trailer -> . NAME
1386
@
trailer -> . NAME
1386
!=
trailer -> . NAME
1386
/
trailer -> . NAME
1387
)
1802
1388
[
trailer -> ( )
1388
not
trailer -> ( )
1388
==
trailer -> ( )
1388
**
trailer -> ( )
1388
,
trailer -> ( )
1388
<=
trailer -> ( )
1388
//
trailer -> ( )
1388
<<
trailer -> ( )
1388
<
trailer -> ( )
1388
in
trailer -> ( )
1388
or
trailer -> ( )
1388
-
trailer -> ( )
1388
+
trailer -> ( )
1388
&
trailer -> ( )
1388
*
trailer -> ( )
1388
is
trailer -> ( )
1388
>
trailer -> ( )
1388
!=
trailer -> ( )
1388
>>
trailer -> ( )
1388
%
trailer -> ( )
1388
|
trailer -> ( )
1388
.
trailer -> ( )
1388
>=
trailer -> ( )
1388
(
trailer -> ( )
1388
and
trailer -> ( )
1388
@
trailer -> ( )
1388
NEWLINE
trailer -> ( )
1388
/
trailer -> ( )
1388
^
trailer -> ( )
1388
if
trailer -> ( )
1389
NEWLINE
term -> factor % term
1389
|
term -> factor % term
1389
<<
term -> factor % term
1389
^
term -> factor % term
1389
==
term -> factor % term
1389
-
term -> factor % term
1389
,
term -> factor % term
1389
is
term -> factor % term
1389
>=
term -> factor % term
1389
>>
term -> factor % term
1389
>
term -> factor % term
1389
in
term -> factor % term
1389
&
term -> factor % term
1389
if
term -> factor % term
1389
<
term -> factor % term
1389
!=
term -> factor % term
1389
<=
term -> factor % term
1389
not
term -> factor % term
1389
+
term -> factor % term
1389
and
term -> factor % term
1389
or
term -> factor % term
1390
,
term -> factor / term
1390
>>
term -> factor / term
1390
^
term -> factor / term
1390
NEWLINE
term -> factor / term
1390
or
term -> factor / term
1390
+
term -> factor / term
1390
if
term -> factor / term
1390
>=
term -> factor / term
1390
>
term -> factor / term
1390
-
term -> factor / term
1390
and
term -> factor / term
1390
not
term -> factor / term
1390
<
term -> factor / term
1390
in
term -> factor / term
1390
==
term -> factor / term
1390
<=
term -> factor / term
1390
is
term -> factor / term
1390
&
term -> factor / term
1390
<<
term -> factor / term
1390
!=
term -> factor / term
1390
|
term -> factor / term
1391
NEWLINE
term -> factor * term
1391
-
term -> factor * term
1391
&
term -> factor * term
1391
and
term -> factor * term
1391
,
term -> factor * term
1391
!=
term -> factor * term
1391
|
term -> factor * term
1391
<<
term -> factor * term
1391
<
term -> factor * term
1391
if
term -> factor * term
1391
^
term -> factor * term
1391
+
term -> factor * term
1391
in
term -> factor * term
1391
or
term -> factor * term
1391
>>
term -> factor * term
1391
not
term -> factor * term
1391
==
term -> factor * term
1391
>=
term -> factor * term
1391
<=
term -> factor * term
1391
>
term -> factor * term
1391
is
term -> factor * term
1392
if
term -> factor // term
1392
<
term -> factor // term
1392
and
term -> factor // term
1392
in
term -> factor // term
1392
,
term -> factor // term
1392
>>
term -> factor // term
1392
<=
term -> factor // term
1392
!=
term -> factor // term
1392
^
term -> factor // term
1392
|
term -> factor // term
1392
or
term -> factor // term
1392
NEWLINE
term -> factor // term
1392
>=
term -> factor // term
1392
&
term -> factor // term
1392
>
term -> factor // term
1392
+
term -> factor // term
1392
is
term -> factor // term
1392
not
term -> factor // term
1392
<<
term -> factor // term
1392
-
term -> factor // term
1392
==
term -> factor // term
1393
>>
term -> factor @ term
1393
^
term -> factor @ term
1393
&
term -> factor @ term
1393
|
term -> factor @ term
1393
if
term -> factor @ term
1393
is
term -> factor @ term
1393
<
term -> factor @ term
1393
<<
term -> factor @ term
1393
NEWLINE
term -> factor @ term
1393
and
term -> factor @ term
1393
==
term -> factor @ term
1393
>
term -> factor @ term
1393
in
term -> factor @ term
1393
,
term -> factor @ term
1393
>=
term -> factor @ term
1393
+
term -> factor @ term
1393
not
term -> factor @ term
1393
!=
term -> factor @ term
1393
<=
term -> factor @ term
1393
or
term -> factor @ term
1393
-
term -> factor @ term
1394
<<
atom -> [ test_list_comp ]
1394
,
atom -> [ test_list_comp ]
1394
>>
atom -> [ test_list_comp ]
1394
+
atom -> [ test_list_comp ]
1394
-
atom -> [ test_list_comp ]
1394
not
atom -> [ test_list_comp ]
1394
<=
atom -> [ test_list_comp ]
1394
is
atom -> [ test_list_comp ]
1394
[
atom -> [ test_list_comp ]
1394
*
atom -> [ test_list_comp ]
1394
==
atom -> [ test_list_comp ]
1394
@
atom -> [ test_list_comp ]
1394
NEWLINE
atom -> [ test_list_comp ]
1394
>
atom -> [ test_list_comp ]
1394
%
atom -> [ test_list_comp ]
1394
if
atom -> [ test_list_comp ]
1394
>=
atom -> [ test_list_comp ]
1394
//
atom -> [ test_list_comp ]
1394
.
atom -> [ test_list_comp ]
1394
in
atom -> [ test_list_comp ]
1394
**
atom -> [ test_list_comp ]
1394
and
atom -> [ test_list_comp ]
1394
/
atom -> [ test_list_comp ]
1394
or
atom -> [ test_list_comp ]
1394
!=
atom -> [ test_list_comp ]
1394
<
atom -> [ test_list_comp ]
1394
^
atom -> [ test_list_comp ]
1394
&
atom -> [ test_list_comp ]
1394
(
atom -> [ test_list_comp ]
1394
|
atom -> [ test_list_comp ]
1395
NEWLINE
shift_expr -> arith_expr >> shift_expr
1395
<
shift_expr -> arith_expr >> shift_expr
1395
^
shift_expr -> arith_expr >> shift_expr
1395
in
shift_expr -> arith_expr >> shift_expr
1395
==
shift_expr -> arith_expr >> shift_expr
1395
!=
shift_expr -> arith_expr >> shift_expr
1395
>=
shift_expr -> arith_expr >> shift_expr
1395
not
shift_expr -> arith_expr >> shift_expr
1395
and
shift_expr -> arith_expr >> shift_expr
1395
is
shift_expr -> arith_expr >> shift_expr
1395
,
shift_expr -> arith_expr >> shift_expr
1395
&
shift_expr -> arith_expr >> shift_expr
1395
>
shift_expr -> arith_expr >> shift_expr
1395
|
shift_expr -> arith_expr >> shift_expr
1395
<=
shift_expr -> arith_expr >> shift_expr
1395
or
shift_expr -> arith_expr >> shift_expr
1395
if
shift_expr -> arith_expr >> shift_expr
1396
,
shift_expr -> arith_expr << shift_expr
1396
if
shift_expr -> arith_expr << shift_expr
1396
&
shift_expr -> arith_expr << shift_expr
1396
>=
shift_expr -> arith_expr << shift_expr
1396
<=
shift_expr -> arith_expr << shift_expr
1396
or
shift_expr -> arith_expr << shift_expr
1396
in
shift_expr -> arith_expr << shift_expr
1396
!=
shift_expr -> arith_expr << shift_expr
1396
^
shift_expr -> arith_expr << shift_expr
1396
<
shift_expr -> arith_expr << shift_expr
1396
|
shift_expr -> arith_expr << shift_expr
1396
==
shift_expr -> arith_expr << shift_expr
1396
is
shift_expr -> arith_expr << shift_expr
1396
and
shift_expr -> arith_expr << shift_expr
1396
NEWLINE
shift_expr -> arith_expr << shift_expr
1396
>
shift_expr -> arith_expr << shift_expr
1396
not
shift_expr -> arith_expr << shift_expr
1397
>=
xor_expr -> and_expr ^ xor_expr
1397
>
xor_expr -> and_expr ^ xor_expr
1397
or
xor_expr -> and_expr ^ xor_expr
1397
and
xor_expr -> and_expr ^ xor_expr
1397
<=
xor_expr -> and_expr ^ xor_expr
1397
in
xor_expr -> and_expr ^ xor_expr
1397
==
xor_expr -> and_expr ^ xor_expr
1397
,
xor_expr -> and_expr ^ xor_expr
1397
if
xor_expr -> and_expr ^ xor_expr
1397
!=
xor_expr -> and_expr ^ xor_expr
1397
not
xor_expr -> and_expr ^ xor_expr
1397
<
xor_expr -> and_expr ^ xor_expr
1397
is
xor_expr -> and_expr ^ xor_expr
1397
NEWLINE
xor_expr -> and_expr ^ xor_expr
1397
|
xor_expr -> and_expr ^ xor_expr
1398
@
atom -> ( test_list_comp )
1398
<
atom -> ( test_list_comp )
1398
and
atom -> ( test_list_comp )
1398
if
atom -> ( test_list_comp )
1398
&
atom -> ( test_list_comp )
1398
*
atom -> ( test_list_comp )
1398
%
atom -> ( test_list_comp )
1398
[
atom -> ( test_list_comp )
1398
//
atom -> ( test_list_comp )
1398
<<
atom -> ( test_list_comp )
1398
.
atom -> ( test_list_comp )
1398
/
atom -> ( test_list_comp )
1398
>=
atom -> ( test_list_comp )
1398
or
atom -> ( test_list_comp )
1398
>
atom -> ( test_list_comp )
1398
-
atom -> ( test_list_comp )
1398
|
atom -> ( test_list_comp )
1398
**
atom -> ( test_list_comp )
1398
is
atom -> ( test_list_comp )
1398
==
atom -> ( test_list_comp )
1398
not
atom -> ( test_list_comp )
1398
in
atom -> ( test_list_comp )
1398
!=
atom -> ( test_list_comp )
1398
^
atom -> ( test_list_comp )
1398
,
atom -> ( test_list_comp )
1398
(
atom -> ( test_list_comp )
1398
NEWLINE
atom -> ( test_list_comp )
1398
<=
atom -> ( test_list_comp )
1398
+
atom -> ( test_list_comp )
1398
>>
atom -> ( test_list_comp )
1399
,
and_expr -> shift_expr & and_expr
1399
>=
and_expr -> shift_expr & and_expr
1399
!=
and_expr -> shift_expr & and_expr
1399
or
and_expr -> shift_expr & and_expr
1399
is
and_expr -> shift_expr & and_expr
1399
^
and_expr -> shift_expr & and_expr
1399
==
and_expr -> shift_expr & and_expr
1399
if
and_expr -> shift_expr & and_expr
1399
not
and_expr -> shift_expr & and_expr
1399
<
and_expr -> shift_expr & and_expr
1399
>
and_expr -> shift_expr & and_expr
1399
in
and_expr -> shift_expr & and_expr
1399
and
and_expr -> shift_expr & and_expr
1399
|
and_expr -> shift_expr & and_expr
1399
NEWLINE
and_expr -> shift_expr & and_expr
1399
<=
and_expr -> shift_expr & and_expr
1400
NEWLINE
and_test -> not_test and and_test
1400
or
and_test -> not_test and and_test
1400
if
and_test -> not_test and and_test
1400
,
and_test -> not_test and and_test
1401
NEWLINE
expr -> xor_expr | expr
1401
is
expr -> xor_expr | expr
1401
or
expr -> xor_expr | expr
1401
>
expr -> xor_expr | expr
1401
and
expr -> xor_expr | expr
1401
,
expr -> xor_expr | expr
1401
in
expr -> xor_expr | expr
1401
if
expr -> xor_expr | expr
1401
<=
expr -> xor_expr | expr
1401
not
expr -> xor_expr | expr
1401
==
expr -> xor_expr | expr
1401
>=
expr -> xor_expr | expr
1401
<
expr -> xor_expr | expr
1401
!=
expr -> xor_expr | expr
1402
,
comparison -> expr comp_op comparison
1402
NEWLINE
comparison -> expr comp_op comparison
1402
and
comparison -> expr comp_op comparison
1402
if
comparison -> expr comp_op comparison
1402
or
comparison -> expr comp_op comparison
1403
,
or_test -> and_test or or_test
1403
if
or_test -> and_test or or_test
1403
NEWLINE
or_test -> and_test or or_test
1404
else
1803
1405
NEWLINE
lambdef -> lambda : test
1405
,
lambdef -> lambda : test
1406
NAME
371
1406
atom_expr
372
1406
term
373
1406
atom
374
1406
-
375
1406
factor
376
1406
[
377
1406
True
378
1406
arith_expr
379
1406
False
380
1406
{
381
1406
+
382
1406
and_expr
383
1406
(
384
1406
STRING
385
1406
comparison
386
1406
shift_expr
387
1406
not_test
388
1406
power
389
1406
None
390
1406
xor_expr
391
1406
expr
392
1406
NUMBER
393
1406
and_test
394
1406
or_test
395
1406
~
396
1406
test
1804
1406
lambda
397
1406
lambdef
399
1406
not
400
1407
NEWLINE
test_list -> test , test_list
1408
NEWLINE
namelist -> NAME , namelist
1409
NAME
859
1409
atom_expr
860
1409
atom
862
1409
-
863
1409
[
865
1409
True
866
1409
False
869
1409
{
870
1409
+
871
1409
(
873
1409
STRING
874
1409
factor
1805
1409
power
879
1409
None
881
1409
NUMBER
883
1409
~
887
1410
NAME
859
1410
atom_expr
860
1410
term
861
1410
atom
862
1410
-
863
1410
factor
864
1410
[
865
1410
True
866
1410
False
869
1410
{
870
1410
+
871
1410
(
873
1410
STRING
874
1410
arith_expr
1806
1410
power
879
1410
None
881
1410
NUMBER
883
1410
~
887
1411
NAME
859
1411
atom_expr
860
1411
term
861
1411
atom
862
1411
-
863
1411
factor
864
1411
[
865
1411
True
866
1411
False
869
1411
{
870
1411
+
871
1411
(
873
1411
STRING
874
1411
arith_expr
1807
1411
power
879
1411
None
881
1411
NUMBER
883
1411
~
887
1412
trailer
1412
1412
trailer_expr
1808
1412
[
1414
1412
or
trailer_expr -> 
1412
.
1415
1412
(
1416
1412
not
trailer_expr -> 
1412
in
trailer_expr -> 
1412
is
trailer_expr -> 
1412
>=
trailer_expr -> 
1412
-
trailer_expr -> 
1412
@
trailer_expr -> 
1412
<=
trailer_expr -> 
1412
,
trailer_expr -> 
1412
^
trailer_expr -> 
1412
*
trailer_expr -> 
1412
if
trailer_expr -> 
1412
**
trailer_expr -> 
1412
=
trailer_expr -> 
1412
>
trailer_expr -> 
1412
==
trailer_expr -> 
1412
>>
trailer_expr -> 
1412
<<
trailer_expr -> 
1412
/
trailer_expr -> 
1412
NEWLINE
trailer_expr -> 
1412
//
trailer_expr -> 
1412
!=
trailer_expr -> 
1412
<
trailer_expr -> 
1412
&
trailer_expr -> 
1412
|
trailer_expr -> 
1412
and
trailer_expr -> 
1412
+
trailer_expr -> 
1412
%
trailer_expr -> 
1413
|
atom_expr -> atom trailer_expr
1413
*
atom_expr -> atom trailer_expr
1413
-
atom_expr -> atom trailer_expr
1413
not
atom_expr -> atom trailer_expr
1413
in
atom_expr -> atom trailer_expr
1413
and
atom_expr -> atom trailer_expr
1413
^
atom_expr -> atom trailer_expr
1413
or
atom_expr -> atom trailer_expr
1413
<=
atom_expr -> atom trailer_expr
1413
<
atom_expr -> atom trailer_expr
1413
>>
atom_expr -> atom trailer_expr
1413
NEWLINE
atom_expr -> atom trailer_expr
1413
//
atom_expr -> atom trailer_expr
1413
!=
atom_expr -> atom trailer_expr
1413
<<
atom_expr -> atom trailer_expr
1413
+
atom_expr -> atom trailer_expr
1413
>
atom_expr -> atom trailer_expr
1413
/
atom_expr -> atom trailer_expr
1413
==
atom_expr -> atom trailer_expr
1413
%
atom_expr -> atom trailer_expr
1413
&
atom_expr -> atom trailer_expr
1413
@
atom_expr -> atom trailer_expr
1413
if
atom_expr -> atom trailer_expr
1413
=
atom_expr -> atom trailer_expr
1413
>=
atom_expr -> atom trailer_expr
1413
is
atom_expr -> atom trailer_expr
1413
,
atom_expr -> atom trailer_expr
1413
**
atom_expr -> atom trailer_expr
1414
NAME
461
1414
atom_expr
462
1414
term
463
1414
atom
464
1414
-
465
1414
factor
466
1414
[
467
1414
True
468
1414
arith_expr
469
1414
False
470
1414
{
471
1414
(
472
1414
+
473
1414
and_expr
474
1414
and_test
475
1414
STRING
476
1414
subscriptlist
1809
1414
comparison
478
1414
shift_expr
479
1414
not_test
480
1414
power
481
1414
None
482
1414
xor_expr
483
1414
expr
484
1414
NUMBER
485
1414
test
486
1414
~
487
1414
or_test
488
1414
not
489
1414
lambdef
490
1414
:
maybe_test -> 
1414
lambda
491
1414
subscript
492
1414
maybe_test
493
1415
NAME
1810
1416
NAME
496
1416
atom_expr
497
1416
atom
498
1416
-
499
1416
arglist
1811
1416
factor
501
1416
*
502
1416
[
503
1416
True
504
1416
arith_expr
505
1416
xor_expr
506
1416
False
507
1416
**
508
1416
{
509
1416
+
510
1416
)
1812
1416
and_expr
512
1416
(
513
1416
STRING
514
1416
power
515
1416
term
516
1416
comparison
517
1416
shift_expr
518
1416
argument
519
1416
not_test
520
1416
or_test
521
1416
lambdef
522
1416
lambda
523
1416
None
524
1416
test
525
1416
expr
526
1416
NUMBER
527
1416
and_test
528
1416
~
529
1416
not
530
1417
>>
factor -> - factor
1417
if
factor -> - factor
1417
>
factor -> - factor
1417
,
factor -> - factor
1417
@
factor -> - factor
1417
is
factor -> - factor
1417
//
factor -> - factor
1417
not
factor -> - factor
1417
or
factor -> - factor
1417
-
factor -> - factor
1417
<<
factor -> - factor
1417
>=
factor -> - factor
1417
/
factor -> - factor
1417
<=
factor -> - factor
1417
<
factor -> - factor
1417
in
factor -> - factor
1417
|
factor -> - factor
1417
*
factor -> - factor
1417
NEWLINE
factor -> - factor
1417
!=
factor -> - factor
1417
&
factor -> - factor
1417
and
factor -> - factor
1417
^
factor -> - factor
1417
+
factor -> - factor
1417
%
factor -> - factor
1417
==
factor -> - factor
1417
=
factor -> - factor
1418
NAME
859
1418
atom_expr
860
1418
atom
862
1418
-
863
1418
factor
864
1418
[
865
1418
True
866
1418
False
869
1418
{
870
1418
+
871
1418
(
873
1418
STRING
874
1418
term
1813
1418
power
879
1418
None
881
1418
NUMBER
883
1418
~
887
1419
NAME
859
1419
atom_expr
860
1419
atom
862
1419
-
863
1419
factor
864
1419
[
865
1419
True
866
1419
False
869
1419
term
1814
1419
{
870
1419
+
871
1419
(
873
1419
STRING
874
1419
power
879
1419
None
881
1419
NUMBER
883
1419
~
887
1420
NAME
859
1420
atom_expr
860
1420
atom
862
1420
-
863
1420
factor
864
1420
[
865
1420
True
866
1420
False
869
1420
{
870
1420
+
871
1420
(
873
1420
STRING
874
1420
term
1815
1420
power
879
1420
None
881
1420
NUMBER
883
1420
~
887
1421
NAME
859
1421
atom_expr
860
1421
atom
862
1421
-
863
1421
factor
864
1421
term
1816
1421
[
865
1421
True
866
1421
False
869
1421
{
870
1421
+
871
1421
(
873
1421
STRING
874
1421
power
879
1421
None
881
1421
NUMBER
883
1421
~
887
1422
NAME
859
1422
atom_expr
860
1422
atom
862
1422
-
863
1422
factor
864
1422
[
865
1422
True
866
1422
False
869
1422
{
870
1422
+
871
1422
(
873
1422
STRING
874
1422
term
1817
1422
power
879
1422
None
881
1422
NUMBER
883
1422
~
887
1423
]
1818
1424
and
atom -> [ ]
1424
<<
atom -> [ ]
1424
//
atom -> [ ]
1424
*
atom -> [ ]
1424
+
atom -> [ ]
1424
=
atom -> [ ]
1424
^
atom -> [ ]
1424
==
atom -> [ ]
1424
>>
atom -> [ ]
1424
/
atom -> [ ]
1424
in
atom -> [ ]
1424
NEWLINE
atom -> [ ]
1424
>
atom -> [ ]
1424
<=
atom -> [ ]
1424
.
atom -> [ ]
1424
%
atom -> [ ]
1424
&
atom -> [ ]
1424
-
atom -> [ ]
1424
>=
atom -> [ ]
1424
not
atom -> [ ]
1424
|
atom -> [ ]
1424
@
atom -> [ ]
1424
is
atom -> [ ]
1424
or
atom -> [ ]
1424
!=
atom -> [ ]
1424
if
atom -> [ ]
1424
,
atom -> [ ]
1424
**
atom -> [ ]
1424
<
atom -> [ ]
1424
(
atom -> [ ]
1424
[
atom -> [ ]
1425
NAME
859
1425
atom_expr
860
1425
term
861
1425
atom
862
1425
-
863
1425
factor
864
1425
[
865
1425
True
866
1425
arith_expr
867
1425
False
869
1425
{
870
1425
+
871
1425
(
873
1425
STRING
874
1425
shift_expr
1819
1425
power
879
1425
None
881
1425
NUMBER
883
1425
~
887
1426
NAME
859
1426
atom_expr
860
1426
term
861
1426
atom
862
1426
-
863
1426
factor
864
1426
[
865
1426
True
866
1426
arith_expr
867
1426
False
869
1426
{
870
1426
shift_expr
1820
1426
+
871
1426
(
873
1426
STRING
874
1426
power
879
1426
None
881
1426
NUMBER
883
1426
~
887
1427
NAME
859
1427
atom_expr
860
1427
term
861
1427
atom
862
1427
-
863
1427
factor
864
1427
[
865
1427
True
866
1427
arith_expr
867
1427
xor_expr
868
1427
False
869
1427
{
870
1427
+
871
1427
and_expr
872
1427
(
873
1427
STRING
874
1427
shift_expr
877
1427
power
879
1427
None
881
1427
NUMBER
883
1427
expr
1821
1427
~
887
1428
%
atom -> { }
1428
[
atom -> { }
1428
not
atom -> { }
1428
^
atom -> { }
1428
or
atom -> { }
1428
-
atom -> { }
1428
=
atom -> { }
1428
>=
atom -> { }
1428
<<
atom -> { }
1428
/
atom -> { }
1428
<=
atom -> { }
1428
|
atom -> { }
1428
>>
atom -> { }
1428
@
atom -> { }
1428
is
atom -> { }
1428
if
atom -> { }
1428
NEWLINE
atom -> { }
1428
and
atom -> { }
1428
==
atom -> { }
1428
in
atom -> { }
1428
**
atom -> { }
1428
&
atom -> { }
1428
>
atom -> { }
1428
//
atom -> { }
1428
(
atom -> { }
1428
+
atom -> { }
1428
<
atom -> { }
1428
,
atom -> { }
1428
!=
atom -> { }
1428
.
atom -> { }
1428
*
atom -> { }
1429
>>
factor -> + factor
1429
>=
factor -> + factor
1429
or
factor -> + factor
1429
==
factor -> + factor
1429
-
factor -> + factor
1429
*
factor -> + factor
1429
NEWLINE
factor -> + factor
1429
<
factor -> + factor
1429
^
factor -> + factor
1429
,
factor -> + factor
1429
&
factor -> + factor
1429
@
factor -> + factor
1429
|
factor -> + factor
1429
<<
factor -> + factor
1429
%
factor -> + factor
1429
not
factor -> + factor
1429
//
factor -> + factor
1429
and
factor -> + factor
1429
in
factor -> + factor
1429
!=
factor -> + factor
1429
=
factor -> + factor
1429
>
factor -> + factor
1429
/
factor -> + factor
1429
is
factor -> + factor
1429
+
factor -> + factor
1429
if
factor -> + factor
1429
<=
factor -> + factor
1430
NAME
859
1430
atom_expr
860
1430
term
861
1430
atom
862
1430
-
863
1430
factor
864
1430
[
865
1430
True
866
1430
arith_expr
867
1430
False
869
1430
{
870
1430
+
871
1430
and_expr
872
1430
(
873
1430
STRING
874
1430
xor_expr
1822
1430
shift_expr
877
1430
power
879
1430
None
881
1430
NUMBER
883
1430
~
887
1431
NEWLINE
atom -> ( )
1431
|
atom -> ( )
1431
**
atom -> ( )
1431
>>
atom -> ( )
1431
-
atom -> ( )
1431
%
atom -> ( )
1431
(
atom -> ( )
1431
not
atom -> ( )
1431
+
atom -> ( )
1431
>=
atom -> ( )
1431
&
atom -> ( )
1431
*
atom -> ( )
1431
!=
atom -> ( )
1431
<=
atom -> ( )
1431
and
atom -> ( )
1431
<
atom -> ( )
1431
^
atom -> ( )
1431
==
atom -> ( )
1431
if
atom -> ( )
1431
in
atom -> ( )
1431
/
atom -> ( )
1431
>
atom -> ( )
1431
//
atom -> ( )
1431
.
atom -> ( )
1431
or
atom -> ( )
1431
@
atom -> ( )
1431
is
atom -> ( )
1431
=
atom -> ( )
1431
<<
atom -> ( )
1431
,
atom -> ( )
1431
[
atom -> ( )
1432
)
1823
1433
NAME
859
1433
atom_expr
860
1433
term
861
1433
atom
862
1433
-
863
1433
factor
864
1433
[
865
1433
True
866
1433
arith_expr
867
1433
xor_expr
868
1433
False
869
1433
{
870
1433
+
871
1433
and_expr
872
1433
(
873
1433
STRING
874
1433
test
875
1433
comparison
876
1433
shift_expr
877
1433
not_test
878
1433
power
879
1433
lambdef
880
1433
None
881
1433
expr
882
1433
NUMBER
883
1433
and_test
884
1433
or_test
885
1433
~
887
1433
test_list
1824
1433
lambda
889
1433
not
890
1434
NAME
859
1434
atom_expr
860
1434
term
861
1434
atom
862
1434
-
863
1434
factor
864
1434
[
865
1434
True
866
1434
arith_expr
867
1434
False
869
1434
{
870
1434
+
871
1434
(
873
1434
STRING
874
1434
shift_expr
877
1434
power
879
1434
None
881
1434
and_expr
1825
1434
NUMBER
883
1434
~
887
1435
NAME
859
1435
atom_expr
860
1435
term
861
1435
atom
862
1435
-
863
1435
factor
864
1435
[
865
1435
True
866
1435
arith_expr
867
1435
xor_expr
868
1435
False
869
1435
{
870
1435
+
871
1435
and_expr
872
1435
(
873
1435
STRING
874
1435
comparison
876
1435
shift_expr
877
1435
not_test
878
1435
power
879
1435
None
881
1435
expr
882
1435
NUMBER
883
1435
and_test
1826
1435
~
887
1435
not
890
1436
NAME
859
1436
atom_expr
860
1436
term
861
1436
atom
862
1436
-
863
1436
factor
864
1436
[
865
1436
True
866
1436
arith_expr
867
1436
xor_expr
868
1436
False
869
1436
{
870
1436
+
871
1436
and_expr
872
1436
(
873
1436
STRING
874
1436
shift_expr
877
1436
power
879
1436
None
881
1436
comparison
1827
1436
expr
882
1436
NUMBER
883
1436
~
887
1437
NAME
859
1437
atom_expr
860
1437
term
861
1437
atom
862
1437
-
863
1437
factor
864
1437
[
865
1437
True
866
1437
arith_expr
867
1437
xor_expr
868
1437
False
869
1437
{
870
1437
+
871
1437
and_expr
872
1437
(
873
1437
STRING
874
1437
comparison
876
1437
shift_expr
877
1437
not_test
878
1437
power
879
1437
None
881
1437
expr
882
1437
NUMBER
883
1437
and_test
884
1437
~
887
1437
or_test
1828
1437
not
890
1438
atom_expr
685
1438
atom
686
1438
-
687
1438
factor
688
1438
and_test
689
1438
True
690
1438
arith_expr
691
1438
False
692
1438
NAME
693
1438
{
694
1438
+
695
1438
and_expr
696
1438
[
697
1438
(
698
1438
STRING
699
1438
term
700
1438
comparison
701
1438
shift_expr
702
1438
not_test
703
1438
power
704
1438
xor_expr
706
1438
None
707
1438
NUMBER
708
1438
expr
709
1438
or_test
1829
1438
~
710
1438
not
711
1439
NEWLINE
assign -> = test_list assign
1440
is
factor -> ~ factor
1440
>=
factor -> ~ factor
1440
<<
factor -> ~ factor
1440
<=
factor -> ~ factor
1440
if
factor -> ~ factor
1440
==
factor -> ~ factor
1440
//
factor -> ~ factor
1440
or
factor -> ~ factor
1440
+
factor -> ~ factor
1440
and
factor -> ~ factor
1440
!=
factor -> ~ factor
1440
&
factor -> ~ factor
1440
|
factor -> ~ factor
1440
>>
factor -> ~ factor
1440
in
factor -> ~ factor
1440
NEWLINE
factor -> ~ factor
1440
=
factor -> ~ factor
1440
>
factor -> ~ factor
1440
/
factor -> ~ factor
1440
not
factor -> ~ factor
1440
@
factor -> ~ factor
1440
-
factor -> ~ factor
1440
^
factor -> ~ factor
1440
,
factor -> ~ factor
1440
*
factor -> ~ factor
1440
<
factor -> ~ factor
1440
%
factor -> ~ factor
1441
NEWLINE
yield_arg -> test_list
1441
=
yield_arg -> test_list
1442
NAME
1830
1442
atom_expr
1831
1442
term
1832
1442
atom
1833
1442
-
1834
1442
factor
1835
1442
True
1836
1442
arith_expr
1837
1442
xor_expr
1838
1442
False
1839
1442
{
1840
1442
+
1841
1442
and_expr
1842
1442
[
1843
1442
(
1844
1442
STRING
1845
1442
comparison
1846
1442
shift_expr
1847
1442
not_test
1848
1442
power
1849
1442
lambdef
1850
1442
None
1851
1442
expr
1852
1442
NUMBER
1853
1442
and_test
1854
1442
or_test
1855
1442
~
1856
1442
test
1857
1442
lambda
1858
1442
not
1859
1443
=
yield_expr -> yield yield_arg
1443
NEWLINE
yield_expr -> yield yield_arg
1444
NAME
859
1444
atom_expr
860
1444
term
861
1444
atom
862
1444
-
863
1444
factor
864
1444
[
865
1444
True
866
1444
arith_expr
867
1444
xor_expr
868
1444
False
869
1444
{
870
1444
+
871
1444
and_expr
872
1444
(
873
1444
STRING
874
1444
comparison
876
1444
shift_expr
877
1444
not_test
878
1444
power
879
1444
lambdef
880
1444
None
881
1444
expr
882
1444
NUMBER
883
1444
and_test
884
1444
test
1860
1444
or_test
885
1444
~
887
1444
lambda
889
1444
not
890
1445
:
1861
1446
,
not_test -> not not_test
1446
or
not_test -> not not_test
1446
NEWLINE
not_test -> not not_test
1446
=
not_test -> not not_test
1446
if
not_test -> not not_test
1446
and
not_test -> not not_test
1447
NEWLINE
assign -> = yield_expr assign
1448
NEWLINE
yield_arg -> test_list
1449
NAME
300
1449
atom_expr
301
1449
term
302
1449
atom
303
1449
-
304
1449
factor
305
1449
True
306
1449
arith_expr
307
1449
False
308
1449
{
309
1449
+
310
1449
and_expr
311
1449
[
312
1449
(
313
1449
STRING
314
1449
comparison
315
1449
shift_expr
316
1449
not_test
317
1449
power
318
1449
None
319
1449
xor_expr
320
1449
expr
321
1449
NUMBER
322
1449
and_test
323
1449
or_test
324
1449
~
325
1449
lambda
326
1449
lambdef
327
1449
not
328
1449
test
1862
1450
NEWLINE
yield_expr -> yield yield_arg
1451
NAME
896
1451
atom_expr
897
1451
atom
898
1451
-
899
1451
True
901
1451
False
904
1451
{
905
1451
+
906
1451
[
908
1451
(
909
1451
STRING
910
1451
factor
1863
1451
power
915
1451
None
918
1451
NUMBER
920
1451
~
921
1452
trailer
1452
1452
trailer_expr
1864
1452
[
1454
1452
or
trailer_expr -> 
1452
.
1455
1452
(
1456
1452
not
trailer_expr -> 
1452
in
trailer_expr -> 
1452
is
trailer_expr -> 
1452
>=
trailer_expr -> 
1452
-
trailer_expr -> 
1452
@
trailer_expr -> 
1452
<=
trailer_expr -> 
1452
^
trailer_expr -> 
1452
*
trailer_expr -> 
1452
if
trailer_expr -> 
1452
**
trailer_expr -> 
1452
=
trailer_expr -> 
1452
>
trailer_expr -> 
1452
==
trailer_expr -> 
1452
>>
trailer_expr -> 
1452
<<
trailer_expr -> 
1452
/
trailer_expr -> 
1452
//
trailer_expr -> 
1452
!=
trailer_expr -> 
1452
<
trailer_expr -> 
1452
&
trailer_expr -> 
1452
|
trailer_expr -> 
1452
and
trailer_expr -> 
1452
+
trailer_expr -> 
1452
%
trailer_expr -> 
1453
|
atom_expr -> atom trailer_expr
1453
*
atom_expr -> atom trailer_expr
1453
-
atom_expr -> atom trailer_expr
1453
not
atom_expr -> atom trailer_expr
1453
in
atom_expr -> atom trailer_expr
1453
and
atom_expr -> atom trailer_expr
1453
^
atom_expr -> atom trailer_expr
1453
or
atom_expr -> atom trailer_expr
1453
<=
atom_expr -> atom trailer_expr
1453
<
atom_expr -> atom trailer_expr
1453
>>
atom_expr -> atom trailer_expr
1453
//
atom_expr -> atom trailer_expr
1453
!=
atom_expr -> atom trailer_expr
1453
<<
atom_expr -> atom trailer_expr
1453
+
atom_expr -> atom trailer_expr
1453
>
atom_expr -> atom trailer_expr
1453
/
atom_expr -> atom trailer_expr
1453
==
atom_expr -> atom trailer_expr
1453
%
atom_expr -> atom trailer_expr
1453
&
atom_expr -> atom trailer_expr
1453
@
atom_expr -> atom trailer_expr
1453
if
atom_expr -> atom trailer_expr
1453
=
atom_expr -> atom trailer_expr
1453
>=
atom_expr -> atom trailer_expr
1453
is
atom_expr -> atom trailer_expr
1453
**
atom_expr -> atom trailer_expr
1454
NAME
461
1454
atom_expr
462
1454
term
463
1454
atom
464
1454
-
465
1454
factor
466
1454
[
467
1454
True
468
1454
arith_expr
469
1454
False
470
1454
{
471
1454
(
472
1454
+
473
1454
and_expr
474
1454
and_test
475
1454
STRING
476
1454
subscriptlist
1865
1454
comparison
478
1454
shift_expr
479
1454
not_test
480
1454
power
481
1454
None
482
1454
xor_expr
483
1454
expr
484
1454
NUMBER
485
1454
test
486
1454
~
487
1454
or_test
488
1454
not
489
1454
lambdef
490
1454
:
maybe_test -> 
1454
lambda
491
1454
subscript
492
1454
maybe_test
493
1455
NAME
1866
1456
NAME
496
1456
atom_expr
497
1456
atom
498
1456
-
499
1456
arglist
1867
1456
factor
501
1456
*
502
1456
[
503
1456
True
504
1456
arith_expr
505
1456
xor_expr
506
1456
False
507
1456
**
508
1456
{
509
1456
+
510
1456
)
1868
1456
and_expr
512
1456
(
513
1456
STRING
514
1456
power
515
1456
term
516
1456
comparison
517
1456
shift_expr
518
1456
argument
519
1456
not_test
520
1456
or_test
521
1456
lambdef
522
1456
lambda
523
1456
None
524
1456
test
525
1456
expr
526
1456
NUMBER
527
1456
and_test
528
1456
~
529
1456
not
530
1457
>>
factor -> - factor
1457
if
factor -> - factor
1457
>
factor -> - factor
1457
@
factor -> - factor
1457
is
factor -> - factor
1457
//
factor -> - factor
1457
not
factor -> - factor
1457
or
factor -> - factor
1457
-
factor -> - factor
1457
<<
factor -> - factor
1457
>=
factor -> - factor
1457
/
factor -> - factor
1457
<=
factor -> - factor
1457
<
factor -> - factor
1457
in
factor -> - factor
1457
*
factor -> - factor
1457
|
factor -> - factor
1457
!=
factor -> - factor
1457
&
factor -> - factor
1457
and
factor -> - factor
1457
^
factor -> - factor
1457
+
factor -> - factor
1457
%
factor -> - factor
1457
==
factor -> - factor
1457
=
factor -> - factor
1458
NAME
896
1458
atom_expr
897
1458
atom
898
1458
-
899
1458
factor
900
1458
True
901
1458
False
904
1458
{
905
1458
+
906
1458
[
908
1458
(
909
1458
STRING
910
1458
term
1869
1458
power
915
1458
None
918
1458
NUMBER
920
1458
~
921
1459
NAME
896
1459
atom_expr
897
1459
atom
898
1459
-
899
1459
factor
900
1459
True
901
1459
False
904
1459
term
1870
1459
{
905
1459
+
906
1459
[
908
1459
(
909
1459
STRING
910
1459
power
915
1459
None
918
1459
NUMBER
920
1459
~
921
1460
NAME
896
1460
atom_expr
897
1460
atom
898
1460
-
899
1460
factor
900
1460
True
901
1460
False
904
1460
{
905
1460
+
906
1460
[
908
1460
(
909
1460
STRING
910
1460
power
915
1460
None
918
1460
NUMBER
920
1460
~
921
1460
term
1871
1461
NAME
896
1461
atom_expr
897
1461
atom
898
1461
-
899
1461
factor
900
1461
True
901
1461
False
904
1461
{
905
1461
+
906
1461
[
908
1461
(
909
1461
STRING
910
1461
term
1872
1461
power
915
1461
None
918
1461
NUMBER
920
1461
~
921
1462
NAME
896
1462
atom_expr
897
1462
atom
898
1462
-
899
1462
factor
900
1462
True
901
1462
False
904
1462
{
905
1462
+
906
1462
[
908
1462
(
909
1462
STRING
910
1462
term
1873
1462
power
915
1462
None
918
1462
NUMBER
920
1462
~
921
1463
NAME
896
1463
atom_expr
897
1463
atom
898
1463
-
899
1463
factor
900
1463
True
901
1463
arith_expr
902
1463
False
904
1463
{
905
1463
+
906
1463
[
908
1463
(
909
1463
STRING
910
1463
shift_expr
1874
1463
term
911
1463
power
915
1463
None
918
1463
NUMBER
920
1463
~
921
1464
NAME
896
1464
atom_expr
897
1464
atom
898
1464
-
899
1464
factor
900
1464
True
901
1464
arith_expr
902
1464
False
904
1464
{
905
1464
shift_expr
1875
1464
+
906
1464
[
908
1464
(
909
1464
STRING
910
1464
term
911
1464
power
915
1464
None
918
1464
NUMBER
920
1464
~
921
1465
NAME
896
1465
atom_expr
897
1465
atom
898
1465
-
899
1465
factor
900
1465
True
901
1465
arith_expr
902
1465
xor_expr
903
1465
False
904
1465
{
905
1465
+
906
1465
and_expr
907
1465
[
908
1465
(
909
1465
STRING
910
1465
term
911
1465
shift_expr
913
1465
power
915
1465
None
918
1465
NUMBER
920
1465
expr
1876
1465
~
921
1466
%
atom -> { }
1466
[
atom -> { }
1466
not
atom -> { }
1466
^
atom -> { }
1466
or
atom -> { }
1466
-
atom -> { }
1466
=
atom -> { }
1466
>=
atom -> { }
1466
<<
atom -> { }
1466
/
atom -> { }
1466
<=
atom -> { }
1466
|
atom -> { }
1466
>>
atom -> { }
1466
@
atom -> { }
1466
is
atom -> { }
1466
if
atom -> { }
1466
and
atom -> { }
1466
==
atom -> { }
1466
in
atom -> { }
1466
**
atom -> { }
1466
&
atom -> { }
1466
>
atom -> { }
1466
//
atom -> { }
1466
(
atom -> { }
1466
+
atom -> { }
1466
<
atom -> { }
1466
!=
atom -> { }
1466
.
atom -> { }
1466
*
atom -> { }
1467
>>
factor -> + factor
1467
>=
factor -> + factor
1467
or
factor -> + factor
1467
==
factor -> + factor
1467
-
factor -> + factor
1467
*
factor -> + factor
1467
<
factor -> + factor
1467
^
factor -> + factor
1467
&
factor -> + factor
1467
@
factor -> + factor
1467
|
factor -> + factor
1467
<<
factor -> + factor
1467
%
factor -> + factor
1467
not
factor -> + factor
1467
//
factor -> + factor
1467
and
factor -> + factor
1467
in
factor -> + factor
1467
!=
factor -> + factor
1467
=
factor -> + factor
1467
>
factor -> + factor
1467
/
factor -> + factor
1467
is
factor -> + factor
1467
+
factor -> + factor
1467
if
factor -> + factor
1467
<=
factor -> + factor
1468
NAME
896
1468
atom_expr
897
1468
atom
898
1468
-
899
1468
factor
900
1468
True
901
1468
arith_expr
902
1468
False
904
1468
{
905
1468
+
906
1468
and_expr
907
1468
[
908
1468
(
909
1468
STRING
910
1468
xor_expr
1877
1468
term
911
1468
shift_expr
913
1468
power
915
1468
None
918
1468
NUMBER
920
1468
~
921
1469
]
1878
1470
and
atom -> [ ]
1470
<<
atom -> [ ]
1470
//
atom -> [ ]
1470
*
atom -> [ ]
1470
+
atom -> [ ]
1470
=
atom -> [ ]
1470
^
atom -> [ ]
1470
==
atom -> [ ]
1470
>>
atom -> [ ]
1470
/
atom -> [ ]
1470
in
atom -> [ ]
1470
>
atom -> [ ]
1470
<=
atom -> [ ]
1470
.
atom -> [ ]
1470
%
atom -> [ ]
1470
&
atom -> [ ]
1470
-
atom -> [ ]
1470
>=
atom -> [ ]
1470
not
atom -> [ ]
1470
|
atom -> [ ]
1470
@
atom -> [ ]
1470
is
atom -> [ ]
1470
or
atom -> [ ]
1470
!=
atom -> [ ]
1470
if
atom -> [ ]
1470
**
atom -> [ ]
1470
<
atom -> [ ]
1470
(
atom -> [ ]
1470
[
atom -> [ ]
1471
|
atom -> ( )
1471
**
atom -> ( )
1471
>>
atom -> ( )
1471
-
atom -> ( )
1471
%
atom -> ( )
1471
(
atom -> ( )
1471
not
atom -> ( )
1471
+
atom -> ( )
1471
>=
atom -> ( )
1471
&
atom -> ( )
1471
*
atom -> ( )
1471
!=
atom -> ( )
1471
<=
atom -> ( )
1471
and
atom -> ( )
1471
<
atom -> ( )
1471
^
atom -> ( )
1471
==
atom -> ( )
1471
if
atom -> ( )
1471
in
atom -> ( )
1471
/
atom -> ( )
1471
>
atom -> ( )
1471
//
atom -> ( )
1471
.
atom -> ( )
1471
or
atom -> ( )
1471
@
atom -> ( )
1471
is
atom -> ( )
1471
=
atom -> ( )
1471
<<
atom -> ( )
1471
[
atom -> ( )
1472
)
1879
1473
NAME
896
1473
atom_expr
897
1473
atom
898
1473
-
899
1473
factor
900
1473
True
901
1473
False
904
1473
{
905
1473
+
906
1473
[
908
1473
(
909
1473
STRING
910
1473
arith_expr
1880
1473
term
911
1473
power
915
1473
None
918
1473
NUMBER
920
1473
~
921
1474
NAME
896
1474
atom_expr
897
1474
atom
898
1474
-
899
1474
factor
900
1474
True
901
1474
False
904
1474
{
905
1474
+
906
1474
[
908
1474
(
909
1474
STRING
910
1474
term
911
1474
arith_expr
1881
1474
power
915
1474
None
918
1474
NUMBER
920
1474
~
921
1475
NAME
896
1475
atom_expr
897
1475
atom
898
1475
-
899
1475
factor
900
1475
True
901
1475
arith_expr
902
1475
False
904
1475
{
905
1475
+
906
1475
[
908
1475
(
909
1475
STRING
910
1475
term
911
1475
shift_expr
913
1475
power
915
1475
None
918
1475
and_expr
1882
1475
NUMBER
920
1475
~
921
1476
NAME
896
1476
atom_expr
897
1476
atom
898
1476
-
899
1476
factor
900
1476
True
901
1476
arith_expr
902
1476
xor_expr
903
1476
False
904
1476
{
905
1476
+
906
1476
and_expr
907
1476
[
908
1476
(
909
1476
STRING
910
1476
term
911
1476
comparison
912
1476
shift_expr
913
1476
not_test
914
1476
power
915
1476
None
918
1476
expr
919
1476
NUMBER
920
1476
~
921
1476
not
923
1476
and_test
1883
1477
NAME
300
1477
atom_expr
301
1477
term
302
1477
atom
303
1477
-
304
1477
factor
305
1477
True
306
1477
arith_expr
307
1477
False
308
1477
{
309
1477
+
310
1477
and_expr
311
1477
[
312
1477
(
313
1477
STRING
314
1477
comparison
315
1477
shift_expr
316
1477
not_test
317
1477
power
318
1477
None
319
1477
xor_expr
320
1477
expr
321
1477
NUMBER
322
1477
and_test
323
1477
or_test
324
1477
~
325
1477
test
1884
1477
lambda
326
1477
lambdef
327
1477
not
328
1478
NAME
896
1478
atom_expr
897
1478
atom
898
1478
-
899
1478
factor
900
1478
True
901
1478
arith_expr
902
1478
xor_expr
903
1478
False
904
1478
{
905
1478
+
906
1478
and_expr
907
1478
[
908
1478
(
909
1478
STRING
910
1478
term
911
1478
shift_expr
913
1478
power
915
1478
None
918
1478
comparison
1885
1478
expr
919
1478
NUMBER
920
1478
~
921
1479
is
factor -> ~ factor
1479
>=
factor -> ~ factor
1479
<<
factor -> ~ factor
1479
<=
factor -> ~ factor
1479
if
factor -> ~ factor
1479
==
factor -> ~ factor
1479
//
factor -> ~ factor
1479
or
factor -> ~ factor
1479
+
factor -> ~ factor
1479
and
factor -> ~ factor
1479
!=
factor -> ~ factor
1479
&
factor -> ~ factor
1479
|
factor -> ~ factor
1479
>>
factor -> ~ factor
1479
in
factor -> ~ factor
1479
=
factor -> ~ factor
1479
>
factor -> ~ factor
1479
/
factor -> ~ factor
1479
not
factor -> ~ factor
1479
@
factor -> ~ factor
1479
-
factor -> ~ factor
1479
^
factor -> ~ factor
1479
*
factor -> ~ factor
1479
<
factor -> ~ factor
1479
%
factor -> ~ factor
1480
atom_expr
685
1480
atom
686
1480
-
687
1480
factor
688
1480
and_test
689
1480
True
690
1480
arith_expr
691
1480
False
692
1480
NAME
693
1480
{
694
1480
+
695
1480
and_expr
696
1480
[
697
1480
(
698
1480
STRING
699
1480
term
700
1480
comparison
701
1480
shift_expr
702
1480
not_test
703
1480
power
704
1480
xor_expr
706
1480
None
707
1480
NUMBER
708
1480
expr
709
1480
~
710
1480
not
711
1480
or_test
1886
1481
if
not_test -> not not_test
1481
or
not_test -> not not_test
1481
and
not_test -> not not_test
1481
=
not_test -> not not_test
1482
NAME
896
1482
atom_expr
897
1482
atom
898
1482
-
899
1482
factor
900
1482
True
901
1482
arith_expr
902
1482
xor_expr
903
1482
False
904
1482
{
905
1482
+
906
1482
and_expr
907
1482
[
908
1482
(
909
1482
STRING
910
1482
term
911
1482
comparison
912
1482
shift_expr
913
1482
not_test
914
1482
power
915
1482
None
918
1482
expr
919
1482
NUMBER
920
1482
~
921
1482
or_test
1887
1482
not
923
1482
and_test
924
1483
NAME
896
1483
atom_expr
897
1483
atom
898
1483
-
899
1483
factor
900
1483
True
901
1483
arith_expr
902
1483
xor_expr
903
1483
False
904
1483
{
905
1483
+
906
1483
and_expr
907
1483
[
908
1483
(
909
1483
STRING
910
1483
term
911
1483
comparison
912
1483
shift_expr
913
1483
not_test
914
1483
power
915
1483
lambdef
916
1483
None
918
1483
expr
919
1483
NUMBER
920
1483
test
1888
1483
~
921
1483
or_test
922
1483
not
923
1483
and_test
924
1483
lambda
925
1484
:
1889
1485
(
trailer -> [ subscriptlist ]
1485
//
trailer -> [ subscriptlist ]
1485
&
trailer -> [ subscriptlist ]
1485
>
trailer -> [ subscriptlist ]
1485
in
trailer -> [ subscriptlist ]
1485
>>
trailer -> [ subscriptlist ]
1485
[
trailer -> [ subscriptlist ]
1485
<=
trailer -> [ subscriptlist ]
1485
-
trailer -> [ subscriptlist ]
1485
!=
trailer -> [ subscriptlist ]
1485
|
trailer -> [ subscriptlist ]
1485
not
trailer -> [ subscriptlist ]
1485
.
trailer -> [ subscriptlist ]
1485
>=
trailer -> [ subscriptlist ]
1485
or
trailer -> [ subscriptlist ]
1485
*
trailer -> [ subscriptlist ]
1485
<<
trailer -> [ subscriptlist ]
1485
**
trailer -> [ subscriptlist ]
1485
==
trailer -> [ subscriptlist ]
1485
+
trailer -> [ subscriptlist ]
1485
is
trailer -> [ subscriptlist ]
1485
/
trailer -> [ subscriptlist ]
1485
^
trailer -> [ subscriptlist ]
1485
and
trailer -> [ subscriptlist ]
1485
@
trailer -> [ subscriptlist ]
1485
if
trailer -> [ subscriptlist ]
1485
<
trailer -> [ subscriptlist ]
1485
%
trailer -> [ subscriptlist ]
1485
:
trailer -> [ subscriptlist ]
1486
or
trailer -> ( arglist )
1486
>>
trailer -> ( arglist )
1486
<=
trailer -> ( arglist )
1486
**
trailer -> ( arglist )
1486
<
trailer -> ( arglist )
1486
(
trailer -> ( arglist )
1486
-
trailer -> ( arglist )
1486
not
trailer -> ( arglist )
1486
if
trailer -> ( arglist )
1486
and
trailer -> ( arglist )
1486
.
trailer -> ( arglist )
1486
is
trailer -> ( arglist )
1486
>
trailer -> ( arglist )
1486
in
trailer -> ( arglist )
1486
!=
trailer -> ( arglist )
1486
==
trailer -> ( arglist )
1486
%
trailer -> ( arglist )
1486
@
trailer -> ( arglist )
1486
^
trailer -> ( arglist )
1486
<<
trailer -> ( arglist )
1486
*
trailer -> ( arglist )
1486
//
trailer -> ( arglist )
1486
:
trailer -> ( arglist )
1486
&
trailer -> ( arglist )
1486
|
trailer -> ( arglist )
1486
>=
trailer -> ( arglist )
1486
+
trailer -> ( arglist )
1486
/
trailer -> ( arglist )
1486
[
trailer -> ( arglist )
1487
STRING
simple_stmt -> small_stmt NEWLINE
1487
while
simple_stmt -> small_stmt NEWLINE
1487
~
simple_stmt -> small_stmt NEWLINE
1487
del
simple_stmt -> small_stmt NEWLINE
1487
global
simple_stmt -> small_stmt NEWLINE
1487
NUMBER
simple_stmt -> small_stmt NEWLINE
1487
True
simple_stmt -> small_stmt NEWLINE
1487
NAME
simple_stmt -> small_stmt NEWLINE
1487
with
simple_stmt -> small_stmt NEWLINE
1487
NEWLINE
simple_stmt -> small_stmt NEWLINE
1487
(
simple_stmt -> small_stmt NEWLINE
1487
-
simple_stmt -> small_stmt NEWLINE
1487
+
simple_stmt -> small_stmt NEWLINE
1487
continue
simple_stmt -> small_stmt NEWLINE
1487
endsim
simple_stmt -> small_stmt NEWLINE
1487
try
simple_stmt -> small_stmt NEWLINE
1487
$
simple_stmt -> small_stmt NEWLINE
1487
[
simple_stmt -> small_stmt NEWLINE
1487
raise
simple_stmt -> small_stmt NEWLINE
1487
if
simple_stmt -> small_stmt NEWLINE
1487
{
simple_stmt -> small_stmt NEWLINE
1487
begsim
simple_stmt -> small_stmt NEWLINE
1487
return
simple_stmt -> small_stmt NEWLINE
1487
assert
simple_stmt -> small_stmt NEWLINE
1487
nonlocal
simple_stmt -> small_stmt NEWLINE
1487
elif
simple_stmt -> small_stmt NEWLINE
1487
not
simple_stmt -> small_stmt NEWLINE
1487
conf
simple_stmt -> small_stmt NEWLINE
1487
yield
simple_stmt -> small_stmt NEWLINE
1487
resetstats
simple_stmt -> small_stmt NEWLINE
1487
None
simple_stmt -> small_stmt NEWLINE
1487
else
simple_stmt -> small_stmt NEWLINE
1487
for
simple_stmt -> small_stmt NEWLINE
1487
class
simple_stmt -> small_stmt NEWLINE
1487
@
simple_stmt -> small_stmt NEWLINE
1487
pass
simple_stmt -> small_stmt NEWLINE
1487
lambda
simple_stmt -> small_stmt NEWLINE
1487
False
simple_stmt -> small_stmt NEWLINE
1487
break
simple_stmt -> small_stmt NEWLINE
1487
def
simple_stmt -> small_stmt NEWLINE
1488
else
1890
1488
return
if_stmt -> if test : suite elif_clause
1488
$
if_stmt -> if test : suite elif_clause
1488
(
if_stmt -> if test : suite elif_clause
1488
del
if_stmt -> if test : suite elif_clause
1488
[
if_stmt -> if test : suite elif_clause
1488
global
if_stmt -> if test : suite elif_clause
1488
raise
if_stmt -> if test : suite elif_clause
1488
+
if_stmt -> if test : suite elif_clause
1488
resetstats
if_stmt -> if test : suite elif_clause
1488
break
if_stmt -> if test : suite elif_clause
1488
try
if_stmt -> if test : suite elif_clause
1488
None
if_stmt -> if test : suite elif_clause
1488
lambda
if_stmt -> if test : suite elif_clause
1488
NUMBER
if_stmt -> if test : suite elif_clause
1488
pass
if_stmt -> if test : suite elif_clause
1488
@
if_stmt -> if test : suite elif_clause
1488
if
if_stmt -> if test : suite elif_clause
1488
NEWLINE
if_stmt -> if test : suite elif_clause
1488
False
if_stmt -> if test : suite elif_clause
1488
yield
if_stmt -> if test : suite elif_clause
1488
assert
if_stmt -> if test : suite elif_clause
1488
class
if_stmt -> if test : suite elif_clause
1488
True
if_stmt -> if test : suite elif_clause
1488
with
if_stmt -> if test : suite elif_clause
1488
begsim
if_stmt -> if test : suite elif_clause
1488
not
if_stmt -> if test : suite elif_clause
1488
for
if_stmt -> if test : suite elif_clause
1488
continue
if_stmt -> if test : suite elif_clause
1488
{
if_stmt -> if test : suite elif_clause
1488
nonlocal
if_stmt -> if test : suite elif_clause
1488
endsim
if_stmt -> if test : suite elif_clause
1488
while
if_stmt -> if test : suite elif_clause
1488
~
if_stmt -> if test : suite elif_clause
1488
def
if_stmt -> if test : suite elif_clause
1488
STRING
if_stmt -> if test : suite elif_clause
1488
-
if_stmt -> if test : suite elif_clause
1488
NAME
if_stmt -> if test : suite elif_clause
1488
conf
if_stmt -> if test : suite elif_clause
1489
NAME
85
1489
atom_expr
86
1489
term
87
1489
atom
88
1489
-
89
1489
factor
90
1489
True
91
1489
arith_expr
92
1489
False
94
1489
{
96
1489
(
97
1489
+
95
1489
and_expr
98
1489
and_test
99
1489
[
100
1489
STRING
101
1489
comparison
102
1489
shift_expr
103
1489
not_test
104
1489
power
105
1489
None
106
1489
test
1891
1489
xor_expr
107
1489
expr
108
1489
NUMBER
109
1489
~
110
1489
not
111
1489
or_test
112
1489
lambda
113
1489
lambdef
114
1490
True
1
1490
if
1708
1490
decorated
1709
1490
atom
4
1490
atom_expr
5
1490
while_stmt
1710
1490
try
1711
1490
shift_expr
7
1490
arith_expr
8
1490
and_expr
9
1490
conf
1712
1490
factor
11
1490
NAME
12
1490
(
13
1490
for
1713
1490
[
15
1490
resetstats
16
1490
compound_stmt
1714
1490
while
1715
1490
raise
19
1490
class
1716
1490
small_stmt
1717
1490
or_test
23
1490
for_stmt
1718
1490
try_stmt
1719
1490
def
1720
1490
False
27
1490
comparison
28
1490
term
29
1490
simple_stmt
1721
1490
+
31
1490
power
32
1490
not_test
33
1490
None
34
1490
with
1722
1490
classdef
1723
1490
lambdef
37
1490
if_stmt
1724
1490
NUMBER
39
1490
xor_expr
40
1490
{
41
1490
not
42
1490
-
43
1490
stmt_list
1892
1490
funcdef
1725
1490
decorators
1726
1490
STRING
46
1490
test
47
1490
and_test
48
1490
begsim
49
1490
expr
50
1490
with_stmt
1727
1490
lambda
53
1490
return
54
1490
~
55
1490
confdef
1728
1490
return_stmt
56
1490
endsim
57
1490
@
58
1490
raise_stmt
59
1490
global_stmt
61
1490
continue_stmt
62
1490
assert
63
1490
break_stmt
64
1490
del
66
1490
global
67
1490
pass_stmt
68
1490
test_list
70
1490
flow_stmt
71
1490
yield_stmt
72
1490
stmt
1729
1490
pass
73
1490
continue
74
1490
del_stmt
75
1490
nonlocal
76
1490
decorator
77
1490
assert_stmt
78
1490
stat_stmt
79
1490
nonlocal_stmt
80
1490
expr_stmt
81
1490
break
82
1490
yield
83
1490
sim_stmt
84
1491
NAME
85
1491
atom_expr
86
1491
term
87
1491
atom
88
1491
-
89
1491
factor
90
1491
True
91
1491
arith_expr
92
1491
False
94
1491
{
96
1491
(
97
1491
+
95
1491
and_expr
98
1491
and_test
99
1491
[
100
1491
STRING
101
1491
comparison
102
1491
shift_expr
103
1491
not_test
104
1491
power
105
1491
None
106
1491
xor_expr
107
1491
expr
108
1491
NUMBER
109
1491
~
110
1491
test
1893
1491
not
111
1491
or_test
112
1491
lambda
113
1491
lambdef
114
1492
:
lambdef -> lambda varargslist : test
1493
>>
power -> atom_expr ** factor
1493
<=
power -> atom_expr ** factor
1493
:
power -> atom_expr ** factor
1493
//
power -> atom_expr ** factor
1493
/
power -> atom_expr ** factor
1493
&
power -> atom_expr ** factor
1493
if
power -> atom_expr ** factor
1493
not
power -> atom_expr ** factor
1493
<
power -> atom_expr ** factor
1493
!=
power -> atom_expr ** factor
1493
,
power -> atom_expr ** factor
1493
>
power -> atom_expr ** factor
1493
*
power -> atom_expr ** factor
1493
==
power -> atom_expr ** factor
1493
|
power -> atom_expr ** factor
1493
is
power -> atom_expr ** factor
1493
and
power -> atom_expr ** factor
1493
<<
power -> atom_expr ** factor
1493
-
power -> atom_expr ** factor
1493
]
power -> atom_expr ** factor
1493
@
power -> atom_expr ** factor
1493
in
power -> atom_expr ** factor
1493
^
power -> atom_expr ** factor
1493
%
power -> atom_expr ** factor
1493
>=
power -> atom_expr ** factor
1493
+
power -> atom_expr ** factor
1493
or
power -> atom_expr ** factor
1494
and
arith_expr -> term + arith_expr
1494
<
arith_expr -> term + arith_expr
1494
|
arith_expr -> term + arith_expr
1494
>=
arith_expr -> term + arith_expr
1494
>>
arith_expr -> term + arith_expr
1494
:
arith_expr -> term + arith_expr
1494
,
arith_expr -> term + arith_expr
1494
if
arith_expr -> term + arith_expr
1494
>
arith_expr -> term + arith_expr
1494
in
arith_expr -> term + arith_expr
1494
or
arith_expr -> term + arith_expr
1494
<=
arith_expr -> term + arith_expr
1494
not
arith_expr -> term + arith_expr
1494
^
arith_expr -> term + arith_expr
1494
!=
arith_expr -> term + arith_expr
1494
&
arith_expr -> term + arith_expr
1494
==
arith_expr -> term + arith_expr
1494
]
arith_expr -> term + arith_expr
1494
<<
arith_expr -> term + arith_expr
1494
is
arith_expr -> term + arith_expr
1495
<<
arith_expr -> term - arith_expr
1495
if
arith_expr -> term - arith_expr
1495
:
arith_expr -> term - arith_expr
1495
<
arith_expr -> term - arith_expr
1495
<=
arith_expr -> term - arith_expr
1495
and
arith_expr -> term - arith_expr
1495
in
arith_expr -> term - arith_expr
1495
&
arith_expr -> term - arith_expr
1495
|
arith_expr -> term - arith_expr
1495
==
arith_expr -> term - arith_expr
1495
is
arith_expr -> term - arith_expr
1495
>>
arith_expr -> term - arith_expr
1495
!=
arith_expr -> term - arith_expr
1495
>
arith_expr -> term - arith_expr
1495
or
arith_expr -> term - arith_expr
1495
,
arith_expr -> term - arith_expr
1495
]
arith_expr -> term - arith_expr
1495
>=
arith_expr -> term - arith_expr
1495
^
arith_expr -> term - arith_expr
1495
not
arith_expr -> term - arith_expr
1496
*
trailer_expr -> trailer trailer_expr
1496
+
trailer_expr -> trailer trailer_expr
1496
if
trailer_expr -> trailer trailer_expr
1496
-
trailer_expr -> trailer trailer_expr
1496
<=
trailer_expr -> trailer trailer_expr
1496
|
trailer_expr -> trailer trailer_expr
1496
@
trailer_expr -> trailer trailer_expr
1496
%
trailer_expr -> trailer trailer_expr
1496
in
trailer_expr -> trailer trailer_expr
1496
<<
trailer_expr -> trailer trailer_expr
1496
]
trailer_expr -> trailer trailer_expr
1496
**
trailer_expr -> trailer trailer_expr
1496
==
trailer_expr -> trailer trailer_expr
1496
not
trailer_expr -> trailer trailer_expr
1496
,
trailer_expr -> trailer trailer_expr
1496
and
trailer_expr -> trailer trailer_expr
1496
//
trailer_expr -> trailer trailer_expr
1496
^
trailer_expr -> trailer trailer_expr
1496
or
trailer_expr -> trailer trailer_expr
1496
>
trailer_expr -> trailer trailer_expr
1496
!=
trailer_expr -> trailer trailer_expr
1496
is
trailer_expr -> trailer trailer_expr
1496
:
trailer_expr -> trailer trailer_expr
1496
&
trailer_expr -> trailer trailer_expr
1496
>>
trailer_expr -> trailer trailer_expr
1496
/
trailer_expr -> trailer trailer_expr
1496
<
trailer_expr -> trailer trailer_expr
1496
>=
trailer_expr -> trailer trailer_expr
1497
]
1894
1498
^
trailer -> . NAME
1498
%
trailer -> . NAME
1498
**
trailer -> . NAME
1498
>>
trailer -> . NAME
1498
>
trailer -> . NAME
1498
in
trailer -> . NAME
1498
[
trailer -> . NAME
1498
is
trailer -> . NAME
1498
,
trailer -> . NAME
1498
<<
trailer -> . NAME
1498
or
trailer -> . NAME
1498
and
trailer -> . NAME
1498
>=
trailer -> . NAME
1498
|
trailer -> . NAME
1498
==
trailer -> . NAME
1498
.
trailer -> . NAME
1498
+
trailer -> . NAME
1498
<
trailer -> . NAME
1498
-
trailer -> . NAME
1498
&
trailer -> . NAME
1498
*
trailer -> . NAME
1498
if
trailer -> . NAME
1498
<=
trailer -> . NAME
1498
:
trailer -> . NAME
1498
(
trailer -> . NAME
1498
]
trailer -> . NAME
1498
not
trailer -> . NAME
1498
//
trailer -> . NAME
1498
@
trailer -> . NAME
1498
!=
trailer -> . NAME
1498
/
trailer -> . NAME
1499
)
1895
1500
[
trailer -> ( )
1500
not
trailer -> ( )
1500
==
trailer -> ( )
1500
**
trailer -> ( )
1500
,
trailer -> ( )
1500
:
trailer -> ( )
1500
<=
trailer -> ( )
1500
//
trailer -> ( )
1500
<<
trailer -> ( )
1500
<
trailer -> ( )
1500
]
trailer -> ( )
1500
in
trailer -> ( )
1500
or
trailer -> ( )
1500
-
trailer -> ( )
1500
+
trailer -> ( )
1500
&
trailer -> ( )
1500
*
trailer -> ( )
1500
is
trailer -> ( )
1500
>
trailer -> ( )
1500
!=
trailer -> ( )
1500
>>
trailer -> ( )
1500
%
trailer -> ( )
1500
|
trailer -> ( )
1500
.
trailer -> ( )
1500
>=
trailer -> ( )
1500
(
trailer -> ( )
1500
and
trailer -> ( )
1500
@
trailer -> ( )
1500
/
trailer -> ( )
1500
^
trailer -> ( )
1500
if
trailer -> ( )
1501
|
term -> factor % term
1501
<<
term -> factor % term
1501
^
term -> factor % term
1501
==
term -> factor % term
1501
]
term -> factor % term
1501
-
term -> factor % term
1501
,
term -> factor % term
1501
:
term -> factor % term
1501
is
term -> factor % term
1501
>=
term -> factor % term
1501
>>
term -> factor % term
1501
>
term -> factor % term
1501
in
term -> factor % term
1501
&
term -> factor % term
1501
if
term -> factor % term
1501
<
term -> factor % term
1501
!=
term -> factor % term
1501
<=
term -> factor % term
1501
not
term -> factor % term
1501
+
term -> factor % term
1501
and
term -> factor % term
1501
or
term -> factor % term
1502
if
term -> factor // term
1502
<
term -> factor // term
1502
and
term -> factor // term
1502
in
term -> factor // term
1502
,
term -> factor // term
1502
>>
term -> factor // term
1502
<=
term -> factor // term
1502
!=
term -> factor // term
1502
]
term -> factor // term
1502
^
term -> factor // term
1502
|
term -> factor // term
1502
or
term -> factor // term
1502
>=
term -> factor // term
1502
&
term -> factor // term
1502
>
term -> factor // term
1502
+
term -> factor // term
1502
is
term -> factor // term
1502
not
term -> factor // term
1502
<<
term -> factor // term
1502
:
term -> factor // term
1502
-
term -> factor // term
1502
==
term -> factor // term
1503
]
term -> factor / term
1503
,
term -> factor / term
1503
>>
term -> factor / term
1503
^
term -> factor / term
1503
or
term -> factor / term
1503
:
term -> factor / term
1503
+
term -> factor / term
1503
if
term -> factor / term
1503
>=
term -> factor / term
1503
>
term -> factor / term
1503
-
term -> factor / term
1503
and
term -> factor / term
1503
not
term -> factor / term
1503
<
term -> factor / term
1503
in
term -> factor / term
1503
==
term -> factor / term
1503
<=
term -> factor / term
1503
is
term -> factor / term
1503
&
term -> factor / term
1503
<<
term -> factor / term
1503
!=
term -> factor / term
1503
|
term -> factor / term
1504
-
term -> factor * term
1504
&
term -> factor * term
1504
and
term -> factor * term
1504
,
term -> factor * term
1504
!=
term -> factor * term
1504
|
term -> factor * term
1504
<<
term -> factor * term
1504
<
term -> factor * term
1504
if
term -> factor * term
1504
^
term -> factor * term
1504
+
term -> factor * term
1504
in
term -> factor * term
1504
or
term -> factor * term
1504
>>
term -> factor * term
1504
not
term -> factor * term
1504
]
term -> factor * term
1504
:
term -> factor * term
1504
==
term -> factor * term
1504
>=
term -> factor * term
1504
<=
term -> factor * term
1504
>
term -> factor * term
1504
is
term -> factor * term
1505
>>
term -> factor @ term
1505
^
term -> factor @ term
1505
&
term -> factor @ term
1505
|
term -> factor @ term
1505
if
term -> factor @ term
1505
is
term -> factor @ term
1505
<
term -> factor @ term
1505
<<
term -> factor @ term
1505
and
term -> factor @ term
1505
==
term -> factor @ term
1505
>
term -> factor @ term
1505
in
term -> factor @ term
1505
]
term -> factor @ term
1505
,
term -> factor @ term
1505
>=
term -> factor @ term
1505
:
term -> factor @ term
1505
+
term -> factor @ term
1505
not
term -> factor @ term
1505
!=
term -> factor @ term
1505
<=
term -> factor @ term
1505
or
term -> factor @ term
1505
-
term -> factor @ term
1506
<<
atom -> [ test_list_comp ]
1506
:
atom -> [ test_list_comp ]
1506
,
atom -> [ test_list_comp ]
1506
>>
atom -> [ test_list_comp ]
1506
+
atom -> [ test_list_comp ]
1506
-
atom -> [ test_list_comp ]
1506
not
atom -> [ test_list_comp ]
1506
<=
atom -> [ test_list_comp ]
1506
is
atom -> [ test_list_comp ]
1506
[
atom -> [ test_list_comp ]
1506
*
atom -> [ test_list_comp ]
1506
==
atom -> [ test_list_comp ]
1506
@
atom -> [ test_list_comp ]
1506
>
atom -> [ test_list_comp ]
1506
%
atom -> [ test_list_comp ]
1506
if
atom -> [ test_list_comp ]
1506
>=
atom -> [ test_list_comp ]
1506
]
atom -> [ test_list_comp ]
1506
//
atom -> [ test_list_comp ]
1506
.
atom -> [ test_list_comp ]
1506
in
atom -> [ test_list_comp ]
1506
**
atom -> [ test_list_comp ]
1506
and
atom -> [ test_list_comp ]
1506
/
atom -> [ test_list_comp ]
1506
or
atom -> [ test_list_comp ]
1506
!=
atom -> [ test_list_comp ]
1506
<
atom -> [ test_list_comp ]
1506
^
atom -> [ test_list_comp ]
1506
&
atom -> [ test_list_comp ]
1506
(
atom -> [ test_list_comp ]
1506
|
atom -> [ test_list_comp ]
1507
]
shift_expr -> arith_expr >> shift_expr
1507
<
shift_expr -> arith_expr >> shift_expr
1507
^
shift_expr -> arith_expr >> shift_expr
1507
in
shift_expr -> arith_expr >> shift_expr
1507
==
shift_expr -> arith_expr >> shift_expr
1507
!=
shift_expr -> arith_expr >> shift_expr
1507
>=
shift_expr -> arith_expr >> shift_expr
1507
not
shift_expr -> arith_expr >> shift_expr
1507
and
shift_expr -> arith_expr >> shift_expr
1507
is
shift_expr -> arith_expr >> shift_expr
1507
,
shift_expr -> arith_expr >> shift_expr
1507
&
shift_expr -> arith_expr >> shift_expr
1507
>
shift_expr -> arith_expr >> shift_expr
1507
|
shift_expr -> arith_expr >> shift_expr
1507
:
shift_expr -> arith_expr >> shift_expr
1507
<=
shift_expr -> arith_expr >> shift_expr
1507
or
shift_expr -> arith_expr >> shift_expr
1507
if
shift_expr -> arith_expr >> shift_expr
1508
,
shift_expr -> arith_expr << shift_expr
1508
if
shift_expr -> arith_expr << shift_expr
1508
&
shift_expr -> arith_expr << shift_expr
1508
>=
shift_expr -> arith_expr << shift_expr
1508
<=
shift_expr -> arith_expr << shift_expr
1508
or
shift_expr -> arith_expr << shift_expr
1508
in
shift_expr -> arith_expr << shift_expr
1508
:
shift_expr -> arith_expr << shift_expr
1508
!=
shift_expr -> arith_expr << shift_expr
1508
^
shift_expr -> arith_expr << shift_expr
1508
<
shift_expr -> arith_expr << shift_expr
1508
|
shift_expr -> arith_expr << shift_expr
1508
==
shift_expr -> arith_expr << shift_expr
1508
is
shift_expr -> arith_expr << shift_expr
1508
and
shift_expr -> arith_expr << shift_expr
1508
]
shift_expr -> arith_expr << shift_expr
1508
>
shift_expr -> arith_expr << shift_expr
1508
not
shift_expr -> arith_expr << shift_expr
1509
@
atom -> ( test_list_comp )
1509
]
atom -> ( test_list_comp )
1509
<
atom -> ( test_list_comp )
1509
and
atom -> ( test_list_comp )
1509
if
atom -> ( test_list_comp )
1509
&
atom -> ( test_list_comp )
1509
*
atom -> ( test_list_comp )
1509
%
atom -> ( test_list_comp )
1509
[
atom -> ( test_list_comp )
1509
//
atom -> ( test_list_comp )
1509
<<
atom -> ( test_list_comp )
1509
.
atom -> ( test_list_comp )
1509
/
atom -> ( test_list_comp )
1509
>=
atom -> ( test_list_comp )
1509
or
atom -> ( test_list_comp )
1509
>
atom -> ( test_list_comp )
1509
-
atom -> ( test_list_comp )
1509
|
atom -> ( test_list_comp )
1509
**
atom -> ( test_list_comp )
1509
is
atom -> ( test_list_comp )
1509
:
atom -> ( test_list_comp )
1509
==
atom -> ( test_list_comp )
1509
not
atom -> ( test_list_comp )
1509
in
atom -> ( test_list_comp )
1509
!=
atom -> ( test_list_comp )
1509
^
atom -> ( test_list_comp )
1509
,
atom -> ( test_list_comp )
1509
(
atom -> ( test_list_comp )
1509
<=
atom -> ( test_list_comp )
1509
+
atom -> ( test_list_comp )
1509
>>
atom -> ( test_list_comp )
1510
>=
xor_expr -> and_expr ^ xor_expr
1510
>
xor_expr -> and_expr ^ xor_expr
1510
or
xor_expr -> and_expr ^ xor_expr
1510
and
xor_expr -> and_expr ^ xor_expr
1510
<=
xor_expr -> and_expr ^ xor_expr
1510
in
xor_expr -> and_expr ^ xor_expr
1510
==
xor_expr -> and_expr ^ xor_expr
1510
,
xor_expr -> and_expr ^ xor_expr
1510
if
xor_expr -> and_expr ^ xor_expr
1510
]
xor_expr -> and_expr ^ xor_expr
1510
!=
xor_expr -> and_expr ^ xor_expr
1510
not
xor_expr -> and_expr ^ xor_expr
1510
<
xor_expr -> and_expr ^ xor_expr
1510
is
xor_expr -> and_expr ^ xor_expr
1510
:
xor_expr -> and_expr ^ xor_expr
1510
|
xor_expr -> and_expr ^ xor_expr
1511
:
or_test -> and_test or or_test
1511
]
or_test -> and_test or or_test
1511
,
or_test -> and_test or or_test
1511
if
or_test -> and_test or or_test
1512
,
and_expr -> shift_expr & and_expr
1512
>=
and_expr -> shift_expr & and_expr
1512
!=
and_expr -> shift_expr & and_expr
1512
or
and_expr -> shift_expr & and_expr
1512
is
and_expr -> shift_expr & and_expr
1512
^
and_expr -> shift_expr & and_expr
1512
]
and_expr -> shift_expr & and_expr
1512
if
and_expr -> shift_expr & and_expr
1512
==
and_expr -> shift_expr & and_expr
1512
not
and_expr -> shift_expr & and_expr
1512
<
and_expr -> shift_expr & and_expr
1512
>
and_expr -> shift_expr & and_expr
1512
in
and_expr -> shift_expr & and_expr
1512
and
and_expr -> shift_expr & and_expr
1512
|
and_expr -> shift_expr & and_expr
1512
:
and_expr -> shift_expr & and_expr
1512
<=
and_expr -> shift_expr & and_expr
1513
if
and_test -> not_test and and_test
1513
]
and_test -> not_test and and_test
1513
,
and_test -> not_test and and_test
1513
or
and_test -> not_test and and_test
1513
:
and_test -> not_test and and_test
1514
]
expr -> xor_expr | expr
1514
is
expr -> xor_expr | expr
1514
or
expr -> xor_expr | expr
1514
>
expr -> xor_expr | expr
1514
and
expr -> xor_expr | expr
1514
,
expr -> xor_expr | expr
1514
in
expr -> xor_expr | expr
1514
if
expr -> xor_expr | expr
1514
<=
expr -> xor_expr | expr
1514
not
expr -> xor_expr | expr
1514
==
expr -> xor_expr | expr
1514
>=
expr -> xor_expr | expr
1514
<
expr -> xor_expr | expr
1514
:
expr -> xor_expr | expr
1514
!=
expr -> xor_expr | expr
1515
:
comparison -> expr comp_op comparison
1515
]
comparison -> expr comp_op comparison
1515
,
comparison -> expr comp_op comparison
1515
and
comparison -> expr comp_op comparison
1515
if
comparison -> expr comp_op comparison
1515
or
comparison -> expr comp_op comparison
1516
else
1896
1517
]
lambdef -> lambda : test
1517
,
lambdef -> lambda : test
1517
:
lambdef -> lambda : test
1518
NAME
461
1518
atom_expr
462
1518
term
463
1518
atom
464
1518
-
465
1518
factor
466
1518
[
467
1518
True
468
1518
arith_expr
469
1518
False
470
1518
{
471
1518
(
472
1518
+
473
1518
and_expr
474
1518
and_test
475
1518
STRING
476
1518
comparison
478
1518
shift_expr
479
1518
not_test
480
1518
power
481
1518
None
482
1518
xor_expr
483
1518
expr
484
1518
NUMBER
485
1518
~
487
1518
or_test
488
1518
not
489
1518
lambdef
490
1518
test
1897
1518
lambda
491
1519
]
subscriptlist -> subscript , subscriptlist
1520
:
maybe_test -> test
1520
,
maybe_test -> test
1520
]
maybe_test -> test
1521
:
1898
1521
sliceop
1899
1521
]
sliceop -> 
1521
,
sliceop -> 
1522
>>
power -> atom_expr ** factor
1522
<=
power -> atom_expr ** factor
1522
//
power -> atom_expr ** factor
1522
for
power -> atom_expr ** factor
1522
/
power -> atom_expr ** factor
1522
&
power -> atom_expr ** factor
1522
if
power -> atom_expr ** factor
1522
not
power -> atom_expr ** factor
1522
<
power -> atom_expr ** factor
1522
!=
power -> atom_expr ** factor
1522
,
power -> atom_expr ** factor
1522
>
power -> atom_expr ** factor
1522
*
power -> atom_expr ** factor
1522
==
power -> atom_expr ** factor
1522
|
power -> atom_expr ** factor
1522
is
power -> atom_expr ** factor
1522
and
power -> atom_expr ** factor
1522
<<
power -> atom_expr ** factor
1522
-
power -> atom_expr ** factor
1522
=
power -> atom_expr ** factor
1522
)
power -> atom_expr ** factor
1522
@
power -> atom_expr ** factor
1522
in
power -> atom_expr ** factor
1522
^
power -> atom_expr ** factor
1522
%
power -> atom_expr ** factor
1522
>=
power -> atom_expr ** factor
1522
+
power -> atom_expr ** factor
1522
or
power -> atom_expr ** factor
1523
*
trailer_expr -> trailer trailer_expr
1523
+
trailer_expr -> trailer trailer_expr
1523
if
trailer_expr -> trailer trailer_expr
1523
-
trailer_expr -> trailer trailer_expr
1523
<=
trailer_expr -> trailer trailer_expr
1523
|
trailer_expr -> trailer trailer_expr
1523
@
trailer_expr -> trailer trailer_expr
1523
%
trailer_expr -> trailer trailer_expr
1523
in
trailer_expr -> trailer trailer_expr
1523
<<
trailer_expr -> trailer trailer_expr
1523
**
trailer_expr -> trailer trailer_expr
1523
==
trailer_expr -> trailer trailer_expr
1523
not
trailer_expr -> trailer trailer_expr
1523
,
trailer_expr -> trailer trailer_expr
1523
and
trailer_expr -> trailer trailer_expr
1523
//
trailer_expr -> trailer trailer_expr
1523
^
trailer_expr -> trailer trailer_expr
1523
for
trailer_expr -> trailer trailer_expr
1523
or
trailer_expr -> trailer trailer_expr
1523
=
trailer_expr -> trailer trailer_expr
1523
>
trailer_expr -> trailer trailer_expr
1523
!=
trailer_expr -> trailer trailer_expr
1523
is
trailer_expr -> trailer trailer_expr
1523
&
trailer_expr -> trailer trailer_expr
1523
>>
trailer_expr -> trailer trailer_expr
1523
/
trailer_expr -> trailer trailer_expr
1523
)
trailer_expr -> trailer trailer_expr
1523
<
trailer_expr -> trailer trailer_expr
1523
>=
trailer_expr -> trailer trailer_expr
1524
]
1900
1525
^
trailer -> . NAME
1525
%
trailer -> . NAME
1525
**
trailer -> . NAME
1525
>>
trailer -> . NAME
1525
>
trailer -> . NAME
1525
in
trailer -> . NAME
1525
[
trailer -> . NAME
1525
is
trailer -> . NAME
1525
,
trailer -> . NAME
1525
<<
trailer -> . NAME
1525
or
trailer -> . NAME
1525
and
trailer -> . NAME
1525
>=
trailer -> . NAME
1525
|
trailer -> . NAME
1525
==
trailer -> . NAME
1525
)
trailer -> . NAME
1525
.
trailer -> . NAME
1525
=
trailer -> . NAME
1525
+
trailer -> . NAME
1525
<
trailer -> . NAME
1525
for
trailer -> . NAME
1525
-
trailer -> . NAME
1525
&
trailer -> . NAME
1525
*
trailer -> . NAME
1525
if
trailer -> . NAME
1525
<=
trailer -> . NAME
1525
(
trailer -> . NAME
1525
not
trailer -> . NAME
1525
//
trailer -> . NAME
1525
@
trailer -> . NAME
1525
!=
trailer -> . NAME
1525
/
trailer -> . NAME
1526
)
1901
1527
[
trailer -> ( )
1527
not
trailer -> ( )
1527
==
trailer -> ( )
1527
**
trailer -> ( )
1527
,
trailer -> ( )
1527
<=
trailer -> ( )
1527
//
trailer -> ( )
1527
<<
trailer -> ( )
1527
<
trailer -> ( )
1527
=
trailer -> ( )
1527
for
trailer -> ( )
1527
in
trailer -> ( )
1527
or
trailer -> ( )
1527
-
trailer -> ( )
1527
+
trailer -> ( )
1527
&
trailer -> ( )
1527
*
trailer -> ( )
1527
is
trailer -> ( )
1527
>
trailer -> ( )
1527
!=
trailer -> ( )
1527
>>
trailer -> ( )
1527
%
trailer -> ( )
1527
|
trailer -> ( )
1527
)
trailer -> ( )
1527
.
trailer -> ( )
1527
>=
trailer -> ( )
1527
(
trailer -> ( )
1527
and
trailer -> ( )
1527
@
trailer -> ( )
1527
/
trailer -> ( )
1527
^
trailer -> ( )
1527
if
trailer -> ( )
1528
|
term -> factor % term
1528
<<
term -> factor % term
1528
^
term -> factor % term
1528
==
term -> factor % term
1528
-
term -> factor % term
1528
=
term -> factor % term
1528
,
term -> factor % term
1528
is
term -> factor % term
1528
>=
term -> factor % term
1528
>>
term -> factor % term
1528
>
term -> factor % term
1528
in
term -> factor % term
1528
)
term -> factor % term
1528
&
term -> factor % term
1528
if
term -> factor % term
1528
<
term -> factor % term
1528
!=
term -> factor % term
1528
<=
term -> factor % term
1528
not
term -> factor % term
1528
+
term -> factor % term
1528
and
term -> factor % term
1528
or
term -> factor % term
1528
for
term -> factor % term
1529
,
term -> factor / term
1529
>>
term -> factor / term
1529
^
term -> factor / term
1529
or
term -> factor / term
1529
for
term -> factor / term
1529
+
term -> factor / term
1529
=
term -> factor / term
1529
if
term -> factor / term
1529
>=
term -> factor / term
1529
>
term -> factor / term
1529
-
term -> factor / term
1529
and
term -> factor / term
1529
not
term -> factor / term
1529
)
term -> factor / term
1529
<
term -> factor / term
1529
in
term -> factor / term
1529
==
term -> factor / term
1529
<=
term -> factor / term
1529
is
term -> factor / term
1529
&
term -> factor / term
1529
<<
term -> factor / term
1529
!=
term -> factor / term
1529
|
term -> factor / term
1530
-
term -> factor * term
1530
&
term -> factor * term
1530
and
term -> factor * term
1530
,
term -> factor * term
1530
!=
term -> factor * term
1530
|
term -> factor * term
1530
<<
term -> factor * term
1530
for
term -> factor * term
1530
<
term -> factor * term
1530
=
term -> factor * term
1530
if
term -> factor * term
1530
^
term -> factor * term
1530
+
term -> factor * term
1530
in
term -> factor * term
1530
or
term -> factor * term
1530
>>
term -> factor * term
1530
not
term -> factor * term
1530
)
term -> factor * term
1530
==
term -> factor * term
1530
>=
term -> factor * term
1530
<=
term -> factor * term
1530
>
term -> factor * term
1530
is
term -> factor * term
1531
if
term -> factor // term
1531
<
term -> factor // term
1531
and
term -> factor // term
1531
in
term -> factor // term
1531
,
term -> factor // term
1531
>>
term -> factor // term
1531
)
term -> factor // term
1531
<=
term -> factor // term
1531
!=
term -> factor // term
1531
^
term -> factor // term
1531
=
term -> factor // term
1531
for
term -> factor // term
1531
|
term -> factor // term
1531
or
term -> factor // term
1531
>=
term -> factor // term
1531
&
term -> factor // term
1531
>
term -> factor // term
1531
+
term -> factor // term
1531
is
term -> factor // term
1531
not
term -> factor // term
1531
<<
term -> factor // term
1531
-
term -> factor // term
1531
==
term -> factor // term
1532
>>
term -> factor @ term
1532
^
term -> factor @ term
1532
&
term -> factor @ term
1532
|
term -> factor @ term
1532
=
term -> factor @ term
1532
if
term -> factor @ term
1532
is
term -> factor @ term
1532
)
term -> factor @ term
1532
<
term -> factor @ term
1532
for
term -> factor @ term
1532
<<
term -> factor @ term
1532
and
term -> factor @ term
1532
==
term -> factor @ term
1532
>
term -> factor @ term
1532
in
term -> factor @ term
1532
,
term -> factor @ term
1532
>=
term -> factor @ term
1532
+
term -> factor @ term
1532
not
term -> factor @ term
1532
!=
term -> factor @ term
1532
<=
term -> factor @ term
1532
or
term -> factor @ term
1532
-
term -> factor @ term
1533
NAME
1005
1533
atom_expr
1006
1533
atom
1007
1533
-
1008
1533
[
1010
1533
True
1011
1533
False
1013
1533
{
1014
1533
+
1015
1533
(
1017
1533
STRING
1018
1533
power
1019
1533
factor
1902
1533
None
1026
1533
NUMBER
1029
1533
~
1031
1534
trailer
1534
1534
trailer_expr
1903
1534
[
1536
1534
or
trailer_expr -> 
1534
.
1537
1534
(
1538
1534
not
trailer_expr -> 
1534
in
trailer_expr -> 
1534
is
trailer_expr -> 
1534
>=
trailer_expr -> 
1534
-
trailer_expr -> 
1534
@
trailer_expr -> 
1534
<=
trailer_expr -> 
1534
)
trailer_expr -> 
1534
,
trailer_expr -> 
1534
^
trailer_expr -> 
1534
*
trailer_expr -> 
1534
if
trailer_expr -> 
1534
**
trailer_expr -> 
1534
>
trailer_expr -> 
1534
==
trailer_expr -> 
1534
>>
trailer_expr -> 
1534
<<
trailer_expr -> 
1534
/
trailer_expr -> 
1534
//
trailer_expr -> 
1534
!=
trailer_expr -> 
1534
<
trailer_expr -> 
1534
&
trailer_expr -> 
1534
|
trailer_expr -> 
1534
and
trailer_expr -> 
1534
+
trailer_expr -> 
1534
%
trailer_expr -> 
1535
|
atom_expr -> atom trailer_expr
1535
)
atom_expr -> atom trailer_expr
1535
*
atom_expr -> atom trailer_expr
1535
-
atom_expr -> atom trailer_expr
1535
not
atom_expr -> atom trailer_expr
1535
in
atom_expr -> atom trailer_expr
1535
and
atom_expr -> atom trailer_expr
1535
^
atom_expr -> atom trailer_expr
1535
or
atom_expr -> atom trailer_expr
1535
<=
atom_expr -> atom trailer_expr
1535
<
atom_expr -> atom trailer_expr
1535
>>
atom_expr -> atom trailer_expr
1535
//
atom_expr -> atom trailer_expr
1535
!=
atom_expr -> atom trailer_expr
1535
<<
atom_expr -> atom trailer_expr
1535
+
atom_expr -> atom trailer_expr
1535
>
atom_expr -> atom trailer_expr
1535
/
atom_expr -> atom trailer_expr
1535
==
atom_expr -> atom trailer_expr
1535
%
atom_expr -> atom trailer_expr
1535
&
atom_expr -> atom trailer_expr
1535
@
atom_expr -> atom trailer_expr
1535
if
atom_expr -> atom trailer_expr
1535
>=
atom_expr -> atom trailer_expr
1535
is
atom_expr -> atom trailer_expr
1535
,
atom_expr -> atom trailer_expr
1535
**
atom_expr -> atom trailer_expr
1536
NAME
461
1536
atom_expr
462
1536
term
463
1536
atom
464
1536
-
465
1536
factor
466
1536
[
467
1536
True
468
1536
arith_expr
469
1536
False
470
1536
{
471
1536
(
472
1536
+
473
1536
and_expr
474
1536
and_test
475
1536
STRING
476
1536
subscriptlist
1904
1536
comparison
478
1536
shift_expr
479
1536
not_test
480
1536
power
481
1536
None
482
1536
xor_expr
483
1536
expr
484
1536
NUMBER
485
1536
test
486
1536
~
487
1536
or_test
488
1536
not
489
1536
lambdef
490
1536
:
maybe_test -> 
1536
lambda
491
1536
subscript
492
1536
maybe_test
493
1537
NAME
1905
1538
NAME
496
1538
atom_expr
497
1538
atom
498
1538
-
499
1538
arglist
1906
1538
factor
501
1538
*
502
1538
[
503
1538
True
504
1538
arith_expr
505
1538
xor_expr
506
1538
False
507
1538
**
508
1538
{
509
1538
+
510
1538
)
1907
1538
and_expr
512
1538
(
513
1538
STRING
514
1538
power
515
1538
term
516
1538
comparison
517
1538
shift_expr
518
1538
argument
519
1538
not_test
520
1538
or_test
521
1538
lambdef
522
1538
lambda
523
1538
None
524
1538
test
525
1538
expr
526
1538
NUMBER
527
1538
and_test
528
1538
~
529
1538
not
530
1539
>>
factor -> - factor
1539
if
factor -> - factor
1539
>
factor -> - factor
1539
,
factor -> - factor
1539
is
factor -> - factor
1539
//
factor -> - factor
1539
)
factor -> - factor
1539
not
factor -> - factor
1539
or
factor -> - factor
1539
-
factor -> - factor
1539
<<
factor -> - factor
1539
>=
factor -> - factor
1539
/
factor -> - factor
1539
<=
factor -> - factor
1539
<
factor -> - factor
1539
in
factor -> - factor
1539
|
factor -> - factor
1539
*
factor -> - factor
1539
!=
factor -> - factor
1539
&
factor -> - factor
1539
and
factor -> - factor
1539
^
factor -> - factor
1539
+
factor -> - factor
1539
%
factor -> - factor
1539
==
factor -> - factor
1539
@
factor -> - factor
1540
NAME
1005
1540
atom_expr
1006
1540
atom
1007
1540
-
1008
1540
factor
1009
1540
[
1010
1540
True
1011
1540
False
1013
1540
{
1014
1540
+
1015
1540
(
1017
1540
STRING
1018
1540
power
1019
1540
term
1908
1540
None
1026
1540
NUMBER
1029
1540
~
1031
1541
NAME
1005
1541
atom_expr
1006
1541
atom
1007
1541
-
1008
1541
factor
1009
1541
[
1010
1541
True
1011
1541
False
1013
1541
term
1909
1541
{
1014
1541
+
1015
1541
(
1017
1541
STRING
1018
1541
power
1019
1541
None
1026
1541
NUMBER
1029
1541
~
1031
1542
NAME
1005
1542
atom_expr
1006
1542
atom
1007
1542
-
1008
1542
factor
1009
1542
[
1010
1542
True
1011
1542
False
1013
1542
{
1014
1542
+
1015
1542
(
1017
1542
STRING
1018
1542
power
1019
1542
term
1910
1542
None
1026
1542
NUMBER
1029
1542
~
1031
1543
NAME
1005
1543
atom_expr
1006
1543
atom
1007
1543
-
1008
1543
factor
1009
1543
[
1010
1543
True
1011
1543
False
1013
1543
{
1014
1543
+
1015
1543
(
1017
1543
STRING
1018
1543
term
1911
1543
power
1019
1543
None
1026
1543
NUMBER
1029
1543
~
1031
1544
NAME
1005
1544
atom_expr
1006
1544
atom
1007
1544
-
1008
1544
factor
1009
1544
[
1010
1544
True
1011
1544
False
1013
1544
{
1014
1544
+
1015
1544
(
1017
1544
STRING
1018
1544
power
1019
1544
term
1912
1544
None
1026
1544
NUMBER
1029
1544
~
1031
1545
]
1913
1546
and
atom -> [ ]
1546
<<
atom -> [ ]
1546
//
atom -> [ ]
1546
*
atom -> [ ]
1546
+
atom -> [ ]
1546
^
atom -> [ ]
1546
==
atom -> [ ]
1546
>>
atom -> [ ]
1546
/
atom -> [ ]
1546
in
atom -> [ ]
1546
>
atom -> [ ]
1546
<=
atom -> [ ]
1546
.
atom -> [ ]
1546
)
atom -> [ ]
1546
%
atom -> [ ]
1546
&
atom -> [ ]
1546
-
atom -> [ ]
1546
>=
atom -> [ ]
1546
not
atom -> [ ]
1546
|
atom -> [ ]
1546
@
atom -> [ ]
1546
is
atom -> [ ]
1546
or
atom -> [ ]
1546
!=
atom -> [ ]
1546
if
atom -> [ ]
1546
,
atom -> [ ]
1546
**
atom -> [ ]
1546
<
atom -> [ ]
1546
(
atom -> [ ]
1546
[
atom -> [ ]
1547
NAME
1005
1547
atom_expr
1006
1547
atom
1007
1547
-
1008
1547
factor
1009
1547
[
1010
1547
True
1011
1547
arith_expr
1012
1547
False
1013
1547
{
1014
1547
+
1015
1547
(
1017
1547
STRING
1018
1547
power
1019
1547
shift_expr
1914
1547
term
1020
1547
None
1026
1547
NUMBER
1029
1547
~
1031
1548
NAME
1005
1548
atom_expr
1006
1548
atom
1007
1548
-
1008
1548
factor
1009
1548
[
1010
1548
True
1011
1548
arith_expr
1012
1548
False
1013
1548
{
1014
1548
shift_expr
1915
1548
+
1015
1548
(
1017
1548
STRING
1018
1548
power
1019
1548
term
1020
1548
None
1026
1548
NUMBER
1029
1548
~
1031
1549
%
atom -> { }
1549
[
atom -> { }
1549
not
atom -> { }
1549
^
atom -> { }
1549
or
atom -> { }
1549
-
atom -> { }
1549
>=
atom -> { }
1549
<<
atom -> { }
1549
/
atom -> { }
1549
<=
atom -> { }
1549
|
atom -> { }
1549
)
atom -> { }
1549
>>
atom -> { }
1549
@
atom -> { }
1549
is
atom -> { }
1549
if
atom -> { }
1549
and
atom -> { }
1549
==
atom -> { }
1549
in
atom -> { }
1549
**
atom -> { }
1549
&
atom -> { }
1549
>
atom -> { }
1549
//
atom -> { }
1549
(
atom -> { }
1549
+
atom -> { }
1549
<
atom -> { }
1549
,
atom -> { }
1549
!=
atom -> { }
1549
.
atom -> { }
1549
*
atom -> { }
1550
>>
factor -> + factor
1550
>=
factor -> + factor
1550
or
factor -> + factor
1550
==
factor -> + factor
1550
-
factor -> + factor
1550
*
factor -> + factor
1550
<
factor -> + factor
1550
^
factor -> + factor
1550
,
factor -> + factor
1550
&
factor -> + factor
1550
)
factor -> + factor
1550
@
factor -> + factor
1550
|
factor -> + factor
1550
<<
factor -> + factor
1550
%
factor -> + factor
1550
not
factor -> + factor
1550
//
factor -> + factor
1550
and
factor -> + factor
1550
in
factor -> + factor
1550
!=
factor -> + factor
1550
>
factor -> + factor
1550
/
factor -> + factor
1550
is
factor -> + factor
1550
+
factor -> + factor
1550
if
factor -> + factor
1550
<=
factor -> + factor
1551
NAME
1005
1551
atom_expr
1006
1551
atom
1007
1551
-
1008
1551
factor
1009
1551
[
1010
1551
True
1011
1551
arith_expr
1012
1551
False
1013
1551
{
1014
1551
+
1015
1551
and_expr
1016
1551
(
1017
1551
STRING
1018
1551
power
1019
1551
xor_expr
1916
1551
term
1020
1551
shift_expr
1022
1551
None
1026
1551
NUMBER
1029
1551
~
1031
1552
|
atom -> ( )
1552
**
atom -> ( )
1552
>>
atom -> ( )
1552
-
atom -> ( )
1552
%
atom -> ( )
1552
(
atom -> ( )
1552
not
atom -> ( )
1552
+
atom -> ( )
1552
>=
atom -> ( )
1552
&
atom -> ( )
1552
*
atom -> ( )
1552
!=
atom -> ( )
1552
<=
atom -> ( )
1552
and
atom -> ( )
1552
<
atom -> ( )
1552
^
atom -> ( )
1552
==
atom -> ( )
1552
if
atom -> ( )
1552
in
atom -> ( )
1552
/
atom -> ( )
1552
>
atom -> ( )
1552
//
atom -> ( )
1552
.
atom -> ( )
1552
or
atom -> ( )
1552
@
atom -> ( )
1552
is
atom -> ( )
1552
)
atom -> ( )
1552
<<
atom -> ( )
1552
,
atom -> ( )
1552
[
atom -> ( )
1553
)
1917
1554
NAME
1005
1554
atom_expr
1006
1554
atom
1007
1554
-
1008
1554
factor
1009
1554
[
1010
1554
True
1011
1554
False
1013
1554
{
1014
1554
+
1015
1554
(
1017
1554
STRING
1018
1554
power
1019
1554
arith_expr
1918
1554
term
1020
1554
None
1026
1554
NUMBER
1029
1554
~
1031
1555
NAME
1005
1555
atom_expr
1006
1555
atom
1007
1555
-
1008
1555
factor
1009
1555
[
1010
1555
True
1011
1555
False
1013
1555
{
1014
1555
+
1015
1555
(
1017
1555
STRING
1018
1555
power
1019
1555
term
1020
1555
arith_expr
1919
1555
None
1026
1555
NUMBER
1029
1555
~
1031
1556
NAME
1005
1556
atom_expr
1006
1556
atom
1007
1556
-
1008
1556
factor
1009
1556
[
1010
1556
True
1011
1556
arith_expr
1012
1556
False
1013
1556
{
1014
1556
+
1015
1556
(
1017
1556
STRING
1018
1556
power
1019
1556
term
1020
1556
shift_expr
1022
1556
None
1026
1556
and_expr
1920
1556
NUMBER
1029
1556
~
1031
1557
NAME
1005
1557
atom_expr
1006
1557
atom
1007
1557
-
1008
1557
factor
1009
1557
[
1010
1557
True
1011
1557
arith_expr
1012
1557
False
1013
1557
{
1014
1557
+
1015
1557
and_expr
1016
1557
(
1017
1557
STRING
1018
1557
power
1019
1557
term
1020
1557
comparison
1021
1557
shift_expr
1022
1557
not_test
1023
1557
None
1026
1557
xor_expr
1027
1557
expr
1028
1557
NUMBER
1029
1557
~
1031
1557
and_test
1921
1557
not
1034
1558
atom_expr
685
1558
atom
686
1558
-
687
1558
factor
688
1558
and_test
689
1558
True
690
1558
arith_expr
691
1558
False
692
1558
NAME
693
1558
{
694
1558
+
695
1558
and_expr
696
1558
[
697
1558
(
698
1558
STRING
699
1558
term
700
1558
comparison
701
1558
shift_expr
702
1558
not_test
703
1558
power
704
1558
xor_expr
706
1558
None
707
1558
NUMBER
708
1558
expr
709
1558
or_test
1922
1558
~
710
1558
not
711
1559
:
1923
1560
NAME
1005
1560
atom_expr
1006
1560
atom
1007
1560
-
1008
1560
factor
1009
1560
[
1010
1560
True
1011
1560
arith_expr
1012
1560
False
1013
1560
{
1014
1560
+
1015
1560
and_expr
1016
1560
(
1017
1560
STRING
1018
1560
power
1019
1560
term
1020
1560
comparison
1021
1560
shift_expr
1022
1560
test
1924
1560
not_test
1023
1560
or_test
1024
1560
lambda
1025
1560
None
1026
1560
xor_expr
1027
1560
expr
1028
1560
NUMBER
1029
1560
and_test
1030
1560
~
1031
1560
lambdef
1033
1560
not
1034
1561
NAME
1005
1561
atom_expr
1006
1561
atom
1007
1561
-
1008
1561
factor
1009
1561
[
1010
1561
True
1011
1561
arith_expr
1012
1561
False
1013
1561
{
1014
1561
+
1015
1561
and_expr
1016
1561
(
1017
1561
STRING
1018
1561
power
1019
1561
term
1020
1561
shift_expr
1022
1561
None
1026
1561
xor_expr
1027
1561
NUMBER
1029
1561
expr
1925
1561
~
1031
1562
NAME
1005
1562
atom_expr
1006
1562
atom
1007
1562
-
1008
1562
factor
1009
1562
[
1010
1562
True
1011
1562
arith_expr
1012
1562
False
1013
1562
{
1014
1562
+
1015
1562
and_expr
1016
1562
(
1017
1562
STRING
1018
1562
power
1019
1562
term
1020
1562
shift_expr
1022
1562
None
1026
1562
xor_expr
1027
1562
expr
1028
1562
NUMBER
1029
1562
comparison
1926
1562
~
1031
1563
NAME
1005
1563
atom_expr
1006
1563
atom
1007
1563
-
1008
1563
factor
1009
1563
[
1010
1563
True
1011
1563
arith_expr
1012
1563
False
1013
1563
{
1014
1563
+
1015
1563
and_expr
1016
1563
(
1017
1563
STRING
1018
1563
power
1019
1563
term
1020
1563
comparison
1021
1563
shift_expr
1022
1563
not_test
1023
1563
None
1026
1563
xor_expr
1027
1563
expr
1028
1563
NUMBER
1029
1563
and_test
1030
1563
~
1031
1563
or_test
1927
1563
not
1034
1564
is
factor -> ~ factor
1564
>=
factor -> ~ factor
1564
<<
factor -> ~ factor
1564
<=
factor -> ~ factor
1564
if
factor -> ~ factor
1564
==
factor -> ~ factor
1564
//
factor -> ~ factor
1564
or
factor -> ~ factor
1564
+
factor -> ~ factor
1564
)
factor -> ~ factor
1564
and
factor -> ~ factor
1564
!=
factor -> ~ factor
1564
&
factor -> ~ factor
1564
|
factor -> ~ factor
1564
>>
factor -> ~ factor
1564
in
factor -> ~ factor
1564
>
factor -> ~ factor
1564
/
factor -> ~ factor
1564
not
factor -> ~ factor
1564
@
factor -> ~ factor
1564
-
factor -> ~ factor
1564
^
factor -> ~ factor
1564
,
factor -> ~ factor
1564
*
factor -> ~ factor
1564
<
factor -> ~ factor
1564
%
factor -> ~ factor
1565
)
not_test -> not not_test
1565
,
not_test -> not not_test
1565
or
not_test -> not not_test
1565
if
not_test -> not not_test
1565
and
not_test -> not not_test
1566
<<
atom -> [ test_list_comp ]
1566
,
atom -> [ test_list_comp ]
1566
>>
atom -> [ test_list_comp ]
1566
for
atom -> [ test_list_comp ]
1566
+
atom -> [ test_list_comp ]
1566
-
atom -> [ test_list_comp ]
1566
not
atom -> [ test_list_comp ]
1566
<=
atom -> [ test_list_comp ]
1566
is
atom -> [ test_list_comp ]
1566
[
atom -> [ test_list_comp ]
1566
*
atom -> [ test_list_comp ]
1566
==
atom -> [ test_list_comp ]
1566
@
atom -> [ test_list_comp ]
1566
)
atom -> [ test_list_comp ]
1566
>
atom -> [ test_list_comp ]
1566
=
atom -> [ test_list_comp ]
1566
%
atom -> [ test_list_comp ]
1566
if
atom -> [ test_list_comp ]
1566
>=
atom -> [ test_list_comp ]
1566
//
atom -> [ test_list_comp ]
1566
.
atom -> [ test_list_comp ]
1566
in
atom -> [ test_list_comp ]
1566
**
atom -> [ test_list_comp ]
1566
and
atom -> [ test_list_comp ]
1566
/
atom -> [ test_list_comp ]
1566
or
atom -> [ test_list_comp ]
1566
!=
atom -> [ test_list_comp ]
1566
<
atom -> [ test_list_comp ]
1566
^
atom -> [ test_list_comp ]
1566
&
atom -> [ test_list_comp ]
1566
(
atom -> [ test_list_comp ]
1566
|
atom -> [ test_list_comp ]
1567
^
shift_expr -> arith_expr >> shift_expr
1567
>=
shift_expr -> arith_expr >> shift_expr
1567
>
shift_expr -> arith_expr >> shift_expr
1567
|
shift_expr -> arith_expr >> shift_expr
1567
)
shift_expr -> arith_expr >> shift_expr
1567
<=
shift_expr -> arith_expr >> shift_expr
1567
for
shift_expr -> arith_expr >> shift_expr
1567
is
shift_expr -> arith_expr >> shift_expr
1567
,
shift_expr -> arith_expr >> shift_expr
1567
&
shift_expr -> arith_expr >> shift_expr
1567
<
shift_expr -> arith_expr >> shift_expr
1567
in
shift_expr -> arith_expr >> shift_expr
1567
and
shift_expr -> arith_expr >> shift_expr
1567
not
shift_expr -> arith_expr >> shift_expr
1567
==
shift_expr -> arith_expr >> shift_expr
1567
if
shift_expr -> arith_expr >> shift_expr
1567
=
shift_expr -> arith_expr >> shift_expr
1567
!=
shift_expr -> arith_expr >> shift_expr
1567
or
shift_expr -> arith_expr >> shift_expr
1568
>=
shift_expr -> arith_expr << shift_expr
1568
or
shift_expr -> arith_expr << shift_expr
1568
>
shift_expr -> arith_expr << shift_expr
1568
)
shift_expr -> arith_expr << shift_expr
1568
in
shift_expr -> arith_expr << shift_expr
1568
!=
shift_expr -> arith_expr << shift_expr
1568
^
shift_expr -> arith_expr << shift_expr
1568
<
shift_expr -> arith_expr << shift_expr
1568
|
shift_expr -> arith_expr << shift_expr
1568
and
shift_expr -> arith_expr << shift_expr
1568
not
shift_expr -> arith_expr << shift_expr
1568
&
shift_expr -> arith_expr << shift_expr
1568
=
shift_expr -> arith_expr << shift_expr
1568
is
shift_expr -> arith_expr << shift_expr
1568
if
shift_expr -> arith_expr << shift_expr
1568
,
shift_expr -> arith_expr << shift_expr
1568
<=
shift_expr -> arith_expr << shift_expr
1568
==
shift_expr -> arith_expr << shift_expr
1568
for
shift_expr -> arith_expr << shift_expr
1569
is
expr -> xor_expr | expr
1569
)
expr -> xor_expr | expr
1569
or
expr -> xor_expr | expr
1569
>
expr -> xor_expr | expr
1569
and
expr -> xor_expr | expr
1569
,
expr -> xor_expr | expr
1569
for
expr -> xor_expr | expr
1569
in
expr -> xor_expr | expr
1569
=
expr -> xor_expr | expr
1569
if
expr -> xor_expr | expr
1569
<=
expr -> xor_expr | expr
1569
not
expr -> xor_expr | expr
1569
==
expr -> xor_expr | expr
1569
>=
expr -> xor_expr | expr
1569
<
expr -> xor_expr | expr
1569
!=
expr -> xor_expr | expr
1570
>=
xor_expr -> and_expr ^ xor_expr
1570
>
xor_expr -> and_expr ^ xor_expr
1570
or
xor_expr -> and_expr ^ xor_expr
1570
and
xor_expr -> and_expr ^ xor_expr
1570
<=
xor_expr -> and_expr ^ xor_expr
1570
in
xor_expr -> and_expr ^ xor_expr
1570
==
xor_expr -> and_expr ^ xor_expr
1570
)
xor_expr -> and_expr ^ xor_expr
1570
if
xor_expr -> and_expr ^ xor_expr
1570
,
xor_expr -> and_expr ^ xor_expr
1570
!=
xor_expr -> and_expr ^ xor_expr
1570
=
xor_expr -> and_expr ^ xor_expr
1570
not
xor_expr -> and_expr ^ xor_expr
1570
<
xor_expr -> and_expr ^ xor_expr
1570
for
xor_expr -> and_expr ^ xor_expr
1570
is
xor_expr -> and_expr ^ xor_expr
1570
|
xor_expr -> and_expr ^ xor_expr
1571
@
atom -> ( test_list_comp )
1571
<
atom -> ( test_list_comp )
1571
and
atom -> ( test_list_comp )
1571
)
atom -> ( test_list_comp )
1571
if
atom -> ( test_list_comp )
1571
&
atom -> ( test_list_comp )
1571
=
atom -> ( test_list_comp )
1571
*
atom -> ( test_list_comp )
1571
%
atom -> ( test_list_comp )
1571
[
atom -> ( test_list_comp )
1571
//
atom -> ( test_list_comp )
1571
<<
atom -> ( test_list_comp )
1571
.
atom -> ( test_list_comp )
1571
/
atom -> ( test_list_comp )
1571
>=
atom -> ( test_list_comp )
1571
or
atom -> ( test_list_comp )
1571
>
atom -> ( test_list_comp )
1571
for
atom -> ( test_list_comp )
1571
-
atom -> ( test_list_comp )
1571
|
atom -> ( test_list_comp )
1571
**
atom -> ( test_list_comp )
1571
is
atom -> ( test_list_comp )
1571
==
atom -> ( test_list_comp )
1571
not
atom -> ( test_list_comp )
1571
in
atom -> ( test_list_comp )
1571
!=
atom -> ( test_list_comp )
1571
^
atom -> ( test_list_comp )
1571
,
atom -> ( test_list_comp )
1571
(
atom -> ( test_list_comp )
1571
<=
atom -> ( test_list_comp )
1571
+
atom -> ( test_list_comp )
1571
>>
atom -> ( test_list_comp )
1572
and
arith_expr -> term + arith_expr
1572
<
arith_expr -> term + arith_expr
1572
|
arith_expr -> term + arith_expr
1572
>=
arith_expr -> term + arith_expr
1572
>>
arith_expr -> term + arith_expr
1572
,
arith_expr -> term + arith_expr
1572
if
arith_expr -> term + arith_expr
1572
>
arith_expr -> term + arith_expr
1572
in
arith_expr -> term + arith_expr
1572
or
arith_expr -> term + arith_expr
1572
<=
arith_expr -> term + arith_expr
1572
)
arith_expr -> term + arith_expr
1572
not
arith_expr -> term + arith_expr
1572
^
arith_expr -> term + arith_expr
1572
!=
arith_expr -> term + arith_expr
1572
&
arith_expr -> term + arith_expr
1572
==
arith_expr -> term + arith_expr
1572
=
arith_expr -> term + arith_expr
1572
for
arith_expr -> term + arith_expr
1572
<<
arith_expr -> term + arith_expr
1572
is
arith_expr -> term + arith_expr
1573
<<
arith_expr -> term - arith_expr
1573
if
arith_expr -> term - arith_expr
1573
<
arith_expr -> term - arith_expr
1573
=
arith_expr -> term - arith_expr
1573
<=
arith_expr -> term - arith_expr
1573
for
arith_expr -> term - arith_expr
1573
and
arith_expr -> term - arith_expr
1573
in
arith_expr -> term - arith_expr
1573
&
arith_expr -> term - arith_expr
1573
|
arith_expr -> term - arith_expr
1573
==
arith_expr -> term - arith_expr
1573
is
arith_expr -> term - arith_expr
1573
)
arith_expr -> term - arith_expr
1573
>>
arith_expr -> term - arith_expr
1573
!=
arith_expr -> term - arith_expr
1573
>
arith_expr -> term - arith_expr
1573
or
arith_expr -> term - arith_expr
1573
,
arith_expr -> term - arith_expr
1573
>=
arith_expr -> term - arith_expr
1573
^
arith_expr -> term - arith_expr
1573
not
arith_expr -> term - arith_expr
1574
,
and_expr -> shift_expr & and_expr
1574
>=
and_expr -> shift_expr & and_expr
1574
!=
and_expr -> shift_expr & and_expr
1574
or
and_expr -> shift_expr & and_expr
1574
is
and_expr -> shift_expr & and_expr
1574
=
and_expr -> shift_expr & and_expr
1574
^
and_expr -> shift_expr & and_expr
1574
if
and_expr -> shift_expr & and_expr
1574
==
and_expr -> shift_expr & and_expr
1574
not
and_expr -> shift_expr & and_expr
1574
<
and_expr -> shift_expr & and_expr
1574
)
and_expr -> shift_expr & and_expr
1574
>
and_expr -> shift_expr & and_expr
1574
in
and_expr -> shift_expr & and_expr
1574
and
and_expr -> shift_expr & and_expr
1574
|
and_expr -> shift_expr & and_expr
1574
for
and_expr -> shift_expr & and_expr
1574
<=
and_expr -> shift_expr & and_expr
1575
)
arglist -> argument , arglist
1576
if
and_test -> not_test and and_test
1576
,
and_test -> not_test and and_test
1576
or
and_test -> not_test and and_test
1576
for
and_test -> not_test and and_test
1576
)
and_test -> not_test and and_test
1576
=
and_test -> not_test and and_test
1577
else
1928
1578
NAME
496
1578
atom_expr
497
1578
atom
498
1578
-
499
1578
factor
501
1578
[
503
1578
True
504
1578
arith_expr
505
1578
xor_expr
506
1578
False
507
1578
{
509
1578
+
510
1578
and_expr
512
1578
(
513
1578
STRING
514
1578
power
515
1578
term
516
1578
comparison
517
1578
shift_expr
518
1578
not_test
520
1578
or_test
521
1578
lambdef
522
1578
lambda
523
1578
None
524
1578
expr
526
1578
NUMBER
527
1578
and_test
528
1578
~
529
1578
test
1929
1578
not
530
1579
=
lambdef -> lambda : test
1579
for
lambdef -> lambda : test
1579
,
lambdef -> lambda : test
1579
)
lambdef -> lambda : test
1580
in
1930
1581
,
argument -> test = test
1581
)
argument -> test = test
1582
for
comparison -> expr comp_op comparison
1582
)
comparison -> expr comp_op comparison
1582
=
comparison -> expr comp_op comparison
1582
,
comparison -> expr comp_op comparison
1582
and
comparison -> expr comp_op comparison
1582
if
comparison -> expr comp_op comparison
1582
or
comparison -> expr comp_op comparison
1583
,
or_test -> and_test or or_test
1583
if
or_test -> and_test or or_test
1583
=
or_test -> and_test or or_test
1583
)
or_test -> and_test or or_test
1583
for
or_test -> and_test or or_test
1584
confbody
1931
1584
NAME
1932
1585
(
trailer -> [ subscriptlist ]
1585
for
trailer -> [ subscriptlist ]
1585
//
trailer -> [ subscriptlist ]
1585
&
trailer -> [ subscriptlist ]
1585
>
trailer -> [ subscriptlist ]
1585
in
trailer -> [ subscriptlist ]
1585
>>
trailer -> [ subscriptlist ]
1585
[
trailer -> [ subscriptlist ]
1585
<=
trailer -> [ subscriptlist ]
1585
-
trailer -> [ subscriptlist ]
1585
)
trailer -> [ subscriptlist ]
1585
!=
trailer -> [ subscriptlist ]
1585
|
trailer -> [ subscriptlist ]
1585
not
trailer -> [ subscriptlist ]
1585
.
trailer -> [ subscriptlist ]
1585
>=
trailer -> [ subscriptlist ]
1585
or
trailer -> [ subscriptlist ]
1585
*
trailer -> [ subscriptlist ]
1585
<<
trailer -> [ subscriptlist ]
1585
**
trailer -> [ subscriptlist ]
1585
==
trailer -> [ subscriptlist ]
1585
+
trailer -> [ subscriptlist ]
1585
is
trailer -> [ subscriptlist ]
1585
/
trailer -> [ subscriptlist ]
1585
^
trailer -> [ subscriptlist ]
1585
and
trailer -> [ subscriptlist ]
1585
,
trailer -> [ subscriptlist ]
1585
@
trailer -> [ subscriptlist ]
1585
if
trailer -> [ subscriptlist ]
1585
<
trailer -> [ subscriptlist ]
1585
%
trailer -> [ subscriptlist ]
1586
or
trailer -> ( arglist )
1586
>>
trailer -> ( arglist )
1586
<=
trailer -> ( arglist )
1586
**
trailer -> ( arglist )
1586
<
trailer -> ( arglist )
1586
(
trailer -> ( arglist )
1586
-
trailer -> ( arglist )
1586
not
trailer -> ( arglist )
1586
if
trailer -> ( arglist )
1586
and
trailer -> ( arglist )
1586
.
trailer -> ( arglist )
1586
is
trailer -> ( arglist )
1586
)
trailer -> ( arglist )
1586
>
trailer -> ( arglist )
1586
in
trailer -> ( arglist )
1586
!=
trailer -> ( arglist )
1586
,
trailer -> ( arglist )
1586
==
trailer -> ( arglist )
1586
%
trailer -> ( arglist )
1586
@
trailer -> ( arglist )
1586
^
trailer -> ( arglist )
1586
<<
trailer -> ( arglist )
1586
for
trailer -> ( arglist )
1586
*
trailer -> ( arglist )
1586
//
trailer -> ( arglist )
1586
&
trailer -> ( arglist )
1586
|
trailer -> ( arglist )
1586
>=
trailer -> ( arglist )
1586
+
trailer -> ( arglist )
1586
/
trailer -> ( arglist )
1586
[
trailer -> ( arglist )
1587
NAME
1933
1587
atom_expr
1934
1587
atom
1935
1587
-
1936
1587
factor
1937
1587
True
1938
1587
arith_expr
1939
1587
False
1940
1587
{
1941
1587
+
1942
1587
and_expr
1943
1587
[
1944
1587
(
1945
1587
STRING
1946
1587
power
1947
1587
term
1948
1587
comparison
1949
1587
shift_expr
1950
1587
not_test
1951
1587
or_test
1952
1587
None
1953
1587
xor_expr
1954
1587
expr
1955
1587
NUMBER
1956
1587
and_test
1957
1587
~
1958
1587
not
1959
1588
NAME
131
1588
atom_expr
132
1588
atom
133
1588
-
134
1588
factor
136
1588
[
137
1588
True
138
1588
arith_expr
139
1588
False
140
1588
{
141
1588
+
142
1588
and_expr
143
1588
(
144
1588
STRING
145
1588
power
147
1588
term
148
1588
comparison
149
1588
shift_expr
150
1588
not_test
152
1588
or_test
153
1588
lambda
154
1588
None
155
1588
xor_expr
156
1588
expr
157
1588
NUMBER
158
1588
and_test
159
1588
~
160
1588
lambdef
161
1588
not
162
1588
test
1960
1589
for
lambdef -> lambda varargslist : test
1589
,
lambdef -> lambda varargslist : test
1589
)
lambdef -> lambda varargslist : test
1590
*
trailer -> ( arglist )
1590
.
trailer -> ( arglist )
1590
//
trailer -> ( arglist )
1590
>>
trailer -> ( arglist )
1590
**
trailer -> ( arglist )
1590
in
trailer -> ( arglist )
1590
+
trailer -> ( arglist )
1590
/
trailer -> ( arglist )
1590
,
trailer -> ( arglist )
1590
(
trailer -> ( arglist )
1590
-
trailer -> ( arglist )
1590
%
trailer -> ( arglist )
1590
&
trailer -> ( arglist )
1590
@
trailer -> ( arglist )
1590
|
trailer -> ( arglist )
1590
[
trailer -> ( arglist )
1590
^
trailer -> ( arglist )
1590
<<
trailer -> ( arglist )
1591
.
trailer -> [ subscriptlist ]
1591
(
trailer -> [ subscriptlist ]
1591
<<
trailer -> [ subscriptlist ]
1591
*
trailer -> [ subscriptlist ]
1591
//
trailer -> [ subscriptlist ]
1591
&
trailer -> [ subscriptlist ]
1591
/
trailer -> [ subscriptlist ]
1591
,
trailer -> [ subscriptlist ]
1591
@
trailer -> [ subscriptlist ]
1591
in
trailer -> [ subscriptlist ]
1591
>>
trailer -> [ subscriptlist ]
1591
**
trailer -> [ subscriptlist ]
1591
-
trailer -> [ subscriptlist ]
1591
%
trailer -> [ subscriptlist ]
1591
+
trailer -> [ subscriptlist ]
1591
|
trailer -> [ subscriptlist ]
1591
^
trailer -> [ subscriptlist ]
1591
[
trailer -> [ subscriptlist ]
1592
NAME
1098
1592
atom_expr
1099
1592
atom
1101
1592
-
1102
1592
[
1105
1592
True
1106
1592
False
1108
1592
{
1109
1592
(
1110
1592
+
1111
1592
STRING
1114
1592
factor
1961
1592
power
1118
1592
None
1119
1592
NUMBER
1122
1592
~
1123
1593
NAME
1098
1593
atom_expr
1099
1593
term
1100
1593
atom
1101
1593
-
1102
1593
factor
1103
1593
[
1105
1593
True
1106
1593
False
1108
1593
{
1109
1593
(
1110
1593
+
1111
1593
STRING
1114
1593
arith_expr
1962
1593
power
1118
1593
None
1119
1593
NUMBER
1122
1593
~
1123
1594
NAME
1098
1594
atom_expr
1099
1594
term
1100
1594
atom
1101
1594
-
1102
1594
factor
1103
1594
[
1105
1594
True
1106
1594
False
1108
1594
{
1109
1594
(
1110
1594
+
1111
1594
STRING
1114
1594
arith_expr
1963
1594
power
1118
1594
None
1119
1594
NUMBER
1122
1594
~
1123
1595
trailer
1595
1595
trailer_expr
1964
1595
[
1597
1595
or
trailer_expr -> 
1595
.
1598
1595
(
1599
1595
not
trailer_expr -> 
1595
in
trailer_expr -> 
1595
is
trailer_expr -> 
1595
>=
trailer_expr -> 
1595
-
trailer_expr -> 
1595
@
trailer_expr -> 
1595
<=
trailer_expr -> 
1595
,
trailer_expr -> 
1595
^
trailer_expr -> 
1595
*
trailer_expr -> 
1595
if
trailer_expr -> 
1595
**
trailer_expr -> 
1595
>
trailer_expr -> 
1595
==
trailer_expr -> 
1595
>>
trailer_expr -> 
1595
<<
trailer_expr -> 
1595
/
trailer_expr -> 
1595
//
trailer_expr -> 
1595
!=
trailer_expr -> 
1595
<
trailer_expr -> 
1595
&
trailer_expr -> 
1595
:
trailer_expr -> 
1595
|
trailer_expr -> 
1595
and
trailer_expr -> 
1595
+
trailer_expr -> 
1595
%
trailer_expr -> 
1596
|
atom_expr -> atom trailer_expr
1596
*
atom_expr -> atom trailer_expr
1596
-
atom_expr -> atom trailer_expr
1596
:
atom_expr -> atom trailer_expr
1596
not
atom_expr -> atom trailer_expr
1596
in
atom_expr -> atom trailer_expr
1596
and
atom_expr -> atom trailer_expr
1596
^
atom_expr -> atom trailer_expr
1596
or
atom_expr -> atom trailer_expr
1596
<=
atom_expr -> atom trailer_expr
1596
<
atom_expr -> atom trailer_expr
1596
>>
atom_expr -> atom trailer_expr
1596
//
atom_expr -> atom trailer_expr
1596
!=
atom_expr -> atom trailer_expr
1596
<<
atom_expr -> atom trailer_expr
1596
+
atom_expr -> atom trailer_expr
1596
>
atom_expr -> atom trailer_expr
1596
/
atom_expr -> atom trailer_expr
1596
==
atom_expr -> atom trailer_expr
1596
%
atom_expr -> atom trailer_expr
1596
&
atom_expr -> atom trailer_expr
1596
@
atom_expr -> atom trailer_expr
1596
if
atom_expr -> atom trailer_expr
1596
>=
atom_expr -> atom trailer_expr
1596
is
atom_expr -> atom trailer_expr
1596
,
atom_expr -> atom trailer_expr
1596
**
atom_expr -> atom trailer_expr
1597
NAME
461
1597
atom_expr
462
1597
term
463
1597
atom
464
1597
-
465
1597
factor
466
1597
[
467
1597
True
468
1597
arith_expr
469
1597
False
470
1597
{
471
1597
(
472
1597
+
473
1597
and_expr
474
1597
and_test
475
1597
STRING
476
1597
subscriptlist
1965
1597
comparison
478
1597
shift_expr
479
1597
not_test
480
1597
power
481
1597
None
482
1597
xor_expr
483
1597
expr
484
1597
NUMBER
485
1597
test
486
1597
~
487
1597
or_test
488
1597
not
489
1597
lambdef
490
1597
:
maybe_test -> 
1597
lambda
491
1597
subscript
492
1597
maybe_test
493
1598
NAME
1966
1599
NAME
496
1599
atom_expr
497
1599
atom
498
1599
-
499
1599
arglist
1967
1599
factor
501
1599
*
502
1599
[
503
1599
True
504
1599
arith_expr
505
1599
xor_expr
506
1599
False
507
1599
**
508
1599
{
509
1599
+
510
1599
)
1968
1599
and_expr
512
1599
(
513
1599
STRING
514
1599
power
515
1599
term
516
1599
comparison
517
1599
shift_expr
518
1599
argument
519
1599
not_test
520
1599
or_test
521
1599
lambdef
522
1599
lambda
523
1599
None
524
1599
test
525
1599
expr
526
1599
NUMBER
527
1599
and_test
528
1599
~
529
1599
not
530
1600
>>
factor -> - factor
1600
if
factor -> - factor
1600
>
factor -> - factor
1600
,
factor -> - factor
1600
is
factor -> - factor
1600
//
factor -> - factor
1600
not
factor -> - factor
1600
or
factor -> - factor
1600
-
factor -> - factor
1600
<<
factor -> - factor
1600
>=
factor -> - factor
1600
/
factor -> - factor
1600
<=
factor -> - factor
1600
<
factor -> - factor
1600
in
factor -> - factor
1600
|
factor -> - factor
1600
*
factor -> - factor
1600
!=
factor -> - factor
1600
&
factor -> - factor
1600
and
factor -> - factor
1600
^
factor -> - factor
1600
+
factor -> - factor
1600
:
factor -> - factor
1600
%
factor -> - factor
1600
==
factor -> - factor
1600
@
factor -> - factor
1601
NAME
1098
1601
atom_expr
1099
1601
atom
1101
1601
-
1102
1601
factor
1103
1601
[
1105
1601
True
1106
1601
False
1108
1601
{
1109
1601
(
1110
1601
+
1111
1601
STRING
1114
1601
term
1969
1601
power
1118
1601
None
1119
1601
NUMBER
1122
1601
~
1123
1602
NAME
1098
1602
atom_expr
1099
1602
atom
1101
1602
-
1102
1602
factor
1103
1602
[
1105
1602
True
1106
1602
False
1108
1602
{
1109
1602
(
1110
1602
+
1111
1602
STRING
1114
1602
term
1970
1602
power
1118
1602
None
1119
1602
NUMBER
1122
1602
~
1123
1603
NAME
1098
1603
atom_expr
1099
1603
atom
1101
1603
-
1102
1603
factor
1103
1603
[
1105
1603
True
1106
1603
False
1108
1603
term
1971
1603
{
1109
1603
(
1110
1603
+
1111
1603
STRING
1114
1603
power
1118
1603
None
1119
1603
NUMBER
1122
1603
~
1123
1604
NAME
1098
1604
atom_expr
1099
1604
atom
1101
1604
-
1102
1604
factor
1103
1604
[
1105
1604
True
1106
1604
False
1108
1604
{
1109
1604
(
1110
1604
+
1111
1604
STRING
1114
1604
term
1972
1604
power
1118
1604
None
1119
1604
NUMBER
1122
1604
~
1123
1605
NAME
1098
1605
atom_expr
1099
1605
atom
1101
1605
-
1102
1605
factor
1103
1605
[
1105
1605
True
1106
1605
False
1108
1605
{
1109
1605
(
1110
1605
+
1111
1605
STRING
1114
1605
term
1973
1605
power
1118
1605
None
1119
1605
NUMBER
1122
1605
~
1123
1606
NAME
12
1606
True
1
1606
atom_expr
5
1606
term
29
1606
atom
4
1606
simple_stmt
1201
1606
factor
11
1606
shift_expr
7
1606
arith_expr
8
1606
False
27
1606
and_expr
9
1606
xor_expr
40
1606
{
41
1606
(
13
1606
[
15
1606
suite
1974
1606
resetstats
16
1606
STRING
46
1606
raise
19
1606
small_stmt
1203
1606
test
47
1606
comparison
28
1606
or_test
23
1606
~
55
1606
-
43
1606
lambda
53
1606
+
31
1606
not_test
33
1606
and_test
48
1606
power
32
1606
pass
73
1606
None
34
1606
lambdef
37
1606
not
42
1606
NUMBER
39
1606
expr
50
1606
continue
74
1606
begsim
49
1606
del_stmt
75
1606
NEWLINE
1204
1606
return
54
1606
nonlocal
76
1606
return_stmt
56
1606
endsim
57
1606
test_list
70
1606
raise_stmt
59
1606
assert_stmt
78
1606
stat_stmt
79
1606
global_stmt
61
1606
continue_stmt
62
1606
assert
63
1606
break_stmt
64
1606
nonlocal_stmt
80
1606
expr_stmt
81
1606
break
82
1606
del
66
1606
global
67
1606
yield
83
1606
pass_stmt
68
1606
flow_stmt
71
1606
yield_stmt
72
1606
sim_stmt
84
1607
]
1975
1608
and
atom -> [ ]
1608
<<
atom -> [ ]
1608
//
atom -> [ ]
1608
*
atom -> [ ]
1608
+
atom -> [ ]
1608
^
atom -> [ ]
1608
==
atom -> [ ]
1608
>>
atom -> [ ]
1608
/
atom -> [ ]
1608
:
atom -> [ ]
1608
in
atom -> [ ]
1608
>
atom -> [ ]
1608
<=
atom -> [ ]
1608
.
atom -> [ ]
1608
%
atom -> [ ]
1608
&
atom -> [ ]
1608
-
atom -> [ ]
1608
>=
atom -> [ ]
1608
not
atom -> [ ]
1608
|
atom -> [ ]
1608
@
atom -> [ ]
1608
is
atom -> [ ]
1608
or
atom -> [ ]
1608
!=
atom -> [ ]
1608
if
atom -> [ ]
1608
,
atom -> [ ]
1608
**
atom -> [ ]
1608
<
atom -> [ ]
1608
(
atom -> [ ]
1608
[
atom -> [ ]
1609
NAME
1098
1609
atom_expr
1099
1609
term
1100
1609
atom
1101
1609
-
1102
1609
factor
1103
1609
[
1105
1609
True
1106
1609
arith_expr
1107
1609
False
1108
1609
{
1109
1609
(
1110
1609
+
1111
1609
STRING
1114
1609
shift_expr
1976
1609
power
1118
1609
None
1119
1609
NUMBER
1122
1609
~
1123
1610
NAME
1098
1610
atom_expr
1099
1610
term
1100
1610
atom
1101
1610
-
1102
1610
factor
1103
1610
[
1105
1610
True
1106
1610
arith_expr
1107
1610
False
1108
1610
{
1109
1610
shift_expr
1977
1610
+
1111
1610
(
1110
1610
STRING
1114
1610
power
1118
1610
None
1119
1610
NUMBER
1122
1610
~
1123
1611
%
atom -> { }
1611
[
atom -> { }
1611
not
atom -> { }
1611
^
atom -> { }
1611
or
atom -> { }
1611
-
atom -> { }
1611
>=
atom -> { }
1611
<<
atom -> { }
1611
/
atom -> { }
1611
<=
atom -> { }
1611
|
atom -> { }
1611
>>
atom -> { }
1611
:
atom -> { }
1611
@
atom -> { }
1611
is
atom -> { }
1611
if
atom -> { }
1611
and
atom -> { }
1611
==
atom -> { }
1611
in
atom -> { }
1611
**
atom -> { }
1611
&
atom -> { }
1611
>
atom -> { }
1611
//
atom -> { }
1611
(
atom -> { }
1611
+
atom -> { }
1611
<
atom -> { }
1611
,
atom -> { }
1611
!=
atom -> { }
1611
.
atom -> { }
1611
*
atom -> { }
1612
|
atom -> ( )
1612
**
atom -> ( )
1612
>>
atom -> ( )
1612
-
atom -> ( )
1612
%
atom -> ( )
1612
(
atom -> ( )
1612
not
atom -> ( )
1612
+
atom -> ( )
1612
>=
atom -> ( )
1612
&
atom -> ( )
1612
*
atom -> ( )
1612
!=
atom -> ( )
1612
<=
atom -> ( )
1612
and
atom -> ( )
1612
<
atom -> ( )
1612
^
atom -> ( )
1612
==
atom -> ( )
1612
if
atom -> ( )
1612
in
atom -> ( )
1612
/
atom -> ( )
1612
>
atom -> ( )
1612
//
atom -> ( )
1612
.
atom -> ( )
1612
or
atom -> ( )
1612
@
atom -> ( )
1612
is
atom -> ( )
1612
:
atom -> ( )
1612
<<
atom -> ( )
1612
,
atom -> ( )
1612
[
atom -> ( )
1613
)
1978
1614
>>
factor -> + factor
1614
>=
factor -> + factor
1614
or
factor -> + factor
1614
==
factor -> + factor
1614
-
factor -> + factor
1614
:
factor -> + factor
1614
*
factor -> + factor
1614
<
factor -> + factor
1614
^
factor -> + factor
1614
,
factor -> + factor
1614
&
factor -> + factor
1614
@
factor -> + factor
1614
|
factor -> + factor
1614
<<
factor -> + factor
1614
%
factor -> + factor
1614
not
factor -> + factor
1614
//
factor -> + factor
1614
and
factor -> + factor
1614
in
factor -> + factor
1614
!=
factor -> + factor
1614
>
factor -> + factor
1614
/
factor -> + factor
1614
is
factor -> + factor
1614
+
factor -> + factor
1614
if
factor -> + factor
1614
<=
factor -> + factor
1615
NAME
1098
1615
atom_expr
1099
1615
term
1100
1615
atom
1101
1615
-
1102
1615
factor
1103
1615
[
1105
1615
True
1106
1615
arith_expr
1107
1615
False
1108
1615
{
1109
1615
(
1110
1615
+
1111
1615
and_expr
1112
1615
STRING
1114
1615
xor_expr
1979
1615
shift_expr
1116
1615
power
1118
1615
None
1119
1615
NUMBER
1122
1615
~
1123
1616
NAME
1098
1616
atom_expr
1099
1616
term
1100
1616
atom
1101
1616
-
1102
1616
factor
1103
1616
[
1105
1616
True
1106
1616
arith_expr
1107
1616
False
1108
1616
{
1109
1616
(
1110
1616
+
1111
1616
and_expr
1112
1616
and_test
1113
1616
STRING
1114
1616
comparison
1115
1616
shift_expr
1116
1616
not_test
1117
1616
power
1118
1616
None
1119
1616
xor_expr
1120
1616
expr
1121
1616
NUMBER
1122
1616
~
1123
1616
or_test
1980
1616
not
1126
1617
NAME
1098
1617
atom_expr
1099
1617
term
1100
1617
atom
1101
1617
-
1102
1617
factor
1103
1617
[
1105
1617
True
1106
1617
arith_expr
1107
1617
False
1108
1617
{
1109
1617
(
1110
1617
+
1111
1617
STRING
1114
1617
shift_expr
1116
1617
and_expr
1981
1617
power
1118
1617
None
1119
1617
NUMBER
1122
1617
~
1123
1618
NAME
1098
1618
atom_expr
1099
1618
term
1100
1618
atom
1101
1618
-
1102
1618
factor
1103
1618
[
1105
1618
True
1106
1618
arith_expr
1107
1618
False
1108
1618
{
1109
1618
(
1110
1618
+
1111
1618
and_expr
1112
1618
STRING
1114
1618
comparison
1115
1618
shift_expr
1116
1618
not_test
1117
1618
power
1118
1618
None
1119
1618
xor_expr
1120
1618
expr
1121
1618
NUMBER
1122
1618
and_test
1982
1618
~
1123
1618
not
1126
1619
NAME
1098
1619
atom_expr
1099
1619
term
1100
1619
atom
1101
1619
-
1102
1619
factor
1103
1619
[
1105
1619
True
1106
1619
arith_expr
1107
1619
False
1108
1619
{
1109
1619
(
1110
1619
+
1111
1619
and_expr
1112
1619
STRING
1114
1619
shift_expr
1116
1619
power
1118
1619
None
1119
1619
xor_expr
1120
1619
NUMBER
1122
1619
expr
1983
1619
~
1123
1620
NAME
1098
1620
atom_expr
1099
1620
term
1100
1620
atom
1101
1620
-
1102
1620
factor
1103
1620
[
1105
1620
True
1106
1620
arith_expr
1107
1620
False
1108
1620
{
1109
1620
(
1110
1620
+
1111
1620
and_expr
1112
1620
STRING
1114
1620
shift_expr
1116
1620
power
1118
1620
None
1119
1620
xor_expr
1120
1620
expr
1121
1620
NUMBER
1122
1620
~
1123
1620
comparison
1984
1621
is
factor -> ~ factor
1621
>=
factor -> ~ factor
1621
<<
factor -> ~ factor
1621
<=
factor -> ~ factor
1621
if
factor -> ~ factor
1621
==
factor -> ~ factor
1621
//
factor -> ~ factor
1621
or
factor -> ~ factor
1621
+
factor -> ~ factor
1621
and
factor -> ~ factor
1621
!=
factor -> ~ factor
1621
&
factor -> ~ factor
1621
:
factor -> ~ factor
1621
|
factor -> ~ factor
1621
>>
factor -> ~ factor
1621
in
factor -> ~ factor
1621
>
factor -> ~ factor
1621
/
factor -> ~ factor
1621
not
factor -> ~ factor
1621
@
factor -> ~ factor
1621
-
factor -> ~ factor
1621
^
factor -> ~ factor
1621
,
factor -> ~ factor
1621
*
factor -> ~ factor
1621
<
factor -> ~ factor
1621
%
factor -> ~ factor
1622
NAME
1098
1622
atom_expr
1099
1622
term
1100
1622
atom
1101
1622
-
1102
1622
factor
1103
1622
[
1105
1622
True
1106
1622
arith_expr
1107
1622
False
1108
1622
{
1109
1622
(
1110
1622
+
1111
1622
and_expr
1112
1622
and_test
1113
1622
STRING
1114
1622
comparison
1115
1622
shift_expr
1116
1622
not_test
1117
1622
power
1118
1622
None
1119
1622
xor_expr
1120
1622
expr
1121
1622
NUMBER
1122
1622
~
1123
1622
test_list
1985
1622
test
1124
1622
lambdef
1125
1622
not
1126
1622
or_test
1127
1622
lambda
1128
1623
,
not_test -> not not_test
1623
:
not_test -> not not_test
1623
or
not_test -> not not_test
1623
if
not_test -> not not_test
1623
and
not_test -> not not_test
1624
atom_expr
685
1624
atom
686
1624
-
687
1624
factor
688
1624
and_test
689
1624
True
690
1624
arith_expr
691
1624
False
692
1624
NAME
693
1624
{
694
1624
+
695
1624
and_expr
696
1624
[
697
1624
(
698
1624
STRING
699
1624
term
700
1624
comparison
701
1624
shift_expr
702
1624
not_test
703
1624
power
704
1624
xor_expr
706
1624
None
707
1624
NUMBER
708
1624
expr
709
1624
or_test
1986
1624
~
710
1624
not
711
1625
NAME
1098
1625
atom_expr
1099
1625
term
1100
1625
atom
1101
1625
-
1102
1625
factor
1103
1625
[
1105
1625
True
1106
1625
arith_expr
1107
1625
False
1108
1625
{
1109
1625
(
1110
1625
+
1111
1625
and_expr
1112
1625
and_test
1113
1625
STRING
1114
1625
comparison
1115
1625
shift_expr
1116
1625
not_test
1117
1625
power
1118
1625
None
1119
1625
xor_expr
1120
1625
expr
1121
1625
NUMBER
1122
1625
~
1123
1625
lambdef
1125
1625
not
1126
1625
or_test
1127
1625
lambda
1128
1625
test
1987
1626
:
1988
1627
(
trailer -> [ subscriptlist ]
1627
for
trailer -> [ subscriptlist ]
1627
//
trailer -> [ subscriptlist ]
1627
&
trailer -> [ subscriptlist ]
1627
>
trailer -> [ subscriptlist ]
1627
in
trailer -> [ subscriptlist ]
1627
>>
trailer -> [ subscriptlist ]
1627
[
trailer -> [ subscriptlist ]
1627
<=
trailer -> [ subscriptlist ]
1627
-
trailer -> [ subscriptlist ]
1627
!=
trailer -> [ subscriptlist ]
1627
|
trailer -> [ subscriptlist ]
1627
not
trailer -> [ subscriptlist ]
1627
.
trailer -> [ subscriptlist ]
1627
]
trailer -> [ subscriptlist ]
1627
>=
trailer -> [ subscriptlist ]
1627
or
trailer -> [ subscriptlist ]
1627
*
trailer -> [ subscriptlist ]
1627
<<
trailer -> [ subscriptlist ]
1627
**
trailer -> [ subscriptlist ]
1627
==
trailer -> [ subscriptlist ]
1627
+
trailer -> [ subscriptlist ]
1627
is
trailer -> [ subscriptlist ]
1627
/
trailer -> [ subscriptlist ]
1627
^
trailer -> [ subscriptlist ]
1627
and
trailer -> [ subscriptlist ]
1627
,
trailer -> [ subscriptlist ]
1627
@
trailer -> [ subscriptlist ]
1627
if
trailer -> [ subscriptlist ]
1627
<
trailer -> [ subscriptlist ]
1627
%
trailer -> [ subscriptlist ]
1628
or
trailer -> ( arglist )
1628
>>
trailer -> ( arglist )
1628
<=
trailer -> ( arglist )
1628
**
trailer -> ( arglist )
1628
<
trailer -> ( arglist )
1628
(
trailer -> ( arglist )
1628
-
trailer -> ( arglist )
1628
not
trailer -> ( arglist )
1628
if
trailer -> ( arglist )
1628
and
trailer -> ( arglist )
1628
.
trailer -> ( arglist )
1628
is
trailer -> ( arglist )
1628
>
trailer -> ( arglist )
1628
in
trailer -> ( arglist )
1628
!=
trailer -> ( arglist )
1628
,
trailer -> ( arglist )
1628
==
trailer -> ( arglist )
1628
%
trailer -> ( arglist )
1628
@
trailer -> ( arglist )
1628
^
trailer -> ( arglist )
1628
<<
trailer -> ( arglist )
1628
for
trailer -> ( arglist )
1628
*
trailer -> ( arglist )
1628
//
trailer -> ( arglist )
1628
&
trailer -> ( arglist )
1628
|
trailer -> ( arglist )
1628
>=
trailer -> ( arglist )
1628
+
trailer -> ( arglist )
1628
]
trailer -> ( arglist )
1628
/
trailer -> ( arglist )
1628
[
trailer -> ( arglist )
1629
NAME
187
1629
atom_expr
188
1629
atom
189
1629
-
190
1629
factor
191
1629
[
193
1629
True
194
1629
arith_expr
195
1629
False
196
1629
{
197
1629
+
198
1629
and_expr
199
1629
(
200
1629
STRING
201
1629
term
203
1629
and_test
204
1629
comparison
205
1629
shift_expr
206
1629
not_test
207
1629
power
208
1629
or_test
209
1629
None
210
1629
xor_expr
211
1629
expr
212
1629
NUMBER
213
1629
lambda
214
1629
~
215
1629
lambdef
216
1629
not
217
1629
test
1989
1630
for
lambdef -> lambda varargslist : test
1630
,
lambdef -> lambda varargslist : test
1630
]
lambdef -> lambda varargslist : test
1631
NAME
1169
1631
atom_expr
1170
1631
atom
1171
1631
-
1172
1631
[
1174
1631
True
1175
1631
False
1177
1631
{
1178
1631
+
1179
1631
(
1181
1631
STRING
1182
1631
factor
1990
1631
power
1188
1631
None
1189
1631
NUMBER
1192
1631
~
1193
1632
trailer
1632
1632
trailer_expr
1991
1632
[
1634
1632
or
trailer_expr -> 
1632
.
1635
1632
(
1636
1632
not
trailer_expr -> 
1632
in
trailer_expr -> 
1632
is
trailer_expr -> 
1632
>=
trailer_expr -> 
1632
-
trailer_expr -> 
1632
@
trailer_expr -> 
1632
<=
trailer_expr -> 
1632
,
trailer_expr -> 
1632
^
trailer_expr -> 
1632
*
trailer_expr -> 
1632
if
trailer_expr -> 
1632
**
trailer_expr -> 
1632
>
trailer_expr -> 
1632
==
trailer_expr -> 
1632
>>
trailer_expr -> 
1632
<<
trailer_expr -> 
1632
/
trailer_expr -> 
1632
//
trailer_expr -> 
1632
!=
trailer_expr -> 
1632
<
trailer_expr -> 
1632
&
trailer_expr -> 
1632
]
trailer_expr -> 
1632
|
trailer_expr -> 
1632
and
trailer_expr -> 
1632
+
trailer_expr -> 
1632
%
trailer_expr -> 
1633
|
atom_expr -> atom trailer_expr
1633
*
atom_expr -> atom trailer_expr
1633
-
atom_expr -> atom trailer_expr
1633
not
atom_expr -> atom trailer_expr
1633
in
atom_expr -> atom trailer_expr
1633
and
atom_expr -> atom trailer_expr
1633
^
atom_expr -> atom trailer_expr
1633
or
atom_expr -> atom trailer_expr
1633
<=
atom_expr -> atom trailer_expr
1633
<
atom_expr -> atom trailer_expr
1633
>>
atom_expr -> atom trailer_expr
1633
//
atom_expr -> atom trailer_expr
1633
!=
atom_expr -> atom trailer_expr
1633
<<
atom_expr -> atom trailer_expr
1633
+
atom_expr -> atom trailer_expr
1633
>
atom_expr -> atom trailer_expr
1633
/
atom_expr -> atom trailer_expr
1633
==
atom_expr -> atom trailer_expr
1633
%
atom_expr -> atom trailer_expr
1633
&
atom_expr -> atom trailer_expr
1633
@
atom_expr -> atom trailer_expr
1633
if
atom_expr -> atom trailer_expr
1633
>=
atom_expr -> atom trailer_expr
1633
]
atom_expr -> atom trailer_expr
1633
is
atom_expr -> atom trailer_expr
1633
,
atom_expr -> atom trailer_expr
1633
**
atom_expr -> atom trailer_expr
1634
NAME
461
1634
atom_expr
462
1634
term
463
1634
atom
464
1634
-
465
1634
factor
466
1634
[
467
1634
True
468
1634
arith_expr
469
1634
False
470
1634
{
471
1634
(
472
1634
+
473
1634
and_expr
474
1634
and_test
475
1634
STRING
476
1634
subscriptlist
1992
1634
comparison
478
1634
shift_expr
479
1634
not_test
480
1634
power
481
1634
None
482
1634
xor_expr
483
1634
expr
484
1634
NUMBER
485
1634
test
486
1634
~
487
1634
or_test
488
1634
not
489
1634
lambdef
490
1634
:
maybe_test -> 
1634
lambda
491
1634
subscript
492
1634
maybe_test
493
1635
NAME
1993
1636
NAME
496
1636
atom_expr
497
1636
atom
498
1636
-
499
1636
arglist
1994
1636
factor
501
1636
*
502
1636
[
503
1636
True
504
1636
arith_expr
505
1636
xor_expr
506
1636
False
507
1636
**
508
1636
{
509
1636
+
510
1636
)
1995
1636
and_expr
512
1636
(
513
1636
STRING
514
1636
power
515
1636
term
516
1636
comparison
517
1636
shift_expr
518
1636
argument
519
1636
not_test
520
1636
or_test
521
1636
lambdef
522
1636
lambda
523
1636
None
524
1636
test
525
1636
expr
526
1636
NUMBER
527
1636
and_test
528
1636
~
529
1636
not
530
1637
>>
factor -> - factor
1637
if
factor -> - factor
1637
>
factor -> - factor
1637
,
factor -> - factor
1637
is
factor -> - factor
1637
//
factor -> - factor
1637
not
factor -> - factor
1637
or
factor -> - factor
1637
-
factor -> - factor
1637
<<
factor -> - factor
1637
]
factor -> - factor
1637
>=
factor -> - factor
1637
/
factor -> - factor
1637
<=
factor -> - factor
1637
<
factor -> - factor
1637
in
factor -> - factor
1637
|
factor -> - factor
1637
*
factor -> - factor
1637
!=
factor -> - factor
1637
&
factor -> - factor
1637
and
factor -> - factor
1637
^
factor -> - factor
1637
+
factor -> - factor
1637
%
factor -> - factor
1637
==
factor -> - factor
1637
@
factor -> - factor
1638
NAME
1169
1638
atom_expr
1170
1638
atom
1171
1638
-
1172
1638
factor
1173
1638
[
1174
1638
True
1175
1638
False
1177
1638
{
1178
1638
+
1179
1638
(
1181
1638
STRING
1182
1638
term
1996
1638
power
1188
1638
None
1189
1638
NUMBER
1192
1638
~
1193
1639
NAME
1169
1639
atom_expr
1170
1639
atom
1171
1639
-
1172
1639
factor
1173
1639
[
1174
1639
True
1175
1639
False
1177
1639
{
1178
1639
+
1179
1639
(
1181
1639
STRING
1182
1639
term
1997
1639
power
1188
1639
None
1189
1639
NUMBER
1192
1639
~
1193
1640
NAME
1169
1640
atom_expr
1170
1640
atom
1171
1640
-
1172
1640
factor
1173
1640
[
1174
1640
True
1175
1640
False
1177
1640
term
1998
1640
{
1178
1640
+
1179
1640
(
1181
1640
STRING
1182
1640
power
1188
1640
None
1189
1640
NUMBER
1192
1640
~
1193
1641
NAME
1169
1641
atom_expr
1170
1641
atom
1171
1641
-
1172
1641
factor
1173
1641
[
1174
1641
True
1175
1641
False
1177
1641
{
1178
1641
+
1179
1641
(
1181
1641
STRING
1182
1641
term
1999
1641
power
1188
1641
None
1189
1641
NUMBER
1192
1641
~
1193
1642
NAME
1169
1642
atom_expr
1170
1642
atom
1171
1642
-
1172
1642
factor
1173
1642
[
1174
1642
True
1175
1642
False
1177
1642
{
1178
1642
+
1179
1642
(
1181
1642
STRING
1182
1642
term
2000
1642
power
1188
1642
None
1189
1642
NUMBER
1192
1642
~
1193
1643
]
2001
1644
and
atom -> [ ]
1644
<<
atom -> [ ]
1644
//
atom -> [ ]
1644
*
atom -> [ ]
1644
+
atom -> [ ]
1644
^
atom -> [ ]
1644
==
atom -> [ ]
1644
>>
atom -> [ ]
1644
/
atom -> [ ]
1644
]
atom -> [ ]
1644
in
atom -> [ ]
1644
>
atom -> [ ]
1644
<=
atom -> [ ]
1644
.
atom -> [ ]
1644
%
atom -> [ ]
1644
&
atom -> [ ]
1644
-
atom -> [ ]
1644
>=
atom -> [ ]
1644
not
atom -> [ ]
1644
|
atom -> [ ]
1644
@
atom -> [ ]
1644
is
atom -> [ ]
1644
or
atom -> [ ]
1644
!=
atom -> [ ]
1644
if
atom -> [ ]
1644
,
atom -> [ ]
1644
**
atom -> [ ]
1644
<
atom -> [ ]
1644
(
atom -> [ ]
1644
[
atom -> [ ]
1645
NAME
1169
1645
atom_expr
1170
1645
atom
1171
1645
-
1172
1645
factor
1173
1645
[
1174
1645
True
1175
1645
arith_expr
1176
1645
False
1177
1645
{
1178
1645
+
1179
1645
(
1181
1645
STRING
1182
1645
shift_expr
2002
1645
term
1183
1645
power
1188
1645
None
1189
1645
NUMBER
1192
1645
~
1193
1646
NAME
1169
1646
atom_expr
1170
1646
atom
1171
1646
-
1172
1646
factor
1173
1646
[
1174
1646
True
1175
1646
arith_expr
1176
1646
False
1177
1646
{
1178
1646
shift_expr
2003
1646
+
1179
1646
(
1181
1646
STRING
1182
1646
term
1183
1646
power
1188
1646
None
1189
1646
NUMBER
1192
1646
~
1193
1647
%
atom -> { }
1647
[
atom -> { }
1647
not
atom -> { }
1647
]
atom -> { }
1647
^
atom -> { }
1647
or
atom -> { }
1647
-
atom -> { }
1647
>=
atom -> { }
1647
<<
atom -> { }
1647
/
atom -> { }
1647
<=
atom -> { }
1647
|
atom -> { }
1647
>>
atom -> { }
1647
@
atom -> { }
1647
is
atom -> { }
1647
if
atom -> { }
1647
and
atom -> { }
1647
==
atom -> { }
1647
in
atom -> { }
1647
**
atom -> { }
1647
&
atom -> { }
1647
>
atom -> { }
1647
//
atom -> { }
1647
(
atom -> { }
1647
+
atom -> { }
1647
<
atom -> { }
1647
,
atom -> { }
1647
!=
atom -> { }
1647
.
atom -> { }
1647
*
atom -> { }
1648
>>
factor -> + factor
1648
>=
factor -> + factor
1648
or
factor -> + factor
1648
==
factor -> + factor
1648
-
factor -> + factor
1648
*
factor -> + factor
1648
]
factor -> + factor
1648
<
factor -> + factor
1648
^
factor -> + factor
1648
,
factor -> + factor
1648
&
factor -> + factor
1648
@
factor -> + factor
1648
|
factor -> + factor
1648
<<
factor -> + factor
1648
%
factor -> + factor
1648
not
factor -> + factor
1648
//
factor -> + factor
1648
and
factor -> + factor
1648
in
factor -> + factor
1648
!=
factor -> + factor
1648
>
factor -> + factor
1648
/
factor -> + factor
1648
is
factor -> + factor
1648
+
factor -> + factor
1648
if
factor -> + factor
1648
<=
factor -> + factor
1649
NAME
1169
1649
atom_expr
1170
1649
atom
1171
1649
-
1172
1649
factor
1173
1649
[
1174
1649
True
1175
1649
arith_expr
1176
1649
False
1177
1649
{
1178
1649
+
1179
1649
and_expr
1180
1649
(
1181
1649
STRING
1182
1649
xor_expr
2004
1649
term
1183
1649
shift_expr
1186
1649
power
1188
1649
None
1189
1649
NUMBER
1192
1649
~
1193
1650
|
atom -> ( )
1650
**
atom -> ( )
1650
]
atom -> ( )
1650
>>
atom -> ( )
1650
-
atom -> ( )
1650
%
atom -> ( )
1650
(
atom -> ( )
1650
not
atom -> ( )
1650
+
atom -> ( )
1650
>=
atom -> ( )
1650
&
atom -> ( )
1650
*
atom -> ( )
1650
!=
atom -> ( )
1650
<=
atom -> ( )
1650
and
atom -> ( )
1650
<
atom -> ( )
1650
^
atom -> ( )
1650
==
atom -> ( )
1650
if
atom -> ( )
1650
in
atom -> ( )
1650
/
atom -> ( )
1650
>
atom -> ( )
1650
//
atom -> ( )
1650
.
atom -> ( )
1650
or
atom -> ( )
1650
@
atom -> ( )
1650
is
atom -> ( )
1650
<<
atom -> ( )
1650
,
atom -> ( )
1650
[
atom -> ( )
1651
)
2005
1652
NAME
1169
1652
atom_expr
1170
1652
atom
1171
1652
-
1172
1652
factor
1173
1652
[
1174
1652
True
1175
1652
False
1177
1652
{
1178
1652
+
1179
1652
(
1181
1652
STRING
1182
1652
arith_expr
2006
1652
term
1183
1652
power
1188
1652
None
1189
1652
NUMBER
1192
1652
~
1193
1653
NAME
1169
1653
atom_expr
1170
1653
atom
1171
1653
-
1172
1653
factor
1173
1653
[
1174
1653
True
1175
1653
False
1177
1653
{
1178
1653
+
1179
1653
(
1181
1653
STRING
1182
1653
term
1183
1653
arith_expr
2007
1653
power
1188
1653
None
1189
1653
NUMBER
1192
1653
~
1193
1654
NAME
1169
1654
atom_expr
1170
1654
atom
1171
1654
-
1172
1654
factor
1173
1654
[
1174
1654
True
1175
1654
arith_expr
1176
1654
False
1177
1654
{
1178
1654
+
1179
1654
and_expr
1180
1654
(
1181
1654
STRING
1182
1654
term
1183
1654
and_test
1184
1654
comparison
1185
1654
shift_expr
1186
1654
not_test
1187
1654
power
1188
1654
None
1189
1654
xor_expr
1190
1654
expr
1191
1654
NUMBER
1192
1654
~
1193
1654
not
1195
1654
or_test
2008
1655
NAME
1169
1655
atom_expr
1170
1655
atom
1171
1655
-
1172
1655
factor
1173
1655
[
1174
1655
True
1175
1655
arith_expr
1176
1655
False
1177
1655
{
1178
1655
+
1179
1655
(
1181
1655
STRING
1182
1655
term
1183
1655
shift_expr
1186
1655
power
1188
1655
None
1189
1655
and_expr
2009
1655
NUMBER
1192
1655
~
1193
1656
NAME
1169
1656
atom_expr
1170
1656
atom
1171
1656
-
1172
1656
factor
1173
1656
[
1174
1656
True
1175
1656
arith_expr
1176
1656
False
1177
1656
{
1178
1656
+
1179
1656
and_expr
1180
1656
(
1181
1656
STRING
1182
1656
term
1183
1656
comparison
1185
1656
shift_expr
1186
1656
not_test
1187
1656
power
1188
1656
None
1189
1656
xor_expr
1190
1656
expr
1191
1656
NUMBER
1192
1656
~
1193
1656
not
1195
1656
and_test
2010
1657
NAME
1169
1657
atom_expr
1170
1657
atom
1171
1657
-
1172
1657
factor
1173
1657
[
1174
1657
True
1175
1657
arith_expr
1176
1657
False
1177
1657
{
1178
1657
+
1179
1657
and_expr
1180
1657
(
1181
1657
STRING
1182
1657
term
1183
1657
shift_expr
1186
1657
power
1188
1657
None
1189
1657
xor_expr
1190
1657
NUMBER
1192
1657
expr
2011
1657
~
1193
1658
NAME
1169
1658
atom_expr
1170
1658
atom
1171
1658
-
1172
1658
factor
1173
1658
[
1174
1658
True
1175
1658
arith_expr
1176
1658
False
1177
1658
{
1178
1658
+
1179
1658
and_expr
1180
1658
(
1181
1658
STRING
1182
1658
term
1183
1658
shift_expr
1186
1658
power
1188
1658
None
1189
1658
xor_expr
1190
1658
expr
1191
1658
NUMBER
1192
1658
~
1193
1658
comparison
2012
1659
is
factor -> ~ factor
1659
>=
factor -> ~ factor
1659
<<
factor -> ~ factor
1659
<=
factor -> ~ factor
1659
if
factor -> ~ factor
1659
==
factor -> ~ factor
1659
//
factor -> ~ factor
1659
or
factor -> ~ factor
1659
+
factor -> ~ factor
1659
and
factor -> ~ factor
1659
!=
factor -> ~ factor
1659
&
factor -> ~ factor
1659
%
factor -> ~ factor
1659
|
factor -> ~ factor
1659
>>
factor -> ~ factor
1659
in
factor -> ~ factor
1659
>
factor -> ~ factor
1659
/
factor -> ~ factor
1659
not
factor -> ~ factor
1659
@
factor -> ~ factor
1659
-
factor -> ~ factor
1659
^
factor -> ~ factor
1659
,
factor -> ~ factor
1659
*
factor -> ~ factor
1659
<
factor -> ~ factor
1659
]
factor -> ~ factor
1660
atom_expr
685
1660
atom
686
1660
-
687
1660
factor
688
1660
and_test
689
1660
True
690
1660
arith_expr
691
1660
False
692
1660
NAME
693
1660
{
694
1660
+
695
1660
and_expr
696
1660
[
697
1660
(
698
1660
STRING
699
1660
term
700
1660
comparison
701
1660
shift_expr
702
1660
not_test
703
1660
power
704
1660
xor_expr
706
1660
None
707
1660
NUMBER
708
1660
expr
709
1660
or_test
2013
1660
~
710
1660
not
711
1661
,
not_test -> not not_test
1661
or
not_test -> not not_test
1661
]
not_test -> not not_test
1661
if
not_test -> not not_test
1661
and
not_test -> not not_test
1662
NAME
1169
1662
atom_expr
1170
1662
atom
1171
1662
-
1172
1662
factor
1173
1662
[
1174
1662
True
1175
1662
arith_expr
1176
1662
False
1177
1662
{
1178
1662
+
1179
1662
and_expr
1180
1662
(
1181
1662
STRING
1182
1662
term
1183
1662
and_test
1184
1662
comparison
1185
1662
shift_expr
1186
1662
not_test
1187
1662
power
1188
1662
None
1189
1662
xor_expr
1190
1662
expr
1191
1662
NUMBER
1192
1662
~
1193
1662
or_test
1194
1662
not
1195
1662
lambdef
1196
1662
lambda
1199
1662
test
2014
1663
:
2015
1664
NAME
2016
1664
atom_expr
2017
1664
atom
2018
1664
-
2019
1664
factor
2020
1664
True
2021
1664
arith_expr
2022
1664
False
2023
1664
{
2024
1664
+
2025
1664
and_expr
2026
1664
[
2027
1664
(
2028
1664
STRING
2029
1664
term
2030
1664
and_test
2031
1664
comparison
2032
1664
shift_expr
2033
1664
not_test
2034
1664
power
2035
1664
None
2036
1664
xor_expr
2037
1664
expr
2038
1664
NUMBER
2039
1664
~
2040
1664
not
2041
1664
or_test
2042
1665
:
2043
1666
STRING
simple_stmt -> small_stmt NEWLINE
1666
while
simple_stmt -> small_stmt NEWLINE
1666
~
simple_stmt -> small_stmt NEWLINE
1666
del
simple_stmt -> small_stmt NEWLINE
1666
global
simple_stmt -> small_stmt NEWLINE
1666
NUMBER
simple_stmt -> small_stmt NEWLINE
1666
True
simple_stmt -> small_stmt NEWLINE
1666
NAME
simple_stmt -> small_stmt NEWLINE
1666
with
simple_stmt -> small_stmt NEWLINE
1666
NEWLINE
simple_stmt -> small_stmt NEWLINE
1666
(
simple_stmt -> small_stmt NEWLINE
1666
-
simple_stmt -> small_stmt NEWLINE
1666
+
simple_stmt -> small_stmt NEWLINE
1666
continue
simple_stmt -> small_stmt NEWLINE
1666
endsim
simple_stmt -> small_stmt NEWLINE
1666
try
simple_stmt -> small_stmt NEWLINE
1666
$
simple_stmt -> small_stmt NEWLINE
1666
[
simple_stmt -> small_stmt NEWLINE
1666
raise
simple_stmt -> small_stmt NEWLINE
1666
if
simple_stmt -> small_stmt NEWLINE
1666
{
simple_stmt -> small_stmt NEWLINE
1666
begsim
simple_stmt -> small_stmt NEWLINE
1666
return
simple_stmt -> small_stmt NEWLINE
1666
assert
simple_stmt -> small_stmt NEWLINE
1666
nonlocal
simple_stmt -> small_stmt NEWLINE
1666
not
simple_stmt -> small_stmt NEWLINE
1666
conf
simple_stmt -> small_stmt NEWLINE
1666
yield
simple_stmt -> small_stmt NEWLINE
1666
resetstats
simple_stmt -> small_stmt NEWLINE
1666
None
simple_stmt -> small_stmt NEWLINE
1666
else
simple_stmt -> small_stmt NEWLINE
1666
for
simple_stmt -> small_stmt NEWLINE
1666
class
simple_stmt -> small_stmt NEWLINE
1666
@
simple_stmt -> small_stmt NEWLINE
1666
pass
simple_stmt -> small_stmt NEWLINE
1666
lambda
simple_stmt -> small_stmt NEWLINE
1666
False
simple_stmt -> small_stmt NEWLINE
1666
break
simple_stmt -> small_stmt NEWLINE
1666
def
simple_stmt -> small_stmt NEWLINE
1667
True
1
1667
if
1708
1667
decorated
1709
1667
atom
4
1667
atom_expr
5
1667
while_stmt
1710
1667
try
1711
1667
shift_expr
7
1667
arith_expr
8
1667
and_expr
9
1667
conf
1712
1667
factor
11
1667
NAME
12
1667
(
13
1667
for
1713
1667
[
15
1667
resetstats
16
1667
compound_stmt
1714
1667
while
1715
1667
raise
19
1667
class
1716
1667
small_stmt
1717
1667
or_test
23
1667
for_stmt
1718
1667
try_stmt
1719
1667
def
1720
1667
False
27
1667
comparison
28
1667
term
29
1667
simple_stmt
1721
1667
+
31
1667
power
32
1667
not_test
33
1667
None
34
1667
with
1722
1667
classdef
1723
1667
lambdef
37
1667
if_stmt
1724
1667
NUMBER
39
1667
xor_expr
40
1667
{
41
1667
not
42
1667
-
43
1667
stmt_list
2044
1667
funcdef
1725
1667
decorators
1726
1667
STRING
46
1667
test
47
1667
and_test
48
1667
begsim
49
1667
expr
50
1667
with_stmt
1727
1667
lambda
53
1667
return
54
1667
~
55
1667
confdef
1728
1667
return_stmt
56
1667
endsim
57
1667
@
58
1667
raise_stmt
59
1667
global_stmt
61
1667
continue_stmt
62
1667
assert
63
1667
break_stmt
64
1667
del
66
1667
global
67
1667
pass_stmt
68
1667
test_list
70
1667
flow_stmt
71
1667
yield_stmt
72
1667
stmt
1729
1667
pass
73
1667
continue
74
1667
del_stmt
75
1667
nonlocal
76
1667
decorator
77
1667
assert_stmt
78
1667
stat_stmt
79
1667
nonlocal_stmt
80
1667
expr_stmt
81
1667
break
82
1667
yield
83
1667
sim_stmt
84
1668
from
lambdef -> lambda varargslist : test
1668
NEWLINE
lambdef -> lambda varargslist : test
1669
(
trailer -> [ subscriptlist ]
1669
//
trailer -> [ subscriptlist ]
1669
&
trailer -> [ subscriptlist ]
1669
>
trailer -> [ subscriptlist ]
1669
in
trailer -> [ subscriptlist ]
1669
>>
trailer -> [ subscriptlist ]
1669
[
trailer -> [ subscriptlist ]
1669
<=
trailer -> [ subscriptlist ]
1669
-
trailer -> [ subscriptlist ]
1669
!=
trailer -> [ subscriptlist ]
1669
|
trailer -> [ subscriptlist ]
1669
not
trailer -> [ subscriptlist ]
1669
.
trailer -> [ subscriptlist ]
1669
>=
trailer -> [ subscriptlist ]
1669
or
trailer -> [ subscriptlist ]
1669
*
trailer -> [ subscriptlist ]
1669
<<
trailer -> [ subscriptlist ]
1669
from
trailer -> [ subscriptlist ]
1669
**
trailer -> [ subscriptlist ]
1669
==
trailer -> [ subscriptlist ]
1669
+
trailer -> [ subscriptlist ]
1669
is
trailer -> [ subscriptlist ]
1669
/
trailer -> [ subscriptlist ]
1669
^
trailer -> [ subscriptlist ]
1669
and
trailer -> [ subscriptlist ]
1669
NEWLINE
trailer -> [ subscriptlist ]
1669
@
trailer -> [ subscriptlist ]
1669
if
trailer -> [ subscriptlist ]
1669
<
trailer -> [ subscriptlist ]
1669
%
trailer -> [ subscriptlist ]
1670
or
trailer -> ( arglist )
1670
NEWLINE
trailer -> ( arglist )
1670
>>
trailer -> ( arglist )
1670
<=
trailer -> ( arglist )
1670
**
trailer -> ( arglist )
1670
<
trailer -> ( arglist )
1670
(
trailer -> ( arglist )
1670
-
trailer -> ( arglist )
1670
not
trailer -> ( arglist )
1670
if
trailer -> ( arglist )
1670
and
trailer -> ( arglist )
1670
.
trailer -> ( arglist )
1670
is
trailer -> ( arglist )
1670
>
trailer -> ( arglist )
1670
in
trailer -> ( arglist )
1670
!=
trailer -> ( arglist )
1670
==
trailer -> ( arglist )
1670
%
trailer -> ( arglist )
1670
@
trailer -> ( arglist )
1670
^
trailer -> ( arglist )
1670
<<
trailer -> ( arglist )
1670
*
trailer -> ( arglist )
1670
//
trailer -> ( arglist )
1670
from
trailer -> ( arglist )
1670
&
trailer -> ( arglist )
1670
|
trailer -> ( arglist )
1670
>=
trailer -> ( arglist )
1670
+
trailer -> ( arglist )
1670
/
trailer -> ( arglist )
1670
[
trailer -> ( arglist )
1671
NAME
221
1671
lambda
222
1671
atom_expr
223
1671
term
224
1671
atom
225
1671
-
226
1671
factor
227
1671
{
228
1671
True
229
1671
arith_expr
230
1671
False
231
1671
+
233
1671
and_expr
234
1671
[
235
1671
(
236
1671
STRING
237
1671
comparison
238
1671
shift_expr
239
1671
not_test
240
1671
power
241
1671
None
242
1671
xor_expr
243
1671
expr
244
1671
NUMBER
245
1671
and_test
246
1671
or_test
247
1671
~
248
1671
lambdef
249
1671
test
2045
1671
not
250
1672
:
2046
1673
NAME
12
1673
True
1
1673
atom_expr
5
1673
term
29
1673
atom
4
1673
simple_stmt
1234
1673
factor
11
1673
shift_expr
7
1673
arith_expr
8
1673
False
27
1673
and_expr
9
1673
xor_expr
40
1673
{
41
1673
(
13
1673
[
15
1673
resetstats
16
1673
STRING
46
1673
raise
19
1673
small_stmt
21
1673
test
47
1673
comparison
28
1673
or_test
23
1673
~
55
1673
-
43
1673
lambda
53
1673
+
31
1673
not_test
33
1673
and_test
48
1673
power
32
1673
pass
73
1673
None
34
1673
lambdef
37
1673
not
42
1673
NUMBER
39
1673
suite
2047
1673
expr
50
1673
continue
74
1673
begsim
49
1673
del_stmt
75
1673
NEWLINE
1236
1673
return
54
1673
nonlocal
76
1673
return_stmt
56
1673
endsim
57
1673
test_list
70
1673
raise_stmt
59
1673
assert_stmt
78
1673
stat_stmt
79
1673
global_stmt
61
1673
continue_stmt
62
1673
assert
63
1673
break_stmt
64
1673
nonlocal_stmt
80
1673
expr_stmt
81
1673
break
82
1673
del
66
1673
global
67
1673
yield
83
1673
pass_stmt
68
1673
flow_stmt
71
1673
yield_stmt
72
1673
sim_stmt
84
1674
True
1
1674
if
1708
1674
decorated
1709
1674
atom
4
1674
atom_expr
5
1674
while_stmt
1710
1674
try
1711
1674
shift_expr
7
1674
arith_expr
8
1674
and_expr
9
1674
conf
1712
1674
factor
11
1674
NAME
12
1674
(
13
1674
for
1713
1674
[
15
1674
resetstats
16
1674
compound_stmt
1714
1674
while
1715
1674
raise
19
1674
class
1716
1674
small_stmt
1717
1674
or_test
23
1674
for_stmt
1718
1674
try_stmt
1719
1674
def
1720
1674
False
27
1674
comparison
28
1674
term
29
1674
simple_stmt
1721
1674
+
31
1674
power
32
1674
not_test
33
1674
None
34
1674
with
1722
1674
classdef
1723
1674
lambdef
37
1674
if_stmt
1724
1674
NUMBER
39
1674
xor_expr
40
1674
{
41
1674
not
42
1674
-
43
1674
stmt_list
2048
1674
funcdef
1725
1674
decorators
1726
1674
STRING
46
1674
test
47
1674
and_test
48
1674
begsim
49
1674
expr
50
1674
with_stmt
1727
1674
lambda
53
1674
return
54
1674
~
55
1674
confdef
1728
1674
return_stmt
56
1674
endsim
57
1674
@
58
1674
raise_stmt
59
1674
global_stmt
61
1674
continue_stmt
62
1674
assert
63
1674
break_stmt
64
1674
del
66
1674
global
67
1674
pass_stmt
68
1674
test_list
70
1674
flow_stmt
71
1674
yield_stmt
72
1674
stmt
1729
1674
pass
73
1674
continue
74
1674
del_stmt
75
1674
nonlocal
76
1674
decorator
77
1674
assert_stmt
78
1674
stat_stmt
79
1674
nonlocal_stmt
80
1674
expr_stmt
81
1674
break
82
1674
yield
83
1674
sim_stmt
84
1675
:
2049
1676
:
2050
1677
.
atom -> NAME
1677
<
atom -> NAME
1677
|
atom -> NAME
1677
not
atom -> NAME
1677
[
atom -> NAME
1677
+
atom -> NAME
1677
%
atom -> NAME
1677
<=
atom -> NAME
1677
*
atom -> NAME
1677
!=
atom -> NAME
1677
in
atom -> NAME
1677
:
atom -> NAME
1677
if
atom -> NAME
1677
is
atom -> NAME
1677
(
atom -> NAME
1677
^
atom -> NAME
1677
@
atom -> NAME
1677
&
atom -> NAME
1677
>>
atom -> NAME
1677
as
atom -> NAME
1677
<<
atom -> NAME
1677
-
atom -> NAME
1677
/
atom -> NAME
1677
or
atom -> NAME
1677
//
atom -> NAME
1677
>=
atom -> NAME
1677
and
atom -> NAME
1677
>
atom -> NAME
1677
==
atom -> NAME
1677
**
atom -> NAME
1678
**
2051
1678
and
power -> atom_expr
1678
^
power -> atom_expr
1678
or
power -> atom_expr
1678
>>
power -> atom_expr
1678
if
power -> atom_expr
1678
<
power -> atom_expr
1678
>=
power -> atom_expr
1678
:
power -> atom_expr
1678
!=
power -> atom_expr
1678
is
power -> atom_expr
1678
<=
power -> atom_expr
1678
as
power -> atom_expr
1678
not
power -> atom_expr
1678
//
power -> atom_expr
1678
+
power -> atom_expr
1678
==
power -> atom_expr
1678
|
power -> atom_expr
1678
-
power -> atom_expr
1678
&
power -> atom_expr
1678
/
power -> atom_expr
1678
@
power -> atom_expr
1678
<<
power -> atom_expr
1678
%
power -> atom_expr
1678
*
power -> atom_expr
1678
in
power -> atom_expr
1678
>
power -> atom_expr
1679
:
2052
1679
as
2053
1680
+
2054
1680
or
arith_expr -> term
1680
==
arith_expr -> term
1680
-
2055
1680
in
arith_expr -> term
1680
<<
arith_expr -> term
1680
>
arith_expr -> term
1680
is
arith_expr -> term
1680
>=
arith_expr -> term
1680
:
arith_expr -> term
1680
<=
arith_expr -> term
1680
and
arith_expr -> term
1680
as
arith_expr -> term
1680
>>
arith_expr -> term
1680
!=
arith_expr -> term
1680
not
arith_expr -> term
1680
&
arith_expr -> term
1680
if
arith_expr -> term
1680
<
arith_expr -> term
1680
^
arith_expr -> term
1680
|
arith_expr -> term
1681
trailer
2056
1681
trailer_expr
2057
1681
[
2058
1681
(
2059
1681
or
trailer_expr -> 
1681
.
2060
1681
not
trailer_expr -> 
1681
in
trailer_expr -> 
1681
is
trailer_expr -> 
1681
>=
trailer_expr -> 
1681
-
trailer_expr -> 
1681
@
trailer_expr -> 
1681
<=
trailer_expr -> 
1681
^
trailer_expr -> 
1681
*
trailer_expr -> 
1681
if
trailer_expr -> 
1681
**
trailer_expr -> 
1681
>
trailer_expr -> 
1681
==
trailer_expr -> 
1681
>>
trailer_expr -> 
1681
<<
trailer_expr -> 
1681
/
trailer_expr -> 
1681
//
trailer_expr -> 
1681
!=
trailer_expr -> 
1681
<
trailer_expr -> 
1681
&
trailer_expr -> 
1681
:
trailer_expr -> 
1681
|
trailer_expr -> 
1681
and
trailer_expr -> 
1681
+
trailer_expr -> 
1681
%
trailer_expr -> 
1681
as
trailer_expr -> 
1682
NAME
1677
1682
atom_expr
1678
1682
atom
1681
1682
-
1682
1682
factor
2061
1682
True
1686
1682
False
1687
1682
{
1688
1682
(
1689
1682
+
1690
1682
[
1693
1682
STRING
1694
1682
power
1699
1682
None
1700
1682
NUMBER
1702
1682
~
1703
1683
%
2062
1683
//
2063
1683
/
2064
1683
*
2065
1683
@
2066
1683
not
term -> factor
1683
<<
term -> factor
1683
or
term -> factor
1683
^
term -> factor
1683
in
term -> factor
1683
if
term -> factor
1683
and
term -> factor
1683
<=
term -> factor
1683
&
term -> factor
1683
:
term -> factor
1683
as
term -> factor
1683
>>
term -> factor
1683
>
term -> factor
1683
|
term -> factor
1683
<
term -> factor
1683
is
term -> factor
1683
!=
term -> factor
1683
>=
term -> factor
1683
==
term -> factor
1683
-
term -> factor
1683
+
term -> factor
1684
NAME
12
1684
True
1
1684
atom_expr
5
1684
term
29
1684
NEWLINE
2067
1684
atom
4
1684
simple_stmt
2068
1684
factor
11
1684
shift_expr
7
1684
arith_expr
8
1684
suite
2069
1684
and_expr
9
1684
False
27
1684
xor_expr
40
1684
{
41
1684
(
13
1684
[
15
1684
resetstats
16
1684
STRING
46
1684
raise
19
1684
small_stmt
2070
1684
test
47
1684
comparison
28
1684
or_test
23
1684
~
55
1684
-
43
1684
lambda
53
1684
+
31
1684
not_test
33
1684
and_test
48
1684
power
32
1684
pass
73
1684
None
34
1684
lambdef
37
1684
not
42
1684
NUMBER
39
1684
expr
50
1684
continue
74
1684
begsim
49
1684
del_stmt
75
1684
return
54
1684
nonlocal
76
1684
return_stmt
56
1684
endsim
57
1684
test_list
70
1684
raise_stmt
59
1684
assert_stmt
78
1684
stat_stmt
79
1684
global_stmt
61
1684
continue_stmt
62
1684
assert
63
1684
break_stmt
64
1684
nonlocal_stmt
80
1684
expr_stmt
81
1684
break
82
1684
del
66
1684
global
67
1684
yield
83
1684
pass_stmt
68
1684
flow_stmt
71
1684
yield_stmt
72
1684
sim_stmt
84
1685
>>
2071
1685
or
shift_expr -> arith_expr
1685
<<
2072
1685
^
shift_expr -> arith_expr
1685
in
shift_expr -> arith_expr
1685
as
shift_expr -> arith_expr
1685
<=
shift_expr -> arith_expr
1685
>=
shift_expr -> arith_expr
1685
&
shift_expr -> arith_expr
1685
==
shift_expr -> arith_expr
1685
:
shift_expr -> arith_expr
1685
not
shift_expr -> arith_expr
1685
and
shift_expr -> arith_expr
1685
>
shift_expr -> arith_expr
1685
!=
shift_expr -> arith_expr
1685
if
shift_expr -> arith_expr
1685
|
shift_expr -> arith_expr
1685
<
shift_expr -> arith_expr
1685
is
shift_expr -> arith_expr
1686
!=
atom -> True
1686
&
atom -> True
1686
+
atom -> True
1686
<<
atom -> True
1686
@
atom -> True
1686
as
atom -> True
1686
if
atom -> True
1686
and
atom -> True
1686
is
atom -> True
1686
|
atom -> True
1686
<
atom -> True
1686
>=
atom -> True
1686
or
atom -> True
1686
==
atom -> True
1686
%
atom -> True
1686
>
atom -> True
1686
[
atom -> True
1686
*
atom -> True
1686
//
atom -> True
1686
/
atom -> True
1686
in
atom -> True
1686
-
atom -> True
1686
^
atom -> True
1686
<=
atom -> True
1686
(
atom -> True
1686
**
atom -> True
1686
.
atom -> True
1686
not
atom -> True
1686
:
atom -> True
1686
>>
atom -> True
1687
not
atom -> False
1687
==
atom -> False
1687
*
atom -> False
1687
>
atom -> False
1687
[
atom -> False
1687
if
atom -> False
1687
@
atom -> False
1687
&
atom -> False
1687
is
atom -> False
1687
.
atom -> False
1687
+
atom -> False
1687
%
atom -> False
1687
>=
atom -> False
1687
and
atom -> False
1687
(
atom -> False
1687
|
atom -> False
1687
-
atom -> False
1687
:
atom -> False
1687
/
atom -> False
1687
as
atom -> False
1687
in
atom -> False
1687
<<
atom -> False
1687
<=
atom -> False
1687
^
atom -> False
1687
//
atom -> False
1687
>>
atom -> False
1687
!=
atom -> False
1687
**
atom -> False
1687
or
atom -> False
1687
<
atom -> False
1688
}
2073
1689
NAME
131
1689
atom_expr
132
1689
atom
133
1689
-
134
1689
factor
136
1689
)
2074
1689
[
137
1689
True
138
1689
arith_expr
139
1689
False
140
1689
{
141
1689
+
142
1689
and_expr
143
1689
(
144
1689
STRING
145
1689
test_list_comp
2075
1689
power
147
1689
term
148
1689
comparison
149
1689
shift_expr
150
1689
test
151
1689
not_test
152
1689
or_test
153
1689
lambda
154
1689
None
155
1689
xor_expr
156
1689
expr
157
1689
NUMBER
158
1689
and_test
159
1689
~
160
1689
lambdef
161
1689
not
162
1689
test_list
163
1690
NAME
1677
1690
atom_expr
1678
1690
atom
1681
1690
-
1682
1690
True
1686
1690
False
1687
1690
{
1688
1690
(
1689
1690
+
1690
1690
factor
2076
1690
[
1693
1690
STRING
1694
1690
power
1699
1690
None
1700
1690
NUMBER
1702
1690
~
1703
1691
^
2077
1691
<
xor_expr -> and_expr
1691
<=
xor_expr -> and_expr
1691
|
xor_expr -> and_expr
1691
not
xor_expr -> and_expr
1691
as
xor_expr -> and_expr
1691
and
xor_expr -> and_expr
1691
!=
xor_expr -> and_expr
1691
or
xor_expr -> and_expr
1691
>
xor_expr -> and_expr
1691
>=
xor_expr -> and_expr
1691
==
xor_expr -> and_expr
1691
in
xor_expr -> and_expr
1691
is
xor_expr -> and_expr
1691
:
xor_expr -> and_expr
1691
if
xor_expr -> and_expr
1692
or
2078
1692
as
or_test -> and_test
1692
if
or_test -> and_test
1692
:
or_test -> and_test
1693
NAME
187
1693
atom_expr
188
1693
atom
189
1693
-
190
1693
factor
191
1693
test_list_comp
2079
1693
[
193
1693
True
194
1693
arith_expr
195
1693
False
196
1693
{
197
1693
+
198
1693
and_expr
199
1693
(
200
1693
STRING
201
1693
]
2080
1693
term
203
1693
and_test
204
1693
comparison
205
1693
shift_expr
206
1693
not_test
207
1693
power
208
1693
or_test
209
1693
None
210
1693
xor_expr
211
1693
expr
212
1693
NUMBER
213
1693
lambda
214
1693
~
215
1693
lambdef
216
1693
not
217
1693
test
218
1693
test_list
219
1694
and
atom -> STRING
1694
not
atom -> STRING
1694
.
atom -> STRING
1694
//
atom -> STRING
1694
-
atom -> STRING
1694
*
atom -> STRING
1694
(
atom -> STRING
1694
>=
atom -> STRING
1694
<=
atom -> STRING
1694
<<
atom -> STRING
1694
if
atom -> STRING
1694
+
atom -> STRING
1694
or
atom -> STRING
1694
/
atom -> STRING
1694
@
atom -> STRING
1694
in
atom -> STRING
1694
>>
atom -> STRING
1694
%
atom -> STRING
1694
!=
atom -> STRING
1694
>
atom -> STRING
1694
^
atom -> STRING
1694
<
atom -> STRING
1694
as
atom -> STRING
1694
:
atom -> STRING
1694
==
atom -> STRING
1694
**
atom -> STRING
1694
&
atom -> STRING
1694
|
atom -> STRING
1694
is
atom -> STRING
1694
[
atom -> STRING
1695
|
2081
1695
>
expr -> xor_expr
1695
<
expr -> xor_expr
1695
and
expr -> xor_expr
1695
>=
expr -> xor_expr
1695
!=
expr -> xor_expr
1695
or
expr -> xor_expr
1695
in
expr -> xor_expr
1695
is
expr -> xor_expr
1695
if
expr -> xor_expr
1695
==
expr -> xor_expr
1695
<=
expr -> xor_expr
1695
:
expr -> xor_expr
1695
not
expr -> xor_expr
1695
as
expr -> xor_expr
1696
:
not_test -> comparison
1696
as
not_test -> comparison
1696
or
not_test -> comparison
1696
if
not_test -> comparison
1696
and
not_test -> comparison
1697
==
and_expr -> shift_expr
1697
&
2082
1697
!=
and_expr -> shift_expr
1697
as
and_expr -> shift_expr
1697
<
and_expr -> shift_expr
1697
<=
and_expr -> shift_expr
1697
and
and_expr -> shift_expr
1697
in
and_expr -> shift_expr
1697
^
and_expr -> shift_expr
1697
:
and_expr -> shift_expr
1697
not
and_expr -> shift_expr
1697
is
and_expr -> shift_expr
1697
if
and_expr -> shift_expr
1697
>
and_expr -> shift_expr
1697
or
and_expr -> shift_expr
1697
>=
and_expr -> shift_expr
1697
|
and_expr -> shift_expr
1698
and
2083
1698
if
and_test -> not_test
1698
as
and_test -> not_test
1698
:
and_test -> not_test
1698
or
and_test -> not_test
1699
<=
factor -> power
1699
is
factor -> power
1699
>
factor -> power
1699
==
factor -> power
1699
^
factor -> power
1699
or
factor -> power
1699
-
factor -> power
1699
+
factor -> power
1699
as
factor -> power
1699
>>
factor -> power
1699
/
factor -> power
1699
*
factor -> power
1699
<<
factor -> power
1699
|
factor -> power
1699
and
factor -> power
1699
<
factor -> power
1699
not
factor -> power
1699
!=
factor -> power
1699
:
factor -> power
1699
if
factor -> power
1699
&
factor -> power
1699
in
factor -> power
1699
%
factor -> power
1699
>=
factor -> power
1699
//
factor -> power
1699
@
factor -> power
1700
+
atom -> None
1700
>>
atom -> None
1700
/
atom -> None
1700
or
atom -> None
1700
as
atom -> None
1700
*
atom -> None
1700
in
atom -> None
1700
**
atom -> None
1700
==
atom -> None
1700
-
atom -> None
1700
if
atom -> None
1700
(
atom -> None
1700
@
atom -> None
1700
:
atom -> None
1700
>=
atom -> None
1700
[
atom -> None
1700
^
atom -> None
1700
&
atom -> None
1700
<=
atom -> None
1700
is
atom -> None
1700
.
atom -> None
1700
not
atom -> None
1700
//
atom -> None
1700
<
atom -> None
1700
<<
atom -> None
1700
!=
atom -> None
1700
and
atom -> None
1700
%
atom -> None
1700
|
atom -> None
1700
>
atom -> None
1701
==
330
1701
is
331
1701
<=
332
1701
and
comparison -> expr
1701
!=
334
1701
>
335
1701
not
336
1701
comp_op
2084
1701
in
337
1701
or
comparison -> expr
1701
<
338
1701
>=
339
1701
if
comparison -> expr
1701
as
comparison -> expr
1701
:
comparison -> expr
1702
is
atom -> NUMBER
1702
|
atom -> NUMBER
1702
in
atom -> NUMBER
1702
@
atom -> NUMBER
1702
**
atom -> NUMBER
1702
as
atom -> NUMBER
1702
and
atom -> NUMBER
1702
!=
atom -> NUMBER
1702
if
atom -> NUMBER
1702
-
atom -> NUMBER
1702
<<
atom -> NUMBER
1702
.
atom -> NUMBER
1702
(
atom -> NUMBER
1702
==
atom -> NUMBER
1702
%
atom -> NUMBER
1702
^
atom -> NUMBER
1702
not
atom -> NUMBER
1702
>=
atom -> NUMBER
1702
:
atom -> NUMBER
1702
/
atom -> NUMBER
1702
//
atom -> NUMBER
1702
>
atom -> NUMBER
1702
&
atom -> NUMBER
1702
[
atom -> NUMBER
1702
<=
atom -> NUMBER
1702
*
atom -> NUMBER
1702
or
atom -> NUMBER
1702
+
atom -> NUMBER
1702
>>
atom -> NUMBER
1702
<
atom -> NUMBER
1703
NAME
1677
1703
atom_expr
1678
1703
atom
1681
1703
-
1682
1703
True
1686
1703
False
1687
1703
{
1688
1703
(
1689
1703
+
1690
1703
factor
2085
1703
[
1693
1703
STRING
1694
1703
power
1699
1703
None
1700
1703
NUMBER
1702
1703
~
1703
1704
varargslist
2086
1704
:
2087
1704
vfpdef
343
1704
NAME
342
1705
if
2088
1705
:
test -> or_test
1705
as
test -> or_test
1706
NAME
1677
1706
atom_expr
1678
1706
term
1680
1706
atom
1681
1706
-
1682
1706
factor
1683
1706
arith_expr
1685
1706
True
1686
1706
not_test
2089
1706
False
1687
1706
{
1688
1706
(
1689
1706
+
1690
1706
and_expr
1691
1706
[
1693
1706
STRING
1694
1706
xor_expr
1695
1706
comparison
1696
1706
shift_expr
1697
1706
power
1699
1706
None
1700
1706
expr
1701
1706
NUMBER
1702
1706
~
1703
1706
not
1706
1707
:
test -> lambdef
1707
as
test -> lambdef
1708
NAME
85
1708
atom_expr
86
1708
term
87
1708
atom
88
1708
-
89
1708
factor
90
1708
True
91
1708
arith_expr
92
1708
test
2090
1708
False
94
1708
+
95
1708
{
96
1708
(
97
1708
and_expr
98
1708
and_test
99
1708
[
100
1708
STRING
101
1708
comparison
102
1708
shift_expr
103
1708
not_test
104
1708
power
105
1708
None
106
1708
xor_expr
107
1708
expr
108
1708
NUMBER
109
1708
~
110
1708
not
111
1708
or_test
112
1708
lambda
113
1708
lambdef
114
1709
if
compound_stmt -> decorated
1709
raise
compound_stmt -> decorated
1709
class
compound_stmt -> decorated
1709
assert
compound_stmt -> decorated
1709
STRING
compound_stmt -> decorated
1709
lambda
compound_stmt -> decorated
1709
global
compound_stmt -> decorated
1709
while
compound_stmt -> decorated
1709
resetstats
compound_stmt -> decorated
1709
pass
compound_stmt -> decorated
1709
for
compound_stmt -> decorated
1709
(
compound_stmt -> decorated
1709
conf
compound_stmt -> decorated
1709
None
compound_stmt -> decorated
1709
False
compound_stmt -> decorated
1709
def
compound_stmt -> decorated
1709
break
compound_stmt -> decorated
1709
nonlocal
compound_stmt -> decorated
1709
with
compound_stmt -> decorated
1709
try
compound_stmt -> decorated
1709
-
compound_stmt -> decorated
1709
~
compound_stmt -> decorated
1709
del
compound_stmt -> decorated
1709
[
compound_stmt -> decorated
1709
@
compound_stmt -> decorated
1709
yield
compound_stmt -> decorated
1709
not
compound_stmt -> decorated
1709
True
compound_stmt -> decorated
1709
{
compound_stmt -> decorated
1709
begsim
compound_stmt -> decorated
1709
endsim
compound_stmt -> decorated
1709
continue
compound_stmt -> decorated
1709
DEDENT
compound_stmt -> decorated
1709
+
compound_stmt -> decorated
1709
NUMBER
compound_stmt -> decorated
1709
NAME
compound_stmt -> decorated
1709
return
compound_stmt -> decorated
1710
not
compound_stmt -> while_stmt
1710
try
compound_stmt -> while_stmt
1710
lambda
compound_stmt -> while_stmt
1710
nonlocal
compound_stmt -> while_stmt
1710
if
compound_stmt -> while_stmt
1710
DEDENT
compound_stmt -> while_stmt
1710
NAME
compound_stmt -> while_stmt
1710
-
compound_stmt -> while_stmt
1710
STRING
compound_stmt -> while_stmt
1710
break
compound_stmt -> while_stmt
1710
@
compound_stmt -> while_stmt
1710
assert
compound_stmt -> while_stmt
1710
class
compound_stmt -> while_stmt
1710
raise
compound_stmt -> while_stmt
1710
conf
compound_stmt -> while_stmt
1710
yield
compound_stmt -> while_stmt
1710
global
compound_stmt -> while_stmt
1710
with
compound_stmt -> while_stmt
1710
(
compound_stmt -> while_stmt
1710
continue
compound_stmt -> while_stmt
1710
return
compound_stmt -> while_stmt
1710
while
compound_stmt -> while_stmt
1710
True
compound_stmt -> while_stmt
1710
~
compound_stmt -> while_stmt
1710
for
compound_stmt -> while_stmt
1710
def
compound_stmt -> while_stmt
1710
resetstats
compound_stmt -> while_stmt
1710
endsim
compound_stmt -> while_stmt
1710
{
compound_stmt -> while_stmt
1710
del
compound_stmt -> while_stmt
1710
begsim
compound_stmt -> while_stmt
1710
False
compound_stmt -> while_stmt
1710
pass
compound_stmt -> while_stmt
1710
[
compound_stmt -> while_stmt
1710
NUMBER
compound_stmt -> while_stmt
1710
None
compound_stmt -> while_stmt
1710
+
compound_stmt -> while_stmt
1711
:
2091
1712
NAME
2092
1713
~
164
1713
atom
165
1713
False
166
1713
atom_expr
167
1713
NUMBER
168
1713
[
169
1713
expr_list
2093
1713
True
171
1713
NAME
172
1713
None
173
1713
+
174
1713
factor
175
1713
term
176
1713
-
177
1713
(
178
1713
{
179
1713
arith_expr
180
1713
STRING
181
1713
power
182
1713
shift_expr
183
1713
and_expr
184
1713
xor_expr
185
1713
expr
186
1714
+
stmt -> compound_stmt
1714
del
stmt -> compound_stmt
1714
raise
stmt -> compound_stmt
1714
if
stmt -> compound_stmt
1714
False
stmt -> compound_stmt
1714
pass
stmt -> compound_stmt
1714
nonlocal
stmt -> compound_stmt
1714
while
stmt -> compound_stmt
1714
STRING
stmt -> compound_stmt
1714
conf
stmt -> compound_stmt
1714
lambda
stmt -> compound_stmt
1714
continue
stmt -> compound_stmt
1714
endsim
stmt -> compound_stmt
1714
DEDENT
stmt -> compound_stmt
1714
(
stmt -> compound_stmt
1714
global
stmt -> compound_stmt
1714
resetstats
stmt -> compound_stmt
1714
~
stmt -> compound_stmt
1714
for
stmt -> compound_stmt
1714
[
stmt -> compound_stmt
1714
return
stmt -> compound_stmt
1714
@
stmt -> compound_stmt
1714
True
stmt -> compound_stmt
1714
begsim
stmt -> compound_stmt
1714
None
stmt -> compound_stmt
1714
NUMBER
stmt -> compound_stmt
1714
assert
stmt -> compound_stmt
1714
NAME
stmt -> compound_stmt
1714
break
stmt -> compound_stmt
1714
with
stmt -> compound_stmt
1714
{
stmt -> compound_stmt
1714
try
stmt -> compound_stmt
1714
not
stmt -> compound_stmt
1714
class
stmt -> compound_stmt
1714
yield
stmt -> compound_stmt
1714
def
stmt -> compound_stmt
1714
-
stmt -> compound_stmt
1715
NAME
85
1715
atom_expr
86
1715
term
87
1715
atom
88
1715
-
89
1715
factor
90
1715
True
91
1715
arith_expr
92
1715
False
94
1715
{
96
1715
(
97
1715
+
95
1715
test
2094
1715
and_expr
98
1715
and_test
99
1715
[
100
1715
STRING
101
1715
comparison
102
1715
shift_expr
103
1715
not_test
104
1715
power
105
1715
None
106
1715
xor_expr
107
1715
expr
108
1715
NUMBER
109
1715
~
110
1715
not
111
1715
or_test
112
1715
lambda
113
1715
lambdef
114
1716
NAME
2095
1717
NEWLINE
2096
1718
not
compound_stmt -> for_stmt
1718
+
compound_stmt -> for_stmt
1718
False
compound_stmt -> for_stmt
1718
break
compound_stmt -> for_stmt
1718
(
compound_stmt -> for_stmt
1718
-
compound_stmt -> for_stmt
1718
continue
compound_stmt -> for_stmt
1718
{
compound_stmt -> for_stmt
1718
def
compound_stmt -> for_stmt
1718
for
compound_stmt -> for_stmt
1718
return
compound_stmt -> for_stmt
1718
begsim
compound_stmt -> for_stmt
1718
global
compound_stmt -> for_stmt
1718
True
compound_stmt -> for_stmt
1718
while
compound_stmt -> for_stmt
1718
class
compound_stmt -> for_stmt
1718
DEDENT
compound_stmt -> for_stmt
1718
raise
compound_stmt -> for_stmt
1718
endsim
compound_stmt -> for_stmt
1718
assert
compound_stmt -> for_stmt
1718
pass
compound_stmt -> for_stmt
1718
del
compound_stmt -> for_stmt
1718
[
compound_stmt -> for_stmt
1718
if
compound_stmt -> for_stmt
1718
resetstats
compound_stmt -> for_stmt
1718
~
compound_stmt -> for_stmt
1718
nonlocal
compound_stmt -> for_stmt
1718
lambda
compound_stmt -> for_stmt
1718
NUMBER
compound_stmt -> for_stmt
1718
None
compound_stmt -> for_stmt
1718
@
compound_stmt -> for_stmt
1718
conf
compound_stmt -> for_stmt
1718
NAME
compound_stmt -> for_stmt
1718
with
compound_stmt -> for_stmt
1718
yield
compound_stmt -> for_stmt
1718
STRING
compound_stmt -> for_stmt
1718
try
compound_stmt -> for_stmt
1719
if
compound_stmt -> try_stmt
1719
class
compound_stmt -> try_stmt
1719
assert
compound_stmt -> try_stmt
1719
True
compound_stmt -> try_stmt
1719
not
compound_stmt -> try_stmt
1719
DEDENT
compound_stmt -> try_stmt
1719
[
compound_stmt -> try_stmt
1719
pass
compound_stmt -> try_stmt
1719
del
compound_stmt -> try_stmt
1719
yield
compound_stmt -> try_stmt
1719
return
compound_stmt -> try_stmt
1719
while
compound_stmt -> try_stmt
1719
-
compound_stmt -> try_stmt
1719
def
compound_stmt -> try_stmt
1719
endsim
compound_stmt -> try_stmt
1719
NAME
compound_stmt -> try_stmt
1719
@
compound_stmt -> try_stmt
1719
~
compound_stmt -> try_stmt
1719
try
compound_stmt -> try_stmt
1719
global
compound_stmt -> try_stmt
1719
conf
compound_stmt -> try_stmt
1719
resetstats
compound_stmt -> try_stmt
1719
(
compound_stmt -> try_stmt
1719
lambda
compound_stmt -> try_stmt
1719
{
compound_stmt -> try_stmt
1719
nonlocal
compound_stmt -> try_stmt
1719
+
compound_stmt -> try_stmt
1719
STRING
compound_stmt -> try_stmt
1719
with
compound_stmt -> try_stmt
1719
False
compound_stmt -> try_stmt
1719
for
compound_stmt -> try_stmt
1719
continue
compound_stmt -> try_stmt
1719
None
compound_stmt -> try_stmt
1719
begsim
compound_stmt -> try_stmt
1719
NUMBER
compound_stmt -> try_stmt
1719
raise
compound_stmt -> try_stmt
1719
break
compound_stmt -> try_stmt
1720
NAME
2097
1721
yield
stmt -> simple_stmt
1721
pass
stmt -> simple_stmt
1721
with
stmt -> simple_stmt
1721
True
stmt -> simple_stmt
1721
break
stmt -> simple_stmt
1721
resetstats
stmt -> simple_stmt
1721
raise
stmt -> simple_stmt
1721
class
stmt -> simple_stmt
1721
if
stmt -> simple_stmt
1721
None
stmt -> simple_stmt
1721
@
stmt -> simple_stmt
1721
lambda
stmt -> simple_stmt
1721
return
stmt -> simple_stmt
1721
~
stmt -> simple_stmt
1721
nonlocal
stmt -> simple_stmt
1721
DEDENT
stmt -> simple_stmt
1721
(
stmt -> simple_stmt
1721
continue
stmt -> simple_stmt
1721
STRING
stmt -> simple_stmt
1721
+
stmt -> simple_stmt
1721
NAME
stmt -> simple_stmt
1721
def
stmt -> simple_stmt
1721
conf
stmt -> simple_stmt
1721
[
stmt -> simple_stmt
1721
del
stmt -> simple_stmt
1721
NUMBER
stmt -> simple_stmt
1721
assert
stmt -> simple_stmt
1721
not
stmt -> simple_stmt
1721
begsim
stmt -> simple_stmt
1721
-
stmt -> simple_stmt
1721
global
stmt -> simple_stmt
1721
{
stmt -> simple_stmt
1721
while
stmt -> simple_stmt
1721
for
stmt -> simple_stmt
1721
endsim
stmt -> simple_stmt
1721
False
stmt -> simple_stmt
1721
try
stmt -> simple_stmt
1722
NAME
260
1722
atom_expr
261
1722
term
262
1722
atom
263
1722
-
264
1722
with_items
2098
1722
factor
266
1722
arith_expr
267
1722
[
268
1722
True
269
1722
False
270
1722
{
271
1722
(
272
1722
+
273
1722
and_expr
274
1722
and_test
275
1722
STRING
276
1722
xor_expr
277
1722
comparison
278
1722
shift_expr
279
1722
not_test
280
1722
power
281
1722
None
282
1722
expr
283
1722
NUMBER
284
1722
~
285
1722
lambda
286
1722
or_test
287
1722
with_item
288
1722
lambdef
289
1722
not
290
1722
test
291
1723
raise
compound_stmt -> classdef
1723
NUMBER
compound_stmt -> classdef
1723
lambda
compound_stmt -> classdef
1723
pass
compound_stmt -> classdef
1723
[
compound_stmt -> classdef
1723
False
compound_stmt -> classdef
1723
if
compound_stmt -> classdef
1723
with
compound_stmt -> classdef
1723
return
compound_stmt -> classdef
1723
endsim
compound_stmt -> classdef
1723
-
compound_stmt -> classdef
1723
(
compound_stmt -> classdef
1723
while
compound_stmt -> classdef
1723
True
compound_stmt -> classdef
1723
class
compound_stmt -> classdef
1723
resetstats
compound_stmt -> classdef
1723
break
compound_stmt -> classdef
1723
DEDENT
compound_stmt -> classdef
1723
@
compound_stmt -> classdef
1723
yield
compound_stmt -> classdef
1723
try
compound_stmt -> classdef
1723
continue
compound_stmt -> classdef
1723
STRING
compound_stmt -> classdef
1723
begsim
compound_stmt -> classdef
1723
{
compound_stmt -> classdef
1723
global
compound_stmt -> classdef
1723
None
compound_stmt -> classdef
1723
def
compound_stmt -> classdef
1723
conf
compound_stmt -> classdef
1723
del
compound_stmt -> classdef
1723
nonlocal
compound_stmt -> classdef
1723
+
compound_stmt -> classdef
1723
assert
compound_stmt -> classdef
1723
~
compound_stmt -> classdef
1723
NAME
compound_stmt -> classdef
1723
not
compound_stmt -> classdef
1723
for
compound_stmt -> classdef
1724
[
compound_stmt -> if_stmt
1724
nonlocal
compound_stmt -> if_stmt
1724
del
compound_stmt -> if_stmt
1724
break
compound_stmt -> if_stmt
1724
False
compound_stmt -> if_stmt
1724
with
compound_stmt -> if_stmt
1724
+
compound_stmt -> if_stmt
1724
raise
compound_stmt -> if_stmt
1724
True
compound_stmt -> if_stmt
1724
return
compound_stmt -> if_stmt
1724
@
compound_stmt -> if_stmt
1724
DEDENT
compound_stmt -> if_stmt
1724
for
compound_stmt -> if_stmt
1724
(
compound_stmt -> if_stmt
1724
STRING
compound_stmt -> if_stmt
1724
assert
compound_stmt -> if_stmt
1724
continue
compound_stmt -> if_stmt
1724
if
compound_stmt -> if_stmt
1724
NAME
compound_stmt -> if_stmt
1724
pass
compound_stmt -> if_stmt
1724
None
compound_stmt -> if_stmt
1724
def
compound_stmt -> if_stmt
1724
global
compound_stmt -> if_stmt
1724
NUMBER
compound_stmt -> if_stmt
1724
class
compound_stmt -> if_stmt
1724
while
compound_stmt -> if_stmt
1724
conf
compound_stmt -> if_stmt
1724
begsim
compound_stmt -> if_stmt
1724
lambda
compound_stmt -> if_stmt
1724
not
compound_stmt -> if_stmt
1724
{
compound_stmt -> if_stmt
1724
yield
compound_stmt -> if_stmt
1724
endsim
compound_stmt -> if_stmt
1724
try
compound_stmt -> if_stmt
1724
-
compound_stmt -> if_stmt
1724
resetstats
compound_stmt -> if_stmt
1724
~
compound_stmt -> if_stmt
1725
conf
compound_stmt -> funcdef
1725
+
compound_stmt -> funcdef
1725
@
compound_stmt -> funcdef
1725
pass
compound_stmt -> funcdef
1725
None
compound_stmt -> funcdef
1725
NUMBER
compound_stmt -> funcdef
1725
resetstats
compound_stmt -> funcdef
1725
break
compound_stmt -> funcdef
1725
lambda
compound_stmt -> funcdef
1725
class
compound_stmt -> funcdef
1725
DEDENT
compound_stmt -> funcdef
1725
try
compound_stmt -> funcdef
1725
with
compound_stmt -> funcdef
1725
True
compound_stmt -> funcdef
1725
{
compound_stmt -> funcdef
1725
global
compound_stmt -> funcdef
1725
nonlocal
compound_stmt -> funcdef
1725
continue
compound_stmt -> funcdef
1725
endsim
compound_stmt -> funcdef
1725
begsim
compound_stmt -> funcdef
1725
assert
compound_stmt -> funcdef
1725
False
compound_stmt -> funcdef
1725
if
compound_stmt -> funcdef
1725
for
compound_stmt -> funcdef
1725
while
compound_stmt -> funcdef
1725
STRING
compound_stmt -> funcdef
1725
~
compound_stmt -> funcdef
1725
def
compound_stmt -> funcdef
1725
(
compound_stmt -> funcdef
1725
-
compound_stmt -> funcdef
1725
return
compound_stmt -> funcdef
1725
NAME
compound_stmt -> funcdef
1725
del
compound_stmt -> funcdef
1725
[
compound_stmt -> funcdef
1725
raise
compound_stmt -> funcdef
1725
yield
compound_stmt -> funcdef
1725
not
compound_stmt -> funcdef
1726
funcdef
2099
1726
def
1720
1726
class
1716
1726
classdef
2100
1727
{
compound_stmt -> with_stmt
1727
NAME
compound_stmt -> with_stmt
1727
NUMBER
compound_stmt -> with_stmt
1727
for
compound_stmt -> with_stmt
1727
True
compound_stmt -> with_stmt
1727
~
compound_stmt -> with_stmt
1727
try
compound_stmt -> with_stmt
1727
-
compound_stmt -> with_stmt
1727
assert
compound_stmt -> with_stmt
1727
STRING
compound_stmt -> with_stmt
1727
conf
compound_stmt -> with_stmt
1727
None
compound_stmt -> with_stmt
1727
yield
compound_stmt -> with_stmt
1727
with
compound_stmt -> with_stmt
1727
class
compound_stmt -> with_stmt
1727
del
compound_stmt -> with_stmt
1727
nonlocal
compound_stmt -> with_stmt
1727
DEDENT
compound_stmt -> with_stmt
1727
break
compound_stmt -> with_stmt
1727
[
compound_stmt -> with_stmt
1727
def
compound_stmt -> with_stmt
1727
(
compound_stmt -> with_stmt
1727
lambda
compound_stmt -> with_stmt
1727
False
compound_stmt -> with_stmt
1727
global
compound_stmt -> with_stmt
1727
+
compound_stmt -> with_stmt
1727
return
compound_stmt -> with_stmt
1727
endsim
compound_stmt -> with_stmt
1727
not
compound_stmt -> with_stmt
1727
pass
compound_stmt -> with_stmt
1727
resetstats
compound_stmt -> with_stmt
1727
begsim
compound_stmt -> with_stmt
1727
while
compound_stmt -> with_stmt
1727
raise
compound_stmt -> with_stmt
1727
@
compound_stmt -> with_stmt
1727
continue
compound_stmt -> with_stmt
1727
if
compound_stmt -> with_stmt
1728
DEDENT
compound_stmt -> confdef
1728
def
compound_stmt -> confdef
1728
nonlocal
compound_stmt -> confdef
1728
STRING
compound_stmt -> confdef
1728
yield
compound_stmt -> confdef
1728
return
compound_stmt -> confdef
1728
resetstats
compound_stmt -> confdef
1728
continue
compound_stmt -> confdef
1728
if
compound_stmt -> confdef
1728
(
compound_stmt -> confdef
1728
[
compound_stmt -> confdef
1728
assert
compound_stmt -> confdef
1728
NAME
compound_stmt -> confdef
1728
+
compound_stmt -> confdef
1728
pass
compound_stmt -> confdef
1728
with
compound_stmt -> confdef
1728
conf
compound_stmt -> confdef
1728
NUMBER
compound_stmt -> confdef
1728
not
compound_stmt -> confdef
1728
None
compound_stmt -> confdef
1728
raise
compound_stmt -> confdef
1728
@
compound_stmt -> confdef
1728
for
compound_stmt -> confdef
1728
while
compound_stmt -> confdef
1728
endsim
compound_stmt -> confdef
1728
True
compound_stmt -> confdef
1728
try
compound_stmt -> confdef
1728
global
compound_stmt -> confdef
1728
~
compound_stmt -> confdef
1728
class
compound_stmt -> confdef
1728
begsim
compound_stmt -> confdef
1728
-
compound_stmt -> confdef
1728
lambda
compound_stmt -> confdef
1728
{
compound_stmt -> confdef
1728
False
compound_stmt -> confdef
1728
break
compound_stmt -> confdef
1728
del
compound_stmt -> confdef
1729
True
1
1729
if
1708
1729
decorated
1709
1729
atom
4
1729
atom_expr
5
1729
while_stmt
1710
1729
try
1711
1729
shift_expr
7
1729
arith_expr
8
1729
and_expr
9
1729
conf
1712
1729
factor
11
1729
NAME
12
1729
(
13
1729
for
1713
1729
[
15
1729
resetstats
16
1729
compound_stmt
1714
1729
while
1715
1729
raise
19
1729
class
1716
1729
small_stmt
1717
1729
or_test
23
1729
for_stmt
1718
1729
try_stmt
1719
1729
def
1720
1729
False
27
1729
comparison
28
1729
term
29
1729
simple_stmt
1721
1729
+
31
1729
power
32
1729
not_test
33
1729
None
34
1729
with
1722
1729
classdef
1723
1729
lambdef
37
1729
if_stmt
1724
1729
NUMBER
39
1729
xor_expr
40
1729
{
41
1729
not
42
1729
-
43
1729
funcdef
1725
1729
decorators
1726
1729
STRING
46
1729
test
47
1729
DEDENT
stmt_list -> stmt
1729
and_test
48
1729
begsim
49
1729
expr
50
1729
with_stmt
1727
1729
lambda
53
1729
return
54
1729
~
55
1729
confdef
1728
1729
return_stmt
56
1729
endsim
57
1729
@
58
1729
raise_stmt
59
1729
global_stmt
61
1729
continue_stmt
62
1729
assert
63
1729
break_stmt
64
1729
del
66
1729
global
67
1729
pass_stmt
68
1729
test_list
70
1729
flow_stmt
71
1729
yield_stmt
72
1729
stmt
1729
1729
stmt_list
2101
1729
pass
73
1729
continue
74
1729
del_stmt
75
1729
nonlocal
76
1729
decorator
77
1729
assert_stmt
78
1729
stat_stmt
79
1729
nonlocal_stmt
80
1729
expr_stmt
81
1729
break
82
1729
yield
83
1729
sim_stmt
84
1730
DEDENT
2102
1731
<=
power -> atom_expr ** factor
1731
>>
power -> atom_expr ** factor
1731
//
power -> atom_expr ** factor
1731
/
power -> atom_expr ** factor
1731
&
power -> atom_expr ** factor
1731
not
power -> atom_expr ** factor
1731
!=
power -> atom_expr ** factor
1731
<
power -> atom_expr ** factor
1731
>
power -> atom_expr ** factor
1731
*
power -> atom_expr ** factor
1731
|
power -> atom_expr ** factor
1731
==
power -> atom_expr ** factor
1731
is
power -> atom_expr ** factor
1731
and
power -> atom_expr ** factor
1731
<<
power -> atom_expr ** factor
1731
-
power -> atom_expr ** factor
1731
else
power -> atom_expr ** factor
1731
@
power -> atom_expr ** factor
1731
in
power -> atom_expr ** factor
1731
^
power -> atom_expr ** factor
1731
%
power -> atom_expr ** factor
1731
>=
power -> atom_expr ** factor
1731
+
power -> atom_expr ** factor
1731
or
power -> atom_expr ** factor
1732
*
trailer_expr -> trailer trailer_expr
1732
+
trailer_expr -> trailer trailer_expr
1732
-
trailer_expr -> trailer trailer_expr
1732
<=
trailer_expr -> trailer trailer_expr
1732
|
trailer_expr -> trailer trailer_expr
1732
@
trailer_expr -> trailer trailer_expr
1732
%
trailer_expr -> trailer trailer_expr
1732
in
trailer_expr -> trailer trailer_expr
1732
<<
trailer_expr -> trailer trailer_expr
1732
**
trailer_expr -> trailer trailer_expr
1732
==
trailer_expr -> trailer trailer_expr
1732
not
trailer_expr -> trailer trailer_expr
1732
and
trailer_expr -> trailer trailer_expr
1732
//
trailer_expr -> trailer trailer_expr
1732
^
trailer_expr -> trailer trailer_expr
1732
or
trailer_expr -> trailer trailer_expr
1732
>
trailer_expr -> trailer trailer_expr
1732
!=
trailer_expr -> trailer trailer_expr
1732
is
trailer_expr -> trailer trailer_expr
1732
&
trailer_expr -> trailer trailer_expr
1732
else
trailer_expr -> trailer trailer_expr
1732
>>
trailer_expr -> trailer trailer_expr
1732
/
trailer_expr -> trailer trailer_expr
1732
<
trailer_expr -> trailer trailer_expr
1732
>=
trailer_expr -> trailer trailer_expr
1733
]
2103
1734
^
trailer -> . NAME
1734
%
trailer -> . NAME
1734
**
trailer -> . NAME
1734
>>
trailer -> . NAME
1734
>
trailer -> . NAME
1734
in
trailer -> . NAME
1734
[
trailer -> . NAME
1734
is
trailer -> . NAME
1734
<<
trailer -> . NAME
1734
or
trailer -> . NAME
1734
and
trailer -> . NAME
1734
>=
trailer -> . NAME
1734
|
trailer -> . NAME
1734
==
trailer -> . NAME
1734
else
trailer -> . NAME
1734
.
trailer -> . NAME
1734
+
trailer -> . NAME
1734
<
trailer -> . NAME
1734
-
trailer -> . NAME
1734
&
trailer -> . NAME
1734
*
trailer -> . NAME
1734
<=
trailer -> . NAME
1734
(
trailer -> . NAME
1734
not
trailer -> . NAME
1734
//
trailer -> . NAME
1734
@
trailer -> . NAME
1734
!=
trailer -> . NAME
1734
/
trailer -> . NAME
1735
)
2104
1736
[
trailer -> ( )
1736
not
trailer -> ( )
1736
==
trailer -> ( )
1736
**
trailer -> ( )
1736
<=
trailer -> ( )
1736
//
trailer -> ( )
1736
<<
trailer -> ( )
1736
<
trailer -> ( )
1736
in
trailer -> ( )
1736
or
trailer -> ( )
1736
-
trailer -> ( )
1736
+
trailer -> ( )
1736
&
trailer -> ( )
1736
*
trailer -> ( )
1736
is
trailer -> ( )
1736
>
trailer -> ( )
1736
!=
trailer -> ( )
1736
>>
trailer -> ( )
1736
%
trailer -> ( )
1736
|
trailer -> ( )
1736
else
trailer -> ( )
1736
.
trailer -> ( )
1736
>=
trailer -> ( )
1736
(
trailer -> ( )
1736
and
trailer -> ( )
1736
@
trailer -> ( )
1736
/
trailer -> ( )
1736
^
trailer -> ( )
1737
|
term -> factor % term
1737
<<
term -> factor % term
1737
^
term -> factor % term
1737
==
term -> factor % term
1737
else
term -> factor % term
1737
-
term -> factor % term
1737
is
term -> factor % term
1737
>=
term -> factor % term
1737
>>
term -> factor % term
1737
>
term -> factor % term
1737
in
term -> factor % term
1737
&
term -> factor % term
1737
<
term -> factor % term
1737
!=
term -> factor % term
1737
<=
term -> factor % term
1737
not
term -> factor % term
1737
+
term -> factor % term
1737
and
term -> factor % term
1737
or
term -> factor % term
1738
-
term -> factor * term
1738
&
term -> factor * term
1738
and
term -> factor * term
1738
!=
term -> factor * term
1738
|
term -> factor * term
1738
<<
term -> factor * term
1738
<
term -> factor * term
1738
^
term -> factor * term
1738
+
term -> factor * term
1738
in
term -> factor * term
1738
or
term -> factor * term
1738
>>
term -> factor * term
1738
not
term -> factor * term
1738
==
term -> factor * term
1738
>=
term -> factor * term
1738
<=
term -> factor * term
1738
>
term -> factor * term
1738
else
term -> factor * term
1738
is
term -> factor * term
1739
>>
term -> factor / term
1739
^
term -> factor / term
1739
or
term -> factor / term
1739
else
term -> factor / term
1739
+
term -> factor / term
1739
>=
term -> factor / term
1739
>
term -> factor / term
1739
-
term -> factor / term
1739
and
term -> factor / term
1739
not
term -> factor / term
1739
<
term -> factor / term
1739
in
term -> factor / term
1739
==
term -> factor / term
1739
<=
term -> factor / term
1739
is
term -> factor / term
1739
&
term -> factor / term
1739
<<
term -> factor / term
1739
!=
term -> factor / term
1739
|
term -> factor / term
1740
<
term -> factor // term
1740
and
term -> factor // term
1740
in
term -> factor // term
1740
>>
term -> factor // term
1740
else
term -> factor // term
1740
<=
term -> factor // term
1740
!=
term -> factor // term
1740
^
term -> factor // term
1740
|
term -> factor // term
1740
or
term -> factor // term
1740
>=
term -> factor // term
1740
&
term -> factor // term
1740
>
term -> factor // term
1740
+
term -> factor // term
1740
is
term -> factor // term
1740
not
term -> factor // term
1740
<<
term -> factor // term
1740
-
term -> factor // term
1740
==
term -> factor // term
1741
>>
term -> factor @ term
1741
^
term -> factor @ term
1741
&
term -> factor @ term
1741
else
term -> factor @ term
1741
|
term -> factor @ term
1741
is
term -> factor @ term
1741
<
term -> factor @ term
1741
<<
term -> factor @ term
1741
and
term -> factor @ term
1741
==
term -> factor @ term
1741
>
term -> factor @ term
1741
in
term -> factor @ term
1741
>=
term -> factor @ term
1741
+
term -> factor @ term
1741
not
term -> factor @ term
1741
!=
term -> factor @ term
1741
<=
term -> factor @ term
1741
or
term -> factor @ term
1741
-
term -> factor @ term
1742
else
or_test -> and_test or or_test
1743
else
shift_expr -> arith_expr >> shift_expr
1743
<
shift_expr -> arith_expr >> shift_expr
1743
^
shift_expr -> arith_expr >> shift_expr
1743
in
shift_expr -> arith_expr >> shift_expr
1743
==
shift_expr -> arith_expr >> shift_expr
1743
!=
shift_expr -> arith_expr >> shift_expr
1743
>=
shift_expr -> arith_expr >> shift_expr
1743
not
shift_expr -> arith_expr >> shift_expr
1743
and
shift_expr -> arith_expr >> shift_expr
1743
is
shift_expr -> arith_expr >> shift_expr
1743
&
shift_expr -> arith_expr >> shift_expr
1743
>
shift_expr -> arith_expr >> shift_expr
1743
|
shift_expr -> arith_expr >> shift_expr
1743
<=
shift_expr -> arith_expr >> shift_expr
1743
or
shift_expr -> arith_expr >> shift_expr
1744
&
shift_expr -> arith_expr << shift_expr
1744
>=
shift_expr -> arith_expr << shift_expr
1744
<=
shift_expr -> arith_expr << shift_expr
1744
or
shift_expr -> arith_expr << shift_expr
1744
in
shift_expr -> arith_expr << shift_expr
1744
!=
shift_expr -> arith_expr << shift_expr
1744
^
shift_expr -> arith_expr << shift_expr
1744
<
shift_expr -> arith_expr << shift_expr
1744
|
shift_expr -> arith_expr << shift_expr
1744
else
shift_expr -> arith_expr << shift_expr
1744
==
shift_expr -> arith_expr << shift_expr
1744
is
shift_expr -> arith_expr << shift_expr
1744
and
shift_expr -> arith_expr << shift_expr
1744
>
shift_expr -> arith_expr << shift_expr
1744
not
shift_expr -> arith_expr << shift_expr
1745
>=
xor_expr -> and_expr ^ xor_expr
1745
>
xor_expr -> and_expr ^ xor_expr
1745
or
xor_expr -> and_expr ^ xor_expr
1745
and
xor_expr -> and_expr ^ xor_expr
1745
<=
xor_expr -> and_expr ^ xor_expr
1745
in
xor_expr -> and_expr ^ xor_expr
1745
==
xor_expr -> and_expr ^ xor_expr
1745
!=
xor_expr -> and_expr ^ xor_expr
1745
not
xor_expr -> and_expr ^ xor_expr
1745
<
xor_expr -> and_expr ^ xor_expr
1745
else
xor_expr -> and_expr ^ xor_expr
1745
is
xor_expr -> and_expr ^ xor_expr
1745
|
xor_expr -> and_expr ^ xor_expr
1746
<<
atom -> [ test_list_comp ]
1746
>>
atom -> [ test_list_comp ]
1746
+
atom -> [ test_list_comp ]
1746
-
atom -> [ test_list_comp ]
1746
not
atom -> [ test_list_comp ]
1746
<=
atom -> [ test_list_comp ]
1746
is
atom -> [ test_list_comp ]
1746
[
atom -> [ test_list_comp ]
1746
*
atom -> [ test_list_comp ]
1746
==
atom -> [ test_list_comp ]
1746
@
atom -> [ test_list_comp ]
1746
>
atom -> [ test_list_comp ]
1746
%
atom -> [ test_list_comp ]
1746
>=
atom -> [ test_list_comp ]
1746
//
atom -> [ test_list_comp ]
1746
else
atom -> [ test_list_comp ]
1746
.
atom -> [ test_list_comp ]
1746
in
atom -> [ test_list_comp ]
1746
**
atom -> [ test_list_comp ]
1746
and
atom -> [ test_list_comp ]
1746
/
atom -> [ test_list_comp ]
1746
or
atom -> [ test_list_comp ]
1746
!=
atom -> [ test_list_comp ]
1746
<
atom -> [ test_list_comp ]
1746
^
atom -> [ test_list_comp ]
1746
&
atom -> [ test_list_comp ]
1746
(
atom -> [ test_list_comp ]
1746
|
atom -> [ test_list_comp ]
1747
@
atom -> ( test_list_comp )
1747
<
atom -> ( test_list_comp )
1747
and
atom -> ( test_list_comp )
1747
&
atom -> ( test_list_comp )
1747
*
atom -> ( test_list_comp )
1747
%
atom -> ( test_list_comp )
1747
[
atom -> ( test_list_comp )
1747
//
atom -> ( test_list_comp )
1747
<<
atom -> ( test_list_comp )
1747
.
atom -> ( test_list_comp )
1747
/
atom -> ( test_list_comp )
1747
>=
atom -> ( test_list_comp )
1747
or
atom -> ( test_list_comp )
1747
>
atom -> ( test_list_comp )
1747
-
atom -> ( test_list_comp )
1747
|
atom -> ( test_list_comp )
1747
**
atom -> ( test_list_comp )
1747
is
atom -> ( test_list_comp )
1747
==
atom -> ( test_list_comp )
1747
not
atom -> ( test_list_comp )
1747
in
atom -> ( test_list_comp )
1747
!=
atom -> ( test_list_comp )
1747
^
atom -> ( test_list_comp )
1747
(
atom -> ( test_list_comp )
1747
else
atom -> ( test_list_comp )
1747
<=
atom -> ( test_list_comp )
1747
+
atom -> ( test_list_comp )
1747
>>
atom -> ( test_list_comp )
1748
<=
arith_expr -> term + arith_expr
1748
and
arith_expr -> term + arith_expr
1748
==
arith_expr -> term + arith_expr
1748
else
arith_expr -> term + arith_expr
1748
<
arith_expr -> term + arith_expr
1748
not
arith_expr -> term + arith_expr
1748
|
arith_expr -> term + arith_expr
1748
>
arith_expr -> term + arith_expr
1748
^
arith_expr -> term + arith_expr
1748
>=
arith_expr -> term + arith_expr
1748
>>
arith_expr -> term + arith_expr
1748
in
arith_expr -> term + arith_expr
1748
!=
arith_expr -> term + arith_expr
1748
is
arith_expr -> term + arith_expr
1748
or
arith_expr -> term + arith_expr
1748
<<
arith_expr -> term + arith_expr
1748
&
arith_expr -> term + arith_expr
1749
>>
arith_expr -> term - arith_expr
1749
&
arith_expr -> term - arith_expr
1749
>=
arith_expr -> term - arith_expr
1749
<<
arith_expr -> term - arith_expr
1749
in
arith_expr -> term - arith_expr
1749
|
arith_expr -> term - arith_expr
1749
^
arith_expr -> term - arith_expr
1749
<
arith_expr -> term - arith_expr
1749
>
arith_expr -> term - arith_expr
1749
!=
arith_expr -> term - arith_expr
1749
not
arith_expr -> term - arith_expr
1749
is
arith_expr -> term - arith_expr
1749
==
arith_expr -> term - arith_expr
1749
or
arith_expr -> term - arith_expr
1749
<=
arith_expr -> term - arith_expr
1749
and
arith_expr -> term - arith_expr
1749
else
arith_expr -> term - arith_expr
1750
>=
and_expr -> shift_expr & and_expr
1750
!=
and_expr -> shift_expr & and_expr
1750
or
and_expr -> shift_expr & and_expr
1750
is
and_expr -> shift_expr & and_expr
1750
^
and_expr -> shift_expr & and_expr
1750
==
and_expr -> shift_expr & and_expr
1750
<
and_expr -> shift_expr & and_expr
1750
not
and_expr -> shift_expr & and_expr
1750
>
and_expr -> shift_expr & and_expr
1750
in
and_expr -> shift_expr & and_expr
1750
and
and_expr -> shift_expr & and_expr
1750
|
and_expr -> shift_expr & and_expr
1750
else
and_expr -> shift_expr & and_expr
1750
<=
and_expr -> shift_expr & and_expr
1751
or
and_test -> not_test and and_test
1751
else
and_test -> not_test and and_test
1752
*=
test -> or_test if or_test else test
1752
NEWLINE
test -> or_test if or_test else test
1752
%=
test -> or_test if or_test else test
1752
,
test -> or_test if or_test else test
1752
=
test -> or_test if or_test else test
1752
>>=
test -> or_test if or_test else test
1752
@=
test -> or_test if or_test else test
1752
<<=
test -> or_test if or_test else test
1752
^=
test -> or_test if or_test else test
1752
**=
test -> or_test if or_test else test
1752
-=
test -> or_test if or_test else test
1752
+=
test -> or_test if or_test else test
1752
:
test -> or_test if or_test else test
1752
//=
test -> or_test if or_test else test
1752
|=
test -> or_test if or_test else test
1752
&=
test -> or_test if or_test else test
1752
/=
test -> or_test if or_test else test
1753
is
expr -> xor_expr | expr
1753
or
expr -> xor_expr | expr
1753
>
expr -> xor_expr | expr
1753
and
expr -> xor_expr | expr
1753
in
expr -> xor_expr | expr
1753
<=
expr -> xor_expr | expr
1753
not
expr -> xor_expr | expr
1753
==
expr -> xor_expr | expr
1753
>=
expr -> xor_expr | expr
1753
<
expr -> xor_expr | expr
1753
else
expr -> xor_expr | expr
1753
!=
expr -> xor_expr | expr
1754
and
comparison -> expr comp_op comparison
1754
else
comparison -> expr comp_op comparison
1754
or
comparison -> expr comp_op comparison
1755
NAME
12
1755
suite
2105
1755
True
1
1755
atom_expr
5
1755
term
29
1755
atom
4
1755
simple_stmt
1234
1755
factor
11
1755
shift_expr
7
1755
arith_expr
8
1755
False
27
1755
and_expr
9
1755
xor_expr
40
1755
{
41
1755
(
13
1755
[
15
1755
resetstats
16
1755
STRING
46
1755
raise
19
1755
small_stmt
21
1755
test
47
1755
comparison
28
1755
or_test
23
1755
~
55
1755
-
43
1755
lambda
53
1755
+
31
1755
not_test
33
1755
and_test
48
1755
power
32
1755
pass
73
1755
None
34
1755
lambdef
37
1755
not
42
1755
NUMBER
39
1755
expr
50
1755
continue
74
1755
begsim
49
1755
del_stmt
75
1755
NEWLINE
1236
1755
return
54
1755
nonlocal
76
1755
return_stmt
56
1755
endsim
57
1755
test_list
70
1755
raise_stmt
59
1755
assert_stmt
78
1755
stat_stmt
79
1755
global_stmt
61
1755
continue_stmt
62
1755
assert
63
1755
break_stmt
64
1755
nonlocal_stmt
80
1755
expr_stmt
81
1755
break
82
1755
del
66
1755
global
67
1755
yield
83
1755
pass_stmt
68
1755
flow_stmt
71
1755
yield_stmt
72
1755
sim_stmt
84
1756
:
2106
1757
NAME
2107
1757
atom_expr
2108
1757
atom
2109
1757
-
2110
1757
factor
2111
1757
[
2112
1757
True
2113
1757
arith_expr
2114
1757
xor_expr
2115
1757
False
2116
1757
{
2117
1757
+
2118
1757
and_expr
2119
1757
(
2120
1757
STRING
2121
1757
power
2122
1757
term
2123
1757
comparison
2124
1757
shift_expr
2125
1757
not_test
2126
1757
or_test
2127
1757
lambdef
2128
1757
lambda
2129
1757
None
2130
1757
test
2131
1757
expr
2132
1757
NUMBER
2133
1757
and_test
2134
1757
~
2135
1757
not
2136
1758
NAME
1005
1758
atom_expr
1006
1758
atom
1007
1758
-
1008
1758
test
2137
1758
factor
1009
1758
[
1010
1758
True
1011
1758
arith_expr
1012
1758
False
1013
1758
{
1014
1758
+
1015
1758
and_expr
1016
1758
(
1017
1758
STRING
1018
1758
power
1019
1758
term
1020
1758
comparison
1021
1758
shift_expr
1022
1758
not_test
1023
1758
or_test
1024
1758
lambda
1025
1758
None
1026
1758
xor_expr
1027
1758
expr
1028
1758
NUMBER
1029
1758
and_test
1030
1758
~
1031
1758
lambdef
1033
1758
not
1034
1759
,
tfpdef -> NAME
1759
:
2138
1759
)
tfpdef -> NAME
1760
)
param -> ** tfpdef
1760
,
param -> ** tfpdef
1761
NAME
1274
1761
**
1276
1761
tfpdef
1275
1761
param
1277
1761
*
1278
1761
parameters
2139
1762
)
param -> * tfpdef
1762
,
param -> * tfpdef
1763
(
trailer -> [ subscriptlist ]
1763
//
trailer -> [ subscriptlist ]
1763
&
trailer -> [ subscriptlist ]
1763
>
trailer -> [ subscriptlist ]
1763
in
trailer -> [ subscriptlist ]
1763
>>
trailer -> [ subscriptlist ]
1763
[
trailer -> [ subscriptlist ]
1763
<=
trailer -> [ subscriptlist ]
1763
-
trailer -> [ subscriptlist ]
1763
!=
trailer -> [ subscriptlist ]
1763
|
trailer -> [ subscriptlist ]
1763
not
trailer -> [ subscriptlist ]
1763
.
trailer -> [ subscriptlist ]
1763
>=
trailer -> [ subscriptlist ]
1763
or
trailer -> [ subscriptlist ]
1763
*
trailer -> [ subscriptlist ]
1763
<<
trailer -> [ subscriptlist ]
1763
**
trailer -> [ subscriptlist ]
1763
==
trailer -> [ subscriptlist ]
1763
+
trailer -> [ subscriptlist ]
1763
is
trailer -> [ subscriptlist ]
1763
/
trailer -> [ subscriptlist ]
1763
^
trailer -> [ subscriptlist ]
1763
as
trailer -> [ subscriptlist ]
1763
and
trailer -> [ subscriptlist ]
1763
,
trailer -> [ subscriptlist ]
1763
@
trailer -> [ subscriptlist ]
1763
if
trailer -> [ subscriptlist ]
1763
<
trailer -> [ subscriptlist ]
1763
%
trailer -> [ subscriptlist ]
1763
:
trailer -> [ subscriptlist ]
1764
or
trailer -> ( arglist )
1764
>>
trailer -> ( arglist )
1764
<=
trailer -> ( arglist )
1764
**
trailer -> ( arglist )
1764
<
trailer -> ( arglist )
1764
(
trailer -> ( arglist )
1764
-
trailer -> ( arglist )
1764
not
trailer -> ( arglist )
1764
if
trailer -> ( arglist )
1764
and
trailer -> ( arglist )
1764
.
trailer -> ( arglist )
1764
is
trailer -> ( arglist )
1764
>
trailer -> ( arglist )
1764
in
trailer -> ( arglist )
1764
!=
trailer -> ( arglist )
1764
,
trailer -> ( arglist )
1764
==
trailer -> ( arglist )
1764
as
trailer -> ( arglist )
1764
%
trailer -> ( arglist )
1764
@
trailer -> ( arglist )
1764
^
trailer -> ( arglist )
1764
<<
trailer -> ( arglist )
1764
*
trailer -> ( arglist )
1764
//
trailer -> ( arglist )
1764
:
trailer -> ( arglist )
1764
&
trailer -> ( arglist )
1764
|
trailer -> ( arglist )
1764
>=
trailer -> ( arglist )
1764
+
trailer -> ( arglist )
1764
/
trailer -> ( arglist )
1764
[
trailer -> ( arglist )
1765
:
lambdef -> lambda varargslist : test
1765
,
lambdef -> lambda varargslist : test
1765
as
lambdef -> lambda varargslist : test
1766
NAME
260
1766
atom_expr
261
1766
term
262
1766
atom
263
1766
-
264
1766
factor
266
1766
arith_expr
267
1766
[
268
1766
True
269
1766
False
270
1766
{
271
1766
(
272
1766
+
273
1766
and_expr
274
1766
and_test
275
1766
STRING
276
1766
xor_expr
277
1766
comparison
278
1766
shift_expr
279
1766
not_test
280
1766
power
281
1766
None
282
1766
expr
283
1766
NUMBER
284
1766
~
285
1766
lambda
286
1766
or_test
287
1766
test
2140
1766
lambdef
289
1766
not
290
1767
+
factor -> ~ factor
1767
/
factor -> ~ factor
1767
&
factor -> ~ factor
1767
:
factor -> ~ factor
1767
|
factor -> ~ factor
1767
//
factor -> ~ factor
1767
@
factor -> ~ factor
1767
-
factor -> ~ factor
1767
^
factor -> ~ factor
1767
<<
factor -> ~ factor
1767
>>
factor -> ~ factor
1767
,
factor -> ~ factor
1767
*
factor -> ~ factor
1767
%
factor -> ~ factor
1768
~
1307
1768
term
1308
1768
atom
1309
1768
False
1310
1768
atom_expr
1311
1768
NUMBER
1312
1768
[
1313
1768
True
1314
1768
NAME
1315
1768
(
1316
1768
+
1317
1768
factor
1318
1768
None
1319
1768
-
1320
1768
{
1321
1768
STRING
1324
1768
power
1325
1768
arith_expr
2141
1769
~
1307
1769
term
1308
1769
atom
1309
1769
False
1310
1769
atom_expr
1311
1769
NUMBER
1312
1769
[
1313
1769
True
1314
1769
NAME
1315
1769
(
1316
1769
+
1317
1769
factor
1318
1769
None
1319
1769
-
1320
1769
{
1321
1769
STRING
1324
1769
arith_expr
2142
1769
power
1325
1770
trailer
1770
1770
(
1771
1770
>>
trailer_expr -> 
1770
trailer_expr
2143
1770
[
1773
1770
<<
trailer_expr -> 
1770
/
trailer_expr -> 
1770
//
trailer_expr -> 
1770
.
1774
1770
-
trailer_expr -> 
1770
@
trailer_expr -> 
1770
&
trailer_expr -> 
1770
:
trailer_expr -> 
1770
,
trailer_expr -> 
1770
^
trailer_expr -> 
1770
*
trailer_expr -> 
1770
**
trailer_expr -> 
1770
|
trailer_expr -> 
1770
+
trailer_expr -> 
1770
%
trailer_expr -> 
1771
NAME
496
1771
atom_expr
497
1771
atom
498
1771
-
499
1771
factor
501
1771
*
502
1771
[
503
1771
True
504
1771
arith_expr
505
1771
xor_expr
506
1771
False
507
1771
**
508
1771
{
509
1771
+
510
1771
and_expr
512
1771
(
513
1771
STRING
514
1771
power
515
1771
term
516
1771
comparison
517
1771
arglist
2144
1771
shift_expr
518
1771
argument
519
1771
not_test
520
1771
or_test
521
1771
lambdef
522
1771
lambda
523
1771
None
524
1771
)
2145
1771
test
525
1771
expr
526
1771
NUMBER
527
1771
and_test
528
1771
~
529
1771
not
530
1772
|
atom_expr -> atom trailer_expr
1772
/
atom_expr -> atom trailer_expr
1772
*
atom_expr -> atom trailer_expr
1772
-
atom_expr -> atom trailer_expr
1772
:
atom_expr -> atom trailer_expr
1772
//
atom_expr -> atom trailer_expr
1772
&
atom_expr -> atom trailer_expr
1772
^
atom_expr -> atom trailer_expr
1772
%
atom_expr -> atom trailer_expr
1772
<<
atom_expr -> atom trailer_expr
1772
@
atom_expr -> atom trailer_expr
1772
+
atom_expr -> atom trailer_expr
1772
,
atom_expr -> atom trailer_expr
1772
**
atom_expr -> atom trailer_expr
1772
>>
atom_expr -> atom trailer_expr
1773
NAME
461
1773
atom_expr
462
1773
term
463
1773
atom
464
1773
-
465
1773
factor
466
1773
[
467
1773
True
468
1773
arith_expr
469
1773
False
470
1773
{
471
1773
(
472
1773
+
473
1773
and_expr
474
1773
and_test
475
1773
STRING
476
1773
comparison
478
1773
shift_expr
479
1773
not_test
480
1773
power
481
1773
None
482
1773
xor_expr
483
1773
expr
484
1773
NUMBER
485
1773
test
486
1773
~
487
1773
or_test
488
1773
subscriptlist
2146
1773
not
489
1773
lambdef
490
1773
:
maybe_test -> 
1773
lambda
491
1773
subscript
492
1773
maybe_test
493
1774
NAME
2147
1775
~
1307
1775
atom
1309
1775
False
1310
1775
atom_expr
1311
1775
NUMBER
1312
1775
[
1313
1775
True
1314
1775
NAME
1315
1775
(
1316
1775
+
1317
1775
None
1319
1775
-
1320
1775
{
1321
1775
STRING
1324
1775
factor
2148
1775
power
1325
1776
]
2149
1777
&
atom -> [ ]
1777
-
atom -> [ ]
1777
>>
atom -> [ ]
1777
/
atom -> [ ]
1777
<<
atom -> [ ]
1777
//
atom -> [ ]
1777
,
atom -> [ ]
1777
**
atom -> [ ]
1777
|
atom -> [ ]
1777
*
atom -> [ ]
1777
+
atom -> [ ]
1777
@
atom -> [ ]
1777
:
atom -> [ ]
1777
.
atom -> [ ]
1777
(
atom -> [ ]
1777
%
atom -> [ ]
1777
^
atom -> [ ]
1777
[
atom -> [ ]
1778
+
atom -> ( )
1778
@
atom -> ( )
1778
|
atom -> ( )
1778
^
atom -> ( )
1778
,
atom -> ( )
1778
**
atom -> ( )
1778
>>
atom -> ( )
1778
/
atom -> ( )
1778
:
atom -> ( )
1778
-
atom -> ( )
1778
&
atom -> ( )
1778
%
atom -> ( )
1778
(
atom -> ( )
1778
<<
atom -> ( )
1778
//
atom -> ( )
1778
*
atom -> ( )
1778
.
atom -> ( )
1778
[
atom -> ( )
1779
)
2150
1780
<<
factor -> + factor
1780
>>
factor -> + factor
1780
:
factor -> + factor
1780
%
factor -> + factor
1780
*
factor -> + factor
1780
//
factor -> + factor
1780
/
factor -> + factor
1780
^
factor -> + factor
1780
,
factor -> + factor
1780
&
factor -> + factor
1780
+
factor -> + factor
1780
-
factor -> + factor
1780
@
factor -> + factor
1780
|
factor -> + factor
1781
~
1307
1781
atom
1309
1781
False
1310
1781
atom_expr
1311
1781
NUMBER
1312
1781
[
1313
1781
True
1314
1781
NAME
1315
1781
(
1316
1781
+
1317
1781
factor
1318
1781
None
1319
1781
-
1320
1781
term
2151
1781
{
1321
1781
STRING
1324
1781
power
1325
1782
~
1307
1782
atom
1309
1782
False
1310
1782
atom_expr
1311
1782
NUMBER
1312
1782
[
1313
1782
True
1314
1782
NAME
1315
1782
(
1316
1782
+
1317
1782
factor
1318
1782
None
1319
1782
-
1320
1782
{
1321
1782
term
2152
1782
STRING
1324
1782
power
1325
1783
~
1307
1783
atom
1309
1783
False
1310
1783
atom_expr
1311
1783
NUMBER
1312
1783
[
1313
1783
True
1314
1783
NAME
1315
1783
(
1316
1783
+
1317
1783
factor
1318
1783
None
1319
1783
-
1320
1783
{
1321
1783
STRING
1324
1783
term
2153
1783
power
1325
1784
~
1307
1784
term
2154
1784
atom
1309
1784
False
1310
1784
atom_expr
1311
1784
NUMBER
1312
1784
[
1313
1784
True
1314
1784
NAME
1315
1784
(
1316
1784
+
1317
1784
factor
1318
1784
None
1319
1784
-
1320
1784
{
1321
1784
STRING
1324
1784
power
1325
1785
~
1307
1785
atom
1309
1785
False
1310
1785
atom_expr
1311
1785
NUMBER
1312
1785
[
1313
1785
True
1314
1785
NAME
1315
1785
(
1316
1785
+
1317
1785
factor
1318
1785
None
1319
1785
-
1320
1785
term
2155
1785
{
1321
1785
STRING
1324
1785
power
1325
1786
&
factor -> - factor
1786
//
factor -> - factor
1786
>>
factor -> - factor
1786
/
factor -> - factor
1786
-
factor -> - factor
1786
*
factor -> - factor
1786
,
factor -> - factor
1786
^
factor -> - factor
1786
+
factor -> - factor
1786
<<
factor -> - factor
1786
%
factor -> - factor
1786
:
factor -> - factor
1786
|
factor -> - factor
1786
@
factor -> - factor
1787
%
atom -> { }
1787
**
atom -> { }
1787
[
atom -> { }
1787
&
atom -> { }
1787
//
atom -> { }
1787
(
atom -> { }
1787
+
atom -> { }
1787
<<
atom -> { }
1787
/
atom -> { }
1787
|
atom -> { }
1787
,
atom -> { }
1787
^
atom -> { }
1787
.
atom -> { }
1787
>>
atom -> { }
1787
*
atom -> { }
1787
:
atom -> { }
1787
@
atom -> { }
1787
-
atom -> { }
1788
~
1307
1788
term
1308
1788
atom
1309
1788
False
1310
1788
atom_expr
1311
1788
NUMBER
1312
1788
[
1313
1788
True
1314
1788
NAME
1315
1788
(
1316
1788
+
1317
1788
factor
1318
1788
None
1319
1788
-
1320
1788
{
1321
1788
arith_expr
1322
1788
STRING
1324
1788
power
1325
1788
shift_expr
2156
1789
~
1307
1789
term
1308
1789
atom
1309
1789
False
1310
1789
atom_expr
1311
1789
NUMBER
1312
1789
[
1313
1789
True
1314
1789
NAME
1315
1789
(
1316
1789
+
1317
1789
factor
1318
1789
None
1319
1789
-
1320
1789
{
1321
1789
arith_expr
1322
1789
STRING
1324
1789
power
1325
1789
shift_expr
2157
1790
~
1307
1790
term
1308
1790
atom
1309
1790
False
1310
1790
atom_expr
1311
1790
NUMBER
1312
1790
[
1313
1790
True
1314
1790
NAME
1315
1790
(
1316
1790
+
1317
1790
factor
1318
1790
None
1319
1790
-
1320
1790
{
1321
1790
arith_expr
1322
1790
xor_expr
1323
1790
STRING
1324
1790
power
1325
1790
shift_expr
1326
1790
expr
2158
1790
and_expr
1327
1791
~
1307
1791
term
1308
1791
atom
1309
1791
False
1310
1791
atom_expr
1311
1791
NUMBER
1312
1791
[
1313
1791
True
1314
1791
NAME
1315
1791
(
1316
1791
+
1317
1791
factor
1318
1791
None
1319
1791
-
1320
1791
{
1321
1791
arith_expr
1322
1791
and_expr
2159
1791
STRING
1324
1791
power
1325
1791
shift_expr
1326
1792
~
1307
1792
term
1308
1792
atom
1309
1792
False
1310
1792
atom_expr
1311
1792
NUMBER
1312
1792
[
1313
1792
True
1314
1792
NAME
1315
1792
(
1316
1792
+
1317
1792
factor
1318
1792
None
1319
1792
-
1320
1792
{
1321
1792
arith_expr
1322
1792
STRING
1324
1792
xor_expr
2160
1792
power
1325
1792
shift_expr
1326
1792
and_expr
1327
1793
(
trailer -> [ subscriptlist ]
1793
//
trailer -> [ subscriptlist ]
1793
&
trailer -> [ subscriptlist ]
1793
>
trailer -> [ subscriptlist ]
1793
in
trailer -> [ subscriptlist ]
1793
>>
trailer -> [ subscriptlist ]
1793
[
trailer -> [ subscriptlist ]
1793
<=
trailer -> [ subscriptlist ]
1793
-
trailer -> [ subscriptlist ]
1793
!=
trailer -> [ subscriptlist ]
1793
|
trailer -> [ subscriptlist ]
1793
not
trailer -> [ subscriptlist ]
1793
.
trailer -> [ subscriptlist ]
1793
>=
trailer -> [ subscriptlist ]
1793
or
trailer -> [ subscriptlist ]
1793
*
trailer -> [ subscriptlist ]
1793
<<
trailer -> [ subscriptlist ]
1793
**
trailer -> [ subscriptlist ]
1793
==
trailer -> [ subscriptlist ]
1793
+
trailer -> [ subscriptlist ]
1793
is
trailer -> [ subscriptlist ]
1793
/
trailer -> [ subscriptlist ]
1793
^
trailer -> [ subscriptlist ]
1793
and
trailer -> [ subscriptlist ]
1793
NEWLINE
trailer -> [ subscriptlist ]
1793
@
trailer -> [ subscriptlist ]
1793
if
trailer -> [ subscriptlist ]
1793
<
trailer -> [ subscriptlist ]
1793
%
trailer -> [ subscriptlist ]
1794
or
trailer -> ( arglist )
1794
NEWLINE
trailer -> ( arglist )
1794
>>
trailer -> ( arglist )
1794
<=
trailer -> ( arglist )
1794
**
trailer -> ( arglist )
1794
<
trailer -> ( arglist )
1794
(
trailer -> ( arglist )
1794
-
trailer -> ( arglist )
1794
not
trailer -> ( arglist )
1794
if
trailer -> ( arglist )
1794
and
trailer -> ( arglist )
1794
.
trailer -> ( arglist )
1794
is
trailer -> ( arglist )
1794
>
trailer -> ( arglist )
1794
in
trailer -> ( arglist )
1794
!=
trailer -> ( arglist )
1794
==
trailer -> ( arglist )
1794
%
trailer -> ( arglist )
1794
@
trailer -> ( arglist )
1794
^
trailer -> ( arglist )
1794
<<
trailer -> ( arglist )
1794
*
trailer -> ( arglist )
1794
//
trailer -> ( arglist )
1794
&
trailer -> ( arglist )
1794
|
trailer -> ( arglist )
1794
>=
trailer -> ( arglist )
1794
+
trailer -> ( arglist )
1794
/
trailer -> ( arglist )
1794
[
trailer -> ( arglist )
1795
NAME
300
1795
atom_expr
301
1795
term
302
1795
atom
303
1795
-
304
1795
factor
305
1795
True
306
1795
arith_expr
307
1795
False
308
1795
{
309
1795
+
310
1795
and_expr
311
1795
[
312
1795
(
313
1795
STRING
314
1795
comparison
315
1795
shift_expr
316
1795
not_test
317
1795
power
318
1795
None
319
1795
xor_expr
320
1795
expr
321
1795
NUMBER
322
1795
and_test
323
1795
or_test
324
1795
~
325
1795
test
2161
1795
lambda
326
1795
lambdef
327
1795
not
328
1796
NEWLINE
lambdef -> lambda varargslist : test
1797
*
trailer -> ( arglist )
1797
.
trailer -> ( arglist )
1797
//
trailer -> ( arglist )
1797
NEWLINE
trailer -> ( arglist )
1797
>>
trailer -> ( arglist )
1797
**
trailer -> ( arglist )
1797
+
trailer -> ( arglist )
1797
/
trailer -> ( arglist )
1797
,
trailer -> ( arglist )
1797
(
trailer -> ( arglist )
1797
-
trailer -> ( arglist )
1797
%
trailer -> ( arglist )
1797
&
trailer -> ( arglist )
1797
@
trailer -> ( arglist )
1797
|
trailer -> ( arglist )
1797
[
trailer -> ( arglist )
1797
^
trailer -> ( arglist )
1797
<<
trailer -> ( arglist )
1798
.
trailer -> [ subscriptlist ]
1798
(
trailer -> [ subscriptlist ]
1798
<<
trailer -> [ subscriptlist ]
1798
*
trailer -> [ subscriptlist ]
1798
//
trailer -> [ subscriptlist ]
1798
&
trailer -> [ subscriptlist ]
1798
/
trailer -> [ subscriptlist ]
1798
NEWLINE
trailer -> [ subscriptlist ]
1798
,
trailer -> [ subscriptlist ]
1798
@
trailer -> [ subscriptlist ]
1798
**
trailer -> [ subscriptlist ]
1798
>>
trailer -> [ subscriptlist ]
1798
-
trailer -> [ subscriptlist ]
1798
%
trailer -> [ subscriptlist ]
1798
+
trailer -> [ subscriptlist ]
1798
|
trailer -> [ subscriptlist ]
1798
^
trailer -> [ subscriptlist ]
1798
[
trailer -> [ subscriptlist ]
1799
@
decorator -> @ dotted_name ( ) NEWLINE
1799
class
decorator -> @ dotted_name ( ) NEWLINE
1799
def
decorator -> @ dotted_name ( ) NEWLINE
1800
NEWLINE
2162
1801
(
trailer -> [ subscriptlist ]
1801
//
trailer -> [ subscriptlist ]
1801
&
trailer -> [ subscriptlist ]
1801
>
trailer -> [ subscriptlist ]
1801
in
trailer -> [ subscriptlist ]
1801
>>
trailer -> [ subscriptlist ]
1801
[
trailer -> [ subscriptlist ]
1801
<=
trailer -> [ subscriptlist ]
1801
-
trailer -> [ subscriptlist ]
1801
!=
trailer -> [ subscriptlist ]
1801
|
trailer -> [ subscriptlist ]
1801
not
trailer -> [ subscriptlist ]
1801
.
trailer -> [ subscriptlist ]
1801
>=
trailer -> [ subscriptlist ]
1801
or
trailer -> [ subscriptlist ]
1801
*
trailer -> [ subscriptlist ]
1801
<<
trailer -> [ subscriptlist ]
1801
**
trailer -> [ subscriptlist ]
1801
==
trailer -> [ subscriptlist ]
1801
+
trailer -> [ subscriptlist ]
1801
is
trailer -> [ subscriptlist ]
1801
/
trailer -> [ subscriptlist ]
1801
^
trailer -> [ subscriptlist ]
1801
and
trailer -> [ subscriptlist ]
1801
NEWLINE
trailer -> [ subscriptlist ]
1801
,
trailer -> [ subscriptlist ]
1801
@
trailer -> [ subscriptlist ]
1801
if
trailer -> [ subscriptlist ]
1801
<
trailer -> [ subscriptlist ]
1801
%
trailer -> [ subscriptlist ]
1802
or
trailer -> ( arglist )
1802
NEWLINE
trailer -> ( arglist )
1802
>>
trailer -> ( arglist )
1802
<=
trailer -> ( arglist )
1802
**
trailer -> ( arglist )
1802
<
trailer -> ( arglist )
1802
(
trailer -> ( arglist )
1802
-
trailer -> ( arglist )
1802
not
trailer -> ( arglist )
1802
if
trailer -> ( arglist )
1802
and
trailer -> ( arglist )
1802
.
trailer -> ( arglist )
1802
is
trailer -> ( arglist )
1802
>
trailer -> ( arglist )
1802
in
trailer -> ( arglist )
1802
!=
trailer -> ( arglist )
1802
,
trailer -> ( arglist )
1802
==
trailer -> ( arglist )
1802
%
trailer -> ( arglist )
1802
@
trailer -> ( arglist )
1802
^
trailer -> ( arglist )
1802
<<
trailer -> ( arglist )
1802
*
trailer -> ( arglist )
1802
//
trailer -> ( arglist )
1802
&
trailer -> ( arglist )
1802
|
trailer -> ( arglist )
1802
>=
trailer -> ( arglist )
1802
+
trailer -> ( arglist )
1802
/
trailer -> ( arglist )
1802
[
trailer -> ( arglist )
1803
NAME
371
1803
atom_expr
372
1803
term
373
1803
atom
374
1803
-
375
1803
factor
376
1803
[
377
1803
True
378
1803
arith_expr
379
1803
False
380
1803
{
381
1803
+
382
1803
and_expr
383
1803
(
384
1803
STRING
385
1803
comparison
386
1803
shift_expr
387
1803
not_test
388
1803
power
389
1803
None
390
1803
xor_expr
391
1803
expr
392
1803
NUMBER
393
1803
and_test
394
1803
or_test
395
1803
~
396
1803
test
2163
1803
lambda
397
1803
lambdef
399
1803
not
400
1804
,
lambdef -> lambda varargslist : test
1804
NEWLINE
lambdef -> lambda varargslist : test
1805
>>
power -> atom_expr ** factor
1805
<=
power -> atom_expr ** factor
1805
//
power -> atom_expr ** factor
1805
/
power -> atom_expr ** factor
1805
&
power -> atom_expr ** factor
1805
if
power -> atom_expr ** factor
1805
not
power -> atom_expr ** factor
1805
<
power -> atom_expr ** factor
1805
!=
power -> atom_expr ** factor
1805
,
power -> atom_expr ** factor
1805
>
power -> atom_expr ** factor
1805
*
power -> atom_expr ** factor
1805
==
power -> atom_expr ** factor
1805
|
power -> atom_expr ** factor
1805
NEWLINE
power -> atom_expr ** factor
1805
is
power -> atom_expr ** factor
1805
and
power -> atom_expr ** factor
1805
<<
power -> atom_expr ** factor
1805
-
power -> atom_expr ** factor
1805
=
power -> atom_expr ** factor
1805
@
power -> atom_expr ** factor
1805
in
power -> atom_expr ** factor
1805
^
power -> atom_expr ** factor
1805
%
power -> atom_expr ** factor
1805
>=
power -> atom_expr ** factor
1805
+
power -> atom_expr ** factor
1805
or
power -> atom_expr ** factor
1806
and
arith_expr -> term + arith_expr
1806
<
arith_expr -> term + arith_expr
1806
|
arith_expr -> term + arith_expr
1806
>=
arith_expr -> term + arith_expr
1806
>>
arith_expr -> term + arith_expr
1806
,
arith_expr -> term + arith_expr
1806
if
arith_expr -> term + arith_expr
1806
>
arith_expr -> term + arith_expr
1806
in
arith_expr -> term + arith_expr
1806
is
arith_expr -> term + arith_expr
1806
or
arith_expr -> term + arith_expr
1806
<=
arith_expr -> term + arith_expr
1806
not
arith_expr -> term + arith_expr
1806
^
arith_expr -> term + arith_expr
1806
!=
arith_expr -> term + arith_expr
1806
==
arith_expr -> term + arith_expr
1806
=
arith_expr -> term + arith_expr
1806
NEWLINE
arith_expr -> term + arith_expr
1806
<<
arith_expr -> term + arith_expr
1806
&
arith_expr -> term + arith_expr
1807
NEWLINE
arith_expr -> term - arith_expr
1807
<<
arith_expr -> term - arith_expr
1807
if
arith_expr -> term - arith_expr
1807
<
arith_expr -> term - arith_expr
1807
=
arith_expr -> term - arith_expr
1807
<=
arith_expr -> term - arith_expr
1807
and
arith_expr -> term - arith_expr
1807
in
arith_expr -> term - arith_expr
1807
&
arith_expr -> term - arith_expr
1807
|
arith_expr -> term - arith_expr
1807
==
arith_expr -> term - arith_expr
1807
is
arith_expr -> term - arith_expr
1807
>>
arith_expr -> term - arith_expr
1807
!=
arith_expr -> term - arith_expr
1807
>
arith_expr -> term - arith_expr
1807
or
arith_expr -> term - arith_expr
1807
,
arith_expr -> term - arith_expr
1807
>=
arith_expr -> term - arith_expr
1807
^
arith_expr -> term - arith_expr
1807
not
arith_expr -> term - arith_expr
1808
*
trailer_expr -> trailer trailer_expr
1808
+
trailer_expr -> trailer trailer_expr
1808
if
trailer_expr -> trailer trailer_expr
1808
-
trailer_expr -> trailer trailer_expr
1808
<=
trailer_expr -> trailer trailer_expr
1808
|
trailer_expr -> trailer trailer_expr
1808
@
trailer_expr -> trailer trailer_expr
1808
%
trailer_expr -> trailer trailer_expr
1808
in
trailer_expr -> trailer trailer_expr
1808
<<
trailer_expr -> trailer trailer_expr
1808
**
trailer_expr -> trailer trailer_expr
1808
==
trailer_expr -> trailer trailer_expr
1808
not
trailer_expr -> trailer trailer_expr
1808
,
trailer_expr -> trailer trailer_expr
1808
and
trailer_expr -> trailer trailer_expr
1808
//
trailer_expr -> trailer trailer_expr
1808
NEWLINE
trailer_expr -> trailer trailer_expr
1808
^
trailer_expr -> trailer trailer_expr
1808
or
trailer_expr -> trailer trailer_expr
1808
=
trailer_expr -> trailer trailer_expr
1808
>
trailer_expr -> trailer trailer_expr
1808
!=
trailer_expr -> trailer trailer_expr
1808
is
trailer_expr -> trailer trailer_expr
1808
&
trailer_expr -> trailer trailer_expr
1808
>>
trailer_expr -> trailer trailer_expr
1808
/
trailer_expr -> trailer trailer_expr
1808
<
trailer_expr -> trailer trailer_expr
1808
>=
trailer_expr -> trailer trailer_expr
1809
]
2164
1810
^
trailer -> . NAME
1810
%
trailer -> . NAME
1810
**
trailer -> . NAME
1810
>>
trailer -> . NAME
1810
>
trailer -> . NAME
1810
in
trailer -> . NAME
1810
[
trailer -> . NAME
1810
is
trailer -> . NAME
1810
,
trailer -> . NAME
1810
<<
trailer -> . NAME
1810
or
trailer -> . NAME
1810
and
trailer -> . NAME
1810
>=
trailer -> . NAME
1810
|
trailer -> . NAME
1810
==
trailer -> . NAME
1810
=
trailer -> . NAME
1810
.
trailer -> . NAME
1810
+
trailer -> . NAME
1810
<
trailer -> . NAME
1810
-
trailer -> . NAME
1810
&
trailer -> . NAME
1810
NEWLINE
trailer -> . NAME
1810
*
trailer -> . NAME
1810
if
trailer -> . NAME
1810
<=
trailer -> . NAME
1810
(
trailer -> . NAME
1810
not
trailer -> . NAME
1810
//
trailer -> . NAME
1810
@
trailer -> . NAME
1810
!=
trailer -> . NAME
1810
/
trailer -> . NAME
1811
)
2165
1812
[
trailer -> ( )
1812
not
trailer -> ( )
1812
==
trailer -> ( )
1812
**
trailer -> ( )
1812
,
trailer -> ( )
1812
<=
trailer -> ( )
1812
//
trailer -> ( )
1812
<<
trailer -> ( )
1812
<
trailer -> ( )
1812
=
trailer -> ( )
1812
in
trailer -> ( )
1812
or
trailer -> ( )
1812
-
trailer -> ( )
1812
+
trailer -> ( )
1812
&
trailer -> ( )
1812
*
trailer -> ( )
1812
is
trailer -> ( )
1812
>
trailer -> ( )
1812
!=
trailer -> ( )
1812
>>
trailer -> ( )
1812
%
trailer -> ( )
1812
|
trailer -> ( )
1812
.
trailer -> ( )
1812
>=
trailer -> ( )
1812
(
trailer -> ( )
1812
and
trailer -> ( )
1812
@
trailer -> ( )
1812
NEWLINE
trailer -> ( )
1812
/
trailer -> ( )
1812
^
trailer -> ( )
1812
if
trailer -> ( )
1813
NEWLINE
term -> factor % term
1813
|
term -> factor % term
1813
<<
term -> factor % term
1813
^
term -> factor % term
1813
==
term -> factor % term
1813
-
term -> factor % term
1813
=
term -> factor % term
1813
,
term -> factor % term
1813
is
term -> factor % term
1813
>=
term -> factor % term
1813
>>
term -> factor % term
1813
>
term -> factor % term
1813
in
term -> factor % term
1813
&
term -> factor % term
1813
if
term -> factor % term
1813
<
term -> factor % term
1813
!=
term -> factor % term
1813
<=
term -> factor % term
1813
not
term -> factor % term
1813
+
term -> factor % term
1813
and
term -> factor % term
1813
or
term -> factor % term
1814
,
term -> factor / term
1814
>>
term -> factor / term
1814
^
term -> factor / term
1814
NEWLINE
term -> factor / term
1814
or
term -> factor / term
1814
+
term -> factor / term
1814
=
term -> factor / term
1814
if
term -> factor / term
1814
>=
term -> factor / term
1814
>
term -> factor / term
1814
-
term -> factor / term
1814
and
term -> factor / term
1814
not
term -> factor / term
1814
<
term -> factor / term
1814
in
term -> factor / term
1814
==
term -> factor / term
1814
<=
term -> factor / term
1814
is
term -> factor / term
1814
&
term -> factor / term
1814
<<
term -> factor / term
1814
!=
term -> factor / term
1814
|
term -> factor / term
1815
NEWLINE
term -> factor * term
1815
-
term -> factor * term
1815
&
term -> factor * term
1815
and
term -> factor * term
1815
,
term -> factor * term
1815
!=
term -> factor * term
1815
|
term -> factor * term
1815
<<
term -> factor * term
1815
<
term -> factor * term
1815
=
term -> factor * term
1815
if
term -> factor * term
1815
^
term -> factor * term
1815
+
term -> factor * term
1815
in
term -> factor * term
1815
or
term -> factor * term
1815
>>
term -> factor * term
1815
not
term -> factor * term
1815
==
term -> factor * term
1815
>=
term -> factor * term
1815
<=
term -> factor * term
1815
>
term -> factor * term
1815
is
term -> factor * term
1816
if
term -> factor // term
1816
<
term -> factor // term
1816
and
term -> factor // term
1816
in
term -> factor // term
1816
,
term -> factor // term
1816
>>
term -> factor // term
1816
<=
term -> factor // term
1816
!=
term -> factor // term
1816
^
term -> factor // term
1816
=
term -> factor // term
1816
|
term -> factor // term
1816
or
term -> factor // term
1816
NEWLINE
term -> factor // term
1816
>=
term -> factor // term
1816
&
term -> factor // term
1816
>
term -> factor // term
1816
+
term -> factor // term
1816
is
term -> factor // term
1816
not
term -> factor // term
1816
<<
term -> factor // term
1816
-
term -> factor // term
1816
==
term -> factor // term
1817
>>
term -> factor @ term
1817
^
term -> factor @ term
1817
&
term -> factor @ term
1817
|
term -> factor @ term
1817
=
term -> factor @ term
1817
if
term -> factor @ term
1817
is
term -> factor @ term
1817
<
term -> factor @ term
1817
<<
term -> factor @ term
1817
NEWLINE
term -> factor @ term
1817
and
term -> factor @ term
1817
==
term -> factor @ term
1817
>
term -> factor @ term
1817
in
term -> factor @ term
1817
,
term -> factor @ term
1817
>=
term -> factor @ term
1817
+
term -> factor @ term
1817
not
term -> factor @ term
1817
!=
term -> factor @ term
1817
<=
term -> factor @ term
1817
or
term -> factor @ term
1817
-
term -> factor @ term
1818
<<
atom -> [ test_list_comp ]
1818
,
atom -> [ test_list_comp ]
1818
>>
atom -> [ test_list_comp ]
1818
+
atom -> [ test_list_comp ]
1818
-
atom -> [ test_list_comp ]
1818
not
atom -> [ test_list_comp ]
1818
<=
atom -> [ test_list_comp ]
1818
is
atom -> [ test_list_comp ]
1818
[
atom -> [ test_list_comp ]
1818
*
atom -> [ test_list_comp ]
1818
==
atom -> [ test_list_comp ]
1818
@
atom -> [ test_list_comp ]
1818
NEWLINE
atom -> [ test_list_comp ]
1818
>
atom -> [ test_list_comp ]
1818
=
atom -> [ test_list_comp ]
1818
%
atom -> [ test_list_comp ]
1818
if
atom -> [ test_list_comp ]
1818
>=
atom -> [ test_list_comp ]
1818
//
atom -> [ test_list_comp ]
1818
.
atom -> [ test_list_comp ]
1818
in
atom -> [ test_list_comp ]
1818
**
atom -> [ test_list_comp ]
1818
and
atom -> [ test_list_comp ]
1818
/
atom -> [ test_list_comp ]
1818
or
atom -> [ test_list_comp ]
1818
!=
atom -> [ test_list_comp ]
1818
<
atom -> [ test_list_comp ]
1818
^
atom -> [ test_list_comp ]
1818
&
atom -> [ test_list_comp ]
1818
(
atom -> [ test_list_comp ]
1818
|
atom -> [ test_list_comp ]
1819
NEWLINE
shift_expr -> arith_expr >> shift_expr
1819
<
shift_expr -> arith_expr >> shift_expr
1819
^
shift_expr -> arith_expr >> shift_expr
1819
=
shift_expr -> arith_expr >> shift_expr
1819
in
shift_expr -> arith_expr >> shift_expr
1819
==
shift_expr -> arith_expr >> shift_expr
1819
!=
shift_expr -> arith_expr >> shift_expr
1819
>=
shift_expr -> arith_expr >> shift_expr
1819
not
shift_expr -> arith_expr >> shift_expr
1819
and
shift_expr -> arith_expr >> shift_expr
1819
is
shift_expr -> arith_expr >> shift_expr
1819
,
shift_expr -> arith_expr >> shift_expr
1819
&
shift_expr -> arith_expr >> shift_expr
1819
>
shift_expr -> arith_expr >> shift_expr
1819
|
shift_expr -> arith_expr >> shift_expr
1819
<=
shift_expr -> arith_expr >> shift_expr
1819
or
shift_expr -> arith_expr >> shift_expr
1819
if
shift_expr -> arith_expr >> shift_expr
1820
,
shift_expr -> arith_expr << shift_expr
1820
if
shift_expr -> arith_expr << shift_expr
1820
&
shift_expr -> arith_expr << shift_expr
1820
>=
shift_expr -> arith_expr << shift_expr
1820
<=
shift_expr -> arith_expr << shift_expr
1820
or
shift_expr -> arith_expr << shift_expr
1820
in
shift_expr -> arith_expr << shift_expr
1820
!=
shift_expr -> arith_expr << shift_expr
1820
^
shift_expr -> arith_expr << shift_expr
1820
<
shift_expr -> arith_expr << shift_expr
1820
|
shift_expr -> arith_expr << shift_expr
1820
==
shift_expr -> arith_expr << shift_expr
1820
=
shift_expr -> arith_expr << shift_expr
1820
is
shift_expr -> arith_expr << shift_expr
1820
and
shift_expr -> arith_expr << shift_expr
1820
NEWLINE
shift_expr -> arith_expr << shift_expr
1820
>
shift_expr -> arith_expr << shift_expr
1820
not
shift_expr -> arith_expr << shift_expr
1821
NEWLINE
expr -> xor_expr | expr
1821
is
expr -> xor_expr | expr
1821
or
expr -> xor_expr | expr
1821
>
expr -> xor_expr | expr
1821
and
expr -> xor_expr | expr
1821
,
expr -> xor_expr | expr
1821
in
expr -> xor_expr | expr
1821
=
expr -> xor_expr | expr
1821
if
expr -> xor_expr | expr
1821
<=
expr -> xor_expr | expr
1821
not
expr -> xor_expr | expr
1821
==
expr -> xor_expr | expr
1821
>=
expr -> xor_expr | expr
1821
<
expr -> xor_expr | expr
1821
!=
expr -> xor_expr | expr
1822
>=
xor_expr -> and_expr ^ xor_expr
1822
>
xor_expr -> and_expr ^ xor_expr
1822
or
xor_expr -> and_expr ^ xor_expr
1822
and
xor_expr -> and_expr ^ xor_expr
1822
<=
xor_expr -> and_expr ^ xor_expr
1822
in
xor_expr -> and_expr ^ xor_expr
1822
==
xor_expr -> and_expr ^ xor_expr
1822
,
xor_expr -> and_expr ^ xor_expr
1822
if
xor_expr -> and_expr ^ xor_expr
1822
=
xor_expr -> and_expr ^ xor_expr
1822
!=
xor_expr -> and_expr ^ xor_expr
1822
not
xor_expr -> and_expr ^ xor_expr
1822
<
xor_expr -> and_expr ^ xor_expr
1822
is
xor_expr -> and_expr ^ xor_expr
1822
NEWLINE
xor_expr -> and_expr ^ xor_expr
1822
|
xor_expr -> and_expr ^ xor_expr
1823
@
atom -> ( test_list_comp )
1823
<
atom -> ( test_list_comp )
1823
and
atom -> ( test_list_comp )
1823
if
atom -> ( test_list_comp )
1823
&
atom -> ( test_list_comp )
1823
=
atom -> ( test_list_comp )
1823
*
atom -> ( test_list_comp )
1823
%
atom -> ( test_list_comp )
1823
[
atom -> ( test_list_comp )
1823
//
atom -> ( test_list_comp )
1823
<<
atom -> ( test_list_comp )
1823
.
atom -> ( test_list_comp )
1823
/
atom -> ( test_list_comp )
1823
>=
atom -> ( test_list_comp )
1823
or
atom -> ( test_list_comp )
1823
>
atom -> ( test_list_comp )
1823
-
atom -> ( test_list_comp )
1823
|
atom -> ( test_list_comp )
1823
**
atom -> ( test_list_comp )
1823
is
atom -> ( test_list_comp )
1823
==
atom -> ( test_list_comp )
1823
not
atom -> ( test_list_comp )
1823
in
atom -> ( test_list_comp )
1823
!=
atom -> ( test_list_comp )
1823
^
atom -> ( test_list_comp )
1823
,
atom -> ( test_list_comp )
1823
(
atom -> ( test_list_comp )
1823
NEWLINE
atom -> ( test_list_comp )
1823
<=
atom -> ( test_list_comp )
1823
+
atom -> ( test_list_comp )
1823
>>
atom -> ( test_list_comp )
1824
=
test_list -> test , test_list
1824
NEWLINE
test_list -> test , test_list
1825
,
and_expr -> shift_expr & and_expr
1825
>=
and_expr -> shift_expr & and_expr
1825
!=
and_expr -> shift_expr & and_expr
1825
or
and_expr -> shift_expr & and_expr
1825
is
and_expr -> shift_expr & and_expr
1825
=
and_expr -> shift_expr & and_expr
1825
^
and_expr -> shift_expr & and_expr
1825
==
and_expr -> shift_expr & and_expr
1825
if
and_expr -> shift_expr & and_expr
1825
not
and_expr -> shift_expr & and_expr
1825
<
and_expr -> shift_expr & and_expr
1825
>
and_expr -> shift_expr & and_expr
1825
in
and_expr -> shift_expr & and_expr
1825
and
and_expr -> shift_expr & and_expr
1825
|
and_expr -> shift_expr & and_expr
1825
NEWLINE
and_expr -> shift_expr & and_expr
1825
<=
and_expr -> shift_expr & and_expr
1826
if
and_test -> not_test and and_test
1826
NEWLINE
and_test -> not_test and and_test
1826
,
and_test -> not_test and and_test
1826
or
and_test -> not_test and and_test
1826
=
and_test -> not_test and and_test
1827
=
comparison -> expr comp_op comparison
1827
,
comparison -> expr comp_op comparison
1827
NEWLINE
comparison -> expr comp_op comparison
1827
and
comparison -> expr comp_op comparison
1827
if
comparison -> expr comp_op comparison
1827
or
comparison -> expr comp_op comparison
1828
=
or_test -> and_test or or_test
1828
,
or_test -> and_test or or_test
1828
if
or_test -> and_test or or_test
1828
NEWLINE
or_test -> and_test or or_test
1829
else
2166
1830
.
atom -> NAME
1830
<
atom -> NAME
1830
|
atom -> NAME
1830
not
atom -> NAME
1830
[
atom -> NAME
1830
+
atom -> NAME
1830
%
atom -> NAME
1830
NEWLINE
atom -> NAME
1830
<=
atom -> NAME
1830
=
atom -> NAME
1830
*
atom -> NAME
1830
!=
atom -> NAME
1830
in
atom -> NAME
1830
if
atom -> NAME
1830
is
atom -> NAME
1830
(
atom -> NAME
1830
^
atom -> NAME
1830
@
atom -> NAME
1830
&
atom -> NAME
1830
>>
atom -> NAME
1830
<<
atom -> NAME
1830
-
atom -> NAME
1830
/
atom -> NAME
1830
or
atom -> NAME
1830
//
atom -> NAME
1830
>=
atom -> NAME
1830
and
atom -> NAME
1830
>
atom -> NAME
1830
==
atom -> NAME
1830
**
atom -> NAME
1831
**
2167
1831
and
power -> atom_expr
1831
^
power -> atom_expr
1831
or
power -> atom_expr
1831
>>
power -> atom_expr
1831
if
power -> atom_expr
1831
<
power -> atom_expr
1831
>=
power -> atom_expr
1831
=
power -> atom_expr
1831
NEWLINE
power -> atom_expr
1831
!=
power -> atom_expr
1831
is
power -> atom_expr
1831
<=
power -> atom_expr
1831
not
power -> atom_expr
1831
//
power -> atom_expr
1831
+
power -> atom_expr
1831
==
power -> atom_expr
1831
|
power -> atom_expr
1831
-
power -> atom_expr
1831
&
power -> atom_expr
1831
/
power -> atom_expr
1831
@
power -> atom_expr
1831
<<
power -> atom_expr
1831
%
power -> atom_expr
1831
*
power -> atom_expr
1831
in
power -> atom_expr
1831
>
power -> atom_expr
1832
+
2168
1832
or
arith_expr -> term
1832
==
arith_expr -> term
1832
NEWLINE
arith_expr -> term
1832
-
2169
1832
in
arith_expr -> term
1832
<<
arith_expr -> term
1832
>
arith_expr -> term
1832
is
arith_expr -> term
1832
>=
arith_expr -> term
1832
=
arith_expr -> term
1832
<=
arith_expr -> term
1832
and
arith_expr -> term
1832
>>
arith_expr -> term
1832
!=
arith_expr -> term
1832
not
arith_expr -> term
1832
&
arith_expr -> term
1832
if
arith_expr -> term
1832
<
arith_expr -> term
1832
^
arith_expr -> term
1832
|
arith_expr -> term
1833
trailer
2170
1833
trailer_expr
2171
1833
[
2172
1833
or
trailer_expr -> 
1833
.
2173
1833
(
2174
1833
not
trailer_expr -> 
1833
in
trailer_expr -> 
1833
is
trailer_expr -> 
1833
>=
trailer_expr -> 
1833
-
trailer_expr -> 
1833
@
trailer_expr -> 
1833
<=
trailer_expr -> 
1833
^
trailer_expr -> 
1833
*
trailer_expr -> 
1833
if
trailer_expr -> 
1833
**
trailer_expr -> 
1833
=
trailer_expr -> 
1833
>
trailer_expr -> 
1833
==
trailer_expr -> 
1833
>>
trailer_expr -> 
1833
<<
trailer_expr -> 
1833
/
trailer_expr -> 
1833
NEWLINE
trailer_expr -> 
1833
//
trailer_expr -> 
1833
!=
trailer_expr -> 
1833
<
trailer_expr -> 
1833
&
trailer_expr -> 
1833
|
trailer_expr -> 
1833
and
trailer_expr -> 
1833
+
trailer_expr -> 
1833
%
trailer_expr -> 
1834
NAME
1830
1834
atom_expr
1831
1834
atom
1833
1834
-
1834
1834
factor
2175
1834
True
1836
1834
False
1839
1834
{
1840
1834
+
1841
1834
[
1843
1834
(
1844
1834
STRING
1845
1834
power
1849
1834
None
1851
1834
NUMBER
1853
1834
~
1856
1835
%
2176
1835
/
2177
1835
*
2178
1835
//
2179
1835
@
2180
1835
not
term -> factor
1835
<<
term -> factor
1835
or
term -> factor
1835
^
term -> factor
1835
NEWLINE
term -> factor
1835
in
term -> factor
1835
if
term -> factor
1835
and
term -> factor
1835
<=
term -> factor
1835
&
term -> factor
1835
>>
term -> factor
1835
=
term -> factor
1835
>
term -> factor
1835
|
term -> factor
1835
<
term -> factor
1835
is
term -> factor
1835
!=
term -> factor
1835
>=
term -> factor
1835
==
term -> factor
1835
-
term -> factor
1835
+
term -> factor
1836
!=
atom -> True
1836
&
atom -> True
1836
+
atom -> True
1836
<<
atom -> True
1836
@
atom -> True
1836
if
atom -> True
1836
NEWLINE
atom -> True
1836
and
atom -> True
1836
is
atom -> True
1836
|
atom -> True
1836
<
atom -> True
1836
>=
atom -> True
1836
or
atom -> True
1836
=
atom -> True
1836
==
atom -> True
1836
%
atom -> True
1836
>
atom -> True
1836
[
atom -> True
1836
*
atom -> True
1836
//
atom -> True
1836
/
atom -> True
1836
in
atom -> True
1836
-
atom -> True
1836
^
atom -> True
1836
<=
atom -> True
1836
(
atom -> True
1836
**
atom -> True
1836
.
atom -> True
1836
not
atom -> True
1836
>>
atom -> True
1837
or
shift_expr -> arith_expr
1837
>>
2181
1837
<<
2182
1837
^
shift_expr -> arith_expr
1837
in
shift_expr -> arith_expr
1837
<=
shift_expr -> arith_expr
1837
>=
shift_expr -> arith_expr
1837
&
shift_expr -> arith_expr
1837
==
shift_expr -> arith_expr
1837
=
shift_expr -> arith_expr
1837
not
shift_expr -> arith_expr
1837
and
shift_expr -> arith_expr
1837
>
shift_expr -> arith_expr
1837
!=
shift_expr -> arith_expr
1837
if
shift_expr -> arith_expr
1837
|
shift_expr -> arith_expr
1837
NEWLINE
shift_expr -> arith_expr
1837
<
shift_expr -> arith_expr
1837
is
shift_expr -> arith_expr
1838
|
2183
1838
>
expr -> xor_expr
1838
<
expr -> xor_expr
1838
and
expr -> xor_expr
1838
>=
expr -> xor_expr
1838
!=
expr -> xor_expr
1838
or
expr -> xor_expr
1838
NEWLINE
expr -> xor_expr
1838
in
expr -> xor_expr
1838
is
expr -> xor_expr
1838
if
expr -> xor_expr
1838
==
expr -> xor_expr
1838
=
expr -> xor_expr
1838
<=
expr -> xor_expr
1838
not
expr -> xor_expr
1839
not
atom -> False
1839
==
atom -> False
1839
*
atom -> False
1839
>
atom -> False
1839
[
atom -> False
1839
if
atom -> False
1839
@
atom -> False
1839
&
atom -> False
1839
is
atom -> False
1839
.
atom -> False
1839
=
atom -> False
1839
+
atom -> False
1839
NEWLINE
atom -> False
1839
>=
atom -> False
1839
%
atom -> False
1839
and
atom -> False
1839
(
atom -> False
1839
|
atom -> False
1839
-
atom -> False
1839
/
atom -> False
1839
in
atom -> False
1839
<<
atom -> False
1839
<=
atom -> False
1839
^
atom -> False
1839
//
atom -> False
1839
>>
atom -> False
1839
!=
atom -> False
1839
**
atom -> False
1839
or
atom -> False
1839
<
atom -> False
1840
}
2184
1841
NAME
1830
1841
atom_expr
1831
1841
atom
1833
1841
-
1834
1841
True
1836
1841
False
1839
1841
{
1840
1841
+
1841
1841
[
1843
1841
(
1844
1841
STRING
1845
1841
power
1849
1841
factor
2185
1841
None
1851
1841
NUMBER
1853
1841
~
1856
1842
^
2186
1842
<
xor_expr -> and_expr
1842
<=
xor_expr -> and_expr
1842
|
xor_expr -> and_expr
1842
not
xor_expr -> and_expr
1842
and
xor_expr -> and_expr
1842
!=
xor_expr -> and_expr
1842
NEWLINE
xor_expr -> and_expr
1842
or
xor_expr -> and_expr
1842
>
xor_expr -> and_expr
1842
>=
xor_expr -> and_expr
1842
==
xor_expr -> and_expr
1842
=
xor_expr -> and_expr
1842
in
xor_expr -> and_expr
1842
is
xor_expr -> and_expr
1842
if
xor_expr -> and_expr
1843
NAME
187
1843
atom_expr
188
1843
atom
189
1843
-
190
1843
factor
191
1843
test_list_comp
2187
1843
[
193
1843
True
194
1843
arith_expr
195
1843
False
196
1843
{
197
1843
+
198
1843
and_expr
199
1843
(
200
1843
STRING
201
1843
]
2188
1843
term
203
1843
and_test
204
1843
comparison
205
1843
shift_expr
206
1843
not_test
207
1843
power
208
1843
or_test
209
1843
None
210
1843
xor_expr
211
1843
expr
212
1843
NUMBER
213
1843
lambda
214
1843
~
215
1843
lambdef
216
1843
not
217
1843
test
218
1843
test_list
219
1844
NAME
131
1844
atom_expr
132
1844
atom
133
1844
-
134
1844
)
2189
1844
factor
136
1844
[
137
1844
True
138
1844
arith_expr
139
1844
False
140
1844
{
141
1844
+
142
1844
and_expr
143
1844
(
144
1844
STRING
145
1844
test_list_comp
2190
1844
power
147
1844
term
148
1844
comparison
149
1844
shift_expr
150
1844
test
151
1844
not_test
152
1844
or_test
153
1844
lambda
154
1844
None
155
1844
xor_expr
156
1844
expr
157
1844
NUMBER
158
1844
and_test
159
1844
~
160
1844
lambdef
161
1844
not
162
1844
test_list
163
1845
and
atom -> STRING
1845
not
atom -> STRING
1845
NEWLINE
atom -> STRING
1845
.
atom -> STRING
1845
//
atom -> STRING
1845
-
atom -> STRING
1845
*
atom -> STRING
1845
(
atom -> STRING
1845
>=
atom -> STRING
1845
<=
atom -> STRING
1845
<<
atom -> STRING
1845
if
atom -> STRING
1845
+
atom -> STRING
1845
or
atom -> STRING
1845
=
atom -> STRING
1845
/
atom -> STRING
1845
@
atom -> STRING
1845
in
atom -> STRING
1845
>>
atom -> STRING
1845
%
atom -> STRING
1845
!=
atom -> STRING
1845
>
atom -> STRING
1845
^
atom -> STRING
1845
<
atom -> STRING
1845
==
atom -> STRING
1845
**
atom -> STRING
1845
&
atom -> STRING
1845
|
atom -> STRING
1845
is
atom -> STRING
1845
[
atom -> STRING
1846
=
not_test -> comparison
1846
or
not_test -> comparison
1846
and
not_test -> comparison
1846
if
not_test -> comparison
1846
NEWLINE
not_test -> comparison
1847
==
and_expr -> shift_expr
1847
&
2191
1847
!=
and_expr -> shift_expr
1847
<
and_expr -> shift_expr
1847
<=
and_expr -> shift_expr
1847
and
and_expr -> shift_expr
1847
in
and_expr -> shift_expr
1847
=
and_expr -> shift_expr
1847
^
and_expr -> shift_expr
1847
not
and_expr -> shift_expr
1847
is
and_expr -> shift_expr
1847
if
and_expr -> shift_expr
1847
>
and_expr -> shift_expr
1847
or
and_expr -> shift_expr
1847
NEWLINE
and_expr -> shift_expr
1847
>=
and_expr -> shift_expr
1847
|
and_expr -> shift_expr
1848
and
2192
1848
if
and_test -> not_test
1848
=
and_test -> not_test
1848
NEWLINE
and_test -> not_test
1848
or
and_test -> not_test
1849
<=
factor -> power
1849
is
factor -> power
1849
>
factor -> power
1849
==
factor -> power
1849
^
factor -> power
1849
or
factor -> power
1849
-
factor -> power
1849
+
factor -> power
1849
>>
factor -> power
1849
/
factor -> power
1849
*
factor -> power
1849
<<
factor -> power
1849
NEWLINE
factor -> power
1849
|
factor -> power
1849
and
factor -> power
1849
<
factor -> power
1849
not
factor -> power
1849
!=
factor -> power
1849
if
factor -> power
1849
&
factor -> power
1849
in
factor -> power
1849
%
factor -> power
1849
=
factor -> power
1849
>=
factor -> power
1849
//
factor -> power
1849
@
factor -> power
1850
NEWLINE
test -> lambdef
1850
=
test -> lambdef
1851
+
atom -> None
1851
>>
atom -> None
1851
/
atom -> None
1851
or
atom -> None
1851
*
atom -> None
1851
in
atom -> None
1851
**
atom -> None
1851
==
atom -> None
1851
-
atom -> None
1851
if
atom -> None
1851
NEWLINE
atom -> None
1851
(
atom -> None
1851
@
atom -> None
1851
>=
atom -> None
1851
[
atom -> None
1851
=
atom -> None
1851
^
atom -> None
1851
&
atom -> None
1851
<=
atom -> None
1851
is
atom -> None
1851
.
atom -> None
1851
not
atom -> None
1851
//
atom -> None
1851
<
atom -> None
1851
<<
atom -> None
1851
!=
atom -> None
1851
and
atom -> None
1851
%
atom -> None
1851
|
atom -> None
1851
>
atom -> None
1852
==
330
1852
is
331
1852
<=
332
1852
and
comparison -> expr
1852
!=
334
1852
>
335
1852
not
336
1852
NEWLINE
comparison -> expr
1852
comp_op
2193
1852
in
337
1852
or
comparison -> expr
1852
<
338
1852
>=
339
1852
if
comparison -> expr
1852
=
comparison -> expr
1853
is
atom -> NUMBER
1853
|
atom -> NUMBER
1853
=
atom -> NUMBER
1853
in
atom -> NUMBER
1853
@
atom -> NUMBER
1853
**
atom -> NUMBER
1853
and
atom -> NUMBER
1853
!=
atom -> NUMBER
1853
if
atom -> NUMBER
1853
-
atom -> NUMBER
1853
<<
atom -> NUMBER
1853
.
atom -> NUMBER
1853
(
atom -> NUMBER
1853
==
atom -> NUMBER
1853
%
atom -> NUMBER
1853
^
atom -> NUMBER
1853
not
atom -> NUMBER
1853
>=
atom -> NUMBER
1853
/
atom -> NUMBER
1853
//
atom -> NUMBER
1853
>
atom -> NUMBER
1853
&
atom -> NUMBER
1853
[
atom -> NUMBER
1853
<=
atom -> NUMBER
1853
*
atom -> NUMBER
1853
NEWLINE
atom -> NUMBER
1853
or
atom -> NUMBER
1853
+
atom -> NUMBER
1853
>>
atom -> NUMBER
1853
<
atom -> NUMBER
1854
or
2194
1854
=
or_test -> and_test
1854
if
or_test -> and_test
1854
NEWLINE
or_test -> and_test
1855
if
2195
1855
NEWLINE
test -> or_test
1855
=
test -> or_test
1856
NAME
1830
1856
atom_expr
1831
1856
atom
1833
1856
-
1834
1856
True
1836
1856
False
1839
1856
{
1840
1856
+
1841
1856
factor
2196
1856
[
1843
1856
(
1844
1856
STRING
1845
1856
power
1849
1856
None
1851
1856
NUMBER
1853
1856
~
1856
1857
NEWLINE
yield_arg -> from test
1857
=
yield_arg -> from test
1858
:
2197
1858
varargslist
2198
1858
vfpdef
343
1858
NAME
342
1859
NAME
1830
1859
atom_expr
1831
1859
term
1832
1859
atom
1833
1859
-
1834
1859
factor
1835
1859
True
1836
1859
arith_expr
1837
1859
xor_expr
1838
1859
False
1839
1859
{
1840
1859
+
1841
1859
and_expr
1842
1859
[
1843
1859
(
1844
1859
STRING
1845
1859
comparison
1846
1859
shift_expr
1847
1859
power
1849
1859
None
1851
1859
expr
1852
1859
NUMBER
1853
1859
~
1856
1859
not
1859
1859
not_test
2199
1860
=
lambdef -> lambda : test
1860
NEWLINE
lambdef -> lambda : test
1860
,
lambdef -> lambda : test
1861
NAME
859
1861
atom_expr
860
1861
term
861
1861
atom
862
1861
-
863
1861
factor
864
1861
[
865
1861
True
866
1861
arith_expr
867
1861
xor_expr
868
1861
False
869
1861
{
870
1861
+
871
1861
and_expr
872
1861
(
873
1861
STRING
874
1861
comparison
876
1861
shift_expr
877
1861
not_test
878
1861
power
879
1861
lambdef
880
1861
None
881
1861
expr
882
1861
NUMBER
883
1861
and_test
884
1861
or_test
885
1861
~
887
1861
test
2200
1861
lambda
889
1861
not
890
1862
NEWLINE
yield_arg -> from test
1863
>>
power -> atom_expr ** factor
1863
<=
power -> atom_expr ** factor
1863
//
power -> atom_expr ** factor
1863
/
power -> atom_expr ** factor
1863
&
power -> atom_expr ** factor
1863
if
power -> atom_expr ** factor
1863
not
power -> atom_expr ** factor
1863
<
power -> atom_expr ** factor
1863
!=
power -> atom_expr ** factor
1863
>
power -> atom_expr ** factor
1863
*
power -> atom_expr ** factor
1863
|
power -> atom_expr ** factor
1863
==
power -> atom_expr ** factor
1863
is
power -> atom_expr ** factor
1863
and
power -> atom_expr ** factor
1863
<<
power -> atom_expr ** factor
1863
-
power -> atom_expr ** factor
1863
=
power -> atom_expr ** factor
1863
@
power -> atom_expr ** factor
1863
in
power -> atom_expr ** factor
1863
^
power -> atom_expr ** factor
1863
%
power -> atom_expr ** factor
1863
>=
power -> atom_expr ** factor
1863
+
power -> atom_expr ** factor
1863
or
power -> atom_expr ** factor
1864
*
trailer_expr -> trailer trailer_expr
1864
+
trailer_expr -> trailer trailer_expr
1864
if
trailer_expr -> trailer trailer_expr
1864
-
trailer_expr -> trailer trailer_expr
1864
<=
trailer_expr -> trailer trailer_expr
1864
|
trailer_expr -> trailer trailer_expr
1864
@
trailer_expr -> trailer trailer_expr
1864
%
trailer_expr -> trailer trailer_expr
1864
in
trailer_expr -> trailer trailer_expr
1864
<<
trailer_expr -> trailer trailer_expr
1864
**
trailer_expr -> trailer trailer_expr
1864
==
trailer_expr -> trailer trailer_expr
1864
not
trailer_expr -> trailer trailer_expr
1864
and
trailer_expr -> trailer trailer_expr
1864
//
trailer_expr -> trailer trailer_expr
1864
^
trailer_expr -> trailer trailer_expr
1864
or
trailer_expr -> trailer trailer_expr
1864
=
trailer_expr -> trailer trailer_expr
1864
>
trailer_expr -> trailer trailer_expr
1864
!=
trailer_expr -> trailer trailer_expr
1864
is
trailer_expr -> trailer trailer_expr
1864
&
trailer_expr -> trailer trailer_expr
1864
>>
trailer_expr -> trailer trailer_expr
1864
/
trailer_expr -> trailer trailer_expr
1864
<
trailer_expr -> trailer trailer_expr
1864
>=
trailer_expr -> trailer trailer_expr
1865
]
2201
1866
^
trailer -> . NAME
1866
%
trailer -> . NAME
1866
**
trailer -> . NAME
1866
>>
trailer -> . NAME
1866
>
trailer -> . NAME
1866
in
trailer -> . NAME
1866
[
trailer -> . NAME
1866
is
trailer -> . NAME
1866
<<
trailer -> . NAME
1866
or
trailer -> . NAME
1866
and
trailer -> . NAME
1866
>=
trailer -> . NAME
1866
|
trailer -> . NAME
1866
==
trailer -> . NAME
1866
=
trailer -> . NAME
1866
.
trailer -> . NAME
1866
+
trailer -> . NAME
1866
<
trailer -> . NAME
1866
-
trailer -> . NAME
1866
&
trailer -> . NAME
1866
*
trailer -> . NAME
1866
if
trailer -> . NAME
1866
<=
trailer -> . NAME
1866
(
trailer -> . NAME
1866
not
trailer -> . NAME
1866
//
trailer -> . NAME
1866
@
trailer -> . NAME
1866
!=
trailer -> . NAME
1866
/
trailer -> . NAME
1867
)
2202
1868
[
trailer -> ( )
1868
not
trailer -> ( )
1868
==
trailer -> ( )
1868
**
trailer -> ( )
1868
<=
trailer -> ( )
1868
//
trailer -> ( )
1868
<<
trailer -> ( )
1868
<
trailer -> ( )
1868
=
trailer -> ( )
1868
in
trailer -> ( )
1868
or
trailer -> ( )
1868
-
trailer -> ( )
1868
+
trailer -> ( )
1868
&
trailer -> ( )
1868
*
trailer -> ( )
1868
is
trailer -> ( )
1868
>
trailer -> ( )
1868
!=
trailer -> ( )
1868
>>
trailer -> ( )
1868
%
trailer -> ( )
1868
|
trailer -> ( )
1868
.
trailer -> ( )
1868
>=
trailer -> ( )
1868
(
trailer -> ( )
1868
and
trailer -> ( )
1868
@
trailer -> ( )
1868
/
trailer -> ( )
1868
^
trailer -> ( )
1868
if
trailer -> ( )
1869
|
term -> factor % term
1869
<<
term -> factor % term
1869
^
term -> factor % term
1869
==
term -> factor % term
1869
-
term -> factor % term
1869
=
term -> factor % term
1869
is
term -> factor % term
1869
>=
term -> factor % term
1869
>>
term -> factor % term
1869
>
term -> factor % term
1869
in
term -> factor % term
1869
&
term -> factor % term
1869
if
term -> factor % term
1869
<
term -> factor % term
1869
!=
term -> factor % term
1869
<=
term -> factor % term
1869
not
term -> factor % term
1869
+
term -> factor % term
1869
and
term -> factor % term
1869
or
term -> factor % term
1870
>>
term -> factor / term
1870
^
term -> factor / term
1870
or
term -> factor / term
1870
+
term -> factor / term
1870
=
term -> factor / term
1870
if
term -> factor / term
1870
>=
term -> factor / term
1870
>
term -> factor / term
1870
-
term -> factor / term
1870
and
term -> factor / term
1870
not
term -> factor / term
1870
<
term -> factor / term
1870
in
term -> factor / term
1870
==
term -> factor / term
1870
<=
term -> factor / term
1870
is
term -> factor / term
1870
&
term -> factor / term
1870
<<
term -> factor / term
1870
!=
term -> factor / term
1870
|
term -> factor / term
1871
-
term -> factor * term
1871
&
term -> factor * term
1871
and
term -> factor * term
1871
!=
term -> factor * term
1871
|
term -> factor * term
1871
<<
term -> factor * term
1871
<
term -> factor * term
1871
=
term -> factor * term
1871
if
term -> factor * term
1871
^
term -> factor * term
1871
+
term -> factor * term
1871
in
term -> factor * term
1871
or
term -> factor * term
1871
>>
term -> factor * term
1871
not
term -> factor * term
1871
==
term -> factor * term
1871
>=
term -> factor * term
1871
<=
term -> factor * term
1871
>
term -> factor * term
1871
is
term -> factor * term
1872
>>
term -> factor @ term
1872
^
term -> factor @ term
1872
&
term -> factor @ term
1872
|
term -> factor @ term
1872
=
term -> factor @ term
1872
if
term -> factor @ term
1872
is
term -> factor @ term
1872
<
term -> factor @ term
1872
<<
term -> factor @ term
1872
and
term -> factor @ term
1872
==
term -> factor @ term
1872
>
term -> factor @ term
1872
in
term -> factor @ term
1872
>=
term -> factor @ term
1872
+
term -> factor @ term
1872
not
term -> factor @ term
1872
!=
term -> factor @ term
1872
<=
term -> factor @ term
1872
or
term -> factor @ term
1872
-
term -> factor @ term
1873
if
term -> factor // term
1873
<
term -> factor // term
1873
and
term -> factor // term
1873
in
term -> factor // term
1873
>>
term -> factor // term
1873
<=
term -> factor // term
1873
!=
term -> factor // term
1873
^
term -> factor // term
1873
=
term -> factor // term
1873
|
term -> factor // term
1873
or
term -> factor // term
1873
>=
term -> factor // term
1873
&
term -> factor // term
1873
>
term -> factor // term
1873
+
term -> factor // term
1873
is
term -> factor // term
1873
not
term -> factor // term
1873
<<
term -> factor // term
1873
-
term -> factor // term
1873
==
term -> factor // term
1874
<
shift_expr -> arith_expr >> shift_expr
1874
^
shift_expr -> arith_expr >> shift_expr
1874
=
shift_expr -> arith_expr >> shift_expr
1874
in
shift_expr -> arith_expr >> shift_expr
1874
==
shift_expr -> arith_expr >> shift_expr
1874
!=
shift_expr -> arith_expr >> shift_expr
1874
>=
shift_expr -> arith_expr >> shift_expr
1874
not
shift_expr -> arith_expr >> shift_expr
1874
and
shift_expr -> arith_expr >> shift_expr
1874
is
shift_expr -> arith_expr >> shift_expr
1874
&
shift_expr -> arith_expr >> shift_expr
1874
>
shift_expr -> arith_expr >> shift_expr
1874
|
shift_expr -> arith_expr >> shift_expr
1874
<=
shift_expr -> arith_expr >> shift_expr
1874
or
shift_expr -> arith_expr >> shift_expr
1874
if
shift_expr -> arith_expr >> shift_expr
1875
if
shift_expr -> arith_expr << shift_expr
1875
&
shift_expr -> arith_expr << shift_expr
1875
>=
shift_expr -> arith_expr << shift_expr
1875
<=
shift_expr -> arith_expr << shift_expr
1875
or
shift_expr -> arith_expr << shift_expr
1875
in
shift_expr -> arith_expr << shift_expr
1875
!=
shift_expr -> arith_expr << shift_expr
1875
^
shift_expr -> arith_expr << shift_expr
1875
<
shift_expr -> arith_expr << shift_expr
1875
|
shift_expr -> arith_expr << shift_expr
1875
==
shift_expr -> arith_expr << shift_expr
1875
=
shift_expr -> arith_expr << shift_expr
1875
is
shift_expr -> arith_expr << shift_expr
1875
and
shift_expr -> arith_expr << shift_expr
1875
>
shift_expr -> arith_expr << shift_expr
1875
not
shift_expr -> arith_expr << shift_expr
1876
is
expr -> xor_expr | expr
1876
or
expr -> xor_expr | expr
1876
>
expr -> xor_expr | expr
1876
and
expr -> xor_expr | expr
1876
in
expr -> xor_expr | expr
1876
=
expr -> xor_expr | expr
1876
if
expr -> xor_expr | expr
1876
<=
expr -> xor_expr | expr
1876
not
expr -> xor_expr | expr
1876
==
expr -> xor_expr | expr
1876
>=
expr -> xor_expr | expr
1876
<
expr -> xor_expr | expr
1876
!=
expr -> xor_expr | expr
1877
>=
xor_expr -> and_expr ^ xor_expr
1877
>
xor_expr -> and_expr ^ xor_expr
1877
or
xor_expr -> and_expr ^ xor_expr
1877
and
xor_expr -> and_expr ^ xor_expr
1877
<=
xor_expr -> and_expr ^ xor_expr
1877
in
xor_expr -> and_expr ^ xor_expr
1877
==
xor_expr -> and_expr ^ xor_expr
1877
=
xor_expr -> and_expr ^ xor_expr
1877
if
xor_expr -> and_expr ^ xor_expr
1877
!=
xor_expr -> and_expr ^ xor_expr
1877
not
xor_expr -> and_expr ^ xor_expr
1877
<
xor_expr -> and_expr ^ xor_expr
1877
is
xor_expr -> and_expr ^ xor_expr
1877
|
xor_expr -> and_expr ^ xor_expr
1878
<<
atom -> [ test_list_comp ]
1878
>>
atom -> [ test_list_comp ]
1878
+
atom -> [ test_list_comp ]
1878
-
atom -> [ test_list_comp ]
1878
not
atom -> [ test_list_comp ]
1878
<=
atom -> [ test_list_comp ]
1878
is
atom -> [ test_list_comp ]
1878
[
atom -> [ test_list_comp ]
1878
*
atom -> [ test_list_comp ]
1878
==
atom -> [ test_list_comp ]
1878
@
atom -> [ test_list_comp ]
1878
>
atom -> [ test_list_comp ]
1878
=
atom -> [ test_list_comp ]
1878
%
atom -> [ test_list_comp ]
1878
if
atom -> [ test_list_comp ]
1878
>=
atom -> [ test_list_comp ]
1878
//
atom -> [ test_list_comp ]
1878
.
atom -> [ test_list_comp ]
1878
in
atom -> [ test_list_comp ]
1878
**
atom -> [ test_list_comp ]
1878
and
atom -> [ test_list_comp ]
1878
/
atom -> [ test_list_comp ]
1878
or
atom -> [ test_list_comp ]
1878
!=
atom -> [ test_list_comp ]
1878
<
atom -> [ test_list_comp ]
1878
^
atom -> [ test_list_comp ]
1878
&
atom -> [ test_list_comp ]
1878
(
atom -> [ test_list_comp ]
1878
|
atom -> [ test_list_comp ]
1879
@
atom -> ( test_list_comp )
1879
<
atom -> ( test_list_comp )
1879
and
atom -> ( test_list_comp )
1879
if
atom -> ( test_list_comp )
1879
&
atom -> ( test_list_comp )
1879
=
atom -> ( test_list_comp )
1879
*
atom -> ( test_list_comp )
1879
%
atom -> ( test_list_comp )
1879
[
atom -> ( test_list_comp )
1879
//
atom -> ( test_list_comp )
1879
<<
atom -> ( test_list_comp )
1879
.
atom -> ( test_list_comp )
1879
/
atom -> ( test_list_comp )
1879
>=
atom -> ( test_list_comp )
1879
or
atom -> ( test_list_comp )
1879
>
atom -> ( test_list_comp )
1879
-
atom -> ( test_list_comp )
1879
|
atom -> ( test_list_comp )
1879
**
atom -> ( test_list_comp )
1879
is
atom -> ( test_list_comp )
1879
==
atom -> ( test_list_comp )
1879
not
atom -> ( test_list_comp )
1879
in
atom -> ( test_list_comp )
1879
!=
atom -> ( test_list_comp )
1879
^
atom -> ( test_list_comp )
1879
(
atom -> ( test_list_comp )
1879
<=
atom -> ( test_list_comp )
1879
+
atom -> ( test_list_comp )
1879
>>
atom -> ( test_list_comp )
1880
<=
arith_expr -> term + arith_expr
1880
and
arith_expr -> term + arith_expr
1880
==
arith_expr -> term + arith_expr
1880
<
arith_expr -> term + arith_expr
1880
if
arith_expr -> term + arith_expr
1880
not
arith_expr -> term + arith_expr
1880
=
arith_expr -> term + arith_expr
1880
|
arith_expr -> term + arith_expr
1880
>
arith_expr -> term + arith_expr
1880
^
arith_expr -> term + arith_expr
1880
>=
arith_expr -> term + arith_expr
1880
>>
arith_expr -> term + arith_expr
1880
in
arith_expr -> term + arith_expr
1880
!=
arith_expr -> term + arith_expr
1880
is
arith_expr -> term + arith_expr
1880
or
arith_expr -> term + arith_expr
1880
<<
arith_expr -> term + arith_expr
1880
&
arith_expr -> term + arith_expr
1881
>>
arith_expr -> term - arith_expr
1881
&
arith_expr -> term - arith_expr
1881
>=
arith_expr -> term - arith_expr
1881
<<
arith_expr -> term - arith_expr
1881
if
arith_expr -> term - arith_expr
1881
|
arith_expr -> term - arith_expr
1881
^
arith_expr -> term - arith_expr
1881
<
arith_expr -> term - arith_expr
1881
>
arith_expr -> term - arith_expr
1881
!=
arith_expr -> term - arith_expr
1881
not
arith_expr -> term - arith_expr
1881
=
arith_expr -> term - arith_expr
1881
is
arith_expr -> term - arith_expr
1881
==
arith_expr -> term - arith_expr
1881
or
arith_expr -> term - arith_expr
1881
<=
arith_expr -> term - arith_expr
1881
and
arith_expr -> term - arith_expr
1881
in
arith_expr -> term - arith_expr
1882
>=
and_expr -> shift_expr & and_expr
1882
!=
and_expr -> shift_expr & and_expr
1882
or
and_expr -> shift_expr & and_expr
1882
is
and_expr -> shift_expr & and_expr
1882
=
and_expr -> shift_expr & and_expr
1882
^
and_expr -> shift_expr & and_expr
1882
==
and_expr -> shift_expr & and_expr
1882
if
and_expr -> shift_expr & and_expr
1882
not
and_expr -> shift_expr & and_expr
1882
<
and_expr -> shift_expr & and_expr
1882
>
and_expr -> shift_expr & and_expr
1882
in
and_expr -> shift_expr & and_expr
1882
and
and_expr -> shift_expr & and_expr
1882
|
and_expr -> shift_expr & and_expr
1882
<=
and_expr -> shift_expr & and_expr
1883
or
and_test -> not_test and and_test
1883
=
and_test -> not_test and and_test
1883
if
and_test -> not_test and and_test
1884
NEWLINE
annassign -> : test = test
1885
and
comparison -> expr comp_op comparison
1885
=
comparison -> expr comp_op comparison
1885
if
comparison -> expr comp_op comparison
1885
or
comparison -> expr comp_op comparison
1886
else
2203
1887
=
or_test -> and_test or or_test
1887
if
or_test -> and_test or or_test
1888
=
lambdef -> lambda : test
1889
NAME
896
1889
atom_expr
897
1889
atom
898
1889
-
899
1889
factor
900
1889
True
901
1889
arith_expr
902
1889
xor_expr
903
1889
False
904
1889
{
905
1889
+
906
1889
and_expr
907
1889
[
908
1889
(
909
1889
STRING
910
1889
term
911
1889
comparison
912
1889
shift_expr
913
1889
not_test
914
1889
power
915
1889
lambdef
916
1889
None
918
1889
expr
919
1889
NUMBER
920
1889
~
921
1889
or_test
922
1889
test
2204
1889
not
923
1889
and_test
924
1889
lambda
925
1890
:
2205
1891
:
2206
1892
DEDENT
2207
1893
:
test -> or_test if or_test else test
1894
(
trailer -> [ subscriptlist ]
1894
//
trailer -> [ subscriptlist ]
1894
&
trailer -> [ subscriptlist ]
1894
>
trailer -> [ subscriptlist ]
1894
in
trailer -> [ subscriptlist ]
1894
>>
trailer -> [ subscriptlist ]
1894
[
trailer -> [ subscriptlist ]
1894
<=
trailer -> [ subscriptlist ]
1894
-
trailer -> [ subscriptlist ]
1894
!=
trailer -> [ subscriptlist ]
1894
|
trailer -> [ subscriptlist ]
1894
not
trailer -> [ subscriptlist ]
1894
.
trailer -> [ subscriptlist ]
1894
]
trailer -> [ subscriptlist ]
1894
>=
trailer -> [ subscriptlist ]
1894
or
trailer -> [ subscriptlist ]
1894
*
trailer -> [ subscriptlist ]
1894
<<
trailer -> [ subscriptlist ]
1894
**
trailer -> [ subscriptlist ]
1894
==
trailer -> [ subscriptlist ]
1894
+
trailer -> [ subscriptlist ]
1894
is
trailer -> [ subscriptlist ]
1894
/
trailer -> [ subscriptlist ]
1894
^
trailer -> [ subscriptlist ]
1894
and
trailer -> [ subscriptlist ]
1894
,
trailer -> [ subscriptlist ]
1894
@
trailer -> [ subscriptlist ]
1894
if
trailer -> [ subscriptlist ]
1894
<
trailer -> [ subscriptlist ]
1894
%
trailer -> [ subscriptlist ]
1894
:
trailer -> [ subscriptlist ]
1895
or
trailer -> ( arglist )
1895
>>
trailer -> ( arglist )
1895
<=
trailer -> ( arglist )
1895
**
trailer -> ( arglist )
1895
<
trailer -> ( arglist )
1895
(
trailer -> ( arglist )
1895
-
trailer -> ( arglist )
1895
not
trailer -> ( arglist )
1895
if
trailer -> ( arglist )
1895
and
trailer -> ( arglist )
1895
.
trailer -> ( arglist )
1895
is
trailer -> ( arglist )
1895
>
trailer -> ( arglist )
1895
in
trailer -> ( arglist )
1895
!=
trailer -> ( arglist )
1895
,
trailer -> ( arglist )
1895
==
trailer -> ( arglist )
1895
%
trailer -> ( arglist )
1895
@
trailer -> ( arglist )
1895
^
trailer -> ( arglist )
1895
<<
trailer -> ( arglist )
1895
*
trailer -> ( arglist )
1895
//
trailer -> ( arglist )
1895
:
trailer -> ( arglist )
1895
&
trailer -> ( arglist )
1895
|
trailer -> ( arglist )
1895
>=
trailer -> ( arglist )
1895
+
trailer -> ( arglist )
1895
]
trailer -> ( arglist )
1895
/
trailer -> ( arglist )
1895
[
trailer -> ( arglist )
1896
NAME
461
1896
atom_expr
462
1896
term
463
1896
atom
464
1896
-
465
1896
factor
466
1896
[
467
1896
True
468
1896
arith_expr
469
1896
False
470
1896
{
471
1896
(
472
1896
+
473
1896
and_expr
474
1896
and_test
475
1896
STRING
476
1896
comparison
478
1896
shift_expr
479
1896
not_test
480
1896
power
481
1896
None
482
1896
xor_expr
483
1896
expr
484
1896
NUMBER
485
1896
~
487
1896
or_test
488
1896
not
489
1896
lambdef
490
1896
test
2208
1896
lambda
491
1897
:
lambdef -> lambda varargslist : test
1897
,
lambdef -> lambda varargslist : test
1897
]
lambdef -> lambda varargslist : test
1898
NAME
1169
1898
atom_expr
1170
1898
atom
1171
1898
-
1172
1898
factor
1173
1898
[
1174
1898
True
1175
1898
arith_expr
1176
1898
False
1177
1898
{
1178
1898
+
1179
1898
and_expr
1180
1898
(
1181
1898
STRING
1182
1898
term
1183
1898
and_test
1184
1898
comparison
1185
1898
]
maybe_test -> 
1898
shift_expr
1186
1898
not_test
1187
1898
power
1188
1898
None
1189
1898
xor_expr
1190
1898
expr
1191
1898
NUMBER
1192
1898
maybe_test
2209
1898
~
1193
1898
or_test
1194
1898
not
1195
1898
lambdef
1196
1898
test
2210
1898
,
maybe_test -> 
1898
lambda
1199
1899
,
subscript -> maybe_test : maybe_test sliceop
1899
]
subscript -> maybe_test : maybe_test sliceop
1900
(
trailer -> [ subscriptlist ]
1900
for
trailer -> [ subscriptlist ]
1900
//
trailer -> [ subscriptlist ]
1900
&
trailer -> [ subscriptlist ]
1900
>
trailer -> [ subscriptlist ]
1900
in
trailer -> [ subscriptlist ]
1900
>>
trailer -> [ subscriptlist ]
1900
[
trailer -> [ subscriptlist ]
1900
<=
trailer -> [ subscriptlist ]
1900
-
trailer -> [ subscriptlist ]
1900
)
trailer -> [ subscriptlist ]
1900
!=
trailer -> [ subscriptlist ]
1900
|
trailer -> [ subscriptlist ]
1900
=
trailer -> [ subscriptlist ]
1900
not
trailer -> [ subscriptlist ]
1900
.
trailer -> [ subscriptlist ]
1900
>=
trailer -> [ subscriptlist ]
1900
or
trailer -> [ subscriptlist ]
1900
*
trailer -> [ subscriptlist ]
1900
<<
trailer -> [ subscriptlist ]
1900
**
trailer -> [ subscriptlist ]
1900
==
trailer -> [ subscriptlist ]
1900
+
trailer -> [ subscriptlist ]
1900
is
trailer -> [ subscriptlist ]
1900
/
trailer -> [ subscriptlist ]
1900
^
trailer -> [ subscriptlist ]
1900
and
trailer -> [ subscriptlist ]
1900
,
trailer -> [ subscriptlist ]
1900
@
trailer -> [ subscriptlist ]
1900
if
trailer -> [ subscriptlist ]
1900
<
trailer -> [ subscriptlist ]
1900
%
trailer -> [ subscriptlist ]
1901
or
trailer -> ( arglist )
1901
>>
trailer -> ( arglist )
1901
<=
trailer -> ( arglist )
1901
**
trailer -> ( arglist )
1901
<
trailer -> ( arglist )
1901
(
trailer -> ( arglist )
1901
-
trailer -> ( arglist )
1901
not
trailer -> ( arglist )
1901
if
trailer -> ( arglist )
1901
and
trailer -> ( arglist )
1901
.
trailer -> ( arglist )
1901
is
trailer -> ( arglist )
1901
)
trailer -> ( arglist )
1901
>
trailer -> ( arglist )
1901
in
trailer -> ( arglist )
1901
!=
trailer -> ( arglist )
1901
,
trailer -> ( arglist )
1901
==
trailer -> ( arglist )
1901
%
trailer -> ( arglist )
1901
@
trailer -> ( arglist )
1901
^
trailer -> ( arglist )
1901
<<
trailer -> ( arglist )
1901
for
trailer -> ( arglist )
1901
*
trailer -> ( arglist )
1901
//
trailer -> ( arglist )
1901
&
trailer -> ( arglist )
1901
|
trailer -> ( arglist )
1901
>=
trailer -> ( arglist )
1901
+
trailer -> ( arglist )
1901
/
trailer -> ( arglist )
1901
=
trailer -> ( arglist )
1901
[
trailer -> ( arglist )
1902
>>
power -> atom_expr ** factor
1902
<=
power -> atom_expr ** factor
1902
//
power -> atom_expr ** factor
1902
/
power -> atom_expr ** factor
1902
&
power -> atom_expr ** factor
1902
if
power -> atom_expr ** factor
1902
not
power -> atom_expr ** factor
1902
<
power -> atom_expr ** factor
1902
!=
power -> atom_expr ** factor
1902
,
power -> atom_expr ** factor
1902
>
power -> atom_expr ** factor
1902
*
power -> atom_expr ** factor
1902
==
power -> atom_expr ** factor
1902
|
power -> atom_expr ** factor
1902
is
power -> atom_expr ** factor
1902
and
power -> atom_expr ** factor
1902
<<
power -> atom_expr ** factor
1902
-
power -> atom_expr ** factor
1902
)
power -> atom_expr ** factor
1902
@
power -> atom_expr ** factor
1902
in
power -> atom_expr ** factor
1902
^
power -> atom_expr ** factor
1902
%
power -> atom_expr ** factor
1902
>=
power -> atom_expr ** factor
1902
+
power -> atom_expr ** factor
1902
or
power -> atom_expr ** factor
1903
*
trailer_expr -> trailer trailer_expr
1903
+
trailer_expr -> trailer trailer_expr
1903
if
trailer_expr -> trailer trailer_expr
1903
-
trailer_expr -> trailer trailer_expr
1903
<=
trailer_expr -> trailer trailer_expr
1903
|
trailer_expr -> trailer trailer_expr
1903
@
trailer_expr -> trailer trailer_expr
1903
%
trailer_expr -> trailer trailer_expr
1903
in
trailer_expr -> trailer trailer_expr
1903
<<
trailer_expr -> trailer trailer_expr
1903
**
trailer_expr -> trailer trailer_expr
1903
==
trailer_expr -> trailer trailer_expr
1903
not
trailer_expr -> trailer trailer_expr
1903
,
trailer_expr -> trailer trailer_expr
1903
and
trailer_expr -> trailer trailer_expr
1903
//
trailer_expr -> trailer trailer_expr
1903
^
trailer_expr -> trailer trailer_expr
1903
or
trailer_expr -> trailer trailer_expr
1903
>
trailer_expr -> trailer trailer_expr
1903
!=
trailer_expr -> trailer trailer_expr
1903
is
trailer_expr -> trailer trailer_expr
1903
&
trailer_expr -> trailer trailer_expr
1903
>>
trailer_expr -> trailer trailer_expr
1903
/
trailer_expr -> trailer trailer_expr
1903
)
trailer_expr -> trailer trailer_expr
1903
<
trailer_expr -> trailer trailer_expr
1903
>=
trailer_expr -> trailer trailer_expr
1904
]
2211
1905
^
trailer -> . NAME
1905
%
trailer -> . NAME
1905
**
trailer -> . NAME
1905
>>
trailer -> . NAME
1905
>
trailer -> . NAME
1905
in
trailer -> . NAME
1905
[
trailer -> . NAME
1905
is
trailer -> . NAME
1905
,
trailer -> . NAME
1905
<<
trailer -> . NAME
1905
or
trailer -> . NAME
1905
and
trailer -> . NAME
1905
>=
trailer -> . NAME
1905
|
trailer -> . NAME
1905
==
trailer -> . NAME
1905
)
trailer -> . NAME
1905
.
trailer -> . NAME
1905
+
trailer -> . NAME
1905
<
trailer -> . NAME
1905
-
trailer -> . NAME
1905
&
trailer -> . NAME
1905
*
trailer -> . NAME
1905
if
trailer -> . NAME
1905
<=
trailer -> . NAME
1905
(
trailer -> . NAME
1905
not
trailer -> . NAME
1905
//
trailer -> . NAME
1905
@
trailer -> . NAME
1905
!=
trailer -> . NAME
1905
/
trailer -> . NAME
1906
)
2212
1907
[
trailer -> ( )
1907
not
trailer -> ( )
1907
==
trailer -> ( )
1907
**
trailer -> ( )
1907
,
trailer -> ( )
1907
<=
trailer -> ( )
1907
//
trailer -> ( )
1907
<<
trailer -> ( )
1907
<
trailer -> ( )
1907
in
trailer -> ( )
1907
or
trailer -> ( )
1907
-
trailer -> ( )
1907
+
trailer -> ( )
1907
&
trailer -> ( )
1907
*
trailer -> ( )
1907
is
trailer -> ( )
1907
>
trailer -> ( )
1907
!=
trailer -> ( )
1907
>>
trailer -> ( )
1907
%
trailer -> ( )
1907
|
trailer -> ( )
1907
)
trailer -> ( )
1907
.
trailer -> ( )
1907
>=
trailer -> ( )
1907
(
trailer -> ( )
1907
and
trailer -> ( )
1907
@
trailer -> ( )
1907
/
trailer -> ( )
1907
^
trailer -> ( )
1907
if
trailer -> ( )
1908
|
term -> factor % term
1908
<<
term -> factor % term
1908
^
term -> factor % term
1908
==
term -> factor % term
1908
-
term -> factor % term
1908
,
term -> factor % term
1908
is
term -> factor % term
1908
>=
term -> factor % term
1908
>>
term -> factor % term
1908
>
term -> factor % term
1908
in
term -> factor % term
1908
)
term -> factor % term
1908
&
term -> factor % term
1908
if
term -> factor % term
1908
<
term -> factor % term
1908
!=
term -> factor % term
1908
<=
term -> factor % term
1908
not
term -> factor % term
1908
+
term -> factor % term
1908
and
term -> factor % term
1908
or
term -> factor % term
1909
,
term -> factor / term
1909
>>
term -> factor / term
1909
^
term -> factor / term
1909
or
term -> factor / term
1909
+
term -> factor / term
1909
if
term -> factor / term
1909
>=
term -> factor / term
1909
>
term -> factor / term
1909
-
term -> factor / term
1909
and
term -> factor / term
1909
)
term -> factor / term
1909
not
term -> factor / term
1909
<
term -> factor / term
1909
in
term -> factor / term
1909
==
term -> factor / term
1909
<=
term -> factor / term
1909
is
term -> factor / term
1909
&
term -> factor / term
1909
<<
term -> factor / term
1909
!=
term -> factor / term
1909
|
term -> factor / term
1910
-
term -> factor * term
1910
&
term -> factor * term
1910
and
term -> factor * term
1910
,
term -> factor * term
1910
!=
term -> factor * term
1910
|
term -> factor * term
1910
<<
term -> factor * term
1910
<
term -> factor * term
1910
if
term -> factor * term
1910
^
term -> factor * term
1910
+
term -> factor * term
1910
in
term -> factor * term
1910
or
term -> factor * term
1910
>>
term -> factor * term
1910
not
term -> factor * term
1910
)
term -> factor * term
1910
==
term -> factor * term
1910
>=
term -> factor * term
1910
<=
term -> factor * term
1910
>
term -> factor * term
1910
is
term -> factor * term
1911
if
term -> factor // term
1911
<
term -> factor // term
1911
and
term -> factor // term
1911
in
term -> factor // term
1911
,
term -> factor // term
1911
>>
term -> factor // term
1911
)
term -> factor // term
1911
<=
term -> factor // term
1911
!=
term -> factor // term
1911
^
term -> factor // term
1911
|
term -> factor // term
1911
or
term -> factor // term
1911
>=
term -> factor // term
1911
&
term -> factor // term
1911
>
term -> factor // term
1911
+
term -> factor // term
1911
is
term -> factor // term
1911
not
term -> factor // term
1911
<<
term -> factor // term
1911
-
term -> factor // term
1911
==
term -> factor // term
1912
>>
term -> factor @ term
1912
^
term -> factor @ term
1912
&
term -> factor @ term
1912
|
term -> factor @ term
1912
if
term -> factor @ term
1912
is
term -> factor @ term
1912
)
term -> factor @ term
1912
<
term -> factor @ term
1912
<<
term -> factor @ term
1912
and
term -> factor @ term
1912
==
term -> factor @ term
1912
>
term -> factor @ term
1912
in
term -> factor @ term
1912
,
term -> factor @ term
1912
>=
term -> factor @ term
1912
+
term -> factor @ term
1912
not
term -> factor @ term
1912
!=
term -> factor @ term
1912
<=
term -> factor @ term
1912
or
term -> factor @ term
1912
-
term -> factor @ term
1913
<<
atom -> [ test_list_comp ]
1913
,
atom -> [ test_list_comp ]
1913
>>
atom -> [ test_list_comp ]
1913
+
atom -> [ test_list_comp ]
1913
-
atom -> [ test_list_comp ]
1913
not
atom -> [ test_list_comp ]
1913
<=
atom -> [ test_list_comp ]
1913
is
atom -> [ test_list_comp ]
1913
[
atom -> [ test_list_comp ]
1913
*
atom -> [ test_list_comp ]
1913
==
atom -> [ test_list_comp ]
1913
@
atom -> [ test_list_comp ]
1913
)
atom -> [ test_list_comp ]
1913
>
atom -> [ test_list_comp ]
1913
%
atom -> [ test_list_comp ]
1913
if
atom -> [ test_list_comp ]
1913
>=
atom -> [ test_list_comp ]
1913
//
atom -> [ test_list_comp ]
1913
.
atom -> [ test_list_comp ]
1913
in
atom -> [ test_list_comp ]
1913
**
atom -> [ test_list_comp ]
1913
and
atom -> [ test_list_comp ]
1913
/
atom -> [ test_list_comp ]
1913
or
atom -> [ test_list_comp ]
1913
!=
atom -> [ test_list_comp ]
1913
<
atom -> [ test_list_comp ]
1913
^
atom -> [ test_list_comp ]
1913
&
atom -> [ test_list_comp ]
1913
(
atom -> [ test_list_comp ]
1913
|
atom -> [ test_list_comp ]
1914
)
shift_expr -> arith_expr >> shift_expr
1914
<
shift_expr -> arith_expr >> shift_expr
1914
^
shift_expr -> arith_expr >> shift_expr
1914
in
shift_expr -> arith_expr >> shift_expr
1914
==
shift_expr -> arith_expr >> shift_expr
1914
!=
shift_expr -> arith_expr >> shift_expr
1914
>=
shift_expr -> arith_expr >> shift_expr
1914
not
shift_expr -> arith_expr >> shift_expr
1914
and
shift_expr -> arith_expr >> shift_expr
1914
is
shift_expr -> arith_expr >> shift_expr
1914
,
shift_expr -> arith_expr >> shift_expr
1914
&
shift_expr -> arith_expr >> shift_expr
1914
>
shift_expr -> arith_expr >> shift_expr
1914
|
shift_expr -> arith_expr >> shift_expr
1914
<=
shift_expr -> arith_expr >> shift_expr
1914
or
shift_expr -> arith_expr >> shift_expr
1914
if
shift_expr -> arith_expr >> shift_expr
1915
,
shift_expr -> arith_expr << shift_expr
1915
if
shift_expr -> arith_expr << shift_expr
1915
&
shift_expr -> arith_expr << shift_expr
1915
>=
shift_expr -> arith_expr << shift_expr
1915
<=
shift_expr -> arith_expr << shift_expr
1915
or
shift_expr -> arith_expr << shift_expr
1915
in
shift_expr -> arith_expr << shift_expr
1915
!=
shift_expr -> arith_expr << shift_expr
1915
^
shift_expr -> arith_expr << shift_expr
1915
<
shift_expr -> arith_expr << shift_expr
1915
|
shift_expr -> arith_expr << shift_expr
1915
==
shift_expr -> arith_expr << shift_expr
1915
not
shift_expr -> arith_expr << shift_expr
1915
is
shift_expr -> arith_expr << shift_expr
1915
and
shift_expr -> arith_expr << shift_expr
1915
>
shift_expr -> arith_expr << shift_expr
1915
)
shift_expr -> arith_expr << shift_expr
1916
>=
xor_expr -> and_expr ^ xor_expr
1916
>
xor_expr -> and_expr ^ xor_expr
1916
or
xor_expr -> and_expr ^ xor_expr
1916
and
xor_expr -> and_expr ^ xor_expr
1916
<=
xor_expr -> and_expr ^ xor_expr
1916
in
xor_expr -> and_expr ^ xor_expr
1916
==
xor_expr -> and_expr ^ xor_expr
1916
)
xor_expr -> and_expr ^ xor_expr
1916
if
xor_expr -> and_expr ^ xor_expr
1916
,
xor_expr -> and_expr ^ xor_expr
1916
!=
xor_expr -> and_expr ^ xor_expr
1916
not
xor_expr -> and_expr ^ xor_expr
1916
<
xor_expr -> and_expr ^ xor_expr
1916
is
xor_expr -> and_expr ^ xor_expr
1916
|
xor_expr -> and_expr ^ xor_expr
1917
@
atom -> ( test_list_comp )
1917
<
atom -> ( test_list_comp )
1917
and
atom -> ( test_list_comp )
1917
)
atom -> ( test_list_comp )
1917
if
atom -> ( test_list_comp )
1917
&
atom -> ( test_list_comp )
1917
*
atom -> ( test_list_comp )
1917
%
atom -> ( test_list_comp )
1917
[
atom -> ( test_list_comp )
1917
//
atom -> ( test_list_comp )
1917
<<
atom -> ( test_list_comp )
1917
.
atom -> ( test_list_comp )
1917
/
atom -> ( test_list_comp )
1917
>=
atom -> ( test_list_comp )
1917
or
atom -> ( test_list_comp )
1917
>
atom -> ( test_list_comp )
1917
-
atom -> ( test_list_comp )
1917
|
atom -> ( test_list_comp )
1917
**
atom -> ( test_list_comp )
1917
is
atom -> ( test_list_comp )
1917
==
atom -> ( test_list_comp )
1917
not
atom -> ( test_list_comp )
1917
in
atom -> ( test_list_comp )
1917
!=
atom -> ( test_list_comp )
1917
^
atom -> ( test_list_comp )
1917
,
atom -> ( test_list_comp )
1917
(
atom -> ( test_list_comp )
1917
<=
atom -> ( test_list_comp )
1917
+
atom -> ( test_list_comp )
1917
>>
atom -> ( test_list_comp )
1918
and
arith_expr -> term + arith_expr
1918
<
arith_expr -> term + arith_expr
1918
|
arith_expr -> term + arith_expr
1918
>=
arith_expr -> term + arith_expr
1918
>>
arith_expr -> term + arith_expr
1918
,
arith_expr -> term + arith_expr
1918
if
arith_expr -> term + arith_expr
1918
>
arith_expr -> term + arith_expr
1918
in
arith_expr -> term + arith_expr
1918
or
arith_expr -> term + arith_expr
1918
<=
arith_expr -> term + arith_expr
1918
)
arith_expr -> term + arith_expr
1918
not
arith_expr -> term + arith_expr
1918
^
arith_expr -> term + arith_expr
1918
!=
arith_expr -> term + arith_expr
1918
&
arith_expr -> term + arith_expr
1918
==
arith_expr -> term + arith_expr
1918
<<
arith_expr -> term + arith_expr
1918
is
arith_expr -> term + arith_expr
1919
<<
arith_expr -> term - arith_expr
1919
if
arith_expr -> term - arith_expr
1919
<
arith_expr -> term - arith_expr
1919
<=
arith_expr -> term - arith_expr
1919
and
arith_expr -> term - arith_expr
1919
in
arith_expr -> term - arith_expr
1919
&
arith_expr -> term - arith_expr
1919
|
arith_expr -> term - arith_expr
1919
==
arith_expr -> term - arith_expr
1919
is
arith_expr -> term - arith_expr
1919
)
arith_expr -> term - arith_expr
1919
>>
arith_expr -> term - arith_expr
1919
!=
arith_expr -> term - arith_expr
1919
>
arith_expr -> term - arith_expr
1919
or
arith_expr -> term - arith_expr
1919
,
arith_expr -> term - arith_expr
1919
>=
arith_expr -> term - arith_expr
1919
^
arith_expr -> term - arith_expr
1919
not
arith_expr -> term - arith_expr
1920
,
and_expr -> shift_expr & and_expr
1920
>=
and_expr -> shift_expr & and_expr
1920
!=
and_expr -> shift_expr & and_expr
1920
or
and_expr -> shift_expr & and_expr
1920
is
and_expr -> shift_expr & and_expr
1920
^
and_expr -> shift_expr & and_expr
1920
if
and_expr -> shift_expr & and_expr
1920
==
and_expr -> shift_expr & and_expr
1920
not
and_expr -> shift_expr & and_expr
1920
<
and_expr -> shift_expr & and_expr
1920
)
and_expr -> shift_expr & and_expr
1920
>
and_expr -> shift_expr & and_expr
1920
in
and_expr -> shift_expr & and_expr
1920
and
and_expr -> shift_expr & and_expr
1920
|
and_expr -> shift_expr & and_expr
1920
<=
and_expr -> shift_expr & and_expr
1921
or
and_test -> not_test and and_test
1921
if
and_test -> not_test and and_test
1921
)
and_test -> not_test and and_test
1921
,
and_test -> not_test and and_test
1922
else
2213
1923
NAME
1005
1923
atom_expr
1006
1923
atom
1007
1923
-
1008
1923
factor
1009
1923
[
1010
1923
True
1011
1923
arith_expr
1012
1923
False
1013
1923
{
1014
1923
+
1015
1923
and_expr
1016
1923
(
1017
1923
STRING
1018
1923
power
1019
1923
term
1020
1923
comparison
1021
1923
shift_expr
1022
1923
not_test
1023
1923
or_test
1024
1923
lambda
1025
1923
None
1026
1923
xor_expr
1027
1923
expr
1028
1923
NUMBER
1029
1923
and_test
1030
1923
~
1031
1923
test
2214
1923
lambdef
1033
1923
not
1034
1924
,
lambdef -> lambda : test
1924
)
lambdef -> lambda : test
1925
is
expr -> xor_expr | expr
1925
)
expr -> xor_expr | expr
1925
or
expr -> xor_expr | expr
1925
>
expr -> xor_expr | expr
1925
and
expr -> xor_expr | expr
1925
,
expr -> xor_expr | expr
1925
in
expr -> xor_expr | expr
1925
if
expr -> xor_expr | expr
1925
<=
expr -> xor_expr | expr
1925
not
expr -> xor_expr | expr
1925
==
expr -> xor_expr | expr
1925
>=
expr -> xor_expr | expr
1925
<
expr -> xor_expr | expr
1925
!=
expr -> xor_expr | expr
1926
)
comparison -> expr comp_op comparison
1926
,
comparison -> expr comp_op comparison
1926
and
comparison -> expr comp_op comparison
1926
if
comparison -> expr comp_op comparison
1926
or
comparison -> expr comp_op comparison
1927
)
or_test -> and_test or or_test
1927
,
or_test -> and_test or or_test
1927
if
or_test -> and_test or or_test
1928
NAME
496
1928
atom_expr
497
1928
atom
498
1928
-
499
1928
factor
501
1928
[
503
1928
True
504
1928
arith_expr
505
1928
xor_expr
506
1928
False
507
1928
{
509
1928
+
510
1928
and_expr
512
1928
(
513
1928
STRING
514
1928
power
515
1928
term
516
1928
comparison
517
1928
shift_expr
518
1928
not_test
520
1928
or_test
521
1928
lambdef
522
1928
lambda
523
1928
None
524
1928
expr
526
1928
NUMBER
527
1928
and_test
528
1928
~
529
1928
not
530
1928
test
2215
1929
for
lambdef -> lambda varargslist : test
1929
,
lambdef -> lambda varargslist : test
1929
=
lambdef -> lambda varargslist : test
1929
)
lambdef -> lambda varargslist : test
1930
NAME
131
1930
atom_expr
132
1930
atom
133
1930
-
134
1930
factor
136
1930
[
137
1930
True
138
1930
arith_expr
139
1930
False
140
1930
{
141
1930
+
142
1930
and_expr
143
1930
(
144
1930
STRING
145
1930
power
147
1930
term
148
1930
comparison
149
1930
shift_expr
150
1930
not_test
152
1930
or_test
2216
1930
None
155
1930
xor_expr
156
1930
expr
157
1930
NUMBER
158
1930
and_test
159
1930
~
160
1930
not
162
1931
DEDENT
2217
1932
NAME
300
1932
atom_expr
301
1932
term
302
1932
atom
303
1932
-
304
1932
factor
305
1932
True
306
1932
arith_expr
307
1932
False
308
1932
{
309
1932
+
310
1932
and_expr
311
1932
[
312
1932
(
313
1932
STRING
314
1932
comparison
315
1932
shift_expr
316
1932
not_test
317
1932
power
318
1932
None
319
1932
xor_expr
320
1932
expr
321
1932
NUMBER
322
1932
and_test
323
1932
or_test
324
1932
~
325
1932
test
2218
1932
lambda
326
1932
lambdef
327
1932
not
328
1933
.
atom -> NAME
1933
<
atom -> NAME
1933
|
atom -> NAME
1933
not
atom -> NAME
1933
[
atom -> NAME
1933
+
atom -> NAME
1933
%
atom -> NAME
1933
for
atom -> NAME
1933
)
atom -> NAME
1933
<=
atom -> NAME
1933
*
atom -> NAME
1933
!=
atom -> NAME
1933
in
atom -> NAME
1933
if
atom -> NAME
1933
is
atom -> NAME
1933
(
atom -> NAME
1933
^
atom -> NAME
1933
@
atom -> NAME
1933
&
atom -> NAME
1933
>>
atom -> NAME
1933
<<
atom -> NAME
1933
-
atom -> NAME
1933
/
atom -> NAME
1933
or
atom -> NAME
1933
//
atom -> NAME
1933
>=
atom -> NAME
1933
and
atom -> NAME
1933
>
atom -> NAME
1933
==
atom -> NAME
1933
**
atom -> NAME
1934
**
2219
1934
)
power -> atom_expr
1934
and
power -> atom_expr
1934
^
power -> atom_expr
1934
or
power -> atom_expr
1934
>>
power -> atom_expr
1934
if
power -> atom_expr
1934
<
power -> atom_expr
1934
>=
power -> atom_expr
1934
for
power -> atom_expr
1934
!=
power -> atom_expr
1934
is
power -> atom_expr
1934
<=
power -> atom_expr
1934
not
power -> atom_expr
1934
//
power -> atom_expr
1934
+
power -> atom_expr
1934
==
power -> atom_expr
1934
|
power -> atom_expr
1934
-
power -> atom_expr
1934
&
power -> atom_expr
1934
/
power -> atom_expr
1934
@
power -> atom_expr
1934
<<
power -> atom_expr
1934
%
power -> atom_expr
1934
*
power -> atom_expr
1934
in
power -> atom_expr
1934
>
power -> atom_expr
1935
trailer
2220
1935
trailer_expr
2221
1935
[
2222
1935
.
2223
1935
or
trailer_expr -> 
1935
(
2224
1935
not
trailer_expr -> 
1935
in
trailer_expr -> 
1935
is
trailer_expr -> 
1935
>=
trailer_expr -> 
1935
-
trailer_expr -> 
1935
@
trailer_expr -> 
1935
<=
trailer_expr -> 
1935
)
trailer_expr -> 
1935
^
trailer_expr -> 
1935
*
trailer_expr -> 
1935
for
trailer_expr -> 
1935
if
trailer_expr -> 
1935
**
trailer_expr -> 
1935
>
trailer_expr -> 
1935
==
trailer_expr -> 
1935
>>
trailer_expr -> 
1935
<<
trailer_expr -> 
1935
/
trailer_expr -> 
1935
//
trailer_expr -> 
1935
!=
trailer_expr -> 
1935
<
trailer_expr -> 
1935
&
trailer_expr -> 
1935
|
trailer_expr -> 
1935
and
trailer_expr -> 
1935
+
trailer_expr -> 
1935
%
trailer_expr -> 
1936
NAME
1933
1936
atom_expr
1934
1936
atom
1935
1936
-
1936
1936
factor
2225
1936
True
1938
1936
False
1940
1936
{
1941
1936
+
1942
1936
[
1944
1936
(
1945
1936
STRING
1946
1936
power
1947
1936
None
1953
1936
NUMBER
1956
1936
~
1958
1937
%
2226
1937
/
2227
1937
*
2228
1937
//
2229
1937
@
2230
1937
not
term -> factor
1937
<<
term -> factor
1937
or
term -> factor
1937
^
term -> factor
1937
in
term -> factor
1937
if
term -> factor
1937
and
term -> factor
1937
<=
term -> factor
1937
&
term -> factor
1937
>>
term -> factor
1937
>
term -> factor
1937
|
term -> factor
1937
<
term -> factor
1937
is
term -> factor
1937
!=
term -> factor
1937
>=
term -> factor
1937
==
term -> factor
1937
-
term -> factor
1937
+
term -> factor
1937
)
term -> factor
1937
for
term -> factor
1938
!=
atom -> True
1938
&
atom -> True
1938
+
atom -> True
1938
<<
atom -> True
1938
@
atom -> True
1938
if
atom -> True
1938
and
atom -> True
1938
is
atom -> True
1938
|
atom -> True
1938
<
atom -> True
1938
>=
atom -> True
1938
or
atom -> True
1938
==
atom -> True
1938
%
atom -> True
1938
for
atom -> True
1938
>
atom -> True
1938
*
atom -> True
1938
[
atom -> True
1938
)
atom -> True
1938
//
atom -> True
1938
/
atom -> True
1938
in
atom -> True
1938
-
atom -> True
1938
^
atom -> True
1938
<=
atom -> True
1938
(
atom -> True
1938
**
atom -> True
1938
.
atom -> True
1938
not
atom -> True
1938
>>
atom -> True
1939
or
shift_expr -> arith_expr
1939
>>
2231
1939
<<
2232
1939
)
shift_expr -> arith_expr
1939
^
shift_expr -> arith_expr
1939
in
shift_expr -> arith_expr
1939
<=
shift_expr -> arith_expr
1939
>=
shift_expr -> arith_expr
1939
&
shift_expr -> arith_expr
1939
==
shift_expr -> arith_expr
1939
for
shift_expr -> arith_expr
1939
not
shift_expr -> arith_expr
1939
and
shift_expr -> arith_expr
1939
>
shift_expr -> arith_expr
1939
!=
shift_expr -> arith_expr
1939
if
shift_expr -> arith_expr
1939
|
shift_expr -> arith_expr
1939
<
shift_expr -> arith_expr
1939
is
shift_expr -> arith_expr
1940
not
atom -> False
1940
==
atom -> False
1940
)
atom -> False
1940
*
atom -> False
1940
>
atom -> False
1940
[
atom -> False
1940
if
atom -> False
1940
@
atom -> False
1940
&
atom -> False
1940
is
atom -> False
1940
.
atom -> False
1940
+
atom -> False
1940
%
atom -> False
1940
>=
atom -> False
1940
and
atom -> False
1940
(
atom -> False
1940
|
atom -> False
1940
-
atom -> False
1940
/
atom -> False
1940
in
atom -> False
1940
<<
atom -> False
1940
<=
atom -> False
1940
^
atom -> False
1940
//
atom -> False
1940
>>
atom -> False
1940
!=
atom -> False
1940
**
atom -> False
1940
for
atom -> False
1940
or
atom -> False
1940
<
atom -> False
1941
}
2233
1942
NAME
1933
1942
atom_expr
1934
1942
atom
1935
1942
-
1936
1942
True
1938
1942
False
1940
1942
{
1941
1942
+
1942
1942
[
1944
1942
(
1945
1942
STRING
1946
1942
power
1947
1942
factor
2234
1942
None
1953
1942
NUMBER
1956
1942
~
1958
1943
^
2235
1943
<
xor_expr -> and_expr
1943
<=
xor_expr -> and_expr
1943
|
xor_expr -> and_expr
1943
not
xor_expr -> and_expr
1943
and
xor_expr -> and_expr
1943
)
xor_expr -> and_expr
1943
for
xor_expr -> and_expr
1943
!=
xor_expr -> and_expr
1943
or
xor_expr -> and_expr
1943
>
xor_expr -> and_expr
1943
>=
xor_expr -> and_expr
1943
==
xor_expr -> and_expr
1943
in
xor_expr -> and_expr
1943
is
xor_expr -> and_expr
1943
if
xor_expr -> and_expr
1944
NAME
187
1944
atom_expr
188
1944
atom
189
1944
-
190
1944
factor
191
1944
test_list_comp
2236
1944
[
193
1944
True
194
1944
arith_expr
195
1944
False
196
1944
{
197
1944
+
198
1944
and_expr
199
1944
(
200
1944
STRING
201
1944
]
2237
1944
term
203
1944
and_test
204
1944
comparison
205
1944
shift_expr
206
1944
not_test
207
1944
power
208
1944
or_test
209
1944
None
210
1944
xor_expr
211
1944
expr
212
1944
NUMBER
213
1944
lambda
214
1944
~
215
1944
lambdef
216
1944
not
217
1944
test
218
1944
test_list
219
1945
NAME
131
1945
atom_expr
132
1945
atom
133
1945
-
134
1945
factor
136
1945
)
2238
1945
[
137
1945
True
138
1945
arith_expr
139
1945
False
140
1945
{
141
1945
+
142
1945
and_expr
143
1945
(
144
1945
STRING
145
1945
test_list_comp
2239
1945
power
147
1945
term
148
1945
comparison
149
1945
shift_expr
150
1945
test
151
1945
not_test
152
1945
or_test
153
1945
lambda
154
1945
None
155
1945
xor_expr
156
1945
expr
157
1945
NUMBER
158
1945
and_test
159
1945
~
160
1945
lambdef
161
1945
not
162
1945
test_list
163
1946
and
atom -> STRING
1946
not
atom -> STRING
1946
.
atom -> STRING
1946
//
atom -> STRING
1946
-
atom -> STRING
1946
*
atom -> STRING
1946
(
atom -> STRING
1946
>=
atom -> STRING
1946
<=
atom -> STRING
1946
<<
atom -> STRING
1946
if
atom -> STRING
1946
+
atom -> STRING
1946
or
atom -> STRING
1946
/
atom -> STRING
1946
@
atom -> STRING
1946
in
atom -> STRING
1946
>>
atom -> STRING
1946
%
atom -> STRING
1946
!=
atom -> STRING
1946
>
atom -> STRING
1946
^
atom -> STRING
1946
<
atom -> STRING
1946
==
atom -> STRING
1946
for
atom -> STRING
1946
**
atom -> STRING
1946
&
atom -> STRING
1946
|
atom -> STRING
1946
is
atom -> STRING
1946
)
atom -> STRING
1946
[
atom -> STRING
1947
<=
factor -> power
1947
is
factor -> power
1947
>
factor -> power
1947
)
factor -> power
1947
==
factor -> power
1947
^
factor -> power
1947
or
factor -> power
1947
-
factor -> power
1947
+
factor -> power
1947
>>
factor -> power
1947
/
factor -> power
1947
*
factor -> power
1947
<<
factor -> power
1947
|
factor -> power
1947
and
factor -> power
1947
<
factor -> power
1947
not
factor -> power
1947
!=
factor -> power
1947
if
factor -> power
1947
&
factor -> power
1947
in
factor -> power
1947
for
factor -> power
1947
%
factor -> power
1947
>=
factor -> power
1947
//
factor -> power
1947
@
factor -> power
1948
+
2240
1948
or
arith_expr -> term
1948
)
arith_expr -> term
1948
==
arith_expr -> term
1948
-
2241
1948
in
arith_expr -> term
1948
<<
arith_expr -> term
1948
>
arith_expr -> term
1948
is
arith_expr -> term
1948
>=
arith_expr -> term
1948
<=
arith_expr -> term
1948
and
arith_expr -> term
1948
>>
arith_expr -> term
1948
for
arith_expr -> term
1948
!=
arith_expr -> term
1948
not
arith_expr -> term
1948
&
arith_expr -> term
1948
if
arith_expr -> term
1948
<
arith_expr -> term
1948
^
arith_expr -> term
1948
|
arith_expr -> term
1949
)
not_test -> comparison
1949
for
not_test -> comparison
1949
or
not_test -> comparison
1949
if
not_test -> comparison
1949
and
not_test -> comparison
1950
==
and_expr -> shift_expr
1950
&
2242
1950
!=
and_expr -> shift_expr
1950
<
and_expr -> shift_expr
1950
<=
and_expr -> shift_expr
1950
and
and_expr -> shift_expr
1950
in
and_expr -> shift_expr
1950
^
and_expr -> shift_expr
1950
for
and_expr -> shift_expr
1950
not
and_expr -> shift_expr
1950
is
and_expr -> shift_expr
1950
if
and_expr -> shift_expr
1950
>
and_expr -> shift_expr
1950
or
and_expr -> shift_expr
1950
>=
and_expr -> shift_expr
1950
)
and_expr -> shift_expr
1950
|
and_expr -> shift_expr
1951
for
and_test -> not_test
1951
and
2243
1951
if
and_test -> not_test
1951
or
and_test -> not_test
1951
)
and_test -> not_test
1952
comp_iter
2244
1952
for
569
1952
comp_if
2245
1952
if
2246
1952
comp_for
2247
1952
)
comp_iter -> 
1953
+
atom -> None
1953
for
atom -> None
1953
>>
atom -> None
1953
/
atom -> None
1953
or
atom -> None
1953
*
atom -> None
1953
in
atom -> None
1953
**
atom -> None
1953
==
atom -> None
1953
-
atom -> None
1953
if
atom -> None
1953
(
atom -> None
1953
@
atom -> None
1953
)
atom -> None
1953
[
atom -> None
1953
>=
atom -> None
1953
^
atom -> None
1953
&
atom -> None
1953
<=
atom -> None
1953
is
atom -> None
1953
.
atom -> None
1953
not
atom -> None
1953
//
atom -> None
1953
<
atom -> None
1953
<<
atom -> None
1953
!=
atom -> None
1953
and
atom -> None
1953
%
atom -> None
1953
|
atom -> None
1953
>
atom -> None
1954
|
2248
1954
>
expr -> xor_expr
1954
<
expr -> xor_expr
1954
and
expr -> xor_expr
1954
>=
expr -> xor_expr
1954
for
expr -> xor_expr
1954
!=
expr -> xor_expr
1954
or
expr -> xor_expr
1954
in
expr -> xor_expr
1954
is
expr -> xor_expr
1954
if
expr -> xor_expr
1954
==
expr -> xor_expr
1954
)
expr -> xor_expr
1954
<=
expr -> xor_expr
1954
not
expr -> xor_expr
1955
==
330
1955
is
331
1955
<=
332
1955
and
comparison -> expr
1955
!=
334
1955
>
335
1955
not
336
1955
comp_op
2249
1955
in
337
1955
for
comparison -> expr
1955
or
comparison -> expr
1955
<
338
1955
>=
339
1955
)
comparison -> expr
1955
if
comparison -> expr
1956
is
atom -> NUMBER
1956
|
atom -> NUMBER
1956
in
atom -> NUMBER
1956
@
atom -> NUMBER
1956
**
atom -> NUMBER
1956
and
atom -> NUMBER
1956
!=
atom -> NUMBER
1956
if
atom -> NUMBER
1956
-
atom -> NUMBER
1956
<<
atom -> NUMBER
1956
.
atom -> NUMBER
1956
(
atom -> NUMBER
1956
==
atom -> NUMBER
1956
%
atom -> NUMBER
1956
^
atom -> NUMBER
1956
not
atom -> NUMBER
1956
>=
atom -> NUMBER
1956
/
atom -> NUMBER
1956
)
atom -> NUMBER
1956
//
atom -> NUMBER
1956
>
atom -> NUMBER
1956
&
atom -> NUMBER
1956
[
atom -> NUMBER
1956
<=
atom -> NUMBER
1956
*
atom -> NUMBER
1956
or
atom -> NUMBER
1956
for
atom -> NUMBER
1956
>>
atom -> NUMBER
1956
+
atom -> NUMBER
1956
<
atom -> NUMBER
1957
)
or_test -> and_test
1957
or
2250
1957
for
or_test -> and_test
1957
if
or_test -> and_test
1958
NAME
1933
1958
atom_expr
1934
1958
atom
1935
1958
-
1936
1958
True
1938
1958
False
1940
1958
{
1941
1958
+
1942
1958
factor
2251
1958
[
1944
1958
(
1945
1958
STRING
1946
1958
power
1947
1958
None
1953
1958
NUMBER
1956
1958
~
1958
1959
NAME
1933
1959
atom_expr
1934
1959
atom
1935
1959
-
1936
1959
factor
1937
1959
True
1938
1959
arith_expr
1939
1959
False
1940
1959
{
1941
1959
+
1942
1959
and_expr
1943
1959
[
1944
1959
(
1945
1959
STRING
1946
1959
power
1947
1959
term
1948
1959
comparison
1949
1959
shift_expr
1950
1959
not_test
2252
1959
None
1953
1959
xor_expr
1954
1959
expr
1955
1959
NUMBER
1956
1959
~
1958
1959
not
1959
1960
for
test -> or_test if or_test else test
1960
)
test -> or_test if or_test else test
1960
,
test -> or_test if or_test else test
1961
>>
power -> atom_expr ** factor
1961
<=
power -> atom_expr ** factor
1961
:
power -> atom_expr ** factor
1961
//
power -> atom_expr ** factor
1961
/
power -> atom_expr ** factor
1961
&
power -> atom_expr ** factor
1961
if
power -> atom_expr ** factor
1961
not
power -> atom_expr ** factor
1961
<
power -> atom_expr ** factor
1961
!=
power -> atom_expr ** factor
1961
,
power -> atom_expr ** factor
1961
>
power -> atom_expr ** factor
1961
*
power -> atom_expr ** factor
1961
==
power -> atom_expr ** factor
1961
|
power -> atom_expr ** factor
1961
is
power -> atom_expr ** factor
1961
and
power -> atom_expr ** factor
1961
<<
power -> atom_expr ** factor
1961
-
power -> atom_expr ** factor
1961
@
power -> atom_expr ** factor
1961
in
power -> atom_expr ** factor
1961
^
power -> atom_expr ** factor
1961
%
power -> atom_expr ** factor
1961
>=
power -> atom_expr ** factor
1961
+
power -> atom_expr ** factor
1961
or
power -> atom_expr ** factor
1962
and
arith_expr -> term + arith_expr
1962
<
arith_expr -> term + arith_expr
1962
|
arith_expr -> term + arith_expr
1962
>=
arith_expr -> term + arith_expr
1962
>>
arith_expr -> term + arith_expr
1962
:
arith_expr -> term + arith_expr
1962
,
arith_expr -> term + arith_expr
1962
if
arith_expr -> term + arith_expr
1962
>
arith_expr -> term + arith_expr
1962
in
arith_expr -> term + arith_expr
1962
or
arith_expr -> term + arith_expr
1962
<=
arith_expr -> term + arith_expr
1962
not
arith_expr -> term + arith_expr
1962
^
arith_expr -> term + arith_expr
1962
!=
arith_expr -> term + arith_expr
1962
&
arith_expr -> term + arith_expr
1962
==
arith_expr -> term + arith_expr
1962
<<
arith_expr -> term + arith_expr
1962
is
arith_expr -> term + arith_expr
1963
<<
arith_expr -> term - arith_expr
1963
if
arith_expr -> term - arith_expr
1963
:
arith_expr -> term - arith_expr
1963
<
arith_expr -> term - arith_expr
1963
<=
arith_expr -> term - arith_expr
1963
and
arith_expr -> term - arith_expr
1963
in
arith_expr -> term - arith_expr
1963
&
arith_expr -> term - arith_expr
1963
|
arith_expr -> term - arith_expr
1963
==
arith_expr -> term - arith_expr
1963
is
arith_expr -> term - arith_expr
1963
>>
arith_expr -> term - arith_expr
1963
!=
arith_expr -> term - arith_expr
1963
>
arith_expr -> term - arith_expr
1963
or
arith_expr -> term - arith_expr
1963
,
arith_expr -> term - arith_expr
1963
>=
arith_expr -> term - arith_expr
1963
^
arith_expr -> term - arith_expr
1963
not
arith_expr -> term - arith_expr
1964
*
trailer_expr -> trailer trailer_expr
1964
+
trailer_expr -> trailer trailer_expr
1964
if
trailer_expr -> trailer trailer_expr
1964
-
trailer_expr -> trailer trailer_expr
1964
<=
trailer_expr -> trailer trailer_expr
1964
|
trailer_expr -> trailer trailer_expr
1964
@
trailer_expr -> trailer trailer_expr
1964
%
trailer_expr -> trailer trailer_expr
1964
in
trailer_expr -> trailer trailer_expr
1964
<<
trailer_expr -> trailer trailer_expr
1964
**
trailer_expr -> trailer trailer_expr
1964
==
trailer_expr -> trailer trailer_expr
1964
not
trailer_expr -> trailer trailer_expr
1964
,
trailer_expr -> trailer trailer_expr
1964
and
trailer_expr -> trailer trailer_expr
1964
//
trailer_expr -> trailer trailer_expr
1964
^
trailer_expr -> trailer trailer_expr
1964
or
trailer_expr -> trailer trailer_expr
1964
>
trailer_expr -> trailer trailer_expr
1964
!=
trailer_expr -> trailer trailer_expr
1964
is
trailer_expr -> trailer trailer_expr
1964
:
trailer_expr -> trailer trailer_expr
1964
&
trailer_expr -> trailer trailer_expr
1964
>>
trailer_expr -> trailer trailer_expr
1964
/
trailer_expr -> trailer trailer_expr
1964
<
trailer_expr -> trailer trailer_expr
1964
>=
trailer_expr -> trailer trailer_expr
1965
]
2253
1966
^
trailer -> . NAME
1966
%
trailer -> . NAME
1966
**
trailer -> . NAME
1966
>>
trailer -> . NAME
1966
>
trailer -> . NAME
1966
in
trailer -> . NAME
1966
[
trailer -> . NAME
1966
is
trailer -> . NAME
1966
,
trailer -> . NAME
1966
<<
trailer -> . NAME
1966
or
trailer -> . NAME
1966
and
trailer -> . NAME
1966
>=
trailer -> . NAME
1966
|
trailer -> . NAME
1966
==
trailer -> . NAME
1966
.
trailer -> . NAME
1966
+
trailer -> . NAME
1966
<
trailer -> . NAME
1966
-
trailer -> . NAME
1966
&
trailer -> . NAME
1966
*
trailer -> . NAME
1966
if
trailer -> . NAME
1966
<=
trailer -> . NAME
1966
:
trailer -> . NAME
1966
(
trailer -> . NAME
1966
not
trailer -> . NAME
1966
//
trailer -> . NAME
1966
@
trailer -> . NAME
1966
!=
trailer -> . NAME
1966
/
trailer -> . NAME
1967
)
2254
1968
[
trailer -> ( )
1968
not
trailer -> ( )
1968
==
trailer -> ( )
1968
**
trailer -> ( )
1968
,
trailer -> ( )
1968
:
trailer -> ( )
1968
<=
trailer -> ( )
1968
//
trailer -> ( )
1968
<<
trailer -> ( )
1968
<
trailer -> ( )
1968
in
trailer -> ( )
1968
or
trailer -> ( )
1968
-
trailer -> ( )
1968
+
trailer -> ( )
1968
&
trailer -> ( )
1968
*
trailer -> ( )
1968
is
trailer -> ( )
1968
>
trailer -> ( )
1968
!=
trailer -> ( )
1968
>>
trailer -> ( )
1968
%
trailer -> ( )
1968
|
trailer -> ( )
1968
.
trailer -> ( )
1968
>=
trailer -> ( )
1968
(
trailer -> ( )
1968
and
trailer -> ( )
1968
@
trailer -> ( )
1968
/
trailer -> ( )
1968
^
trailer -> ( )
1968
if
trailer -> ( )
1969
|
term -> factor % term
1969
<<
term -> factor % term
1969
^
term -> factor % term
1969
==
term -> factor % term
1969
-
term -> factor % term
1969
,
term -> factor % term
1969
:
term -> factor % term
1969
is
term -> factor % term
1969
>=
term -> factor % term
1969
>>
term -> factor % term
1969
>
term -> factor % term
1969
in
term -> factor % term
1969
&
term -> factor % term
1969
if
term -> factor % term
1969
<
term -> factor % term
1969
!=
term -> factor % term
1969
<=
term -> factor % term
1969
not
term -> factor % term
1969
+
term -> factor % term
1969
and
term -> factor % term
1969
or
term -> factor % term
1970
if
term -> factor // term
1970
<
term -> factor // term
1970
and
term -> factor // term
1970
in
term -> factor // term
1970
,
term -> factor // term
1970
>>
term -> factor // term
1970
<=
term -> factor // term
1970
!=
term -> factor // term
1970
^
term -> factor // term
1970
|
term -> factor // term
1970
or
term -> factor // term
1970
>=
term -> factor // term
1970
&
term -> factor // term
1970
>
term -> factor // term
1970
+
term -> factor // term
1970
is
term -> factor // term
1970
not
term -> factor // term
1970
<<
term -> factor // term
1970
:
term -> factor // term
1970
-
term -> factor // term
1970
==
term -> factor // term
1971
,
term -> factor / term
1971
>>
term -> factor / term
1971
^
term -> factor / term
1971
or
term -> factor / term
1971
:
term -> factor / term
1971
+
term -> factor / term
1971
if
term -> factor / term
1971
>=
term -> factor / term
1971
>
term -> factor / term
1971
-
term -> factor / term
1971
and
term -> factor / term
1971
not
term -> factor / term
1971
<
term -> factor / term
1971
in
term -> factor / term
1971
==
term -> factor / term
1971
<=
term -> factor / term
1971
is
term -> factor / term
1971
&
term -> factor / term
1971
<<
term -> factor / term
1971
!=
term -> factor / term
1971
|
term -> factor / term
1972
-
term -> factor * term
1972
&
term -> factor * term
1972
and
term -> factor * term
1972
,
term -> factor * term
1972
!=
term -> factor * term
1972
|
term -> factor * term
1972
<<
term -> factor * term
1972
<
term -> factor * term
1972
if
term -> factor * term
1972
^
term -> factor * term
1972
+
term -> factor * term
1972
in
term -> factor * term
1972
or
term -> factor * term
1972
>>
term -> factor * term
1972
not
term -> factor * term
1972
:
term -> factor * term
1972
==
term -> factor * term
1972
>=
term -> factor * term
1972
<=
term -> factor * term
1972
>
term -> factor * term
1972
is
term -> factor * term
1973
>>
term -> factor @ term
1973
^
term -> factor @ term
1973
&
term -> factor @ term
1973
|
term -> factor @ term
1973
if
term -> factor @ term
1973
is
term -> factor @ term
1973
<
term -> factor @ term
1973
<<
term -> factor @ term
1973
and
term -> factor @ term
1973
==
term -> factor @ term
1973
>
term -> factor @ term
1973
in
term -> factor @ term
1973
,
term -> factor @ term
1973
>=
term -> factor @ term
1973
:
term -> factor @ term
1973
+
term -> factor @ term
1973
not
term -> factor @ term
1973
!=
term -> factor @ term
1973
<=
term -> factor @ term
1973
or
term -> factor @ term
1973
-
term -> factor @ term
1974
return
for_stmt -> for expr_list in test_list : suite
1974
else
2255
1974
-
for_stmt -> for expr_list in test_list : suite
1974
True
for_stmt -> for expr_list in test_list : suite
1974
if
for_stmt -> for expr_list in test_list : suite
1974
~
for_stmt -> for expr_list in test_list : suite
1974
endsim
for_stmt -> for expr_list in test_list : suite
1974
raise
for_stmt -> for expr_list in test_list : suite
1974
lambda
for_stmt -> for expr_list in test_list : suite
1974
$
for_stmt -> for expr_list in test_list : suite
1974
conf
for_stmt -> for expr_list in test_list : suite
1974
@
for_stmt -> for expr_list in test_list : suite
1974
def
for_stmt -> for expr_list in test_list : suite
1974
None
for_stmt -> for expr_list in test_list : suite
1974
(
for_stmt -> for expr_list in test_list : suite
1974
NEWLINE
for_stmt -> for expr_list in test_list : suite
1974
STRING
for_stmt -> for expr_list in test_list : suite
1974
begsim
for_stmt -> for expr_list in test_list : suite
1974
{
for_stmt -> for expr_list in test_list : suite
1974
with
for_stmt -> for expr_list in test_list : suite
1974
[
for_stmt -> for expr_list in test_list : suite
1974
try
for_stmt -> for expr_list in test_list : suite
1974
False
for_stmt -> for expr_list in test_list : suite
1974
NAME
for_stmt -> for expr_list in test_list : suite
1974
yield
for_stmt -> for expr_list in test_list : suite
1974
nonlocal
for_stmt -> for expr_list in test_list : suite
1974
not
for_stmt -> for expr_list in test_list : suite
1974
NUMBER
for_stmt -> for expr_list in test_list : suite
1974
resetstats
for_stmt -> for expr_list in test_list : suite
1974
for
for_stmt -> for expr_list in test_list : suite
1974
class
for_stmt -> for expr_list in test_list : suite
1974
+
for_stmt -> for expr_list in test_list : suite
1974
assert
for_stmt -> for expr_list in test_list : suite
1974
while
for_stmt -> for expr_list in test_list : suite
1974
continue
for_stmt -> for expr_list in test_list : suite
1974
del
for_stmt -> for expr_list in test_list : suite
1974
global
for_stmt -> for expr_list in test_list : suite
1974
break
for_stmt -> for expr_list in test_list : suite
1974
pass
for_stmt -> for expr_list in test_list : suite
1975
<<
atom -> [ test_list_comp ]
1975
:
atom -> [ test_list_comp ]
1975
,
atom -> [ test_list_comp ]
1975
>>
atom -> [ test_list_comp ]
1975
+
atom -> [ test_list_comp ]
1975
-
atom -> [ test_list_comp ]
1975
not
atom -> [ test_list_comp ]
1975
<=
atom -> [ test_list_comp ]
1975
is
atom -> [ test_list_comp ]
1975
[
atom -> [ test_list_comp ]
1975
*
atom -> [ test_list_comp ]
1975
==
atom -> [ test_list_comp ]
1975
@
atom -> [ test_list_comp ]
1975
>
atom -> [ test_list_comp ]
1975
%
atom -> [ test_list_comp ]
1975
if
atom -> [ test_list_comp ]
1975
>=
atom -> [ test_list_comp ]
1975
//
atom -> [ test_list_comp ]
1975
.
atom -> [ test_list_comp ]
1975
in
atom -> [ test_list_comp ]
1975
**
atom -> [ test_list_comp ]
1975
and
atom -> [ test_list_comp ]
1975
/
atom -> [ test_list_comp ]
1975
or
atom -> [ test_list_comp ]
1975
!=
atom -> [ test_list_comp ]
1975
<
atom -> [ test_list_comp ]
1975
^
atom -> [ test_list_comp ]
1975
&
atom -> [ test_list_comp ]
1975
(
atom -> [ test_list_comp ]
1975
|
atom -> [ test_list_comp ]
1976
<
shift_expr -> arith_expr >> shift_expr
1976
^
shift_expr -> arith_expr >> shift_expr
1976
in
shift_expr -> arith_expr >> shift_expr
1976
==
shift_expr -> arith_expr >> shift_expr
1976
!=
shift_expr -> arith_expr >> shift_expr
1976
>=
shift_expr -> arith_expr >> shift_expr
1976
not
shift_expr -> arith_expr >> shift_expr
1976
and
shift_expr -> arith_expr >> shift_expr
1976
is
shift_expr -> arith_expr >> shift_expr
1976
,
shift_expr -> arith_expr >> shift_expr
1976
&
shift_expr -> arith_expr >> shift_expr
1976
>
shift_expr -> arith_expr >> shift_expr
1976
|
shift_expr -> arith_expr >> shift_expr
1976
:
shift_expr -> arith_expr >> shift_expr
1976
<=
shift_expr -> arith_expr >> shift_expr
1976
or
shift_expr -> arith_expr >> shift_expr
1976
if
shift_expr -> arith_expr >> shift_expr
1977
,
shift_expr -> arith_expr << shift_expr
1977
if
shift_expr -> arith_expr << shift_expr
1977
&
shift_expr -> arith_expr << shift_expr
1977
>=
shift_expr -> arith_expr << shift_expr
1977
<=
shift_expr -> arith_expr << shift_expr
1977
or
shift_expr -> arith_expr << shift_expr
1977
in
shift_expr -> arith_expr << shift_expr
1977
:
shift_expr -> arith_expr << shift_expr
1977
!=
shift_expr -> arith_expr << shift_expr
1977
^
shift_expr -> arith_expr << shift_expr
1977
<
shift_expr -> arith_expr << shift_expr
1977
|
shift_expr -> arith_expr << shift_expr
1977
==
shift_expr -> arith_expr << shift_expr
1977
is
shift_expr -> arith_expr << shift_expr
1977
and
shift_expr -> arith_expr << shift_expr
1977
>
shift_expr -> arith_expr << shift_expr
1977
not
shift_expr -> arith_expr << shift_expr
1978
@
atom -> ( test_list_comp )
1978
<
atom -> ( test_list_comp )
1978
and
atom -> ( test_list_comp )
1978
if
atom -> ( test_list_comp )
1978
&
atom -> ( test_list_comp )
1978
*
atom -> ( test_list_comp )
1978
%
atom -> ( test_list_comp )
1978
[
atom -> ( test_list_comp )
1978
//
atom -> ( test_list_comp )
1978
<<
atom -> ( test_list_comp )
1978
.
atom -> ( test_list_comp )
1978
/
atom -> ( test_list_comp )
1978
>=
atom -> ( test_list_comp )
1978
or
atom -> ( test_list_comp )
1978
>
atom -> ( test_list_comp )
1978
-
atom -> ( test_list_comp )
1978
|
atom -> ( test_list_comp )
1978
**
atom -> ( test_list_comp )
1978
is
atom -> ( test_list_comp )
1978
:
atom -> ( test_list_comp )
1978
==
atom -> ( test_list_comp )
1978
not
atom -> ( test_list_comp )
1978
in
atom -> ( test_list_comp )
1978
!=
atom -> ( test_list_comp )
1978
^
atom -> ( test_list_comp )
1978
,
atom -> ( test_list_comp )
1978
(
atom -> ( test_list_comp )
1978
<=
atom -> ( test_list_comp )
1978
+
atom -> ( test_list_comp )
1978
>>
atom -> ( test_list_comp )
1979
>=
xor_expr -> and_expr ^ xor_expr
1979
>
xor_expr -> and_expr ^ xor_expr
1979
or
xor_expr -> and_expr ^ xor_expr
1979
and
xor_expr -> and_expr ^ xor_expr
1979
<=
xor_expr -> and_expr ^ xor_expr
1979
in
xor_expr -> and_expr ^ xor_expr
1979
==
xor_expr -> and_expr ^ xor_expr
1979
,
xor_expr -> and_expr ^ xor_expr
1979
if
xor_expr -> and_expr ^ xor_expr
1979
!=
xor_expr -> and_expr ^ xor_expr
1979
not
xor_expr -> and_expr ^ xor_expr
1979
<
xor_expr -> and_expr ^ xor_expr
1979
is
xor_expr -> and_expr ^ xor_expr
1979
:
xor_expr -> and_expr ^ xor_expr
1979
|
xor_expr -> and_expr ^ xor_expr
1980
:
or_test -> and_test or or_test
1980
,
or_test -> and_test or or_test
1980
if
or_test -> and_test or or_test
1981
,
and_expr -> shift_expr & and_expr
1981
>=
and_expr -> shift_expr & and_expr
1981
!=
and_expr -> shift_expr & and_expr
1981
or
and_expr -> shift_expr & and_expr
1981
is
and_expr -> shift_expr & and_expr
1981
^
and_expr -> shift_expr & and_expr
1981
if
and_expr -> shift_expr & and_expr
1981
==
and_expr -> shift_expr & and_expr
1981
not
and_expr -> shift_expr & and_expr
1981
<
and_expr -> shift_expr & and_expr
1981
>
and_expr -> shift_expr & and_expr
1981
in
and_expr -> shift_expr & and_expr
1981
and
and_expr -> shift_expr & and_expr
1981
|
and_expr -> shift_expr & and_expr
1981
:
and_expr -> shift_expr & and_expr
1981
<=
and_expr -> shift_expr & and_expr
1982
or
and_test -> not_test and and_test
1982
:
and_test -> not_test and and_test
1982
if
and_test -> not_test and and_test
1982
,
and_test -> not_test and and_test
1983
is
expr -> xor_expr | expr
1983
or
expr -> xor_expr | expr
1983
>
expr -> xor_expr | expr
1983
and
expr -> xor_expr | expr
1983
,
expr -> xor_expr | expr
1983
in
expr -> xor_expr | expr
1983
if
expr -> xor_expr | expr
1983
<=
expr -> xor_expr | expr
1983
not
expr -> xor_expr | expr
1983
==
expr -> xor_expr | expr
1983
>=
expr -> xor_expr | expr
1983
<
expr -> xor_expr | expr
1983
:
expr -> xor_expr | expr
1983
!=
expr -> xor_expr | expr
1984
:
comparison -> expr comp_op comparison
1984
,
comparison -> expr comp_op comparison
1984
and
comparison -> expr comp_op comparison
1984
if
comparison -> expr comp_op comparison
1984
or
comparison -> expr comp_op comparison
1985
:
test_list -> test , test_list
1986
else
2256
1987
,
lambdef -> lambda : test
1987
:
lambdef -> lambda : test
1988
NAME
1098
1988
atom_expr
1099
1988
term
1100
1988
atom
1101
1988
-
1102
1988
factor
1103
1988
[
1105
1988
True
1106
1988
arith_expr
1107
1988
False
1108
1988
{
1109
1988
(
1110
1988
+
1111
1988
and_expr
1112
1988
and_test
1113
1988
STRING
1114
1988
comparison
1115
1988
shift_expr
1116
1988
not_test
1117
1988
power
1118
1988
None
1119
1988
xor_expr
1120
1988
expr
1121
1988
NUMBER
1122
1988
~
1123
1988
test
2257
1988
lambdef
1125
1988
not
1126
1988
or_test
1127
1988
lambda
1128
1989
]
test -> or_test if or_test else test
1989
for
test -> or_test if or_test else test
1989
,
test -> or_test if or_test else test
1990
>>
power -> atom_expr ** factor
1990
<=
power -> atom_expr ** factor
1990
//
power -> atom_expr ** factor
1990
/
power -> atom_expr ** factor
1990
&
power -> atom_expr ** factor
1990
if
power -> atom_expr ** factor
1990
not
power -> atom_expr ** factor
1990
<
power -> atom_expr ** factor
1990
!=
power -> atom_expr ** factor
1990
,
power -> atom_expr ** factor
1990
>
power -> atom_expr ** factor
1990
*
power -> atom_expr ** factor
1990
==
power -> atom_expr ** factor
1990
|
power -> atom_expr ** factor
1990
is
power -> atom_expr ** factor
1990
and
power -> atom_expr ** factor
1990
<<
power -> atom_expr ** factor
1990
-
power -> atom_expr ** factor
1990
]
power -> atom_expr ** factor
1990
@
power -> atom_expr ** factor
1990
in
power -> atom_expr ** factor
1990
^
power -> atom_expr ** factor
1990
%
power -> atom_expr ** factor
1990
>=
power -> atom_expr ** factor
1990
+
power -> atom_expr ** factor
1990
or
power -> atom_expr ** factor
1991
*
trailer_expr -> trailer trailer_expr
1991
+
trailer_expr -> trailer trailer_expr
1991
if
trailer_expr -> trailer trailer_expr
1991
-
trailer_expr -> trailer trailer_expr
1991
<=
trailer_expr -> trailer trailer_expr
1991
|
trailer_expr -> trailer trailer_expr
1991
@
trailer_expr -> trailer trailer_expr
1991
%
trailer_expr -> trailer trailer_expr
1991
in
trailer_expr -> trailer trailer_expr
1991
<<
trailer_expr -> trailer trailer_expr
1991
]
trailer_expr -> trailer trailer_expr
1991
**
trailer_expr -> trailer trailer_expr
1991
==
trailer_expr -> trailer trailer_expr
1991
not
trailer_expr -> trailer trailer_expr
1991
,
trailer_expr -> trailer trailer_expr
1991
and
trailer_expr -> trailer trailer_expr
1991
//
trailer_expr -> trailer trailer_expr
1991
^
trailer_expr -> trailer trailer_expr
1991
or
trailer_expr -> trailer trailer_expr
1991
>
trailer_expr -> trailer trailer_expr
1991
!=
trailer_expr -> trailer trailer_expr
1991
is
trailer_expr -> trailer trailer_expr
1991
&
trailer_expr -> trailer trailer_expr
1991
>>
trailer_expr -> trailer trailer_expr
1991
/
trailer_expr -> trailer trailer_expr
1991
<
trailer_expr -> trailer trailer_expr
1991
>=
trailer_expr -> trailer trailer_expr
1992
]
2258
1993
^
trailer -> . NAME
1993
%
trailer -> . NAME
1993
**
trailer -> . NAME
1993
>>
trailer -> . NAME
1993
>
trailer -> . NAME
1993
in
trailer -> . NAME
1993
[
trailer -> . NAME
1993
is
trailer -> . NAME
1993
,
trailer -> . NAME
1993
<<
trailer -> . NAME
1993
or
trailer -> . NAME
1993
and
trailer -> . NAME
1993
>=
trailer -> . NAME
1993
|
trailer -> . NAME
1993
==
trailer -> . NAME
1993
.
trailer -> . NAME
1993
+
trailer -> . NAME
1993
<
trailer -> . NAME
1993
-
trailer -> . NAME
1993
&
trailer -> . NAME
1993
*
trailer -> . NAME
1993
if
trailer -> . NAME
1993
<=
trailer -> . NAME
1993
(
trailer -> . NAME
1993
]
trailer -> . NAME
1993
not
trailer -> . NAME
1993
//
trailer -> . NAME
1993
@
trailer -> . NAME
1993
!=
trailer -> . NAME
1993
/
trailer -> . NAME
1994
)
2259
1995
[
trailer -> ( )
1995
not
trailer -> ( )
1995
==
trailer -> ( )
1995
**
trailer -> ( )
1995
,
trailer -> ( )
1995
<=
trailer -> ( )
1995
//
trailer -> ( )
1995
<<
trailer -> ( )
1995
<
trailer -> ( )
1995
]
trailer -> ( )
1995
in
trailer -> ( )
1995
or
trailer -> ( )
1995
-
trailer -> ( )
1995
+
trailer -> ( )
1995
&
trailer -> ( )
1995
*
trailer -> ( )
1995
is
trailer -> ( )
1995
>
trailer -> ( )
1995
!=
trailer -> ( )
1995
>>
trailer -> ( )
1995
%
trailer -> ( )
1995
|
trailer -> ( )
1995
.
trailer -> ( )
1995
>=
trailer -> ( )
1995
(
trailer -> ( )
1995
and
trailer -> ( )
1995
@
trailer -> ( )
1995
/
trailer -> ( )
1995
^
trailer -> ( )
1995
if
trailer -> ( )
1996
|
term -> factor % term
1996
<<
term -> factor % term
1996
^
term -> factor % term
1996
==
term -> factor % term
1996
]
term -> factor % term
1996
-
term -> factor % term
1996
,
term -> factor % term
1996
is
term -> factor % term
1996
>=
term -> factor % term
1996
>>
term -> factor % term
1996
>
term -> factor % term
1996
in
term -> factor % term
1996
&
term -> factor % term
1996
if
term -> factor % term
1996
<
term -> factor % term
1996
!=
term -> factor % term
1996
<=
term -> factor % term
1996
not
term -> factor % term
1996
+
term -> factor % term
1996
and
term -> factor % term
1996
or
term -> factor % term
1997
if
term -> factor // term
1997
<
term -> factor // term
1997
and
term -> factor // term
1997
in
term -> factor // term
1997
,
term -> factor // term
1997
>>
term -> factor // term
1997
<=
term -> factor // term
1997
!=
term -> factor // term
1997
]
term -> factor // term
1997
^
term -> factor // term
1997
|
term -> factor // term
1997
or
term -> factor // term
1997
>=
term -> factor // term
1997
&
term -> factor // term
1997
>
term -> factor // term
1997
+
term -> factor // term
1997
is
term -> factor // term
1997
not
term -> factor // term
1997
<<
term -> factor // term
1997
-
term -> factor // term
1997
==
term -> factor // term
1998
]
term -> factor / term
1998
,
term -> factor / term
1998
>>
term -> factor / term
1998
^
term -> factor / term
1998
or
term -> factor / term
1998
+
term -> factor / term
1998
if
term -> factor / term
1998
>=
term -> factor / term
1998
>
term -> factor / term
1998
-
term -> factor / term
1998
and
term -> factor / term
1998
not
term -> factor / term
1998
<
term -> factor / term
1998
in
term -> factor / term
1998
==
term -> factor / term
1998
<=
term -> factor / term
1998
is
term -> factor / term
1998
&
term -> factor / term
1998
<<
term -> factor / term
1998
!=
term -> factor / term
1998
|
term -> factor / term
1999
-
term -> factor * term
1999
&
term -> factor * term
1999
and
term -> factor * term
1999
,
term -> factor * term
1999
!=
term -> factor * term
1999
|
term -> factor * term
1999
<<
term -> factor * term
1999
<
term -> factor * term
1999
if
term -> factor * term
1999
^
term -> factor * term
1999
+
term -> factor * term
1999
in
term -> factor * term
1999
or
term -> factor * term
1999
>>
term -> factor * term
1999
not
term -> factor * term
1999
]
term -> factor * term
1999
==
term -> factor * term
1999
>=
term -> factor * term
1999
<=
term -> factor * term
1999
>
term -> factor * term
1999
is
term -> factor * term
2000
>>
term -> factor @ term
2000
^
term -> factor @ term
2000
&
term -> factor @ term
2000
|
term -> factor @ term
2000
if
term -> factor @ term
2000
is
term -> factor @ term
2000
<
term -> factor @ term
2000
<<
term -> factor @ term
2000
and
term -> factor @ term
2000
==
term -> factor @ term
2000
>
term -> factor @ term
2000
in
term -> factor @ term
2000
]
term -> factor @ term
2000
,
term -> factor @ term
2000
>=
term -> factor @ term
2000
+
term -> factor @ term
2000
not
term -> factor @ term
2000
!=
term -> factor @ term
2000
<=
term -> factor @ term
2000
or
term -> factor @ term
2000
-
term -> factor @ term
2001
<<
atom -> [ test_list_comp ]
2001
,
atom -> [ test_list_comp ]
2001
>>
atom -> [ test_list_comp ]
2001
+
atom -> [ test_list_comp ]
2001
-
atom -> [ test_list_comp ]
2001
not
atom -> [ test_list_comp ]
2001
<=
atom -> [ test_list_comp ]
2001
is
atom -> [ test_list_comp ]
2001
[
atom -> [ test_list_comp ]
2001
*
atom -> [ test_list_comp ]
2001
==
atom -> [ test_list_comp ]
2001
@
atom -> [ test_list_comp ]
2001
>
atom -> [ test_list_comp ]
2001
%
atom -> [ test_list_comp ]
2001
if
atom -> [ test_list_comp ]
2001
>=
atom -> [ test_list_comp ]
2001
]
atom -> [ test_list_comp ]
2001
//
atom -> [ test_list_comp ]
2001
.
atom -> [ test_list_comp ]
2001
in
atom -> [ test_list_comp ]
2001
**
atom -> [ test_list_comp ]
2001
and
atom -> [ test_list_comp ]
2001
/
atom -> [ test_list_comp ]
2001
or
atom -> [ test_list_comp ]
2001
!=
atom -> [ test_list_comp ]
2001
<
atom -> [ test_list_comp ]
2001
^
atom -> [ test_list_comp ]
2001
&
atom -> [ test_list_comp ]
2001
(
atom -> [ test_list_comp ]
2001
|
atom -> [ test_list_comp ]
2002
]
shift_expr -> arith_expr >> shift_expr
2002
<
shift_expr -> arith_expr >> shift_expr
2002
^
shift_expr -> arith_expr >> shift_expr
2002
in
shift_expr -> arith_expr >> shift_expr
2002
==
shift_expr -> arith_expr >> shift_expr
2002
!=
shift_expr -> arith_expr >> shift_expr
2002
>=
shift_expr -> arith_expr >> shift_expr
2002
not
shift_expr -> arith_expr >> shift_expr
2002
and
shift_expr -> arith_expr >> shift_expr
2002
is
shift_expr -> arith_expr >> shift_expr
2002
,
shift_expr -> arith_expr >> shift_expr
2002
&
shift_expr -> arith_expr >> shift_expr
2002
>
shift_expr -> arith_expr >> shift_expr
2002
|
shift_expr -> arith_expr >> shift_expr
2002
<=
shift_expr -> arith_expr >> shift_expr
2002
or
shift_expr -> arith_expr >> shift_expr
2002
if
shift_expr -> arith_expr >> shift_expr
2003
,
shift_expr -> arith_expr << shift_expr
2003
if
shift_expr -> arith_expr << shift_expr
2003
&
shift_expr -> arith_expr << shift_expr
2003
>=
shift_expr -> arith_expr << shift_expr
2003
<=
shift_expr -> arith_expr << shift_expr
2003
or
shift_expr -> arith_expr << shift_expr
2003
in
shift_expr -> arith_expr << shift_expr
2003
!=
shift_expr -> arith_expr << shift_expr
2003
^
shift_expr -> arith_expr << shift_expr
2003
<
shift_expr -> arith_expr << shift_expr
2003
|
shift_expr -> arith_expr << shift_expr
2003
==
shift_expr -> arith_expr << shift_expr
2003
is
shift_expr -> arith_expr << shift_expr
2003
and
shift_expr -> arith_expr << shift_expr
2003
]
shift_expr -> arith_expr << shift_expr
2003
>
shift_expr -> arith_expr << shift_expr
2003
not
shift_expr -> arith_expr << shift_expr
2004
>=
xor_expr -> and_expr ^ xor_expr
2004
>
xor_expr -> and_expr ^ xor_expr
2004
or
xor_expr -> and_expr ^ xor_expr
2004
and
xor_expr -> and_expr ^ xor_expr
2004
<=
xor_expr -> and_expr ^ xor_expr
2004
in
xor_expr -> and_expr ^ xor_expr
2004
==
xor_expr -> and_expr ^ xor_expr
2004
,
xor_expr -> and_expr ^ xor_expr
2004
if
xor_expr -> and_expr ^ xor_expr
2004
]
xor_expr -> and_expr ^ xor_expr
2004
!=
xor_expr -> and_expr ^ xor_expr
2004
not
xor_expr -> and_expr ^ xor_expr
2004
<
xor_expr -> and_expr ^ xor_expr
2004
is
xor_expr -> and_expr ^ xor_expr
2004
|
xor_expr -> and_expr ^ xor_expr
2005
@
atom -> ( test_list_comp )
2005
]
atom -> ( test_list_comp )
2005
<
atom -> ( test_list_comp )
2005
and
atom -> ( test_list_comp )
2005
if
atom -> ( test_list_comp )
2005
&
atom -> ( test_list_comp )
2005
*
atom -> ( test_list_comp )
2005
%
atom -> ( test_list_comp )
2005
[
atom -> ( test_list_comp )
2005
//
atom -> ( test_list_comp )
2005
<<
atom -> ( test_list_comp )
2005
.
atom -> ( test_list_comp )
2005
/
atom -> ( test_list_comp )
2005
>=
atom -> ( test_list_comp )
2005
or
atom -> ( test_list_comp )
2005
>
atom -> ( test_list_comp )
2005
-
atom -> ( test_list_comp )
2005
|
atom -> ( test_list_comp )
2005
**
atom -> ( test_list_comp )
2005
is
atom -> ( test_list_comp )
2005
==
atom -> ( test_list_comp )
2005
not
atom -> ( test_list_comp )
2005
in
atom -> ( test_list_comp )
2005
!=
atom -> ( test_list_comp )
2005
^
atom -> ( test_list_comp )
2005
,
atom -> ( test_list_comp )
2005
(
atom -> ( test_list_comp )
2005
<=
atom -> ( test_list_comp )
2005
+
atom -> ( test_list_comp )
2005
>>
atom -> ( test_list_comp )
2006
and
arith_expr -> term + arith_expr
2006
<
arith_expr -> term + arith_expr
2006
|
arith_expr -> term + arith_expr
2006
>=
arith_expr -> term + arith_expr
2006
>>
arith_expr -> term + arith_expr
2006
,
arith_expr -> term + arith_expr
2006
if
arith_expr -> term + arith_expr
2006
>
arith_expr -> term + arith_expr
2006
in
arith_expr -> term + arith_expr
2006
or
arith_expr -> term + arith_expr
2006
<=
arith_expr -> term + arith_expr
2006
not
arith_expr -> term + arith_expr
2006
^
arith_expr -> term + arith_expr
2006
!=
arith_expr -> term + arith_expr
2006
&
arith_expr -> term + arith_expr
2006
==
arith_expr -> term + arith_expr
2006
]
arith_expr -> term + arith_expr
2006
<<
arith_expr -> term + arith_expr
2006
is
arith_expr -> term + arith_expr
2007
<<
arith_expr -> term - arith_expr
2007
if
arith_expr -> term - arith_expr
2007
<
arith_expr -> term - arith_expr
2007
<=
arith_expr -> term - arith_expr
2007
and
arith_expr -> term - arith_expr
2007
in
arith_expr -> term - arith_expr
2007
&
arith_expr -> term - arith_expr
2007
|
arith_expr -> term - arith_expr
2007
==
arith_expr -> term - arith_expr
2007
is
arith_expr -> term - arith_expr
2007
>>
arith_expr -> term - arith_expr
2007
!=
arith_expr -> term - arith_expr
2007
>
arith_expr -> term - arith_expr
2007
or
arith_expr -> term - arith_expr
2007
,
arith_expr -> term - arith_expr
2007
]
arith_expr -> term - arith_expr
2007
>=
arith_expr -> term - arith_expr
2007
^
arith_expr -> term - arith_expr
2007
not
arith_expr -> term - arith_expr
2008
]
or_test -> and_test or or_test
2008
,
or_test -> and_test or or_test
2008
if
or_test -> and_test or or_test
2009
,
and_expr -> shift_expr & and_expr
2009
>=
and_expr -> shift_expr & and_expr
2009
!=
and_expr -> shift_expr & and_expr
2009
or
and_expr -> shift_expr & and_expr
2009
is
and_expr -> shift_expr & and_expr
2009
^
and_expr -> shift_expr & and_expr
2009
]
and_expr -> shift_expr & and_expr
2009
==
and_expr -> shift_expr & and_expr
2009
if
and_expr -> shift_expr & and_expr
2009
not
and_expr -> shift_expr & and_expr
2009
<
and_expr -> shift_expr & and_expr
2009
>
and_expr -> shift_expr & and_expr
2009
in
and_expr -> shift_expr & and_expr
2009
and
and_expr -> shift_expr & and_expr
2009
|
and_expr -> shift_expr & and_expr
2009
<=
and_expr -> shift_expr & and_expr
2010
or
and_test -> not_test and and_test
2010
if
and_test -> not_test and and_test
2010
,
and_test -> not_test and and_test
2010
]
and_test -> not_test and and_test
2011
]
expr -> xor_expr | expr
2011
is
expr -> xor_expr | expr
2011
or
expr -> xor_expr | expr
2011
>
expr -> xor_expr | expr
2011
and
expr -> xor_expr | expr
2011
,
expr -> xor_expr | expr
2011
in
expr -> xor_expr | expr
2011
if
expr -> xor_expr | expr
2011
<=
expr -> xor_expr | expr
2011
not
expr -> xor_expr | expr
2011
==
expr -> xor_expr | expr
2011
>=
expr -> xor_expr | expr
2011
<
expr -> xor_expr | expr
2011
!=
expr -> xor_expr | expr
2012
]
comparison -> expr comp_op comparison
2012
,
comparison -> expr comp_op comparison
2012
and
comparison -> expr comp_op comparison
2012
if
comparison -> expr comp_op comparison
2012
or
comparison -> expr comp_op comparison
2013
else
2260
2014
]
lambdef -> lambda : test
2014
,
lambdef -> lambda : test
2015
NAME
1169
2015
atom_expr
1170
2015
atom
1171
2015
-
1172
2015
factor
1173
2015
[
1174
2015
True
1175
2015
arith_expr
1176
2015
False
1177
2015
{
1178
2015
+
1179
2015
and_expr
1180
2015
(
1181
2015
STRING
1182
2015
term
1183
2015
and_test
1184
2015
comparison
1185
2015
shift_expr
1186
2015
not_test
1187
2015
power
1188
2015
None
1189
2015
xor_expr
1190
2015
expr
1191
2015
NUMBER
1192
2015
~
1193
2015
or_test
1194
2015
not
1195
2015
lambdef
1196
2015
test
2261
2015
lambda
1199
2016
.
atom -> NAME
2016
<
atom -> NAME
2016
|
atom -> NAME
2016
not
atom -> NAME
2016
[
atom -> NAME
2016
+
atom -> NAME
2016
%
atom -> NAME
2016
]
atom -> NAME
2016
for
atom -> NAME
2016
<=
atom -> NAME
2016
*
atom -> NAME
2016
!=
atom -> NAME
2016
in
atom -> NAME
2016
if
atom -> NAME
2016
is
atom -> NAME
2016
(
atom -> NAME
2016
^
atom -> NAME
2016
@
atom -> NAME
2016
&
atom -> NAME
2016
>>
atom -> NAME
2016
<<
atom -> NAME
2016
-
atom -> NAME
2016
/
atom -> NAME
2016
or
atom -> NAME
2016
//
atom -> NAME
2016
>=
atom -> NAME
2016
and
atom -> NAME
2016
>
atom -> NAME
2016
==
atom -> NAME
2016
**
atom -> NAME
2017
**
2262
2017
and
power -> atom_expr
2017
^
power -> atom_expr
2017
or
power -> atom_expr
2017
>>
power -> atom_expr
2017
]
power -> atom_expr
2017
if
power -> atom_expr
2017
<
power -> atom_expr
2017
>=
power -> atom_expr
2017
for
power -> atom_expr
2017
!=
power -> atom_expr
2017
is
power -> atom_expr
2017
<=
power -> atom_expr
2017
not
power -> atom_expr
2017
//
power -> atom_expr
2017
+
power -> atom_expr
2017
==
power -> atom_expr
2017
|
power -> atom_expr
2017
-
power -> atom_expr
2017
&
power -> atom_expr
2017
/
power -> atom_expr
2017
@
power -> atom_expr
2017
<<
power -> atom_expr
2017
%
power -> atom_expr
2017
*
power -> atom_expr
2017
in
power -> atom_expr
2017
>
power -> atom_expr
2018
trailer
2263
2018
trailer_expr
2264
2018
[
2265
2018
.
2266
2018
or
trailer_expr -> 
2018
(
2267
2018
not
trailer_expr -> 
2018
in
trailer_expr -> 
2018
is
trailer_expr -> 
2018
>=
trailer_expr -> 
2018
-
trailer_expr -> 
2018
@
trailer_expr -> 
2018
<=
trailer_expr -> 
2018
^
trailer_expr -> 
2018
*
trailer_expr -> 
2018
for
trailer_expr -> 
2018
if
trailer_expr -> 
2018
**
trailer_expr -> 
2018
>
trailer_expr -> 
2018
==
trailer_expr -> 
2018
>>
trailer_expr -> 
2018
<<
trailer_expr -> 
2018
/
trailer_expr -> 
2018
//
trailer_expr -> 
2018
!=
trailer_expr -> 
2018
<
trailer_expr -> 
2018
&
trailer_expr -> 
2018
]
trailer_expr -> 
2018
|
trailer_expr -> 
2018
and
trailer_expr -> 
2018
+
trailer_expr -> 
2018
%
trailer_expr -> 
2019
NAME
2016
2019
atom_expr
2017
2019
atom
2018
2019
-
2019
2019
factor
2268
2019
True
2021
2019
False
2023
2019
{
2024
2019
+
2025
2019
[
2027
2019
(
2028
2019
STRING
2029
2019
power
2035
2019
None
2036
2019
NUMBER
2039
2019
~
2040
2020
%
2269
2020
//
2270
2020
/
2271
2020
*
2272
2020
@
2273
2020
not
term -> factor
2020
<<
term -> factor
2020
or
term -> factor
2020
^
term -> factor
2020
in
term -> factor
2020
if
term -> factor
2020
and
term -> factor
2020
<=
term -> factor
2020
&
term -> factor
2020
>>
term -> factor
2020
>
term -> factor
2020
|
term -> factor
2020
<
term -> factor
2020
is
term -> factor
2020
!=
term -> factor
2020
>=
term -> factor
2020
==
term -> factor
2020
-
term -> factor
2020
+
term -> factor
2020
]
term -> factor
2020
for
term -> factor
2021
!=
atom -> True
2021
&
atom -> True
2021
+
atom -> True
2021
<<
atom -> True
2021
@
atom -> True
2021
if
atom -> True
2021
and
atom -> True
2021
is
atom -> True
2021
|
atom -> True
2021
<
atom -> True
2021
>=
atom -> True
2021
]
atom -> True
2021
or
atom -> True
2021
==
atom -> True
2021
%
atom -> True
2021
for
atom -> True
2021
>
atom -> True
2021
*
atom -> True
2021
[
atom -> True
2021
//
atom -> True
2021
/
atom -> True
2021
in
atom -> True
2021
-
atom -> True
2021
^
atom -> True
2021
<=
atom -> True
2021
(
atom -> True
2021
**
atom -> True
2021
.
atom -> True
2021
not
atom -> True
2021
>>
atom -> True
2022
or
shift_expr -> arith_expr
2022
>>
2274
2022
<<
2275
2022
]
shift_expr -> arith_expr
2022
^
shift_expr -> arith_expr
2022
in
shift_expr -> arith_expr
2022
<=
shift_expr -> arith_expr
2022
>=
shift_expr -> arith_expr
2022
&
shift_expr -> arith_expr
2022
==
shift_expr -> arith_expr
2022
for
shift_expr -> arith_expr
2022
not
shift_expr -> arith_expr
2022
and
shift_expr -> arith_expr
2022
>
shift_expr -> arith_expr
2022
!=
shift_expr -> arith_expr
2022
if
shift_expr -> arith_expr
2022
|
shift_expr -> arith_expr
2022
<
shift_expr -> arith_expr
2022
is
shift_expr -> arith_expr
2023
not
atom -> False
2023
==
atom -> False
2023
*
atom -> False
2023
>
atom -> False
2023
[
atom -> False
2023
if
atom -> False
2023
@
atom -> False
2023
&
atom -> False
2023
is
atom -> False
2023
.
atom -> False
2023
+
atom -> False
2023
]
atom -> False
2023
%
atom -> False
2023
>=
atom -> False
2023
and
atom -> False
2023
(
atom -> False
2023
|
atom -> False
2023
-
atom -> False
2023
/
atom -> False
2023
in
atom -> False
2023
<<
atom -> False
2023
<=
atom -> False
2023
^
atom -> False
2023
//
atom -> False
2023
>>
atom -> False
2023
!=
atom -> False
2023
**
atom -> False
2023
for
atom -> False
2023
or
atom -> False
2023
<
atom -> False
2024
}
2276
2025
NAME
2016
2025
atom_expr
2017
2025
atom
2018
2025
-
2019
2025
True
2021
2025
False
2023
2025
{
2024
2025
+
2025
2025
[
2027
2025
(
2028
2025
STRING
2029
2025
power
2035
2025
factor
2277
2025
None
2036
2025
NUMBER
2039
2025
~
2040
2026
^
2278
2026
<
xor_expr -> and_expr
2026
]
xor_expr -> and_expr
2026
<=
xor_expr -> and_expr
2026
|
xor_expr -> and_expr
2026
not
xor_expr -> and_expr
2026
and
xor_expr -> and_expr
2026
for
xor_expr -> and_expr
2026
!=
xor_expr -> and_expr
2026
or
xor_expr -> and_expr
2026
>
xor_expr -> and_expr
2026
>=
xor_expr -> and_expr
2026
==
xor_expr -> and_expr
2026
in
xor_expr -> and_expr
2026
is
xor_expr -> and_expr
2026
if
xor_expr -> and_expr
2027
NAME
187
2027
atom_expr
188
2027
atom
189
2027
-
190
2027
factor
191
2027
test_list_comp
2279
2027
[
193
2027
True
194
2027
arith_expr
195
2027
False
196
2027
{
197
2027
+
198
2027
and_expr
199
2027
(
200
2027
STRING
201
2027
]
2280
2027
term
203
2027
and_test
204
2027
comparison
205
2027
shift_expr
206
2027
not_test
207
2027
power
208
2027
or_test
209
2027
None
210
2027
xor_expr
211
2027
expr
212
2027
NUMBER
213
2027
lambda
214
2027
~
215
2027
lambdef
216
2027
not
217
2027
test
218
2027
test_list
219
2028
NAME
131
2028
atom_expr
132
2028
atom
133
2028
-
134
2028
factor
136
2028
)
2281
2028
[
137
2028
True
138
2028
arith_expr
139
2028
False
140
2028
{
141
2028
+
142
2028
and_expr
143
2028
(
144
2028
STRING
145
2028
test_list_comp
2282
2028
power
147
2028
term
148
2028
comparison
149
2028
shift_expr
150
2028
test
151
2028
not_test
152
2028
or_test
153
2028
lambda
154
2028
None
155
2028
xor_expr
156
2028
expr
157
2028
NUMBER
158
2028
and_test
159
2028
~
160
2028
lambdef
161
2028
not
162
2028
test_list
163
2029
and
atom -> STRING
2029
not
atom -> STRING
2029
]
atom -> STRING
2029
.
atom -> STRING
2029
//
atom -> STRING
2029
-
atom -> STRING
2029
*
atom -> STRING
2029
(
atom -> STRING
2029
>=
atom -> STRING
2029
<=
atom -> STRING
2029
<<
atom -> STRING
2029
if
atom -> STRING
2029
+
atom -> STRING
2029
or
atom -> STRING
2029
/
atom -> STRING
2029
@
atom -> STRING
2029
in
atom -> STRING
2029
>>
atom -> STRING
2029
%
atom -> STRING
2029
!=
atom -> STRING
2029
>
atom -> STRING
2029
^
atom -> STRING
2029
<
atom -> STRING
2029
==
atom -> STRING
2029
for
atom -> STRING
2029
**
atom -> STRING
2029
&
atom -> STRING
2029
|
atom -> STRING
2029
is
atom -> STRING
2029
[
atom -> STRING
2030
+
2283
2030
or
arith_expr -> term
2030
==
arith_expr -> term
2030
-
2284
2030
in
arith_expr -> term
2030
<<
arith_expr -> term
2030
>
arith_expr -> term
2030
is
arith_expr -> term
2030
>=
arith_expr -> term
2030
<=
arith_expr -> term
2030
and
arith_expr -> term
2030
>>
arith_expr -> term
2030
for
arith_expr -> term
2030
!=
arith_expr -> term
2030
not
arith_expr -> term
2030
&
arith_expr -> term
2030
]
arith_expr -> term
2030
if
arith_expr -> term
2030
<
arith_expr -> term
2030
^
arith_expr -> term
2030
|
arith_expr -> term
2031
]
or_test -> and_test
2031
or
2285
2031
for
or_test -> and_test
2031
if
or_test -> and_test
2032
for
not_test -> comparison
2032
or
not_test -> comparison
2032
]
not_test -> comparison
2032
if
not_test -> comparison
2032
and
not_test -> comparison
2033
==
and_expr -> shift_expr
2033
&
2286
2033
!=
and_expr -> shift_expr
2033
<
and_expr -> shift_expr
2033
<=
and_expr -> shift_expr
2033
and
and_expr -> shift_expr
2033
in
and_expr -> shift_expr
2033
^
and_expr -> shift_expr
2033
for
and_expr -> shift_expr
2033
not
and_expr -> shift_expr
2033
]
and_expr -> shift_expr
2033
is
and_expr -> shift_expr
2033
if
and_expr -> shift_expr
2033
>
and_expr -> shift_expr
2033
or
and_expr -> shift_expr
2033
>=
and_expr -> shift_expr
2033
|
and_expr -> shift_expr
2034
]
and_test -> not_test
2034
for
and_test -> not_test
2034
and
2287
2034
if
and_test -> not_test
2034
or
and_test -> not_test
2035
<=
factor -> power
2035
is
factor -> power
2035
>
factor -> power
2035
==
factor -> power
2035
^
factor -> power
2035
or
factor -> power
2035
-
factor -> power
2035
+
factor -> power
2035
>>
factor -> power
2035
]
factor -> power
2035
/
factor -> power
2035
*
factor -> power
2035
<<
factor -> power
2035
|
factor -> power
2035
and
factor -> power
2035
<
factor -> power
2035
not
factor -> power
2035
!=
factor -> power
2035
if
factor -> power
2035
&
factor -> power
2035
in
factor -> power
2035
for
factor -> power
2035
%
factor -> power
2035
>=
factor -> power
2035
//
factor -> power
2035
@
factor -> power
2036
+
atom -> None
2036
for
atom -> None
2036
>>
atom -> None
2036
/
atom -> None
2036
or
atom -> None
2036
*
atom -> None
2036
in
atom -> None
2036
**
atom -> None
2036
==
atom -> None
2036
-
atom -> None
2036
if
atom -> None
2036
(
atom -> None
2036
@
atom -> None
2036
>=
atom -> None
2036
[
atom -> None
2036
^
atom -> None
2036
&
atom -> None
2036
<=
atom -> None
2036
is
atom -> None
2036
]
atom -> None
2036
.
atom -> None
2036
not
atom -> None
2036
//
atom -> None
2036
<
atom -> None
2036
<<
atom -> None
2036
!=
atom -> None
2036
and
atom -> None
2036
%
atom -> None
2036
|
atom -> None
2036
>
atom -> None
2037
|
2288
2037
>
expr -> xor_expr
2037
<
expr -> xor_expr
2037
]
expr -> xor_expr
2037
and
expr -> xor_expr
2037
>=
expr -> xor_expr
2037
for
expr -> xor_expr
2037
!=
expr -> xor_expr
2037
or
expr -> xor_expr
2037
in
expr -> xor_expr
2037
is
expr -> xor_expr
2037
if
expr -> xor_expr
2037
==
expr -> xor_expr
2037
<=
expr -> xor_expr
2037
not
expr -> xor_expr
2038
==
330
2038
is
331
2038
<=
332
2038
and
comparison -> expr
2038
!=
334
2038
>
335
2038
not
336
2038
comp_op
2289
2038
in
337
2038
for
comparison -> expr
2038
]
comparison -> expr
2038
or
comparison -> expr
2038
<
338
2038
>=
339
2038
if
comparison -> expr
2039
is
atom -> NUMBER
2039
|
atom -> NUMBER
2039
]
atom -> NUMBER
2039
@
atom -> NUMBER
2039
**
atom -> NUMBER
2039
in
atom -> NUMBER
2039
and
atom -> NUMBER
2039
!=
atom -> NUMBER
2039
if
atom -> NUMBER
2039
-
atom -> NUMBER
2039
<<
atom -> NUMBER
2039
.
atom -> NUMBER
2039
(
atom -> NUMBER
2039
==
atom -> NUMBER
2039
%
atom -> NUMBER
2039
^
atom -> NUMBER
2039
not
atom -> NUMBER
2039
>=
atom -> NUMBER
2039
/
atom -> NUMBER
2039
//
atom -> NUMBER
2039
>
atom -> NUMBER
2039
&
atom -> NUMBER
2039
[
atom -> NUMBER
2039
<=
atom -> NUMBER
2039
*
atom -> NUMBER
2039
or
atom -> NUMBER
2039
for
atom -> NUMBER
2039
>>
atom -> NUMBER
2039
+
atom -> NUMBER
2039
<
atom -> NUMBER
2040
NAME
2016
2040
atom_expr
2017
2040
atom
2018
2040
-
2019
2040
True
2021
2040
False
2023
2040
{
2024
2040
+
2025
2040
factor
2290
2040
[
2027
2040
(
2028
2040
STRING
2029
2040
power
2035
2040
None
2036
2040
NUMBER
2039
2040
~
2040
2041
NAME
2016
2041
atom_expr
2017
2041
atom
2018
2041
-
2019
2041
factor
2020
2041
True
2021
2041
arith_expr
2022
2041
False
2023
2041
{
2024
2041
+
2025
2041
and_expr
2026
2041
[
2027
2041
(
2028
2041
STRING
2029
2041
term
2030
2041
comparison
2032
2041
shift_expr
2033
2041
power
2035
2041
None
2036
2041
xor_expr
2037
2041
expr
2038
2041
NUMBER
2039
2041
~
2040
2041
not
2041
2041
not_test
2291
2042
]
comp_iter -> 
2042
if
2292
2042
comp_for
2293
2042
comp_iter
2294
2042
for
642
2042
comp_if
2295
2043
NAME
12
2043
True
1
2043
atom_expr
5
2043
term
29
2043
atom
4
2043
simple_stmt
1234
2043
factor
11
2043
shift_expr
7
2043
arith_expr
8
2043
False
27
2043
and_expr
9
2043
xor_expr
40
2043
{
41
2043
(
13
2043
[
15
2043
resetstats
16
2043
STRING
46
2043
raise
19
2043
small_stmt
21
2043
test
47
2043
suite
2296
2043
comparison
28
2043
or_test
23
2043
~
55
2043
-
43
2043
lambda
53
2043
+
31
2043
not_test
33
2043
and_test
48
2043
power
32
2043
pass
73
2043
None
34
2043
lambdef
37
2043
not
42
2043
NUMBER
39
2043
expr
50
2043
continue
74
2043
begsim
49
2043
del_stmt
75
2043
NEWLINE
1236
2043
return
54
2043
nonlocal
76
2043
return_stmt
56
2043
endsim
57
2043
test_list
70
2043
raise_stmt
59
2043
assert_stmt
78
2043
stat_stmt
79
2043
global_stmt
61
2043
continue_stmt
62
2043
assert
63
2043
break_stmt
64
2043
nonlocal_stmt
80
2043
expr_stmt
81
2043
break
82
2043
del
66
2043
global
67
2043
yield
83
2043
pass_stmt
68
2043
flow_stmt
71
2043
yield_stmt
72
2043
sim_stmt
84
2044
DEDENT
2297
2045
from
test -> or_test if or_test else test
2045
NEWLINE
test -> or_test if or_test else test
2046
NAME
12
2046
True
1
2046
atom_expr
5
2046
term
29
2046
atom
4
2046
simple_stmt
1234
2046
factor
11
2046
shift_expr
7
2046
suite
2298
2046
arith_expr
8
2046
False
27
2046
and_expr
9
2046
xor_expr
40
2046
{
41
2046
(
13
2046
[
15
2046
resetstats
16
2046
STRING
46
2046
raise
19
2046
small_stmt
21
2046
test
47
2046
comparison
28
2046
or_test
23
2046
~
55
2046
-
43
2046
lambda
53
2046
+
31
2046
not_test
33
2046
and_test
48
2046
power
32
2046
pass
73
2046
None
34
2046
lambdef
37
2046
not
42
2046
NUMBER
39
2046
expr
50
2046
continue
74
2046
begsim
49
2046
del_stmt
75
2046
NEWLINE
1236
2046
return
54
2046
nonlocal
76
2046
return_stmt
56
2046
endsim
57
2046
test_list
70
2046
raise_stmt
59
2046
assert_stmt
78
2046
stat_stmt
79
2046
global_stmt
61
2046
continue_stmt
62
2046
assert
63
2046
break_stmt
64
2046
nonlocal_stmt
80
2046
expr_stmt
81
2046
break
82
2046
del
66
2046
global
67
2046
yield
83
2046
pass_stmt
68
2046
flow_stmt
71
2046
yield_stmt
72
2046
sim_stmt
84
2047
while
classdef -> class NAME ( ) : suite
2047
(
classdef -> class NAME ( ) : suite
2047
endsim
classdef -> class NAME ( ) : suite
2047
def
classdef -> class NAME ( ) : suite
2047
try
classdef -> class NAME ( ) : suite
2047
-
classdef -> class NAME ( ) : suite
2047
NAME
classdef -> class NAME ( ) : suite
2047
~
classdef -> class NAME ( ) : suite
2047
True
classdef -> class NAME ( ) : suite
2047
class
classdef -> class NAME ( ) : suite
2047
conf
classdef -> class NAME ( ) : suite
2047
assert
classdef -> class NAME ( ) : suite
2047
False
classdef -> class NAME ( ) : suite
2047
with
classdef -> class NAME ( ) : suite
2047
continue
classdef -> class NAME ( ) : suite
2047
NUMBER
classdef -> class NAME ( ) : suite
2047
global
classdef -> class NAME ( ) : suite
2047
return
classdef -> class NAME ( ) : suite
2047
yield
classdef -> class NAME ( ) : suite
2047
break
classdef -> class NAME ( ) : suite
2047
@
classdef -> class NAME ( ) : suite
2047
STRING
classdef -> class NAME ( ) : suite
2047
nonlocal
classdef -> class NAME ( ) : suite
2047
pass
classdef -> class NAME ( ) : suite
2047
begsim
classdef -> class NAME ( ) : suite
2047
resetstats
classdef -> class NAME ( ) : suite
2047
raise
classdef -> class NAME ( ) : suite
2047
if
classdef -> class NAME ( ) : suite
2047
not
classdef -> class NAME ( ) : suite
2047
{
classdef -> class NAME ( ) : suite
2047
NEWLINE
classdef -> class NAME ( ) : suite
2047
lambda
classdef -> class NAME ( ) : suite
2047
$
classdef -> class NAME ( ) : suite
2047
None
classdef -> class NAME ( ) : suite
2047
for
classdef -> class NAME ( ) : suite
2047
+
classdef -> class NAME ( ) : suite
2047
del
classdef -> class NAME ( ) : suite
2047
[
classdef -> class NAME ( ) : suite
2048
DEDENT
2299
2049
NAME
12
2049
True
1
2049
atom_expr
5
2049
term
29
2049
atom
4
2049
simple_stmt
2300
2049
factor
11
2049
shift_expr
7
2049
arith_expr
8
2049
False
27
2049
and_expr
9
2049
xor_expr
40
2049
{
41
2049
(
13
2049
[
15
2049
resetstats
16
2049
suite
2301
2049
STRING
46
2049
raise
19
2049
small_stmt
2302
2049
test
47
2049
comparison
28
2049
or_test
23
2049
~
55
2049
-
43
2049
lambda
53
2049
+
31
2049
not_test
33
2049
and_test
48
2049
power
32
2049
pass
73
2049
None
34
2049
lambdef
37
2049
not
42
2049
NUMBER
39
2049
expr
50
2049
continue
74
2049
begsim
49
2049
del_stmt
75
2049
NEWLINE
2303
2049
return
54
2049
nonlocal
76
2049
return_stmt
56
2049
endsim
57
2049
test_list
70
2049
raise_stmt
59
2049
assert_stmt
78
2049
stat_stmt
79
2049
global_stmt
61
2049
continue_stmt
62
2049
assert
63
2049
break_stmt
64
2049
nonlocal_stmt
80
2049
expr_stmt
81
2049
break
82
2049
del
66
2049
global
67
2049
yield
83
2049
pass_stmt
68
2049
flow_stmt
71
2049
yield_stmt
72
2049
sim_stmt
84
2050
NAME
12
2050
True
1
2050
atom_expr
5
2050
term
29
2050
atom
4
2050
simple_stmt
1234
2050
factor
11
2050
shift_expr
7
2050
arith_expr
8
2050
False
27
2050
and_expr
9
2050
xor_expr
40
2050
{
41
2050
(
13
2050
[
15
2050
resetstats
16
2050
STRING
46
2050
raise
19
2050
small_stmt
21
2050
test
47
2050
suite
2304
2050
comparison
28
2050
or_test
23
2050
~
55
2050
-
43
2050
lambda
53
2050
+
31
2050
not_test
33
2050
and_test
48
2050
power
32
2050
pass
73
2050
None
34
2050
lambdef
37
2050
not
42
2050
NUMBER
39
2050
expr
50
2050
continue
74
2050
begsim
49
2050
del_stmt
75
2050
NEWLINE
1236
2050
return
54
2050
nonlocal
76
2050
return_stmt
56
2050
endsim
57
2050
test_list
70
2050
raise_stmt
59
2050
assert_stmt
78
2050
stat_stmt
79
2050
global_stmt
61
2050
continue_stmt
62
2050
assert
63
2050
break_stmt
64
2050
nonlocal_stmt
80
2050
expr_stmt
81
2050
break
82
2050
del
66
2050
global
67
2050
yield
83
2050
pass_stmt
68
2050
flow_stmt
71
2050
yield_stmt
72
2050
sim_stmt
84
2051
NAME
1677
2051
atom_expr
1678
2051
atom
1681
2051
-
1682
2051
True
1686
2051
False
1687
2051
{
1688
2051
(
1689
2051
+
1690
2051
[
1693
2051
STRING
1694
2051
factor
2305
2051
power
1699
2051
None
1700
2051
NUMBER
1702
2051
~
1703
2052
NAME
12
2052
True
1
2052
atom_expr
5
2052
term
29
2052
NEWLINE
2067
2052
atom
4
2052
simple_stmt
2068
2052
factor
11
2052
suite
2306
2052
shift_expr
7
2052
arith_expr
8
2052
False
27
2052
and_expr
9
2052
xor_expr
40
2052
{
41
2052
(
13
2052
[
15
2052
resetstats
16
2052
STRING
46
2052
raise
19
2052
small_stmt
2070
2052
test
47
2052
comparison
28
2052
or_test
23
2052
~
55
2052
-
43
2052
lambda
53
2052
+
31
2052
not_test
33
2052
and_test
48
2052
power
32
2052
pass
73
2052
None
34
2052
lambdef
37
2052
not
42
2052
NUMBER
39
2052
expr
50
2052
continue
74
2052
begsim
49
2052
del_stmt
75
2052
return
54
2052
nonlocal
76
2052
return_stmt
56
2052
endsim
57
2052
test_list
70
2052
raise_stmt
59
2052
assert_stmt
78
2052
stat_stmt
79
2052
global_stmt
61
2052
continue_stmt
62
2052
assert
63
2052
break_stmt
64
2052
nonlocal_stmt
80
2052
expr_stmt
81
2052
break
82
2052
del
66
2052
global
67
2052
yield
83
2052
pass_stmt
68
2052
flow_stmt
71
2052
yield_stmt
72
2052
sim_stmt
84
2053
NAME
2307
2054
NAME
1677
2054
atom_expr
1678
2054
term
1680
2054
atom
1681
2054
-
1682
2054
factor
1683
2054
True
1686
2054
False
1687
2054
{
1688
2054
(
1689
2054
+
1690
2054
[
1693
2054
STRING
1694
2054
arith_expr
2308
2054
power
1699
2054
None
1700
2054
NUMBER
1702
2054
~
1703
2055
NAME
1677
2055
atom_expr
1678
2055
term
1680
2055
atom
1681
2055
-
1682
2055
factor
1683
2055
True
1686
2055
False
1687
2055
{
1688
2055
(
1689
2055
+
1690
2055
[
1693
2055
STRING
1694
2055
arith_expr
2309
2055
power
1699
2055
None
1700
2055
NUMBER
1702
2055
~
1703
2056
trailer
2056
2056
trailer_expr
2310
2056
[
2058
2056
(
2059
2056
or
trailer_expr -> 
2056
.
2060
2056
not
trailer_expr -> 
2056
in
trailer_expr -> 
2056
is
trailer_expr -> 
2056
>=
trailer_expr -> 
2056
-
trailer_expr -> 
2056
@
trailer_expr -> 
2056
<=
trailer_expr -> 
2056
^
trailer_expr -> 
2056
*
trailer_expr -> 
2056
if
trailer_expr -> 
2056
**
trailer_expr -> 
2056
>
trailer_expr -> 
2056
==
trailer_expr -> 
2056
>>
trailer_expr -> 
2056
<<
trailer_expr -> 
2056
/
trailer_expr -> 
2056
//
trailer_expr -> 
2056
!=
trailer_expr -> 
2056
<
trailer_expr -> 
2056
&
trailer_expr -> 
2056
:
trailer_expr -> 
2056
|
trailer_expr -> 
2056
and
trailer_expr -> 
2056
+
trailer_expr -> 
2056
%
trailer_expr -> 
2056
as
trailer_expr -> 
2057
|
atom_expr -> atom trailer_expr
2057
*
atom_expr -> atom trailer_expr
2057
-
atom_expr -> atom trailer_expr
2057
:
atom_expr -> atom trailer_expr
2057
not
atom_expr -> atom trailer_expr
2057
in
atom_expr -> atom trailer_expr
2057
and
atom_expr -> atom trailer_expr
2057
^
atom_expr -> atom trailer_expr
2057
or
atom_expr -> atom trailer_expr
2057
<=
atom_expr -> atom trailer_expr
2057
<
atom_expr -> atom trailer_expr
2057
>>
atom_expr -> atom trailer_expr
2057
//
atom_expr -> atom trailer_expr
2057
!=
atom_expr -> atom trailer_expr
2057
<<
atom_expr -> atom trailer_expr
2057
+
atom_expr -> atom trailer_expr
2057
>
atom_expr -> atom trailer_expr
2057
/
atom_expr -> atom trailer_expr
2057
==
atom_expr -> atom trailer_expr
2057
%
atom_expr -> atom trailer_expr
2057
&
atom_expr -> atom trailer_expr
2057
@
atom_expr -> atom trailer_expr
2057
if
atom_expr -> atom trailer_expr
2057
>=
atom_expr -> atom trailer_expr
2057
as
atom_expr -> atom trailer_expr
2057
is
atom_expr -> atom trailer_expr
2057
**
atom_expr -> atom trailer_expr
2058
NAME
461
2058
atom_expr
462
2058
term
463
2058
atom
464
2058
-
465
2058
factor
466
2058
[
467
2058
True
468
2058
arith_expr
469
2058
False
470
2058
{
471
2058
(
472
2058
+
473
2058
and_expr
474
2058
and_test
475
2058
STRING
476
2058
subscriptlist
2311
2058
comparison
478
2058
shift_expr
479
2058
not_test
480
2058
power
481
2058
None
482
2058
xor_expr
483
2058
expr
484
2058
NUMBER
485
2058
test
486
2058
~
487
2058
or_test
488
2058
not
489
2058
lambdef
490
2058
:
maybe_test -> 
2058
lambda
491
2058
subscript
492
2058
maybe_test
493
2059
NAME
496
2059
atom_expr
497
2059
atom
498
2059
-
499
2059
arglist
2312
2059
factor
501
2059
*
502
2059
[
503
2059
True
504
2059
arith_expr
505
2059
xor_expr
506
2059
False
507
2059
**
508
2059
{
509
2059
+
510
2059
)
2313
2059
and_expr
512
2059
(
513
2059
STRING
514
2059
power
515
2059
term
516
2059
comparison
517
2059
shift_expr
518
2059
argument
519
2059
not_test
520
2059
or_test
521
2059
lambdef
522
2059
lambda
523
2059
None
524
2059
test
525
2059
expr
526
2059
NUMBER
527
2059
and_test
528
2059
~
529
2059
not
530
2060
NAME
2314
2061
>>
factor -> - factor
2061
if
factor -> - factor
2061
>
factor -> - factor
2061
is
factor -> - factor
2061
//
factor -> - factor
2061
not
factor -> - factor
2061
or
factor -> - factor
2061
as
factor -> - factor
2061
-
factor -> - factor
2061
<<
factor -> - factor
2061
>=
factor -> - factor
2061
/
factor -> - factor
2061
<=
factor -> - factor
2061
<
factor -> - factor
2061
in
factor -> - factor
2061
|
factor -> - factor
2061
*
factor -> - factor
2061
!=
factor -> - factor
2061
&
factor -> - factor
2061
and
factor -> - factor
2061
^
factor -> - factor
2061
+
factor -> - factor
2061
:
factor -> - factor
2061
%
factor -> - factor
2061
==
factor -> - factor
2061
@
factor -> - factor
2062
NAME
1677
2062
atom_expr
1678
2062
atom
1681
2062
-
1682
2062
factor
1683
2062
True
1686
2062
False
1687
2062
{
1688
2062
(
1689
2062
+
1690
2062
[
1693
2062
STRING
1694
2062
term
2315
2062
power
1699
2062
None
1700
2062
NUMBER
1702
2062
~
1703
2063
NAME
1677
2063
atom_expr
1678
2063
atom
1681
2063
-
1682
2063
factor
1683
2063
True
1686
2063
False
1687
2063
{
1688
2063
(
1689
2063
+
1690
2063
[
1693
2063
STRING
1694
2063
term
2316
2063
power
1699
2063
None
1700
2063
NUMBER
1702
2063
~
1703
2064
NAME
1677
2064
atom_expr
1678
2064
atom
1681
2064
-
1682
2064
factor
1683
2064
True
1686
2064
False
1687
2064
term
2317
2064
{
1688
2064
(
1689
2064
+
1690
2064
[
1693
2064
STRING
1694
2064
power
1699
2064
None
1700
2064
NUMBER
1702
2064
~
1703
2065
NAME
1677
2065
atom_expr
1678
2065
atom
1681
2065
-
1682
2065
factor
1683
2065
True
1686
2065
False
1687
2065
{
1688
2065
(
1689
2065
+
1690
2065
[
1693
2065
STRING
1694
2065
power
1699
2065
None
1700
2065
NUMBER
1702
2065
term
2318
2065
~
1703
2066
NAME
1677
2066
atom_expr
1678
2066
atom
1681
2066
-
1682
2066
factor
1683
2066
True
1686
2066
False
1687
2066
{
1688
2066
(
1689
2066
+
1690
2066
[
1693
2066
STRING
1694
2066
term
2319
2066
power
1699
2066
None
1700
2066
NUMBER
1702
2066
~
1703
2067
INDENT
2320
2068
False
suite -> simple_stmt
2068
if
suite -> simple_stmt
2068
NUMBER
suite -> simple_stmt
2068
NEWLINE
suite -> simple_stmt
2068
{
suite -> simple_stmt
2068
@
suite -> simple_stmt
2068
begsim
suite -> simple_stmt
2068
endsim
suite -> simple_stmt
2068
nonlocal
suite -> simple_stmt
2068
STRING
suite -> simple_stmt
2068
(
suite -> simple_stmt
2068
global
suite -> simple_stmt
2068
yield
suite -> simple_stmt
2068
try
suite -> simple_stmt
2068
conf
suite -> simple_stmt
2068
finally
suite -> simple_stmt
2068
for
suite -> simple_stmt
2068
not
suite -> simple_stmt
2068
else
suite -> simple_stmt
2068
while
suite -> simple_stmt
2068
lambda
suite -> simple_stmt
2068
None
suite -> simple_stmt
2068
resetstats
suite -> simple_stmt
2068
break
suite -> simple_stmt
2068
True
suite -> simple_stmt
2068
~
suite -> simple_stmt
2068
-
suite -> simple_stmt
2068
pass
suite -> simple_stmt
2068
def
suite -> simple_stmt
2068
raise
suite -> simple_stmt
2068
except
suite -> simple_stmt
2068
with
suite -> simple_stmt
2068
class
suite -> simple_stmt
2068
[
suite -> simple_stmt
2068
return
suite -> simple_stmt
2068
del
suite -> simple_stmt
2068
continue
suite -> simple_stmt
2068
assert
suite -> simple_stmt
2068
+
suite -> simple_stmt
2068
$
suite -> simple_stmt
2068
NAME
suite -> simple_stmt
2069
except
1238
2069
except_clause
2321
2069
False
maybe_except_clause -> 
2069
maybe_except_clause
2322
2069
del
maybe_except_clause -> 
2069
True
maybe_except_clause -> 
2069
{
maybe_except_clause -> 
2069
def
maybe_except_clause -> 
2069
(
maybe_except_clause -> 
2069
$
maybe_except_clause -> 
2069
continue
maybe_except_clause -> 
2069
endsim
maybe_except_clause -> 
2069
try
maybe_except_clause -> 
2069
None
maybe_except_clause -> 
2069
global
maybe_except_clause -> 
2069
resetstats
maybe_except_clause -> 
2069
class
maybe_except_clause -> 
2069
STRING
maybe_except_clause -> 
2069
begsim
maybe_except_clause -> 
2069
raise
maybe_except_clause -> 
2069
-
maybe_except_clause -> 
2069
@
maybe_except_clause -> 
2069
yield
maybe_except_clause -> 
2069
break
maybe_except_clause -> 
2069
assert
maybe_except_clause -> 
2069
else
maybe_except_clause -> 
2069
[
maybe_except_clause -> 
2069
NEWLINE
maybe_except_clause -> 
2069
NAME
maybe_except_clause -> 
2069
lambda
maybe_except_clause -> 
2069
finally
maybe_except_clause -> 
2069
while
maybe_except_clause -> 
2069
for
maybe_except_clause -> 
2069
not
maybe_except_clause -> 
2069
conf
maybe_except_clause -> 
2069
pass
maybe_except_clause -> 
2069
nonlocal
maybe_except_clause -> 
2069
return
maybe_except_clause -> 
2069
if
maybe_except_clause -> 
2069
+
maybe_except_clause -> 
2069
with
maybe_except_clause -> 
2069
~
maybe_except_clause -> 
2069
NUMBER
maybe_except_clause -> 
2070
NEWLINE
2323
2071
NAME
1677
2071
atom_expr
1678
2071
term
1680
2071
atom
1681
2071
-
1682
2071
factor
1683
2071
arith_expr
1685
2071
True
1686
2071
False
1687
2071
{
1688
2071
(
1689
2071
+
1690
2071
[
1693
2071
STRING
1694
2071
shift_expr
2324
2071
power
1699
2071
None
1700
2071
NUMBER
1702
2071
~
1703
2072
NAME
1677
2072
atom_expr
1678
2072
term
1680
2072
atom
1681
2072
-
1682
2072
factor
1683
2072
arith_expr
1685
2072
True
1686
2072
False
1687
2072
{
1688
2072
shift_expr
2325
2072
+
1690
2072
(
1689
2072
[
1693
2072
STRING
1694
2072
power
1699
2072
None
1700
2072
NUMBER
1702
2072
~
1703
2073
%
atom -> { }
2073
[
atom -> { }
2073
not
atom -> { }
2073
^
atom -> { }
2073
or
atom -> { }
2073
-
atom -> { }
2073
>=
atom -> { }
2073
<<
atom -> { }
2073
/
atom -> { }
2073
<=
atom -> { }
2073
|
atom -> { }
2073
>>
atom -> { }
2073
:
atom -> { }
2073
@
atom -> { }
2073
is
atom -> { }
2073
if
atom -> { }
2073
as
atom -> { }
2073
and
atom -> { }
2073
==
atom -> { }
2073
in
atom -> { }
2073
**
atom -> { }
2073
&
atom -> { }
2073
>
atom -> { }
2073
//
atom -> { }
2073
(
atom -> { }
2073
+
atom -> { }
2073
<
atom -> { }
2073
!=
atom -> { }
2073
.
atom -> { }
2073
*
atom -> { }
2074
|
atom -> ( )
2074
**
atom -> ( )
2074
>>
atom -> ( )
2074
-
atom -> ( )
2074
%
atom -> ( )
2074
(
atom -> ( )
2074
not
atom -> ( )
2074
+
atom -> ( )
2074
>=
atom -> ( )
2074
&
atom -> ( )
2074
*
atom -> ( )
2074
!=
atom -> ( )
2074
<=
atom -> ( )
2074
and
atom -> ( )
2074
<
atom -> ( )
2074
^
atom -> ( )
2074
==
atom -> ( )
2074
if
atom -> ( )
2074
in
atom -> ( )
2074
/
atom -> ( )
2074
>
atom -> ( )
2074
//
atom -> ( )
2074
.
atom -> ( )
2074
as
atom -> ( )
2074
or
atom -> ( )
2074
@
atom -> ( )
2074
is
atom -> ( )
2074
:
atom -> ( )
2074
<<
atom -> ( )
2074
[
atom -> ( )
2075
)
2326
2076
>>
factor -> + factor
2076
>=
factor -> + factor
2076
as
factor -> + factor
2076
or
factor -> + factor
2076
==
factor -> + factor
2076
-
factor -> + factor
2076
:
factor -> + factor
2076
*
factor -> + factor
2076
<
factor -> + factor
2076
^
factor -> + factor
2076
&
factor -> + factor
2076
@
factor -> + factor
2076
|
factor -> + factor
2076
<<
factor -> + factor
2076
%
factor -> + factor
2076
not
factor -> + factor
2076
//
factor -> + factor
2076
and
factor -> + factor
2076
in
factor -> + factor
2076
!=
factor -> + factor
2076
>
factor -> + factor
2076
/
factor -> + factor
2076
is
factor -> + factor
2076
+
factor -> + factor
2076
if
factor -> + factor
2076
<=
factor -> + factor
2077
NAME
1677
2077
atom_expr
1678
2077
term
1680
2077
atom
1681
2077
-
1682
2077
factor
1683
2077
arith_expr
1685
2077
True
1686
2077
False
1687
2077
{
1688
2077
(
1689
2077
+
1690
2077
and_expr
1691
2077
[
1693
2077
STRING
1694
2077
xor_expr
2327
2077
shift_expr
1697
2077
power
1699
2077
None
1700
2077
NUMBER
1702
2077
~
1703
2078
NAME
1677
2078
atom_expr
1678
2078
term
1680
2078
atom
1681
2078
-
1682
2078
factor
1683
2078
arith_expr
1685
2078
True
1686
2078
False
1687
2078
{
1688
2078
(
1689
2078
+
1690
2078
and_expr
1691
2078
and_test
1692
2078
[
1693
2078
STRING
1694
2078
xor_expr
1695
2078
comparison
1696
2078
shift_expr
1697
2078
not_test
1698
2078
power
1699
2078
None
1700
2078
expr
1701
2078
NUMBER
1702
2078
~
1703
2078
or_test
2328
2078
not
1706
2079
]
2329
2080
and
atom -> [ ]
2080
<<
atom -> [ ]
2080
//
atom -> [ ]
2080
*
atom -> [ ]
2080
+
atom -> [ ]
2080
^
atom -> [ ]
2080
==
atom -> [ ]
2080
>>
atom -> [ ]
2080
/
atom -> [ ]
2080
:
atom -> [ ]
2080
in
atom -> [ ]
2080
>
atom -> [ ]
2080
<=
atom -> [ ]
2080
.
atom -> [ ]
2080
%
atom -> [ ]
2080
&
atom -> [ ]
2080
-
atom -> [ ]
2080
>=
atom -> [ ]
2080
not
atom -> [ ]
2080
|
atom -> [ ]
2080
@
atom -> [ ]
2080
is
atom -> [ ]
2080
or
atom -> [ ]
2080
as
atom -> [ ]
2080
!=
atom -> [ ]
2080
if
atom -> [ ]
2080
**
atom -> [ ]
2080
<
atom -> [ ]
2080
(
atom -> [ ]
2080
[
atom -> [ ]
2081
NAME
1677
2081
atom_expr
1678
2081
term
1680
2081
atom
1681
2081
-
1682
2081
factor
1683
2081
arith_expr
1685
2081
True
1686
2081
False
1687
2081
{
1688
2081
(
1689
2081
+
1690
2081
and_expr
1691
2081
[
1693
2081
STRING
1694
2081
xor_expr
1695
2081
shift_expr
1697
2081
power
1699
2081
None
1700
2081
NUMBER
1702
2081
expr
2330
2081
~
1703
2082
NAME
1677
2082
atom_expr
1678
2082
term
1680
2082
atom
1681
2082
-
1682
2082
factor
1683
2082
arith_expr
1685
2082
True
1686
2082
False
1687
2082
{
1688
2082
(
1689
2082
+
1690
2082
[
1693
2082
STRING
1694
2082
shift_expr
1697
2082
and_expr
2331
2082
power
1699
2082
None
1700
2082
NUMBER
1702
2082
~
1703
2083
NAME
1677
2083
atom_expr
1678
2083
term
1680
2083
atom
1681
2083
and_test
2332
2083
-
1682
2083
factor
1683
2083
arith_expr
1685
2083
True
1686
2083
False
1687
2083
{
1688
2083
(
1689
2083
+
1690
2083
and_expr
1691
2083
[
1693
2083
STRING
1694
2083
xor_expr
1695
2083
comparison
1696
2083
shift_expr
1697
2083
not_test
1698
2083
power
1699
2083
None
1700
2083
expr
1701
2083
NUMBER
1702
2083
~
1703
2083
not
1706
2084
NAME
1677
2084
atom_expr
1678
2084
term
1680
2084
atom
1681
2084
-
1682
2084
factor
1683
2084
arith_expr
1685
2084
True
1686
2084
False
1687
2084
{
1688
2084
(
1689
2084
+
1690
2084
and_expr
1691
2084
[
1693
2084
STRING
1694
2084
xor_expr
1695
2084
shift_expr
1697
2084
power
1699
2084
None
1700
2084
expr
1701
2084
NUMBER
1702
2084
~
1703
2084
comparison
2333
2085
is
factor -> ~ factor
2085
>=
factor -> ~ factor
2085
<<
factor -> ~ factor
2085
<=
factor -> ~ factor
2085
if
factor -> ~ factor
2085
==
factor -> ~ factor
2085
//
factor -> ~ factor
2085
or
factor -> ~ factor
2085
+
factor -> ~ factor
2085
as
factor -> ~ factor
2085
and
factor -> ~ factor
2085
!=
factor -> ~ factor
2085
&
factor -> ~ factor
2085
:
factor -> ~ factor
2085
|
factor -> ~ factor
2085
>>
factor -> ~ factor
2085
in
factor -> ~ factor
2085
>
factor -> ~ factor
2085
/
factor -> ~ factor
2085
not
factor -> ~ factor
2085
@
factor -> ~ factor
2085
-
factor -> ~ factor
2085
^
factor -> ~ factor
2085
*
factor -> ~ factor
2085
<
factor -> ~ factor
2085
%
factor -> ~ factor
2086
:
2334
2087
NAME
1677
2087
atom_expr
1678
2087
term
1680
2087
atom
1681
2087
-
1682
2087
factor
1683
2087
arith_expr
1685
2087
True
1686
2087
False
1687
2087
{
1688
2087
(
1689
2087
+
1690
2087
and_expr
1691
2087
and_test
1692
2087
[
1693
2087
STRING
1694
2087
xor_expr
1695
2087
comparison
1696
2087
shift_expr
1697
2087
not_test
1698
2087
power
1699
2087
None
1700
2087
expr
1701
2087
NUMBER
1702
2087
~
1703
2087
lambda
1704
2087
or_test
1705
2087
not
1706
2087
lambdef
1707
2087
test
2335
2088
atom_expr
685
2088
atom
686
2088
-
687
2088
factor
688
2088
and_test
689
2088
True
690
2088
arith_expr
691
2088
False
692
2088
NAME
693
2088
{
694
2088
+
695
2088
and_expr
696
2088
[
697
2088
(
698
2088
STRING
699
2088
term
700
2088
comparison
701
2088
shift_expr
702
2088
not_test
703
2088
power
704
2088
xor_expr
706
2088
None
707
2088
NUMBER
708
2088
expr
709
2088
~
710
2088
or_test
2336
2088
not
711
2089
:
not_test -> not not_test
2089
or
not_test -> not not_test
2089
if
not_test -> not not_test
2089
as
not_test -> not not_test
2089
and
not_test -> not not_test
2090
:
2337
2091
NAME
12
2091
True
1
2091
atom_expr
5
2091
suite
2338
2091
NEWLINE
682
2091
term
29
2091
factor
11
2091
atom
4
2091
shift_expr
7
2091
arith_expr
8
2091
False
27
2091
and_expr
9
2091
xor_expr
40
2091
{
41
2091
(
13
2091
[
15
2091
resetstats
16
2091
STRING
46
2091
raise
19
2091
test
47
2091
comparison
28
2091
or_test
23
2091
~
55
2091
-
43
2091
lambda
53
2091
+
31
2091
not_test
33
2091
and_test
48
2091
power
32
2091
pass
73
2091
None
34
2091
lambdef
37
2091
not
42
2091
NUMBER
39
2091
expr
50
2091
continue
74
2091
begsim
49
2091
del_stmt
75
2091
simple_stmt
683
2091
return
54
2091
nonlocal
76
2091
return_stmt
56
2091
endsim
57
2091
test_list
70
2091
raise_stmt
59
2091
assert_stmt
78
2091
stat_stmt
79
2091
global_stmt
61
2091
continue_stmt
62
2091
assert
63
2091
break_stmt
64
2091
nonlocal_stmt
80
2091
expr_stmt
81
2091
break
82
2091
del
66
2091
global
67
2091
yield
83
2091
pass_stmt
68
2091
flow_stmt
71
2091
yield_stmt
72
2091
sim_stmt
84
2091
small_stmt
684
2092
:
2339
2093
in
2340
2094
:
2341
2095
(
2342
2095
:
2343
2096
STRING
simple_stmt -> small_stmt NEWLINE
2096
while
simple_stmt -> small_stmt NEWLINE
2096
~
simple_stmt -> small_stmt NEWLINE
2096
del
simple_stmt -> small_stmt NEWLINE
2096
global
simple_stmt -> small_stmt NEWLINE
2096
NUMBER
simple_stmt -> small_stmt NEWLINE
2096
True
simple_stmt -> small_stmt NEWLINE
2096
DEDENT
simple_stmt -> small_stmt NEWLINE
2096
NAME
simple_stmt -> small_stmt NEWLINE
2096
with
simple_stmt -> small_stmt NEWLINE
2096
(
simple_stmt -> small_stmt NEWLINE
2096
-
simple_stmt -> small_stmt NEWLINE
2096
+
simple_stmt -> small_stmt NEWLINE
2096
continue
simple_stmt -> small_stmt NEWLINE
2096
endsim
simple_stmt -> small_stmt NEWLINE
2096
try
simple_stmt -> small_stmt NEWLINE
2096
[
simple_stmt -> small_stmt NEWLINE
2096
raise
simple_stmt -> small_stmt NEWLINE
2096
if
simple_stmt -> small_stmt NEWLINE
2096
{
simple_stmt -> small_stmt NEWLINE
2096
begsim
simple_stmt -> small_stmt NEWLINE
2096
return
simple_stmt -> small_stmt NEWLINE
2096
assert
simple_stmt -> small_stmt NEWLINE
2096
nonlocal
simple_stmt -> small_stmt NEWLINE
2096
not
simple_stmt -> small_stmt NEWLINE
2096
conf
simple_stmt -> small_stmt NEWLINE
2096
yield
simple_stmt -> small_stmt NEWLINE
2096
resetstats
simple_stmt -> small_stmt NEWLINE
2096
None
simple_stmt -> small_stmt NEWLINE
2096
for
simple_stmt -> small_stmt NEWLINE
2096
class
simple_stmt -> small_stmt NEWLINE
2096
@
simple_stmt -> small_stmt NEWLINE
2096
pass
simple_stmt -> small_stmt NEWLINE
2096
lambda
simple_stmt -> small_stmt NEWLINE
2096
False
simple_stmt -> small_stmt NEWLINE
2096
break
simple_stmt -> small_stmt NEWLINE
2096
def
simple_stmt -> small_stmt NEWLINE
2097
(
2344
2098
:
2345
2099
None
decorated -> decorators funcdef
2099
NUMBER
decorated -> decorators funcdef
2099
begsim
decorated -> decorators funcdef
2099
resetstats
decorated -> decorators funcdef
2099
class
decorated -> decorators funcdef
2099
continue
decorated -> decorators funcdef
2099
raise
decorated -> decorators funcdef
2099
for
decorated -> decorators funcdef
2099
endsim
decorated -> decorators funcdef
2099
pass
decorated -> decorators funcdef
2099
~
decorated -> decorators funcdef
2099
[
decorated -> decorators funcdef
2099
global
decorated -> decorators funcdef
2099
try
decorated -> decorators funcdef
2099
def
decorated -> decorators funcdef
2099
not
decorated -> decorators funcdef
2099
del
decorated -> decorators funcdef
2099
NAME
decorated -> decorators funcdef
2099
yield
decorated -> decorators funcdef
2099
assert
decorated -> decorators funcdef
2099
True
decorated -> decorators funcdef
2099
lambda
decorated -> decorators funcdef
2099
with
decorated -> decorators funcdef
2099
DEDENT
decorated -> decorators funcdef
2099
STRING
decorated -> decorators funcdef
2099
return
decorated -> decorators funcdef
2099
if
decorated -> decorators funcdef
2099
while
decorated -> decorators funcdef
2099
break
decorated -> decorators funcdef
2099
+
decorated -> decorators funcdef
2099
nonlocal
decorated -> decorators funcdef
2099
conf
decorated -> decorators funcdef
2099
False
decorated -> decorators funcdef
2099
(
decorated -> decorators funcdef
2099
-
decorated -> decorators funcdef
2099
{
decorated -> decorators funcdef
2099
@
decorated -> decorators funcdef
2100
endsim
decorated -> decorators classdef
2100
False
decorated -> decorators classdef
2100
yield
decorated -> decorators classdef
2100
break
decorated -> decorators classdef
2100
~
decorated -> decorators classdef
2100
lambda
decorated -> decorators classdef
2100
begsim
decorated -> decorators classdef
2100
continue
decorated -> decorators classdef
2100
for
decorated -> decorators classdef
2100
resetstats
decorated -> decorators classdef
2100
del
decorated -> decorators classdef
2100
True
decorated -> decorators classdef
2100
raise
decorated -> decorators classdef
2100
class
decorated -> decorators classdef
2100
assert
decorated -> decorators classdef
2100
[
decorated -> decorators classdef
2100
nonlocal
decorated -> decorators classdef
2100
def
decorated -> decorators classdef
2100
-
decorated -> decorators classdef
2100
global
decorated -> decorators classdef
2100
None
decorated -> decorators classdef
2100
NAME
decorated -> decorators classdef
2100
if
decorated -> decorators classdef
2100
(
decorated -> decorators classdef
2100
try
decorated -> decorators classdef
2100
+
decorated -> decorators classdef
2100
conf
decorated -> decorators classdef
2100
with
decorated -> decorators classdef
2100
NUMBER
decorated -> decorators classdef
2100
@
decorated -> decorators classdef
2100
while
decorated -> decorators classdef
2100
DEDENT
decorated -> decorators classdef
2100
return
decorated -> decorators classdef
2100
STRING
decorated -> decorators classdef
2100
not
decorated -> decorators classdef
2100
{
decorated -> decorators classdef
2100
pass
decorated -> decorators classdef
2101
DEDENT
stmt_list -> stmt stmt_list
2102
except
suite -> NEWLINE INDENT stmt_list DEDENT
2103
(
trailer -> [ subscriptlist ]
2103
//
trailer -> [ subscriptlist ]
2103
&
trailer -> [ subscriptlist ]
2103
>
trailer -> [ subscriptlist ]
2103
else
trailer -> [ subscriptlist ]
2103
in
trailer -> [ subscriptlist ]
2103
>>
trailer -> [ subscriptlist ]
2103
[
trailer -> [ subscriptlist ]
2103
<=
trailer -> [ subscriptlist ]
2103
-
trailer -> [ subscriptlist ]
2103
!=
trailer -> [ subscriptlist ]
2103
|
trailer -> [ subscriptlist ]
2103
not
trailer -> [ subscriptlist ]
2103
.
trailer -> [ subscriptlist ]
2103
>=
trailer -> [ subscriptlist ]
2103
or
trailer -> [ subscriptlist ]
2103
*
trailer -> [ subscriptlist ]
2103
<<
trailer -> [ subscriptlist ]
2103
**
trailer -> [ subscriptlist ]
2103
==
trailer -> [ subscriptlist ]
2103
+
trailer -> [ subscriptlist ]
2103
is
trailer -> [ subscriptlist ]
2103
/
trailer -> [ subscriptlist ]
2103
^
trailer -> [ subscriptlist ]
2103
and
trailer -> [ subscriptlist ]
2103
@
trailer -> [ subscriptlist ]
2103
<
trailer -> [ subscriptlist ]
2103
%
trailer -> [ subscriptlist ]
2104
or
trailer -> ( arglist )
2104
>>
trailer -> ( arglist )
2104
<=
trailer -> ( arglist )
2104
**
trailer -> ( arglist )
2104
<
trailer -> ( arglist )
2104
(
trailer -> ( arglist )
2104
-
trailer -> ( arglist )
2104
not
trailer -> ( arglist )
2104
and
trailer -> ( arglist )
2104
.
trailer -> ( arglist )
2104
is
trailer -> ( arglist )
2104
>
trailer -> ( arglist )
2104
in
trailer -> ( arglist )
2104
!=
trailer -> ( arglist )
2104
==
trailer -> ( arglist )
2104
%
trailer -> ( arglist )
2104
else
trailer -> ( arglist )
2104
@
trailer -> ( arglist )
2104
^
trailer -> ( arglist )
2104
<<
trailer -> ( arglist )
2104
*
trailer -> ( arglist )
2104
//
trailer -> ( arglist )
2104
&
trailer -> ( arglist )
2104
|
trailer -> ( arglist )
2104
>=
trailer -> ( arglist )
2104
+
trailer -> ( arglist )
2104
/
trailer -> ( arglist )
2104
[
trailer -> ( arglist )
2105
try
funcdef -> def NAME ( ) : suite
2105
resetstats
funcdef -> def NAME ( ) : suite
2105
pass
funcdef -> def NAME ( ) : suite
2105
break
funcdef -> def NAME ( ) : suite
2105
NEWLINE
funcdef -> def NAME ( ) : suite
2105
+
funcdef -> def NAME ( ) : suite
2105
global
funcdef -> def NAME ( ) : suite
2105
None
funcdef -> def NAME ( ) : suite
2105
True
funcdef -> def NAME ( ) : suite
2105
NUMBER
funcdef -> def NAME ( ) : suite
2105
def
funcdef -> def NAME ( ) : suite
2105
@
funcdef -> def NAME ( ) : suite
2105
for
funcdef -> def NAME ( ) : suite
2105
STRING
funcdef -> def NAME ( ) : suite
2105
continue
funcdef -> def NAME ( ) : suite
2105
while
funcdef -> def NAME ( ) : suite
2105
~
funcdef -> def NAME ( ) : suite
2105
{
funcdef -> def NAME ( ) : suite
2105
nonlocal
funcdef -> def NAME ( ) : suite
2105
del
funcdef -> def NAME ( ) : suite
2105
raise
funcdef -> def NAME ( ) : suite
2105
conf
funcdef -> def NAME ( ) : suite
2105
(
funcdef -> def NAME ( ) : suite
2105
class
funcdef -> def NAME ( ) : suite
2105
not
funcdef -> def NAME ( ) : suite
2105
[
funcdef -> def NAME ( ) : suite
2105
$
funcdef -> def NAME ( ) : suite
2105
begsim
funcdef -> def NAME ( ) : suite
2105
yield
funcdef -> def NAME ( ) : suite
2105
NAME
funcdef -> def NAME ( ) : suite
2105
-
funcdef -> def NAME ( ) : suite
2105
assert
funcdef -> def NAME ( ) : suite
2105
if
funcdef -> def NAME ( ) : suite
2105
endsim
funcdef -> def NAME ( ) : suite
2105
False
funcdef -> def NAME ( ) : suite
2105
with
funcdef -> def NAME ( ) : suite
2105
return
funcdef -> def NAME ( ) : suite
2105
lambda
funcdef -> def NAME ( ) : suite
2106
NAME
12
2106
True
1
2106
atom_expr
5
2106
term
29
2106
atom
4
2106
simple_stmt
1234
2106
factor
11
2106
shift_expr
7
2106
arith_expr
8
2106
False
27
2106
and_expr
9
2106
xor_expr
40
2106
{
41
2106
(
13
2106
[
15
2106
resetstats
16
2106
STRING
46
2106
raise
19
2106
small_stmt
21
2106
test
47
2106
comparison
28
2106
or_test
23
2106
~
55
2106
-
43
2106
lambda
53
2106
+
31
2106
not_test
33
2106
and_test
48
2106
power
32
2106
suite
2346
2106
pass
73
2106
None
34
2106
lambdef
37
2106
not
42
2106
NUMBER
39
2106
expr
50
2106
continue
74
2106
begsim
49
2106
del_stmt
75
2106
NEWLINE
1236
2106
return
54
2106
nonlocal
76
2106
return_stmt
56
2106
endsim
57
2106
test_list
70
2106
raise_stmt
59
2106
assert_stmt
78
2106
stat_stmt
79
2106
global_stmt
61
2106
continue_stmt
62
2106
assert
63
2106
break_stmt
64
2106
nonlocal_stmt
80
2106
expr_stmt
81
2106
break
82
2106
del
66
2106
global
67
2106
yield
83
2106
pass_stmt
68
2106
flow_stmt
71
2106
yield_stmt
72
2106
sim_stmt
84
2107
.
atom -> NAME
2107
<
atom -> NAME
2107
|
atom -> NAME
2107
not
atom -> NAME
2107
[
atom -> NAME
2107
,
atom -> NAME
2107
+
atom -> NAME
2107
%
atom -> NAME
2107
)
atom -> NAME
2107
<=
atom -> NAME
2107
=
atom -> NAME
2107
*
atom -> NAME
2107
!=
atom -> NAME
2107
in
atom -> NAME
2107
if
atom -> NAME
2107
is
atom -> NAME
2107
(
atom -> NAME
2107
^
atom -> NAME
2107
@
atom -> NAME
2107
&
atom -> NAME
2107
>>
atom -> NAME
2107
<<
atom -> NAME
2107
-
atom -> NAME
2107
/
atom -> NAME
2107
or
atom -> NAME
2107
//
atom -> NAME
2107
>=
atom -> NAME
2107
and
atom -> NAME
2107
>
atom -> NAME
2107
==
atom -> NAME
2107
**
atom -> NAME
2108
**
2347
2108
)
power -> atom_expr
2108
and
power -> atom_expr
2108
^
power -> atom_expr
2108
or
power -> atom_expr
2108
>>
power -> atom_expr
2108
if
power -> atom_expr
2108
<
power -> atom_expr
2108
>=
power -> atom_expr
2108
=
power -> atom_expr
2108
!=
power -> atom_expr
2108
is
power -> atom_expr
2108
<=
power -> atom_expr
2108
not
power -> atom_expr
2108
//
power -> atom_expr
2108
+
power -> atom_expr
2108
==
power -> atom_expr
2108
|
power -> atom_expr
2108
-
power -> atom_expr
2108
&
power -> atom_expr
2108
/
power -> atom_expr
2108
@
power -> atom_expr
2108
<<
power -> atom_expr
2108
,
power -> atom_expr
2108
%
power -> atom_expr
2108
*
power -> atom_expr
2108
in
power -> atom_expr
2108
>
power -> atom_expr
2109
trailer
2348
2109
trailer_expr
2349
2109
[
2350
2109
or
trailer_expr -> 
2109
.
2351
2109
(
2352
2109
not
trailer_expr -> 
2109
in
trailer_expr -> 
2109
is
trailer_expr -> 
2109
>=
trailer_expr -> 
2109
-
trailer_expr -> 
2109
@
trailer_expr -> 
2109
<=
trailer_expr -> 
2109
)
trailer_expr -> 
2109
,
trailer_expr -> 
2109
^
trailer_expr -> 
2109
*
trailer_expr -> 
2109
if
trailer_expr -> 
2109
**
trailer_expr -> 
2109
=
trailer_expr -> 
2109
>
trailer_expr -> 
2109
==
trailer_expr -> 
2109
>>
trailer_expr -> 
2109
<<
trailer_expr -> 
2109
/
trailer_expr -> 
2109
//
trailer_expr -> 
2109
!=
trailer_expr -> 
2109
<
trailer_expr -> 
2109
&
trailer_expr -> 
2109
|
trailer_expr -> 
2109
and
trailer_expr -> 
2109
+
trailer_expr -> 
2109
%
trailer_expr -> 
2110
NAME
2107
2110
atom_expr
2108
2110
atom
2109
2110
-
2110
2110
factor
2353
2110
[
2112
2110
True
2113
2110
False
2116
2110
{
2117
2110
+
2118
2110
(
2120
2110
STRING
2121
2110
power
2122
2110
None
2130
2110
NUMBER
2133
2110
~
2135
2111
%
2354
2111
/
2355
2111
*
2356
2111
//
2357
2111
@
2358
2111
not
term -> factor
2111
<<
term -> factor
2111
or
term -> factor
2111
^
term -> factor
2111
in
term -> factor
2111
if
term -> factor
2111
and
term -> factor
2111
<=
term -> factor
2111
&
term -> factor
2111
,
term -> factor
2111
>>
term -> factor
2111
=
term -> factor
2111
>
term -> factor
2111
|
term -> factor
2111
<
term -> factor
2111
is
term -> factor
2111
!=
term -> factor
2111
>=
term -> factor
2111
==
term -> factor
2111
-
term -> factor
2111
+
term -> factor
2111
)
term -> factor
2112
NAME
187
2112
atom_expr
188
2112
atom
189
2112
-
190
2112
factor
191
2112
test_list_comp
2359
2112
[
193
2112
True
194
2112
arith_expr
195
2112
False
196
2112
{
197
2112
+
198
2112
and_expr
199
2112
(
200
2112
STRING
201
2112
]
2360
2112
term
203
2112
and_test
204
2112
comparison
205
2112
shift_expr
206
2112
not_test
207
2112
power
208
2112
or_test
209
2112
None
210
2112
xor_expr
211
2112
expr
212
2112
NUMBER
213
2112
lambda
214
2112
~
215
2112
lambdef
216
2112
not
217
2112
test
218
2112
test_list
219
2113
!=
atom -> True
2113
&
atom -> True
2113
+
atom -> True
2113
<<
atom -> True
2113
@
atom -> True
2113
,
atom -> True
2113
if
atom -> True
2113
and
atom -> True
2113
is
atom -> True
2113
|
atom -> True
2113
<
atom -> True
2113
>=
atom -> True
2113
or
atom -> True
2113
=
atom -> True
2113
==
atom -> True
2113
%
atom -> True
2113
>
atom -> True
2113
[
atom -> True
2113
*
atom -> True
2113
)
atom -> True
2113
//
atom -> True
2113
/
atom -> True
2113
in
atom -> True
2113
-
atom -> True
2113
^
atom -> True
2113
<=
atom -> True
2113
(
atom -> True
2113
**
atom -> True
2113
.
atom -> True
2113
not
atom -> True
2113
>>
atom -> True
2114
or
shift_expr -> arith_expr
2114
>>
2361
2114
<<
2362
2114
)
shift_expr -> arith_expr
2114
^
shift_expr -> arith_expr
2114
in
shift_expr -> arith_expr
2114
,
shift_expr -> arith_expr
2114
<=
shift_expr -> arith_expr
2114
>=
shift_expr -> arith_expr
2114
&
shift_expr -> arith_expr
2114
==
shift_expr -> arith_expr
2114
=
shift_expr -> arith_expr
2114
not
shift_expr -> arith_expr
2114
and
shift_expr -> arith_expr
2114
>
shift_expr -> arith_expr
2114
!=
shift_expr -> arith_expr
2114
if
shift_expr -> arith_expr
2114
|
shift_expr -> arith_expr
2114
<
shift_expr -> arith_expr
2114
is
shift_expr -> arith_expr
2115
|
2363
2115
>
expr -> xor_expr
2115
<
expr -> xor_expr
2115
and
expr -> xor_expr
2115
>=
expr -> xor_expr
2115
,
expr -> xor_expr
2115
!=
expr -> xor_expr
2115
or
expr -> xor_expr
2115
in
expr -> xor_expr
2115
is
expr -> xor_expr
2115
if
expr -> xor_expr
2115
==
expr -> xor_expr
2115
=
expr -> xor_expr
2115
)
expr -> xor_expr
2115
<=
expr -> xor_expr
2115
not
expr -> xor_expr
2116
not
atom -> False
2116
==
atom -> False
2116
)
atom -> False
2116
*
atom -> False
2116
>
atom -> False
2116
,
atom -> False
2116
[
atom -> False
2116
if
atom -> False
2116
@
atom -> False
2116
&
atom -> False
2116
is
atom -> False
2116
.
atom -> False
2116
=
atom -> False
2116
+
atom -> False
2116
%
atom -> False
2116
>=
atom -> False
2116
and
atom -> False
2116
(
atom -> False
2116
|
atom -> False
2116
-
atom -> False
2116
/
atom -> False
2116
in
atom -> False
2116
<<
atom -> False
2116
<=
atom -> False
2116
^
atom -> False
2116
//
atom -> False
2116
>>
atom -> False
2116
!=
atom -> False
2116
**
atom -> False
2116
or
atom -> False
2116
<
atom -> False
2117
}
2364
2118
NAME
2107
2118
atom_expr
2108
2118
atom
2109
2118
-
2110
2118
[
2112
2118
True
2113
2118
False
2116
2118
{
2117
2118
+
2118
2118
(
2120
2118
STRING
2121
2118
power
2122
2118
factor
2365
2118
None
2130
2118
NUMBER
2133
2118
~
2135
2119
^
2366
2119
<
xor_expr -> and_expr
2119
<=
xor_expr -> and_expr
2119
|
xor_expr -> and_expr
2119
not
xor_expr -> and_expr
2119
and
xor_expr -> and_expr
2119
)
xor_expr -> and_expr
2119
!=
xor_expr -> and_expr
2119
or
xor_expr -> and_expr
2119
>
xor_expr -> and_expr
2119
>=
xor_expr -> and_expr
2119
==
xor_expr -> and_expr
2119
,
xor_expr -> and_expr
2119
=
xor_expr -> and_expr
2119
in
xor_expr -> and_expr
2119
is
xor_expr -> and_expr
2119
if
xor_expr -> and_expr
2120
NAME
131
2120
atom_expr
132
2120
atom
133
2120
-
134
2120
)
2367
2120
factor
136
2120
[
137
2120
True
138
2120
arith_expr
139
2120
False
140
2120
{
141
2120
+
142
2120
and_expr
143
2120
(
144
2120
STRING
145
2120
test_list_comp
2368
2120
power
147
2120
term
148
2120
comparison
149
2120
shift_expr
150
2120
test
151
2120
not_test
152
2120
or_test
153
2120
lambda
154
2120
None
155
2120
xor_expr
156
2120
expr
157
2120
NUMBER
158
2120
and_test
159
2120
~
160
2120
lambdef
161
2120
not
162
2120
test_list
163
2121
and
atom -> STRING
2121
not
atom -> STRING
2121
.
atom -> STRING
2121
//
atom -> STRING
2121
-
atom -> STRING
2121
*
atom -> STRING
2121
(
atom -> STRING
2121
>=
atom -> STRING
2121
<=
atom -> STRING
2121
<<
atom -> STRING
2121
if
atom -> STRING
2121
+
atom -> STRING
2121
or
atom -> STRING
2121
=
atom -> STRING
2121
/
atom -> STRING
2121
@
atom -> STRING
2121
in
atom -> STRING
2121
>>
atom -> STRING
2121
%
atom -> STRING
2121
!=
atom -> STRING
2121
,
atom -> STRING
2121
>
atom -> STRING
2121
^
atom -> STRING
2121
<
atom -> STRING
2121
==
atom -> STRING
2121
**
atom -> STRING
2121
&
atom -> STRING
2121
|
atom -> STRING
2121
is
atom -> STRING
2121
)
atom -> STRING
2121
[
atom -> STRING
2122
<=
factor -> power
2122
,
factor -> power
2122
is
factor -> power
2122
>
factor -> power
2122
)
factor -> power
2122
==
factor -> power
2122
^
factor -> power
2122
or
factor -> power
2122
-
factor -> power
2122
+
factor -> power
2122
>>
factor -> power
2122
/
factor -> power
2122
*
factor -> power
2122
<<
factor -> power
2122
|
factor -> power
2122
and
factor -> power
2122
<
factor -> power
2122
not
factor -> power
2122
!=
factor -> power
2122
if
factor -> power
2122
&
factor -> power
2122
in
factor -> power
2122
%
factor -> power
2122
=
factor -> power
2122
>=
factor -> power
2122
//
factor -> power
2122
@
factor -> power
2123
+
2369
2123
or
arith_expr -> term
2123
)
arith_expr -> term
2123
==
arith_expr -> term
2123
-
2370
2123
in
arith_expr -> term
2123
<<
arith_expr -> term
2123
>
arith_expr -> term
2123
is
arith_expr -> term
2123
>=
arith_expr -> term
2123
=
arith_expr -> term
2123
<=
arith_expr -> term
2123
and
arith_expr -> term
2123
>>
arith_expr -> term
2123
!=
arith_expr -> term
2123
not
arith_expr -> term
2123
&
arith_expr -> term
2123
,
arith_expr -> term
2123
if
arith_expr -> term
2123
<
arith_expr -> term
2123
^
arith_expr -> term
2123
|
arith_expr -> term
2124
=
not_test -> comparison
2124
if
not_test -> comparison
2124
)
not_test -> comparison
2124
or
not_test -> comparison
2124
,
not_test -> comparison
2124
and
not_test -> comparison
2125
==
and_expr -> shift_expr
2125
&
2371
2125
!=
and_expr -> shift_expr
2125
<
and_expr -> shift_expr
2125
<=
and_expr -> shift_expr
2125
and
and_expr -> shift_expr
2125
in
and_expr -> shift_expr
2125
=
and_expr -> shift_expr
2125
^
and_expr -> shift_expr
2125
not
and_expr -> shift_expr
2125
is
and_expr -> shift_expr
2125
if
and_expr -> shift_expr
2125
,
and_expr -> shift_expr
2125
>
and_expr -> shift_expr
2125
or
and_expr -> shift_expr
2125
>=
and_expr -> shift_expr
2125
)
and_expr -> shift_expr
2125
|
and_expr -> shift_expr
2126
and
2372
2126
if
and_test -> not_test
2126
=
and_test -> not_test
2126
)
and_test -> not_test
2126
or
and_test -> not_test
2126
,
and_test -> not_test
2127
=
test -> or_test
2127
if
2373
2127
,
test -> or_test
2127
)
test -> or_test
2128
=
test -> lambdef
2128
)
test -> lambdef
2128
,
test -> lambdef
2129
:
2374
2129
vfpdef
343
2129
NAME
342
2129
varargslist
2375
2130
+
atom -> None
2130
>>
atom -> None
2130
/
atom -> None
2130
or
atom -> None
2130
*
atom -> None
2130
in
atom -> None
2130
**
atom -> None
2130
==
atom -> None
2130
-
atom -> None
2130
if
atom -> None
2130
(
atom -> None
2130
@
atom -> None
2130
)
atom -> None
2130
[
atom -> None
2130
>=
atom -> None
2130
=
atom -> None
2130
^
atom -> None
2130
&
atom -> None
2130
<=
atom -> None
2130
is
atom -> None
2130
.
atom -> None
2130
not
atom -> None
2130
//
atom -> None
2130
<
atom -> None
2130
<<
atom -> None
2130
!=
atom -> None
2130
and
atom -> None
2130
%
atom -> None
2130
|
atom -> None
2130
,
atom -> None
2130
>
atom -> None
2131
=
tfpdef -> NAME : test
2131
,
tfpdef -> NAME : test
2131
)
tfpdef -> NAME : test
2132
==
330
2132
is
331
2132
<=
332
2132
comp_op
2376
2132
and
comparison -> expr
2132
!=
334
2132
>
335
2132
not
336
2132
in
337
2132
or
comparison -> expr
2132
<
338
2132
>=
339
2132
)
comparison -> expr
2132
if
comparison -> expr
2132
,
comparison -> expr
2132
=
comparison -> expr
2133
is
atom -> NUMBER
2133
|
atom -> NUMBER
2133
=
atom -> NUMBER
2133
in
atom -> NUMBER
2133
@
atom -> NUMBER
2133
**
atom -> NUMBER
2133
and
atom -> NUMBER
2133
!=
atom -> NUMBER
2133
if
atom -> NUMBER
2133
-
atom -> NUMBER
2133
<<
atom -> NUMBER
2133
.
atom -> NUMBER
2133
(
atom -> NUMBER
2133
==
atom -> NUMBER
2133
%
atom -> NUMBER
2133
^
atom -> NUMBER
2133
not
atom -> NUMBER
2133
>=
atom -> NUMBER
2133
,
atom -> NUMBER
2133
/
atom -> NUMBER
2133
)
atom -> NUMBER
2133
//
atom -> NUMBER
2133
>
atom -> NUMBER
2133
&
atom -> NUMBER
2133
[
atom -> NUMBER
2133
<=
atom -> NUMBER
2133
*
atom -> NUMBER
2133
or
atom -> NUMBER
2133
+
atom -> NUMBER
2133
>>
atom -> NUMBER
2133
<
atom -> NUMBER
2134
or
2377
2134
)
or_test -> and_test
2134
=
or_test -> and_test
2134
if
or_test -> and_test
2134
,
or_test -> and_test
2135
NAME
2107
2135
atom_expr
2108
2135
atom
2109
2135
-
2110
2135
[
2112
2135
True
2113
2135
False
2116
2135
{
2117
2135
+
2118
2135
factor
2378
2135
(
2120
2135
STRING
2121
2135
power
2122
2135
None
2130
2135
NUMBER
2133
2135
~
2135
2136
NAME
2107
2136
atom_expr
2108
2136
atom
2109
2136
-
2110
2136
factor
2111
2136
[
2112
2136
True
2113
2136
arith_expr
2114
2136
xor_expr
2115
2136
False
2116
2136
{
2117
2136
+
2118
2136
and_expr
2119
2136
(
2120
2136
STRING
2121
2136
power
2122
2136
term
2123
2136
comparison
2124
2136
shift_expr
2125
2136
not_test
2379
2136
None
2130
2136
expr
2132
2136
NUMBER
2133
2136
~
2135
2136
not
2136
2137
,
param -> tfpdef = test
2137
)
param -> tfpdef = test
2138
NAME
1005
2138
atom_expr
1006
2138
atom
1007
2138
-
1008
2138
factor
1009
2138
[
1010
2138
True
1011
2138
arith_expr
1012
2138
False
1013
2138
{
1014
2138
+
1015
2138
and_expr
1016
2138
(
1017
2138
STRING
1018
2138
power
1019
2138
term
1020
2138
comparison
1021
2138
shift_expr
1022
2138
not_test
1023
2138
or_test
1024
2138
lambda
1025
2138
None
1026
2138
test
2380
2138
xor_expr
1027
2138
expr
1028
2138
NUMBER
1029
2138
and_test
1030
2138
~
1031
2138
lambdef
1033
2138
not
1034
2139
)
parameters -> param , parameters
2140
as
test -> or_test if or_test else test
2140
:
test -> or_test if or_test else test
2140
,
test -> or_test if or_test else test
2141
,
arith_expr -> term + arith_expr
2141
|
arith_expr -> term + arith_expr
2141
:
arith_expr -> term + arith_expr
2141
^
arith_expr -> term + arith_expr
2141
>>
arith_expr -> term + arith_expr
2141
<<
arith_expr -> term + arith_expr
2141
&
arith_expr -> term + arith_expr
2142
>>
arith_expr -> term - arith_expr
2142
&
arith_expr -> term - arith_expr
2142
<<
arith_expr -> term - arith_expr
2142
|
arith_expr -> term - arith_expr
2142
:
arith_expr -> term - arith_expr
2142
^
arith_expr -> term - arith_expr
2142
,
arith_expr -> term - arith_expr
2143
//
trailer_expr -> trailer trailer_expr
2143
*
trailer_expr -> trailer trailer_expr
2143
&
trailer_expr -> trailer trailer_expr
2143
+
trailer_expr -> trailer trailer_expr
2143
^
trailer_expr -> trailer trailer_expr
2143
-
trailer_expr -> trailer trailer_expr
2143
**
trailer_expr -> trailer trailer_expr
2143
|
trailer_expr -> trailer trailer_expr
2143
>>
trailer_expr -> trailer trailer_expr
2143
@
trailer_expr -> trailer trailer_expr
2143
%
trailer_expr -> trailer trailer_expr
2143
/
trailer_expr -> trailer trailer_expr
2143
,
trailer_expr -> trailer trailer_expr
2143
:
trailer_expr -> trailer trailer_expr
2143
<<
trailer_expr -> trailer trailer_expr
2144
)
2381
2145
:
trailer -> ( )
2145
*
trailer -> ( )
2145
//
trailer -> ( )
2145
**
trailer -> ( )
2145
<<
trailer -> ( )
2145
(
trailer -> ( )
2145
/
trailer -> ( )
2145
[
trailer -> ( )
2145
@
trailer -> ( )
2145
^
trailer -> ( )
2145
&
trailer -> ( )
2145
>>
trailer -> ( )
2145
%
trailer -> ( )
2145
-
trailer -> ( )
2145
+
trailer -> ( )
2145
|
trailer -> ( )
2145
,
trailer -> ( )
2145
.
trailer -> ( )
2146
]
2382
2147
**
trailer -> . NAME
2147
>>
trailer -> . NAME
2147
%
trailer -> . NAME
2147
+
trailer -> . NAME
2147
,
trailer -> . NAME
2147
:
trailer -> . NAME
2147
^
trailer -> . NAME
2147
-
trailer -> . NAME
2147
<<
trailer -> . NAME
2147
(
trailer -> . NAME
2147
&
trailer -> . NAME
2147
/
trailer -> . NAME
2147
//
trailer -> . NAME
2147
[
trailer -> . NAME
2147
|
trailer -> . NAME
2147
@
trailer -> . NAME
2147
*
trailer -> . NAME
2147
.
trailer -> . NAME
2148
@
power -> atom_expr ** factor
2148
|
power -> atom_expr ** factor
2148
/
power -> atom_expr ** factor
2148
&
power -> atom_expr ** factor
2148
>>
power -> atom_expr ** factor
2148
^
power -> atom_expr ** factor
2148
%
power -> atom_expr ** factor
2148
:
power -> atom_expr ** factor
2148
*
power -> atom_expr ** factor
2148
//
power -> atom_expr ** factor
2148
,
power -> atom_expr ** factor
2148
<<
power -> atom_expr ** factor
2148
-
power -> atom_expr ** factor
2148
+
power -> atom_expr ** factor
2149
<<
atom -> [ test_list_comp ]
2149
:
atom -> [ test_list_comp ]
2149
**
atom -> [ test_list_comp ]
2149
/
atom -> [ test_list_comp ]
2149
(
atom -> [ test_list_comp ]
2149
%
atom -> [ test_list_comp ]
2149
,
atom -> [ test_list_comp ]
2149
>>
atom -> [ test_list_comp ]
2149
^
atom -> [ test_list_comp ]
2149
[
atom -> [ test_list_comp ]
2149
*
atom -> [ test_list_comp ]
2149
&
atom -> [ test_list_comp ]
2149
+
atom -> [ test_list_comp ]
2149
-
atom -> [ test_list_comp ]
2149
|
atom -> [ test_list_comp ]
2149
@
atom -> [ test_list_comp ]
2149
//
atom -> [ test_list_comp ]
2149
.
atom -> [ test_list_comp ]
2150
^
atom -> ( test_list_comp )
2150
-
atom -> ( test_list_comp )
2150
|
atom -> ( test_list_comp )
2150
&
atom -> ( test_list_comp )
2150
,
atom -> ( test_list_comp )
2150
(
atom -> ( test_list_comp )
2150
@
atom -> ( test_list_comp )
2150
**
atom -> ( test_list_comp )
2150
*
atom -> ( test_list_comp )
2150
%
atom -> ( test_list_comp )
2150
//
atom -> ( test_list_comp )
2150
[
atom -> ( test_list_comp )
2150
<<
atom -> ( test_list_comp )
2150
:
atom -> ( test_list_comp )
2150
.
atom -> ( test_list_comp )
2150
/
atom -> ( test_list_comp )
2150
+
atom -> ( test_list_comp )
2150
>>
atom -> ( test_list_comp )
2151
|
term -> factor % term
2151
<<
term -> factor % term
2151
^
term -> factor % term
2151
+
term -> factor % term
2151
-
term -> factor % term
2151
>>
term -> factor % term
2151
,
term -> factor % term
2151
&
term -> factor % term
2151
:
term -> factor % term
2152
>>
term -> factor @ term
2152
&
term -> factor @ term
2152
^
term -> factor @ term
2152
<<
term -> factor @ term
2152
|
term -> factor @ term
2152
+
term -> factor @ term
2152
,
term -> factor @ term
2152
:
term -> factor @ term
2152
-
term -> factor @ term
2153
+
term -> factor * term
2153
:
term -> factor * term
2153
<<
term -> factor * term
2153
^
term -> factor * term
2153
-
term -> factor * term
2153
&
term -> factor * term
2153
,
term -> factor * term
2153
>>
term -> factor * term
2153
|
term -> factor * term
2154
<<
term -> factor // term
2154
:
term -> factor // term
2154
-
term -> factor // term
2154
&
term -> factor // term
2154
^
term -> factor // term
2154
+
term -> factor // term
2154
,
term -> factor // term
2154
|
term -> factor // term
2154
>>
term -> factor // term
2155
&
term -> factor / term
2155
:
term -> factor / term
2155
+
term -> factor / term
2155
<<
term -> factor / term
2155
-
term -> factor / term
2155
,
term -> factor / term
2155
>>
term -> factor / term
2155
|
term -> factor / term
2155
^
term -> factor / term
2156
^
shift_expr -> arith_expr >> shift_expr
2156
,
shift_expr -> arith_expr >> shift_expr
2156
:
shift_expr -> arith_expr >> shift_expr
2156
&
shift_expr -> arith_expr >> shift_expr
2156
|
shift_expr -> arith_expr >> shift_expr
2157
,
shift_expr -> arith_expr << shift_expr
2157
&
shift_expr -> arith_expr << shift_expr
2157
:
shift_expr -> arith_expr << shift_expr
2157
^
shift_expr -> arith_expr << shift_expr
2157
|
shift_expr -> arith_expr << shift_expr
2158
,
expr -> xor_expr | expr
2158
:
expr -> xor_expr | expr
2159
,
and_expr -> shift_expr & and_expr
2159
:
and_expr -> shift_expr & and_expr
2159
|
and_expr -> shift_expr & and_expr
2159
^
and_expr -> shift_expr & and_expr
2160
,
xor_expr -> and_expr ^ xor_expr
2160
:
xor_expr -> and_expr ^ xor_expr
2160
|
xor_expr -> and_expr ^ xor_expr
2161
NEWLINE
test -> or_test if or_test else test
2162
@
decorator -> @ dotted_name ( arglist ) NEWLINE
2162
class
decorator -> @ dotted_name ( arglist ) NEWLINE
2162
def
decorator -> @ dotted_name ( arglist ) NEWLINE
2163
NEWLINE
test -> or_test if or_test else test
2163
,
test -> or_test if or_test else test
2164
(
trailer -> [ subscriptlist ]
2164
//
trailer -> [ subscriptlist ]
2164
&
trailer -> [ subscriptlist ]
2164
>
trailer -> [ subscriptlist ]
2164
in
trailer -> [ subscriptlist ]
2164
>>
trailer -> [ subscriptlist ]
2164
[
trailer -> [ subscriptlist ]
2164
<=
trailer -> [ subscriptlist ]
2164
-
trailer -> [ subscriptlist ]
2164
!=
trailer -> [ subscriptlist ]
2164
|
trailer -> [ subscriptlist ]
2164
=
trailer -> [ subscriptlist ]
2164
not
trailer -> [ subscriptlist ]
2164
.
trailer -> [ subscriptlist ]
2164
>=
trailer -> [ subscriptlist ]
2164
or
trailer -> [ subscriptlist ]
2164
*
trailer -> [ subscriptlist ]
2164
<<
trailer -> [ subscriptlist ]
2164
**
trailer -> [ subscriptlist ]
2164
==
trailer -> [ subscriptlist ]
2164
+
trailer -> [ subscriptlist ]
2164
is
trailer -> [ subscriptlist ]
2164
/
trailer -> [ subscriptlist ]
2164
^
trailer -> [ subscriptlist ]
2164
and
trailer -> [ subscriptlist ]
2164
NEWLINE
trailer -> [ subscriptlist ]
2164
,
trailer -> [ subscriptlist ]
2164
@
trailer -> [ subscriptlist ]
2164
if
trailer -> [ subscriptlist ]
2164
<
trailer -> [ subscriptlist ]
2164
%
trailer -> [ subscriptlist ]
2165
or
trailer -> ( arglist )
2165
NEWLINE
trailer -> ( arglist )
2165
>>
trailer -> ( arglist )
2165
<=
trailer -> ( arglist )
2165
**
trailer -> ( arglist )
2165
<
trailer -> ( arglist )
2165
(
trailer -> ( arglist )
2165
-
trailer -> ( arglist )
2165
not
trailer -> ( arglist )
2165
if
trailer -> ( arglist )
2165
and
trailer -> ( arglist )
2165
.
trailer -> ( arglist )
2165
is
trailer -> ( arglist )
2165
>
trailer -> ( arglist )
2165
in
trailer -> ( arglist )
2165
!=
trailer -> ( arglist )
2165
,
trailer -> ( arglist )
2165
==
trailer -> ( arglist )
2165
%
trailer -> ( arglist )
2165
@
trailer -> ( arglist )
2165
^
trailer -> ( arglist )
2165
<<
trailer -> ( arglist )
2165
*
trailer -> ( arglist )
2165
//
trailer -> ( arglist )
2165
&
trailer -> ( arglist )
2165
|
trailer -> ( arglist )
2165
>=
trailer -> ( arglist )
2165
+
trailer -> ( arglist )
2165
/
trailer -> ( arglist )
2165
=
trailer -> ( arglist )
2165
[
trailer -> ( arglist )
2166
NAME
859
2166
atom_expr
860
2166
term
861
2166
atom
862
2166
-
863
2166
factor
864
2166
[
865
2166
True
866
2166
arith_expr
867
2166
xor_expr
868
2166
False
869
2166
{
870
2166
+
871
2166
and_expr
872
2166
(
873
2166
STRING
874
2166
comparison
876
2166
shift_expr
877
2166
not_test
878
2166
power
879
2166
lambdef
880
2166
None
881
2166
expr
882
2166
NUMBER
883
2166
and_test
884
2166
or_test
885
2166
~
887
2166
test
2383
2166
lambda
889
2166
not
890
2167
NAME
1830
2167
atom_expr
1831
2167
atom
1833
2167
-
1834
2167
True
1836
2167
False
1839
2167
{
1840
2167
+
1841
2167
[
1843
2167
(
1844
2167
STRING
1845
2167
factor
2384
2167
power
1849
2167
None
1851
2167
NUMBER
1853
2167
~
1856
2168
NAME
1830
2168
atom_expr
1831
2168
term
1832
2168
atom
1833
2168
-
1834
2168
factor
1835
2168
True
1836
2168
False
1839
2168
{
1840
2168
+
1841
2168
[
1843
2168
(
1844
2168
STRING
1845
2168
arith_expr
2385
2168
power
1849
2168
None
1851
2168
NUMBER
1853
2168
~
1856
2169
NAME
1830
2169
atom_expr
1831
2169
term
1832
2169
atom
1833
2169
-
1834
2169
factor
1835
2169
True
1836
2169
False
1839
2169
{
1840
2169
+
1841
2169
[
1843
2169
(
1844
2169
STRING
1845
2169
arith_expr
2386
2169
power
1849
2169
None
1851
2169
NUMBER
1853
2169
~
1856
2170
trailer
2170
2170
trailer_expr
2387
2170
[
2172
2170
or
trailer_expr -> 
2170
.
2173
2170
(
2174
2170
not
trailer_expr -> 
2170
in
trailer_expr -> 
2170
is
trailer_expr -> 
2170
>=
trailer_expr -> 
2170
-
trailer_expr -> 
2170
@
trailer_expr -> 
2170
<=
trailer_expr -> 
2170
^
trailer_expr -> 
2170
*
trailer_expr -> 
2170
if
trailer_expr -> 
2170
**
trailer_expr -> 
2170
=
trailer_expr -> 
2170
>
trailer_expr -> 
2170
==
trailer_expr -> 
2170
>>
trailer_expr -> 
2170
<<
trailer_expr -> 
2170
/
trailer_expr -> 
2170
NEWLINE
trailer_expr -> 
2170
//
trailer_expr -> 
2170
!=
trailer_expr -> 
2170
<
trailer_expr -> 
2170
&
trailer_expr -> 
2170
|
trailer_expr -> 
2170
and
trailer_expr -> 
2170
+
trailer_expr -> 
2170
%
trailer_expr -> 
2171
|
atom_expr -> atom trailer_expr
2171
*
atom_expr -> atom trailer_expr
2171
-
atom_expr -> atom trailer_expr
2171
not
atom_expr -> atom trailer_expr
2171
in
atom_expr -> atom trailer_expr
2171
and
atom_expr -> atom trailer_expr
2171
^
atom_expr -> atom trailer_expr
2171
or
atom_expr -> atom trailer_expr
2171
<=
atom_expr -> atom trailer_expr
2171
<
atom_expr -> atom trailer_expr
2171
>>
atom_expr -> atom trailer_expr
2171
NEWLINE
atom_expr -> atom trailer_expr
2171
//
atom_expr -> atom trailer_expr
2171
!=
atom_expr -> atom trailer_expr
2171
<<
atom_expr -> atom trailer_expr
2171
+
atom_expr -> atom trailer_expr
2171
>
atom_expr -> atom trailer_expr
2171
/
atom_expr -> atom trailer_expr
2171
==
atom_expr -> atom trailer_expr
2171
%
atom_expr -> atom trailer_expr
2171
&
atom_expr -> atom trailer_expr
2171
@
atom_expr -> atom trailer_expr
2171
if
atom_expr -> atom trailer_expr
2171
=
atom_expr -> atom trailer_expr
2171
>=
atom_expr -> atom trailer_expr
2171
is
atom_expr -> atom trailer_expr
2171
**
atom_expr -> atom trailer_expr
2172
NAME
461
2172
atom_expr
462
2172
term
463
2172
atom
464
2172
-
465
2172
factor
466
2172
[
467
2172
True
468
2172
arith_expr
469
2172
False
470
2172
{
471
2172
(
472
2172
+
473
2172
and_expr
474
2172
and_test
475
2172
STRING
476
2172
subscriptlist
2388
2172
comparison
478
2172
shift_expr
479
2172
not_test
480
2172
power
481
2172
None
482
2172
xor_expr
483
2172
expr
484
2172
NUMBER
485
2172
test
486
2172
~
487
2172
or_test
488
2172
not
489
2172
lambdef
490
2172
:
maybe_test -> 
2172
lambda
491
2172
subscript
492
2172
maybe_test
493
2173
NAME
2389
2174
NAME
496
2174
atom_expr
497
2174
atom
498
2174
-
499
2174
arglist
2390
2174
factor
501
2174
*
502
2174
[
503
2174
True
504
2174
arith_expr
505
2174
xor_expr
506
2174
False
507
2174
**
508
2174
{
509
2174
+
510
2174
)
2391
2174
and_expr
512
2174
(
513
2174
STRING
514
2174
power
515
2174
term
516
2174
comparison
517
2174
shift_expr
518
2174
argument
519
2174
not_test
520
2174
or_test
521
2174
lambdef
522
2174
lambda
523
2174
None
524
2174
test
525
2174
expr
526
2174
NUMBER
527
2174
and_test
528
2174
~
529
2174
not
530
2175
>>
factor -> - factor
2175
if
factor -> - factor
2175
>
factor -> - factor
2175
@
factor -> - factor
2175
is
factor -> - factor
2175
//
factor -> - factor
2175
not
factor -> - factor
2175
or
factor -> - factor
2175
-
factor -> - factor
2175
<<
factor -> - factor
2175
>=
factor -> - factor
2175
/
factor -> - factor
2175
<=
factor -> - factor
2175
<
factor -> - factor
2175
in
factor -> - factor
2175
*
factor -> - factor
2175
|
factor -> - factor
2175
NEWLINE
factor -> - factor
2175
!=
factor -> - factor
2175
&
factor -> - factor
2175
and
factor -> - factor
2175
^
factor -> - factor
2175
+
factor -> - factor
2175
%
factor -> - factor
2175
==
factor -> - factor
2175
=
factor -> - factor
2176
NAME
1830
2176
atom_expr
1831
2176
atom
1833
2176
-
1834
2176
factor
1835
2176
True
1836
2176
False
1839
2176
{
1840
2176
+
1841
2176
[
1843
2176
(
1844
2176
STRING
1845
2176
term
2392
2176
power
1849
2176
None
1851
2176
NUMBER
1853
2176
~
1856
2177
NAME
1830
2177
atom_expr
1831
2177
atom
1833
2177
-
1834
2177
factor
1835
2177
True
1836
2177
False
1839
2177
term
2393
2177
{
1840
2177
+
1841
2177
[
1843
2177
(
1844
2177
STRING
1845
2177
power
1849
2177
None
1851
2177
NUMBER
1853
2177
~
1856
2178
NAME
1830
2178
atom_expr
1831
2178
atom
1833
2178
-
1834
2178
factor
1835
2178
True
1836
2178
False
1839
2178
{
1840
2178
+
1841
2178
[
1843
2178
(
1844
2178
STRING
1845
2178
power
1849
2178
None
1851
2178
NUMBER
1853
2178
~
1856
2178
term
2394
2179
NAME
1830
2179
atom_expr
1831
2179
atom
1833
2179
-
1834
2179
factor
1835
2179
term
2395
2179
True
1836
2179
False
1839
2179
{
1840
2179
+
1841
2179
[
1843
2179
(
1844
2179
STRING
1845
2179
power
1849
2179
None
1851
2179
NUMBER
1853
2179
~
1856
2180
NAME
1830
2180
atom_expr
1831
2180
atom
1833
2180
-
1834
2180
factor
1835
2180
True
1836
2180
False
1839
2180
{
1840
2180
+
1841
2180
[
1843
2180
(
1844
2180
STRING
1845
2180
term
2396
2180
power
1849
2180
None
1851
2180
NUMBER
1853
2180
~
1856
2181
NAME
1830
2181
atom_expr
1831
2181
term
1832
2181
atom
1833
2181
-
1834
2181
factor
1835
2181
True
1836
2181
arith_expr
1837
2181
False
1839
2181
{
1840
2181
+
1841
2181
[
1843
2181
(
1844
2181
STRING
1845
2181
shift_expr
2397
2181
power
1849
2181
None
1851
2181
NUMBER
1853
2181
~
1856
2182
NAME
1830
2182
atom_expr
1831
2182
term
1832
2182
atom
1833
2182
-
1834
2182
factor
1835
2182
True
1836
2182
arith_expr
1837
2182
False
1839
2182
{
1840
2182
shift_expr
2398
2182
+
1841
2182
[
1843
2182
(
1844
2182
STRING
1845
2182
power
1849
2182
None
1851
2182
NUMBER
1853
2182
~
1856
2183
NAME
1830
2183
atom_expr
1831
2183
term
1832
2183
atom
1833
2183
-
1834
2183
factor
1835
2183
True
1836
2183
arith_expr
1837
2183
xor_expr
1838
2183
False
1839
2183
{
1840
2183
+
1841
2183
and_expr
1842
2183
[
1843
2183
(
1844
2183
STRING
1845
2183
shift_expr
1847
2183
power
1849
2183
None
1851
2183
NUMBER
1853
2183
expr
2399
2183
~
1856
2184
%
atom -> { }
2184
[
atom -> { }
2184
not
atom -> { }
2184
^
atom -> { }
2184
or
atom -> { }
2184
-
atom -> { }
2184
=
atom -> { }
2184
>=
atom -> { }
2184
<<
atom -> { }
2184
/
atom -> { }
2184
<=
atom -> { }
2184
|
atom -> { }
2184
>>
atom -> { }
2184
@
atom -> { }
2184
is
atom -> { }
2184
if
atom -> { }
2184
NEWLINE
atom -> { }
2184
and
atom -> { }
2184
==
atom -> { }
2184
in
atom -> { }
2184
**
atom -> { }
2184
&
atom -> { }
2184
>
atom -> { }
2184
//
atom -> { }
2184
(
atom -> { }
2184
+
atom -> { }
2184
<
atom -> { }
2184
!=
atom -> { }
2184
.
atom -> { }
2184
*
atom -> { }
2185
>>
factor -> + factor
2185
>=
factor -> + factor
2185
or
factor -> + factor
2185
==
factor -> + factor
2185
-
factor -> + factor
2185
*
factor -> + factor
2185
NEWLINE
factor -> + factor
2185
<
factor -> + factor
2185
^
factor -> + factor
2185
&
factor -> + factor
2185
@
factor -> + factor
2185
|
factor -> + factor
2185
<<
factor -> + factor
2185
%
factor -> + factor
2185
not
factor -> + factor
2185
//
factor -> + factor
2185
and
factor -> + factor
2185
in
factor -> + factor
2185
!=
factor -> + factor
2185
=
factor -> + factor
2185
>
factor -> + factor
2185
/
factor -> + factor
2185
is
factor -> + factor
2185
+
factor -> + factor
2185
if
factor -> + factor
2185
<=
factor -> + factor
2186
NAME
1830
2186
atom_expr
1831
2186
term
1832
2186
atom
1833
2186
-
1834
2186
factor
1835
2186
True
1836
2186
arith_expr
1837
2186
False
1839
2186
{
1840
2186
+
1841
2186
and_expr
1842
2186
[
1843
2186
(
1844
2186
STRING
1845
2186
xor_expr
2400
2186
shift_expr
1847
2186
power
1849
2186
None
1851
2186
NUMBER
1853
2186
~
1856
2187
]
2401
2188
and
atom -> [ ]
2188
<<
atom -> [ ]
2188
//
atom -> [ ]
2188
*
atom -> [ ]
2188
+
atom -> [ ]
2188
=
atom -> [ ]
2188
^
atom -> [ ]
2188
==
atom -> [ ]
2188
>>
atom -> [ ]
2188
/
atom -> [ ]
2188
in
atom -> [ ]
2188
NEWLINE
atom -> [ ]
2188
>
atom -> [ ]
2188
<=
atom -> [ ]
2188
.
atom -> [ ]
2188
%
atom -> [ ]
2188
&
atom -> [ ]
2188
-
atom -> [ ]
2188
>=
atom -> [ ]
2188
not
atom -> [ ]
2188
|
atom -> [ ]
2188
@
atom -> [ ]
2188
is
atom -> [ ]
2188
or
atom -> [ ]
2188
!=
atom -> [ ]
2188
if
atom -> [ ]
2188
**
atom -> [ ]
2188
<
atom -> [ ]
2188
(
atom -> [ ]
2188
[
atom -> [ ]
2189
NEWLINE
atom -> ( )
2189
|
atom -> ( )
2189
**
atom -> ( )
2189
>>
atom -> ( )
2189
-
atom -> ( )
2189
%
atom -> ( )
2189
(
atom -> ( )
2189
not
atom -> ( )
2189
+
atom -> ( )
2189
>=
atom -> ( )
2189
&
atom -> ( )
2189
*
atom -> ( )
2189
!=
atom -> ( )
2189
<=
atom -> ( )
2189
and
atom -> ( )
2189
<
atom -> ( )
2189
^
atom -> ( )
2189
==
atom -> ( )
2189
if
atom -> ( )
2189
in
atom -> ( )
2189
/
atom -> ( )
2189
>
atom -> ( )
2189
//
atom -> ( )
2189
.
atom -> ( )
2189
or
atom -> ( )
2189
@
atom -> ( )
2189
is
atom -> ( )
2189
=
atom -> ( )
2189
<<
atom -> ( )
2189
[
atom -> ( )
2190
)
2402
2191
NAME
1830
2191
atom_expr
1831
2191
term
1832
2191
atom
1833
2191
-
1834
2191
factor
1835
2191
True
1836
2191
arith_expr
1837
2191
False
1839
2191
{
1840
2191
+
1841
2191
[
1843
2191
(
1844
2191
STRING
1845
2191
shift_expr
1847
2191
power
1849
2191
None
1851
2191
and_expr
2403
2191
NUMBER
1853
2191
~
1856
2192
NAME
1830
2192
atom_expr
1831
2192
term
1832
2192
atom
1833
2192
-
1834
2192
factor
1835
2192
True
1836
2192
arith_expr
1837
2192
xor_expr
1838
2192
False
1839
2192
{
1840
2192
+
1841
2192
and_expr
1842
2192
[
1843
2192
(
1844
2192
STRING
1845
2192
comparison
1846
2192
shift_expr
1847
2192
not_test
1848
2192
power
1849
2192
None
1851
2192
expr
1852
2192
NUMBER
1853
2192
and_test
2404
2192
~
1856
2192
not
1859
2193
NAME
1830
2193
atom_expr
1831
2193
term
1832
2193
atom
1833
2193
-
1834
2193
factor
1835
2193
True
1836
2193
arith_expr
1837
2193
xor_expr
1838
2193
False
1839
2193
{
1840
2193
+
1841
2193
and_expr
1842
2193
[
1843
2193
(
1844
2193
STRING
1845
2193
shift_expr
1847
2193
power
1849
2193
None
1851
2193
comparison
2405
2193
expr
1852
2193
NUMBER
1853
2193
~
1856
2194
NAME
1830
2194
atom_expr
1831
2194
term
1832
2194
atom
1833
2194
-
1834
2194
factor
1835
2194
True
1836
2194
arith_expr
1837
2194
xor_expr
1838
2194
False
1839
2194
{
1840
2194
+
1841
2194
and_expr
1842
2194
[
1843
2194
(
1844
2194
STRING
1845
2194
comparison
1846
2194
shift_expr
1847
2194
not_test
1848
2194
power
1849
2194
None
1851
2194
expr
1852
2194
NUMBER
1853
2194
and_test
1854
2194
~
1856
2194
or_test
2406
2194
not
1859
2195
atom_expr
685
2195
atom
686
2195
-
687
2195
factor
688
2195
and_test
689
2195
True
690
2195
arith_expr
691
2195
False
692
2195
NAME
693
2195
{
694
2195
+
695
2195
and_expr
696
2195
[
697
2195
(
698
2195
STRING
699
2195
term
700
2195
comparison
701
2195
shift_expr
702
2195
not_test
703
2195
power
704
2195
xor_expr
706
2195
None
707
2195
NUMBER
708
2195
expr
709
2195
~
710
2195
not
711
2195
or_test
2407
2196
is
factor -> ~ factor
2196
>=
factor -> ~ factor
2196
<<
factor -> ~ factor
2196
<=
factor -> ~ factor
2196
if
factor -> ~ factor
2196
==
factor -> ~ factor
2196
//
factor -> ~ factor
2196
or
factor -> ~ factor
2196
+
factor -> ~ factor
2196
and
factor -> ~ factor
2196
!=
factor -> ~ factor
2196
&
factor -> ~ factor
2196
|
factor -> ~ factor
2196
>>
factor -> ~ factor
2196
in
factor -> ~ factor
2196
NEWLINE
factor -> ~ factor
2196
=
factor -> ~ factor
2196
>
factor -> ~ factor
2196
/
factor -> ~ factor
2196
not
factor -> ~ factor
2196
@
factor -> ~ factor
2196
-
factor -> ~ factor
2196
^
factor -> ~ factor
2196
*
factor -> ~ factor
2196
<
factor -> ~ factor
2196
%
factor -> ~ factor
2197
NAME
1830
2197
atom_expr
1831
2197
term
1832
2197
atom
1833
2197
-
1834
2197
factor
1835
2197
True
1836
2197
arith_expr
1837
2197
xor_expr
1838
2197
False
1839
2197
{
1840
2197
+
1841
2197
and_expr
1842
2197
[
1843
2197
(
1844
2197
STRING
1845
2197
comparison
1846
2197
shift_expr
1847
2197
not_test
1848
2197
power
1849
2197
lambdef
1850
2197
None
1851
2197
expr
1852
2197
NUMBER
1853
2197
and_test
1854
2197
test
2408
2197
or_test
1855
2197
~
1856
2197
lambda
1858
2197
not
1859
2198
:
2409
2199
or
not_test -> not not_test
2199
NEWLINE
not_test -> not not_test
2199
=
not_test -> not not_test
2199
if
not_test -> not not_test
2199
and
not_test -> not not_test
2200
,
lambdef -> lambda varargslist : test
2200
=
lambdef -> lambda varargslist : test
2200
NEWLINE
lambdef -> lambda varargslist : test
2201
(
trailer -> [ subscriptlist ]
2201
//
trailer -> [ subscriptlist ]
2201
&
trailer -> [ subscriptlist ]
2201
>
trailer -> [ subscriptlist ]
2201
in
trailer -> [ subscriptlist ]
2201
>>
trailer -> [ subscriptlist ]
2201
[
trailer -> [ subscriptlist ]
2201
<=
trailer -> [ subscriptlist ]
2201
-
trailer -> [ subscriptlist ]
2201
!=
trailer -> [ subscriptlist ]
2201
|
trailer -> [ subscriptlist ]
2201
=
trailer -> [ subscriptlist ]
2201
not
trailer -> [ subscriptlist ]
2201
.
trailer -> [ subscriptlist ]
2201
>=
trailer -> [ subscriptlist ]
2201
or
trailer -> [ subscriptlist ]
2201
*
trailer -> [ subscriptlist ]
2201
<<
trailer -> [ subscriptlist ]
2201
**
trailer -> [ subscriptlist ]
2201
==
trailer -> [ subscriptlist ]
2201
+
trailer -> [ subscriptlist ]
2201
is
trailer -> [ subscriptlist ]
2201
/
trailer -> [ subscriptlist ]
2201
^
trailer -> [ subscriptlist ]
2201
and
trailer -> [ subscriptlist ]
2201
@
trailer -> [ subscriptlist ]
2201
if
trailer -> [ subscriptlist ]
2201
<
trailer -> [ subscriptlist ]
2201
%
trailer -> [ subscriptlist ]
2202
or
trailer -> ( arglist )
2202
>>
trailer -> ( arglist )
2202
<=
trailer -> ( arglist )
2202
**
trailer -> ( arglist )
2202
<
trailer -> ( arglist )
2202
(
trailer -> ( arglist )
2202
-
trailer -> ( arglist )
2202
not
trailer -> ( arglist )
2202
if
trailer -> ( arglist )
2202
and
trailer -> ( arglist )
2202
.
trailer -> ( arglist )
2202
is
trailer -> ( arglist )
2202
>
trailer -> ( arglist )
2202
in
trailer -> ( arglist )
2202
!=
trailer -> ( arglist )
2202
==
trailer -> ( arglist )
2202
%
trailer -> ( arglist )
2202
@
trailer -> ( arglist )
2202
^
trailer -> ( arglist )
2202
<<
trailer -> ( arglist )
2202
*
trailer -> ( arglist )
2202
//
trailer -> ( arglist )
2202
&
trailer -> ( arglist )
2202
|
trailer -> ( arglist )
2202
>=
trailer -> ( arglist )
2202
+
trailer -> ( arglist )
2202
/
trailer -> ( arglist )
2202
=
trailer -> ( arglist )
2202
[
trailer -> ( arglist )
2203
NAME
896
2203
atom_expr
897
2203
atom
898
2203
-
899
2203
factor
900
2203
True
901
2203
arith_expr
902
2203
xor_expr
903
2203
False
904
2203
{
905
2203
+
906
2203
and_expr
907
2203
[
908
2203
(
909
2203
STRING
910
2203
term
911
2203
comparison
912
2203
shift_expr
913
2203
not_test
914
2203
power
915
2203
lambdef
916
2203
None
918
2203
expr
919
2203
NUMBER
920
2203
~
921
2203
or_test
922
2203
not
923
2203
and_test
924
2203
lambda
925
2203
test
2410
2204
=
lambdef -> lambda varargslist : test
2205
NAME
12
2205
True
1
2205
atom_expr
5
2205
term
29
2205
atom
4
2205
simple_stmt
1234
2205
factor
11
2205
shift_expr
7
2205
arith_expr
8
2205
False
27
2205
and_expr
9
2205
xor_expr
40
2205
{
41
2205
(
13
2205
[
15
2205
resetstats
16
2205
STRING
46
2205
raise
19
2205
small_stmt
21
2205
test
47
2205
comparison
28
2205
or_test
23
2205
~
55
2205
-
43
2205
lambda
53
2205
+
31
2205
not_test
33
2205
and_test
48
2205
power
32
2205
pass
73
2205
None
34
2205
lambdef
37
2205
not
42
2205
NUMBER
39
2205
suite
2411
2205
expr
50
2205
continue
74
2205
begsim
49
2205
del_stmt
75
2205
NEWLINE
1236
2205
return
54
2205
nonlocal
76
2205
return_stmt
56
2205
endsim
57
2205
test_list
70
2205
raise_stmt
59
2205
assert_stmt
78
2205
stat_stmt
79
2205
global_stmt
61
2205
continue_stmt
62
2205
assert
63
2205
break_stmt
64
2205
nonlocal_stmt
80
2205
expr_stmt
81
2205
break
82
2205
del
66
2205
global
67
2205
yield
83
2205
pass_stmt
68
2205
flow_stmt
71
2205
yield_stmt
72
2205
sim_stmt
84
2206
NAME
12
2206
True
1
2206
atom_expr
5
2206
term
29
2206
atom
4
2206
simple_stmt
941
2206
factor
11
2206
shift_expr
7
2206
arith_expr
8
2206
False
27
2206
and_expr
9
2206
xor_expr
40
2206
{
41
2206
(
13
2206
[
15
2206
resetstats
16
2206
STRING
46
2206
raise
19
2206
small_stmt
942
2206
test
47
2206
comparison
28
2206
or_test
23
2206
~
55
2206
-
43
2206
lambda
53
2206
+
31
2206
not_test
33
2206
and_test
48
2206
power
32
2206
pass
73
2206
None
34
2206
lambdef
37
2206
not
42
2206
NUMBER
39
2206
expr
50
2206
suite
2412
2206
continue
74
2206
begsim
49
2206
del_stmt
75
2206
NEWLINE
944
2206
return
54
2206
nonlocal
76
2206
return_stmt
56
2206
endsim
57
2206
test_list
70
2206
raise_stmt
59
2206
assert_stmt
78
2206
stat_stmt
79
2206
global_stmt
61
2206
continue_stmt
62
2206
assert
63
2206
break_stmt
64
2206
nonlocal_stmt
80
2206
expr_stmt
81
2206
break
82
2206
del
66
2206
global
67
2206
yield
83
2206
pass_stmt
68
2206
flow_stmt
71
2206
yield_stmt
72
2206
sim_stmt
84
2207
(
suite -> NEWLINE INDENT stmt_list DEDENT
2207
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2207
try
suite -> NEWLINE INDENT stmt_list DEDENT
2207
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2207
@
suite -> NEWLINE INDENT stmt_list DEDENT
2207
None
suite -> NEWLINE INDENT stmt_list DEDENT
2207
$
suite -> NEWLINE INDENT stmt_list DEDENT
2207
if
suite -> NEWLINE INDENT stmt_list DEDENT
2207
class
suite -> NEWLINE INDENT stmt_list DEDENT
2207
[
suite -> NEWLINE INDENT stmt_list DEDENT
2207
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2207
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2207
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2207
-
suite -> NEWLINE INDENT stmt_list DEDENT
2207
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2207
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2207
False
suite -> NEWLINE INDENT stmt_list DEDENT
2207
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2207
break
suite -> NEWLINE INDENT stmt_list DEDENT
2207
else
suite -> NEWLINE INDENT stmt_list DEDENT
2207
global
suite -> NEWLINE INDENT stmt_list DEDENT
2207
+
suite -> NEWLINE INDENT stmt_list DEDENT
2207
{
suite -> NEWLINE INDENT stmt_list DEDENT
2207
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2207
~
suite -> NEWLINE INDENT stmt_list DEDENT
2207
for
suite -> NEWLINE INDENT stmt_list DEDENT
2207
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
2207
with
suite -> NEWLINE INDENT stmt_list DEDENT
2207
not
suite -> NEWLINE INDENT stmt_list DEDENT
2207
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2207
elif
suite -> NEWLINE INDENT stmt_list DEDENT
2207
while
suite -> NEWLINE INDENT stmt_list DEDENT
2207
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2207
True
suite -> NEWLINE INDENT stmt_list DEDENT
2207
def
suite -> NEWLINE INDENT stmt_list DEDENT
2207
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2207
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2207
return
suite -> NEWLINE INDENT stmt_list DEDENT
2207
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2207
del
suite -> NEWLINE INDENT stmt_list DEDENT
2208
]
test -> or_test if or_test else test
2208
:
test -> or_test if or_test else test
2208
,
test -> or_test if or_test else test
2209
]
sliceop -> : maybe_test
2209
,
sliceop -> : maybe_test
2210
,
maybe_test -> test
2210
]
maybe_test -> test
2211
(
trailer -> [ subscriptlist ]
2211
//
trailer -> [ subscriptlist ]
2211
&
trailer -> [ subscriptlist ]
2211
>
trailer -> [ subscriptlist ]
2211
in
trailer -> [ subscriptlist ]
2211
>>
trailer -> [ subscriptlist ]
2211
[
trailer -> [ subscriptlist ]
2211
<=
trailer -> [ subscriptlist ]
2211
-
trailer -> [ subscriptlist ]
2211
)
trailer -> [ subscriptlist ]
2211
!=
trailer -> [ subscriptlist ]
2211
|
trailer -> [ subscriptlist ]
2211
not
trailer -> [ subscriptlist ]
2211
.
trailer -> [ subscriptlist ]
2211
>=
trailer -> [ subscriptlist ]
2211
or
trailer -> [ subscriptlist ]
2211
*
trailer -> [ subscriptlist ]
2211
<<
trailer -> [ subscriptlist ]
2211
**
trailer -> [ subscriptlist ]
2211
==
trailer -> [ subscriptlist ]
2211
+
trailer -> [ subscriptlist ]
2211
is
trailer -> [ subscriptlist ]
2211
/
trailer -> [ subscriptlist ]
2211
^
trailer -> [ subscriptlist ]
2211
and
trailer -> [ subscriptlist ]
2211
,
trailer -> [ subscriptlist ]
2211
@
trailer -> [ subscriptlist ]
2211
if
trailer -> [ subscriptlist ]
2211
<
trailer -> [ subscriptlist ]
2211
%
trailer -> [ subscriptlist ]
2212
or
trailer -> ( arglist )
2212
>>
trailer -> ( arglist )
2212
<=
trailer -> ( arglist )
2212
**
trailer -> ( arglist )
2212
<
trailer -> ( arglist )
2212
(
trailer -> ( arglist )
2212
-
trailer -> ( arglist )
2212
not
trailer -> ( arglist )
2212
if
trailer -> ( arglist )
2212
and
trailer -> ( arglist )
2212
.
trailer -> ( arglist )
2212
is
trailer -> ( arglist )
2212
)
trailer -> ( arglist )
2212
>
trailer -> ( arglist )
2212
in
trailer -> ( arglist )
2212
!=
trailer -> ( arglist )
2212
,
trailer -> ( arglist )
2212
==
trailer -> ( arglist )
2212
%
trailer -> ( arglist )
2212
@
trailer -> ( arglist )
2212
^
trailer -> ( arglist )
2212
<<
trailer -> ( arglist )
2212
*
trailer -> ( arglist )
2212
//
trailer -> ( arglist )
2212
&
trailer -> ( arglist )
2212
|
trailer -> ( arglist )
2212
>=
trailer -> ( arglist )
2212
+
trailer -> ( arglist )
2212
/
trailer -> ( arglist )
2212
[
trailer -> ( arglist )
2213
NAME
1005
2213
atom_expr
1006
2213
atom
1007
2213
-
1008
2213
factor
1009
2213
[
1010
2213
True
1011
2213
arith_expr
1012
2213
False
1013
2213
{
1014
2213
+
1015
2213
and_expr
1016
2213
(
1017
2213
STRING
1018
2213
power
1019
2213
term
1020
2213
comparison
1021
2213
shift_expr
1022
2213
not_test
1023
2213
or_test
1024
2213
lambda
1025
2213
None
1026
2213
xor_expr
1027
2213
expr
1028
2213
NUMBER
1029
2213
and_test
1030
2213
~
1031
2213
lambdef
1033
2213
not
1034
2213
test
2413
2214
,
lambdef -> lambda varargslist : test
2214
)
lambdef -> lambda varargslist : test
2215
for
test -> or_test if or_test else test
2215
)
test -> or_test if or_test else test
2215
,
test -> or_test if or_test else test
2215
=
test -> or_test if or_test else test
2216
,
comp_iter -> 
2216
if
2414
2216
comp_iter
2415
2216
for
1055
2216
comp_if
2416
2216
)
comp_iter -> 
2216
comp_for
2417
2217
for
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
+
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
with
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
raise
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
STRING
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
NEWLINE
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
NAME
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
False
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
resetstats
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
try
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
del
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
~
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
-
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
lambda
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
[
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
pass
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
while
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
begsim
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
@
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
{
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
if
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
True
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
endsim
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
return
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
not
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
break
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
global
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
assert
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
$
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
None
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
yield
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
continue
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
def
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
NUMBER
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
conf
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
class
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
nonlocal
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2217
(
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2218
NEWLINE
2418
2219
NAME
1933
2219
atom_expr
1934
2219
atom
1935
2219
-
1936
2219
True
1938
2219
False
1940
2219
{
1941
2219
+
1942
2219
[
1944
2219
(
1945
2219
STRING
1946
2219
power
1947
2219
factor
2419
2219
None
1953
2219
NUMBER
1956
2219
~
1958
2220
trailer
2220
2220
trailer_expr
2420
2220
[
2222
2220
.
2223
2220
or
trailer_expr -> 
2220
(
2224
2220
not
trailer_expr -> 
2220
in
trailer_expr -> 
2220
is
trailer_expr -> 
2220
>=
trailer_expr -> 
2220
-
trailer_expr -> 
2220
@
trailer_expr -> 
2220
<=
trailer_expr -> 
2220
)
trailer_expr -> 
2220
^
trailer_expr -> 
2220
*
trailer_expr -> 
2220
for
trailer_expr -> 
2220
if
trailer_expr -> 
2220
**
trailer_expr -> 
2220
>
trailer_expr -> 
2220
==
trailer_expr -> 
2220
>>
trailer_expr -> 
2220
<<
trailer_expr -> 
2220
/
trailer_expr -> 
2220
//
trailer_expr -> 
2220
!=
trailer_expr -> 
2220
<
trailer_expr -> 
2220
&
trailer_expr -> 
2220
|
trailer_expr -> 
2220
and
trailer_expr -> 
2220
+
trailer_expr -> 
2220
%
trailer_expr -> 
2221
|
atom_expr -> atom trailer_expr
2221
)
atom_expr -> atom trailer_expr
2221
*
atom_expr -> atom trailer_expr
2221
-
atom_expr -> atom trailer_expr
2221
not
atom_expr -> atom trailer_expr
2221
in
atom_expr -> atom trailer_expr
2221
and
atom_expr -> atom trailer_expr
2221
^
atom_expr -> atom trailer_expr
2221
or
atom_expr -> atom trailer_expr
2221
<=
atom_expr -> atom trailer_expr
2221
<
atom_expr -> atom trailer_expr
2221
>>
atom_expr -> atom trailer_expr
2221
//
atom_expr -> atom trailer_expr
2221
!=
atom_expr -> atom trailer_expr
2221
<<
atom_expr -> atom trailer_expr
2221
+
atom_expr -> atom trailer_expr
2221
>
atom_expr -> atom trailer_expr
2221
/
atom_expr -> atom trailer_expr
2221
==
atom_expr -> atom trailer_expr
2221
%
atom_expr -> atom trailer_expr
2221
&
atom_expr -> atom trailer_expr
2221
@
atom_expr -> atom trailer_expr
2221
if
atom_expr -> atom trailer_expr
2221
for
atom_expr -> atom trailer_expr
2221
>=
atom_expr -> atom trailer_expr
2221
is
atom_expr -> atom trailer_expr
2221
**
atom_expr -> atom trailer_expr
2222
NAME
461
2222
atom_expr
462
2222
term
463
2222
atom
464
2222
-
465
2222
factor
466
2222
[
467
2222
True
468
2222
arith_expr
469
2222
False
470
2222
{
471
2222
(
472
2222
+
473
2222
and_expr
474
2222
and_test
475
2222
STRING
476
2222
subscriptlist
2421
2222
comparison
478
2222
shift_expr
479
2222
not_test
480
2222
power
481
2222
None
482
2222
xor_expr
483
2222
expr
484
2222
NUMBER
485
2222
test
486
2222
~
487
2222
or_test
488
2222
not
489
2222
lambdef
490
2222
:
maybe_test -> 
2222
lambda
491
2222
subscript
492
2222
maybe_test
493
2223
NAME
2422
2224
NAME
496
2224
atom_expr
497
2224
atom
498
2224
-
499
2224
arglist
2423
2224
factor
501
2224
*
502
2224
[
503
2224
True
504
2224
arith_expr
505
2224
xor_expr
506
2224
False
507
2224
**
508
2224
{
509
2224
+
510
2224
)
2424
2224
and_expr
512
2224
(
513
2224
STRING
514
2224
power
515
2224
term
516
2224
comparison
517
2224
shift_expr
518
2224
argument
519
2224
not_test
520
2224
or_test
521
2224
lambdef
522
2224
lambda
523
2224
None
524
2224
test
525
2224
expr
526
2224
NUMBER
527
2224
and_test
528
2224
~
529
2224
not
530
2225
>>
factor -> - factor
2225
if
factor -> - factor
2225
>
factor -> - factor
2225
is
factor -> - factor
2225
//
factor -> - factor
2225
)
factor -> - factor
2225
not
factor -> - factor
2225
or
factor -> - factor
2225
-
factor -> - factor
2225
<<
factor -> - factor
2225
for
factor -> - factor
2225
>=
factor -> - factor
2225
/
factor -> - factor
2225
<=
factor -> - factor
2225
<
factor -> - factor
2225
in
factor -> - factor
2225
|
factor -> - factor
2225
*
factor -> - factor
2225
!=
factor -> - factor
2225
&
factor -> - factor
2225
and
factor -> - factor
2225
^
factor -> - factor
2225
+
factor -> - factor
2225
%
factor -> - factor
2225
==
factor -> - factor
2225
@
factor -> - factor
2226
NAME
1933
2226
atom_expr
1934
2226
atom
1935
2226
-
1936
2226
factor
1937
2226
True
1938
2226
False
1940
2226
{
1941
2226
+
1942
2226
[
1944
2226
(
1945
2226
STRING
1946
2226
power
1947
2226
term
2425
2226
None
1953
2226
NUMBER
1956
2226
~
1958
2227
NAME
1933
2227
atom_expr
1934
2227
atom
1935
2227
-
1936
2227
factor
1937
2227
True
1938
2227
False
1940
2227
term
2426
2227
{
1941
2227
+
1942
2227
[
1944
2227
(
1945
2227
STRING
1946
2227
power
1947
2227
None
1953
2227
NUMBER
1956
2227
~
1958
2228
NAME
1933
2228
atom_expr
1934
2228
atom
1935
2228
-
1936
2228
factor
1937
2228
True
1938
2228
False
1940
2228
{
1941
2228
+
1942
2228
[
1944
2228
(
1945
2228
STRING
1946
2228
power
1947
2228
None
1953
2228
NUMBER
1956
2228
~
1958
2228
term
2427
2229
NAME
1933
2229
atom_expr
1934
2229
atom
1935
2229
-
1936
2229
factor
1937
2229
True
1938
2229
False
1940
2229
{
1941
2229
+
1942
2229
[
1944
2229
(
1945
2229
STRING
1946
2229
term
2428
2229
power
1947
2229
None
1953
2229
NUMBER
1956
2229
~
1958
2230
NAME
1933
2230
atom_expr
1934
2230
atom
1935
2230
-
1936
2230
factor
1937
2230
True
1938
2230
False
1940
2230
{
1941
2230
+
1942
2230
[
1944
2230
(
1945
2230
STRING
1946
2230
power
1947
2230
term
2429
2230
None
1953
2230
NUMBER
1956
2230
~
1958
2231
NAME
1933
2231
atom_expr
1934
2231
atom
1935
2231
-
1936
2231
factor
1937
2231
True
1938
2231
arith_expr
1939
2231
False
1940
2231
{
1941
2231
+
1942
2231
[
1944
2231
(
1945
2231
STRING
1946
2231
power
1947
2231
shift_expr
2430
2231
term
1948
2231
None
1953
2231
NUMBER
1956
2231
~
1958
2232
NAME
1933
2232
atom_expr
1934
2232
atom
1935
2232
-
1936
2232
factor
1937
2232
True
1938
2232
arith_expr
1939
2232
False
1940
2232
{
1941
2232
shift_expr
2431
2232
+
1942
2232
[
1944
2232
(
1945
2232
STRING
1946
2232
power
1947
2232
term
1948
2232
None
1953
2232
NUMBER
1956
2232
~
1958
2233
%
atom -> { }
2233
[
atom -> { }
2233
not
atom -> { }
2233
^
atom -> { }
2233
or
atom -> { }
2233
-
atom -> { }
2233
>=
atom -> { }
2233
<<
atom -> { }
2233
/
atom -> { }
2233
<=
atom -> { }
2233
|
atom -> { }
2233
for
atom -> { }
2233
)
atom -> { }
2233
>>
atom -> { }
2233
@
atom -> { }
2233
is
atom -> { }
2233
if
atom -> { }
2233
and
atom -> { }
2233
==
atom -> { }
2233
in
atom -> { }
2233
**
atom -> { }
2233
&
atom -> { }
2233
>
atom -> { }
2233
//
atom -> { }
2233
(
atom -> { }
2233
+
atom -> { }
2233
<
atom -> { }
2233
!=
atom -> { }
2233
.
atom -> { }
2233
*
atom -> { }
2234
>>
factor -> + factor
2234
>=
factor -> + factor
2234
or
factor -> + factor
2234
==
factor -> + factor
2234
-
factor -> + factor
2234
*
factor -> + factor
2234
<
factor -> + factor
2234
^
factor -> + factor
2234
&
factor -> + factor
2234
)
factor -> + factor
2234
@
factor -> + factor
2234
|
factor -> + factor
2234
<<
factor -> + factor
2234
%
factor -> + factor
2234
not
factor -> + factor
2234
//
factor -> + factor
2234
and
factor -> + factor
2234
in
factor -> + factor
2234
!=
factor -> + factor
2234
>
factor -> + factor
2234
/
factor -> + factor
2234
is
factor -> + factor
2234
+
factor -> + factor
2234
if
factor -> + factor
2234
for
factor -> + factor
2234
<=
factor -> + factor
2235
NAME
1933
2235
atom_expr
1934
2235
atom
1935
2235
-
1936
2235
factor
1937
2235
True
1938
2235
arith_expr
1939
2235
False
1940
2235
{
1941
2235
+
1942
2235
and_expr
1943
2235
[
1944
2235
(
1945
2235
STRING
1946
2235
power
1947
2235
xor_expr
2432
2235
term
1948
2235
shift_expr
1950
2235
None
1953
2235
NUMBER
1956
2235
~
1958
2236
]
2433
2237
and
atom -> [ ]
2237
<<
atom -> [ ]
2237
//
atom -> [ ]
2237
*
atom -> [ ]
2237
+
atom -> [ ]
2237
^
atom -> [ ]
2237
==
atom -> [ ]
2237
>>
atom -> [ ]
2237
/
atom -> [ ]
2237
in
atom -> [ ]
2237
>
atom -> [ ]
2237
<=
atom -> [ ]
2237
.
atom -> [ ]
2237
)
atom -> [ ]
2237
%
atom -> [ ]
2237
&
atom -> [ ]
2237
-
atom -> [ ]
2237
>=
atom -> [ ]
2237
not
atom -> [ ]
2237
|
atom -> [ ]
2237
@
atom -> [ ]
2237
is
atom -> [ ]
2237
or
atom -> [ ]
2237
!=
atom -> [ ]
2237
if
atom -> [ ]
2237
**
atom -> [ ]
2237
for
atom -> [ ]
2237
<
atom -> [ ]
2237
(
atom -> [ ]
2237
[
atom -> [ ]
2238
|
atom -> ( )
2238
**
atom -> ( )
2238
>>
atom -> ( )
2238
-
atom -> ( )
2238
%
atom -> ( )
2238
(
atom -> ( )
2238
not
atom -> ( )
2238
+
atom -> ( )
2238
>=
atom -> ( )
2238
&
atom -> ( )
2238
*
atom -> ( )
2238
!=
atom -> ( )
2238
<=
atom -> ( )
2238
and
atom -> ( )
2238
<
atom -> ( )
2238
^
atom -> ( )
2238
==
atom -> ( )
2238
if
atom -> ( )
2238
in
atom -> ( )
2238
/
atom -> ( )
2238
>
atom -> ( )
2238
//
atom -> ( )
2238
.
atom -> ( )
2238
or
atom -> ( )
2238
@
atom -> ( )
2238
is
atom -> ( )
2238
)
atom -> ( )
2238
<<
atom -> ( )
2238
for
atom -> ( )
2238
[
atom -> ( )
2239
)
2434
2240
NAME
1933
2240
atom_expr
1934
2240
atom
1935
2240
-
1936
2240
factor
1937
2240
True
1938
2240
False
1940
2240
{
1941
2240
+
1942
2240
[
1944
2240
(
1945
2240
STRING
1946
2240
power
1947
2240
arith_expr
2435
2240
term
1948
2240
None
1953
2240
NUMBER
1956
2240
~
1958
2241
NAME
1933
2241
atom_expr
1934
2241
atom
1935
2241
-
1936
2241
factor
1937
2241
True
1938
2241
False
1940
2241
{
1941
2241
+
1942
2241
[
1944
2241
(
1945
2241
STRING
1946
2241
power
1947
2241
term
1948
2241
arith_expr
2436
2241
None
1953
2241
NUMBER
1956
2241
~
1958
2242
NAME
1933
2242
atom_expr
1934
2242
atom
1935
2242
-
1936
2242
factor
1937
2242
True
1938
2242
arith_expr
1939
2242
False
1940
2242
{
1941
2242
+
1942
2242
[
1944
2242
(
1945
2242
STRING
1946
2242
power
1947
2242
term
1948
2242
shift_expr
1950
2242
None
1953
2242
and_expr
2437
2242
NUMBER
1956
2242
~
1958
2243
NAME
1933
2243
atom_expr
1934
2243
atom
1935
2243
-
1936
2243
factor
1937
2243
True
1938
2243
arith_expr
1939
2243
False
1940
2243
{
1941
2243
+
1942
2243
and_expr
1943
2243
[
1944
2243
(
1945
2243
STRING
1946
2243
power
1947
2243
term
1948
2243
comparison
1949
2243
and_test
2438
2243
shift_expr
1950
2243
not_test
1951
2243
None
1953
2243
xor_expr
1954
2243
expr
1955
2243
NUMBER
1956
2243
~
1958
2243
not
1959
2244
)
comp_for -> for expr_list in or_test comp_iter
2245
)
comp_iter -> comp_if
2246
NAME
1933
2246
atom_expr
1934
2246
atom
1935
2246
-
1936
2246
factor
1937
2246
True
1938
2246
lambda
2439
2246
arith_expr
1939
2246
False
1940
2246
{
1941
2246
+
1942
2246
and_expr
1943
2246
[
1944
2246
(
1945
2246
STRING
1946
2246
power
1947
2246
term
1948
2246
comparison
1949
2246
shift_expr
1950
2246
not_test
1951
2246
test_nocond
2440
2246
None
1953
2246
lambdef_nocond
2441
2246
xor_expr
1954
2246
expr
1955
2246
NUMBER
1956
2246
and_test
1957
2246
or_test
2442
2246
~
1958
2246
not
1959
2247
)
comp_iter -> comp_for
2248
NAME
1933
2248
atom_expr
1934
2248
atom
1935
2248
-
1936
2248
factor
1937
2248
True
1938
2248
arith_expr
1939
2248
False
1940
2248
{
1941
2248
+
1942
2248
and_expr
1943
2248
[
1944
2248
(
1945
2248
STRING
1946
2248
power
1947
2248
term
1948
2248
shift_expr
1950
2248
None
1953
2248
expr
2443
2248
xor_expr
1954
2248
NUMBER
1956
2248
~
1958
2249
NAME
1933
2249
atom_expr
1934
2249
atom
1935
2249
-
1936
2249
factor
1937
2249
True
1938
2249
arith_expr
1939
2249
False
1940
2249
{
1941
2249
+
1942
2249
and_expr
1943
2249
[
1944
2249
comparison
2444
2249
(
1945
2249
STRING
1946
2249
power
1947
2249
term
1948
2249
shift_expr
1950
2249
None
1953
2249
xor_expr
1954
2249
expr
1955
2249
NUMBER
1956
2249
~
1958
2250
NAME
1933
2250
atom_expr
1934
2250
atom
1935
2250
-
1936
2250
factor
1937
2250
True
1938
2250
arith_expr
1939
2250
False
1940
2250
{
1941
2250
+
1942
2250
and_expr
1943
2250
[
1944
2250
(
1945
2250
STRING
1946
2250
power
1947
2250
term
1948
2250
comparison
1949
2250
shift_expr
1950
2250
not_test
1951
2250
None
1953
2250
xor_expr
1954
2250
expr
1955
2250
NUMBER
1956
2250
and_test
1957
2250
~
1958
2250
or_test
2445
2250
not
1959
2251
is
factor -> ~ factor
2251
>=
factor -> ~ factor
2251
<<
factor -> ~ factor
2251
<=
factor -> ~ factor
2251
if
factor -> ~ factor
2251
==
factor -> ~ factor
2251
for
factor -> ~ factor
2251
//
factor -> ~ factor
2251
or
factor -> ~ factor
2251
+
factor -> ~ factor
2251
)
factor -> ~ factor
2251
and
factor -> ~ factor
2251
!=
factor -> ~ factor
2251
&
factor -> ~ factor
2251
|
factor -> ~ factor
2251
>>
factor -> ~ factor
2251
in
factor -> ~ factor
2251
>
factor -> ~ factor
2251
/
factor -> ~ factor
2251
not
factor -> ~ factor
2251
@
factor -> ~ factor
2251
-
factor -> ~ factor
2251
^
factor -> ~ factor
2251
*
factor -> ~ factor
2251
<
factor -> ~ factor
2251
%
factor -> ~ factor
2252
)
not_test -> not not_test
2252
for
not_test -> not not_test
2252
or
not_test -> not not_test
2252
if
not_test -> not not_test
2252
and
not_test -> not not_test
2253
(
trailer -> [ subscriptlist ]
2253
//
trailer -> [ subscriptlist ]
2253
&
trailer -> [ subscriptlist ]
2253
>
trailer -> [ subscriptlist ]
2253
in
trailer -> [ subscriptlist ]
2253
>>
trailer -> [ subscriptlist ]
2253
[
trailer -> [ subscriptlist ]
2253
<=
trailer -> [ subscriptlist ]
2253
-
trailer -> [ subscriptlist ]
2253
!=
trailer -> [ subscriptlist ]
2253
|
trailer -> [ subscriptlist ]
2253
not
trailer -> [ subscriptlist ]
2253
.
trailer -> [ subscriptlist ]
2253
>=
trailer -> [ subscriptlist ]
2253
or
trailer -> [ subscriptlist ]
2253
*
trailer -> [ subscriptlist ]
2253
<<
trailer -> [ subscriptlist ]
2253
**
trailer -> [ subscriptlist ]
2253
==
trailer -> [ subscriptlist ]
2253
+
trailer -> [ subscriptlist ]
2253
is
trailer -> [ subscriptlist ]
2253
/
trailer -> [ subscriptlist ]
2253
^
trailer -> [ subscriptlist ]
2253
and
trailer -> [ subscriptlist ]
2253
,
trailer -> [ subscriptlist ]
2253
@
trailer -> [ subscriptlist ]
2253
if
trailer -> [ subscriptlist ]
2253
<
trailer -> [ subscriptlist ]
2253
%
trailer -> [ subscriptlist ]
2253
:
trailer -> [ subscriptlist ]
2254
or
trailer -> ( arglist )
2254
>>
trailer -> ( arglist )
2254
<=
trailer -> ( arglist )
2254
**
trailer -> ( arglist )
2254
<
trailer -> ( arglist )
2254
(
trailer -> ( arglist )
2254
-
trailer -> ( arglist )
2254
not
trailer -> ( arglist )
2254
if
trailer -> ( arglist )
2254
and
trailer -> ( arglist )
2254
.
trailer -> ( arglist )
2254
is
trailer -> ( arglist )
2254
>
trailer -> ( arglist )
2254
in
trailer -> ( arglist )
2254
!=
trailer -> ( arglist )
2254
,
trailer -> ( arglist )
2254
==
trailer -> ( arglist )
2254
%
trailer -> ( arglist )
2254
@
trailer -> ( arglist )
2254
^
trailer -> ( arglist )
2254
<<
trailer -> ( arglist )
2254
*
trailer -> ( arglist )
2254
//
trailer -> ( arglist )
2254
:
trailer -> ( arglist )
2254
&
trailer -> ( arglist )
2254
|
trailer -> ( arglist )
2254
>=
trailer -> ( arglist )
2254
+
trailer -> ( arglist )
2254
/
trailer -> ( arglist )
2254
[
trailer -> ( arglist )
2255
:
2446
2256
NAME
1098
2256
atom_expr
1099
2256
term
1100
2256
atom
1101
2256
-
1102
2256
factor
1103
2256
[
1105
2256
True
1106
2256
arith_expr
1107
2256
False
1108
2256
{
1109
2256
(
1110
2256
+
1111
2256
and_expr
1112
2256
and_test
1113
2256
STRING
1114
2256
comparison
1115
2256
shift_expr
1116
2256
not_test
1117
2256
power
1118
2256
None
1119
2256
xor_expr
1120
2256
expr
1121
2256
NUMBER
1122
2256
~
1123
2256
test
2447
2256
lambdef
1125
2256
not
1126
2256
or_test
1127
2256
lambda
1128
2257
:
lambdef -> lambda varargslist : test
2257
,
lambdef -> lambda varargslist : test
2258
(
trailer -> [ subscriptlist ]
2258
//
trailer -> [ subscriptlist ]
2258
&
trailer -> [ subscriptlist ]
2258
>
trailer -> [ subscriptlist ]
2258
in
trailer -> [ subscriptlist ]
2258
>>
trailer -> [ subscriptlist ]
2258
[
trailer -> [ subscriptlist ]
2258
<=
trailer -> [ subscriptlist ]
2258
-
trailer -> [ subscriptlist ]
2258
!=
trailer -> [ subscriptlist ]
2258
|
trailer -> [ subscriptlist ]
2258
not
trailer -> [ subscriptlist ]
2258
.
trailer -> [ subscriptlist ]
2258
]
trailer -> [ subscriptlist ]
2258
>=
trailer -> [ subscriptlist ]
2258
or
trailer -> [ subscriptlist ]
2258
*
trailer -> [ subscriptlist ]
2258
<<
trailer -> [ subscriptlist ]
2258
**
trailer -> [ subscriptlist ]
2258
==
trailer -> [ subscriptlist ]
2258
+
trailer -> [ subscriptlist ]
2258
is
trailer -> [ subscriptlist ]
2258
/
trailer -> [ subscriptlist ]
2258
^
trailer -> [ subscriptlist ]
2258
and
trailer -> [ subscriptlist ]
2258
,
trailer -> [ subscriptlist ]
2258
@
trailer -> [ subscriptlist ]
2258
if
trailer -> [ subscriptlist ]
2258
<
trailer -> [ subscriptlist ]
2258
%
trailer -> [ subscriptlist ]
2259
or
trailer -> ( arglist )
2259
>>
trailer -> ( arglist )
2259
<=
trailer -> ( arglist )
2259
**
trailer -> ( arglist )
2259
<
trailer -> ( arglist )
2259
(
trailer -> ( arglist )
2259
-
trailer -> ( arglist )
2259
not
trailer -> ( arglist )
2259
if
trailer -> ( arglist )
2259
and
trailer -> ( arglist )
2259
.
trailer -> ( arglist )
2259
is
trailer -> ( arglist )
2259
>
trailer -> ( arglist )
2259
in
trailer -> ( arglist )
2259
!=
trailer -> ( arglist )
2259
,
trailer -> ( arglist )
2259
==
trailer -> ( arglist )
2259
%
trailer -> ( arglist )
2259
@
trailer -> ( arglist )
2259
^
trailer -> ( arglist )
2259
<<
trailer -> ( arglist )
2259
*
trailer -> ( arglist )
2259
//
trailer -> ( arglist )
2259
&
trailer -> ( arglist )
2259
|
trailer -> ( arglist )
2259
>=
trailer -> ( arglist )
2259
+
trailer -> ( arglist )
2259
]
trailer -> ( arglist )
2259
/
trailer -> ( arglist )
2259
[
trailer -> ( arglist )
2260
NAME
1169
2260
atom_expr
1170
2260
atom
1171
2260
-
1172
2260
factor
1173
2260
[
1174
2260
True
1175
2260
arith_expr
1176
2260
False
1177
2260
{
1178
2260
+
1179
2260
and_expr
1180
2260
(
1181
2260
STRING
1182
2260
term
1183
2260
and_test
1184
2260
comparison
1185
2260
shift_expr
1186
2260
not_test
1187
2260
power
1188
2260
None
1189
2260
xor_expr
1190
2260
expr
1191
2260
NUMBER
1192
2260
~
1193
2260
or_test
1194
2260
not
1195
2260
lambdef
1196
2260
test
2448
2260
lambda
1199
2261
,
lambdef -> lambda varargslist : test
2261
]
lambdef -> lambda varargslist : test
2262
NAME
2016
2262
atom_expr
2017
2262
atom
2018
2262
-
2019
2262
True
2021
2262
False
2023
2262
{
2024
2262
+
2025
2262
[
2027
2262
(
2028
2262
STRING
2029
2262
factor
2449
2262
power
2035
2262
None
2036
2262
NUMBER
2039
2262
~
2040
2263
trailer
2263
2263
trailer_expr
2450
2263
[
2265
2263
.
2266
2263
or
trailer_expr -> 
2263
(
2267
2263
not
trailer_expr -> 
2263
in
trailer_expr -> 
2263
is
trailer_expr -> 
2263
>=
trailer_expr -> 
2263
-
trailer_expr -> 
2263
@
trailer_expr -> 
2263
<=
trailer_expr -> 
2263
^
trailer_expr -> 
2263
*
trailer_expr -> 
2263
for
trailer_expr -> 
2263
if
trailer_expr -> 
2263
**
trailer_expr -> 
2263
>
trailer_expr -> 
2263
==
trailer_expr -> 
2263
>>
trailer_expr -> 
2263
<<
trailer_expr -> 
2263
/
trailer_expr -> 
2263
//
trailer_expr -> 
2263
!=
trailer_expr -> 
2263
<
trailer_expr -> 
2263
&
trailer_expr -> 
2263
]
trailer_expr -> 
2263
|
trailer_expr -> 
2263
and
trailer_expr -> 
2263
+
trailer_expr -> 
2263
%
trailer_expr -> 
2264
|
atom_expr -> atom trailer_expr
2264
*
atom_expr -> atom trailer_expr
2264
-
atom_expr -> atom trailer_expr
2264
not
atom_expr -> atom trailer_expr
2264
in
atom_expr -> atom trailer_expr
2264
and
atom_expr -> atom trailer_expr
2264
^
atom_expr -> atom trailer_expr
2264
or
atom_expr -> atom trailer_expr
2264
<=
atom_expr -> atom trailer_expr
2264
<
atom_expr -> atom trailer_expr
2264
>>
atom_expr -> atom trailer_expr
2264
//
atom_expr -> atom trailer_expr
2264
!=
atom_expr -> atom trailer_expr
2264
<<
atom_expr -> atom trailer_expr
2264
+
atom_expr -> atom trailer_expr
2264
>
atom_expr -> atom trailer_expr
2264
/
atom_expr -> atom trailer_expr
2264
==
atom_expr -> atom trailer_expr
2264
%
atom_expr -> atom trailer_expr
2264
&
atom_expr -> atom trailer_expr
2264
@
atom_expr -> atom trailer_expr
2264
if
atom_expr -> atom trailer_expr
2264
for
atom_expr -> atom trailer_expr
2264
>=
atom_expr -> atom trailer_expr
2264
]
atom_expr -> atom trailer_expr
2264
is
atom_expr -> atom trailer_expr
2264
**
atom_expr -> atom trailer_expr
2265
NAME
461
2265
atom_expr
462
2265
term
463
2265
atom
464
2265
-
465
2265
factor
466
2265
[
467
2265
True
468
2265
arith_expr
469
2265
False
470
2265
{
471
2265
(
472
2265
+
473
2265
and_expr
474
2265
and_test
475
2265
STRING
476
2265
subscriptlist
2451
2265
comparison
478
2265
shift_expr
479
2265
not_test
480
2265
power
481
2265
None
482
2265
xor_expr
483
2265
expr
484
2265
NUMBER
485
2265
test
486
2265
~
487
2265
or_test
488
2265
not
489
2265
lambdef
490
2265
:
maybe_test -> 
2265
lambda
491
2265
subscript
492
2265
maybe_test
493
2266
NAME
2452
2267
NAME
496
2267
atom_expr
497
2267
atom
498
2267
-
499
2267
arglist
2453
2267
factor
501
2267
*
502
2267
[
503
2267
True
504
2267
arith_expr
505
2267
xor_expr
506
2267
False
507
2267
**
508
2267
{
509
2267
+
510
2267
)
2454
2267
and_expr
512
2267
(
513
2267
STRING
514
2267
power
515
2267
term
516
2267
comparison
517
2267
shift_expr
518
2267
argument
519
2267
not_test
520
2267
or_test
521
2267
lambdef
522
2267
lambda
523
2267
None
524
2267
test
525
2267
expr
526
2267
NUMBER
527
2267
and_test
528
2267
~
529
2267
not
530
2268
>>
factor -> - factor
2268
if
factor -> - factor
2268
>
factor -> - factor
2268
is
factor -> - factor
2268
//
factor -> - factor
2268
not
factor -> - factor
2268
or
factor -> - factor
2268
-
factor -> - factor
2268
<<
factor -> - factor
2268
]
factor -> - factor
2268
for
factor -> - factor
2268
>=
factor -> - factor
2268
/
factor -> - factor
2268
<=
factor -> - factor
2268
<
factor -> - factor
2268
in
factor -> - factor
2268
|
factor -> - factor
2268
*
factor -> - factor
2268
!=
factor -> - factor
2268
&
factor -> - factor
2268
and
factor -> - factor
2268
^
factor -> - factor
2268
+
factor -> - factor
2268
%
factor -> - factor
2268
==
factor -> - factor
2268
@
factor -> - factor
2269
NAME
2016
2269
atom_expr
2017
2269
atom
2018
2269
-
2019
2269
factor
2020
2269
True
2021
2269
False
2023
2269
{
2024
2269
+
2025
2269
[
2027
2269
(
2028
2269
STRING
2029
2269
term
2455
2269
power
2035
2269
None
2036
2269
NUMBER
2039
2269
~
2040
2270
NAME
2016
2270
atom_expr
2017
2270
atom
2018
2270
-
2019
2270
factor
2020
2270
True
2021
2270
False
2023
2270
{
2024
2270
+
2025
2270
[
2027
2270
(
2028
2270
STRING
2029
2270
term
2456
2270
power
2035
2270
None
2036
2270
NUMBER
2039
2270
~
2040
2271
NAME
2016
2271
atom_expr
2017
2271
atom
2018
2271
-
2019
2271
factor
2020
2271
True
2021
2271
False
2023
2271
term
2457
2271
{
2024
2271
+
2025
2271
[
2027
2271
(
2028
2271
STRING
2029
2271
power
2035
2271
None
2036
2271
NUMBER
2039
2271
~
2040
2272
NAME
2016
2272
atom_expr
2017
2272
atom
2018
2272
-
2019
2272
factor
2020
2272
True
2021
2272
False
2023
2272
{
2024
2272
+
2025
2272
[
2027
2272
(
2028
2272
STRING
2029
2272
power
2035
2272
None
2036
2272
term
2458
2272
NUMBER
2039
2272
~
2040
2273
NAME
2016
2273
atom_expr
2017
2273
atom
2018
2273
-
2019
2273
factor
2020
2273
True
2021
2273
False
2023
2273
{
2024
2273
+
2025
2273
[
2027
2273
(
2028
2273
STRING
2029
2273
term
2459
2273
power
2035
2273
None
2036
2273
NUMBER
2039
2273
~
2040
2274
NAME
2016
2274
atom_expr
2017
2274
atom
2018
2274
-
2019
2274
factor
2020
2274
True
2021
2274
arith_expr
2022
2274
False
2023
2274
{
2024
2274
+
2025
2274
[
2027
2274
(
2028
2274
STRING
2029
2274
shift_expr
2460
2274
term
2030
2274
power
2035
2274
None
2036
2274
NUMBER
2039
2274
~
2040
2275
NAME
2016
2275
atom_expr
2017
2275
atom
2018
2275
-
2019
2275
factor
2020
2275
True
2021
2275
arith_expr
2022
2275
False
2023
2275
{
2024
2275
shift_expr
2461
2275
+
2025
2275
[
2027
2275
(
2028
2275
STRING
2029
2275
term
2030
2275
power
2035
2275
None
2036
2275
NUMBER
2039
2275
~
2040
2276
%
atom -> { }
2276
[
atom -> { }
2276
not
atom -> { }
2276
]
atom -> { }
2276
^
atom -> { }
2276
or
atom -> { }
2276
-
atom -> { }
2276
>=
atom -> { }
2276
<<
atom -> { }
2276
/
atom -> { }
2276
<=
atom -> { }
2276
|
atom -> { }
2276
for
atom -> { }
2276
>>
atom -> { }
2276
@
atom -> { }
2276
is
atom -> { }
2276
if
atom -> { }
2276
and
atom -> { }
2276
==
atom -> { }
2276
in
atom -> { }
2276
**
atom -> { }
2276
&
atom -> { }
2276
>
atom -> { }
2276
//
atom -> { }
2276
(
atom -> { }
2276
+
atom -> { }
2276
<
atom -> { }
2276
!=
atom -> { }
2276
.
atom -> { }
2276
*
atom -> { }
2277
>>
factor -> + factor
2277
>=
factor -> + factor
2277
or
factor -> + factor
2277
==
factor -> + factor
2277
-
factor -> + factor
2277
*
factor -> + factor
2277
]
factor -> + factor
2277
<
factor -> + factor
2277
^
factor -> + factor
2277
&
factor -> + factor
2277
@
factor -> + factor
2277
|
factor -> + factor
2277
<<
factor -> + factor
2277
%
factor -> + factor
2277
not
factor -> + factor
2277
//
factor -> + factor
2277
and
factor -> + factor
2277
in
factor -> + factor
2277
!=
factor -> + factor
2277
>
factor -> + factor
2277
/
factor -> + factor
2277
is
factor -> + factor
2277
+
factor -> + factor
2277
if
factor -> + factor
2277
for
factor -> + factor
2277
<=
factor -> + factor
2278
NAME
2016
2278
atom_expr
2017
2278
atom
2018
2278
-
2019
2278
factor
2020
2278
True
2021
2278
arith_expr
2022
2278
False
2023
2278
{
2024
2278
+
2025
2278
and_expr
2026
2278
[
2027
2278
(
2028
2278
STRING
2029
2278
xor_expr
2462
2278
term
2030
2278
shift_expr
2033
2278
power
2035
2278
None
2036
2278
NUMBER
2039
2278
~
2040
2279
]
2463
2280
and
atom -> [ ]
2280
<<
atom -> [ ]
2280
//
atom -> [ ]
2280
*
atom -> [ ]
2280
+
atom -> [ ]
2280
^
atom -> [ ]
2280
==
atom -> [ ]
2280
>>
atom -> [ ]
2280
/
atom -> [ ]
2280
]
atom -> [ ]
2280
in
atom -> [ ]
2280
>
atom -> [ ]
2280
<=
atom -> [ ]
2280
.
atom -> [ ]
2280
%
atom -> [ ]
2280
&
atom -> [ ]
2280
-
atom -> [ ]
2280
>=
atom -> [ ]
2280
not
atom -> [ ]
2280
|
atom -> [ ]
2280
@
atom -> [ ]
2280
is
atom -> [ ]
2280
or
atom -> [ ]
2280
!=
atom -> [ ]
2280
if
atom -> [ ]
2280
**
atom -> [ ]
2280
for
atom -> [ ]
2280
<
atom -> [ ]
2280
(
atom -> [ ]
2280
[
atom -> [ ]
2281
|
atom -> ( )
2281
**
atom -> ( )
2281
]
atom -> ( )
2281
>>
atom -> ( )
2281
-
atom -> ( )
2281
%
atom -> ( )
2281
(
atom -> ( )
2281
not
atom -> ( )
2281
+
atom -> ( )
2281
>=
atom -> ( )
2281
&
atom -> ( )
2281
*
atom -> ( )
2281
!=
atom -> ( )
2281
<=
atom -> ( )
2281
and
atom -> ( )
2281
<
atom -> ( )
2281
^
atom -> ( )
2281
==
atom -> ( )
2281
if
atom -> ( )
2281
in
atom -> ( )
2281
/
atom -> ( )
2281
>
atom -> ( )
2281
//
atom -> ( )
2281
.
atom -> ( )
2281
or
atom -> ( )
2281
@
atom -> ( )
2281
is
atom -> ( )
2281
<<
atom -> ( )
2281
for
atom -> ( )
2281
[
atom -> ( )
2282
)
2464
2283
NAME
2016
2283
atom_expr
2017
2283
atom
2018
2283
-
2019
2283
factor
2020
2283
True
2021
2283
False
2023
2283
{
2024
2283
+
2025
2283
[
2027
2283
(
2028
2283
STRING
2029
2283
arith_expr
2465
2283
term
2030
2283
power
2035
2283
None
2036
2283
NUMBER
2039
2283
~
2040
2284
NAME
2016
2284
atom_expr
2017
2284
atom
2018
2284
-
2019
2284
factor
2020
2284
True
2021
2284
False
2023
2284
{
2024
2284
+
2025
2284
[
2027
2284
(
2028
2284
STRING
2029
2284
term
2030
2284
arith_expr
2466
2284
power
2035
2284
None
2036
2284
NUMBER
2039
2284
~
2040
2285
NAME
2016
2285
atom_expr
2017
2285
atom
2018
2285
-
2019
2285
factor
2020
2285
True
2021
2285
arith_expr
2022
2285
False
2023
2285
{
2024
2285
+
2025
2285
and_expr
2026
2285
[
2027
2285
(
2028
2285
STRING
2029
2285
term
2030
2285
and_test
2031
2285
comparison
2032
2285
shift_expr
2033
2285
not_test
2034
2285
power
2035
2285
None
2036
2285
xor_expr
2037
2285
expr
2038
2285
NUMBER
2039
2285
~
2040
2285
not
2041
2285
or_test
2467
2286
NAME
2016
2286
atom_expr
2017
2286
atom
2018
2286
-
2019
2286
factor
2020
2286
True
2021
2286
arith_expr
2022
2286
False
2023
2286
{
2024
2286
+
2025
2286
[
2027
2286
(
2028
2286
STRING
2029
2286
term
2030
2286
shift_expr
2033
2286
power
2035
2286
None
2036
2286
and_expr
2468
2286
NUMBER
2039
2286
~
2040
2287
NAME
2016
2287
atom_expr
2017
2287
atom
2018
2287
-
2019
2287
factor
2020
2287
True
2021
2287
arith_expr
2022
2287
False
2023
2287
{
2024
2287
+
2025
2287
and_expr
2026
2287
[
2027
2287
(
2028
2287
STRING
2029
2287
term
2030
2287
comparison
2032
2287
and_test
2469
2287
shift_expr
2033
2287
not_test
2034
2287
power
2035
2287
None
2036
2287
xor_expr
2037
2287
expr
2038
2287
NUMBER
2039
2287
~
2040
2287
not
2041
2288
NAME
2016
2288
atom_expr
2017
2288
atom
2018
2288
-
2019
2288
factor
2020
2288
True
2021
2288
arith_expr
2022
2288
False
2023
2288
{
2024
2288
+
2025
2288
and_expr
2026
2288
[
2027
2288
(
2028
2288
STRING
2029
2288
term
2030
2288
shift_expr
2033
2288
power
2035
2288
None
2036
2288
expr
2470
2288
xor_expr
2037
2288
NUMBER
2039
2288
~
2040
2289
NAME
2016
2289
atom_expr
2017
2289
atom
2018
2289
-
2019
2289
factor
2020
2289
True
2021
2289
arith_expr
2022
2289
False
2023
2289
{
2024
2289
+
2025
2289
and_expr
2026
2289
[
2027
2289
comparison
2471
2289
(
2028
2289
STRING
2029
2289
term
2030
2289
shift_expr
2033
2289
power
2035
2289
None
2036
2289
xor_expr
2037
2289
expr
2038
2289
NUMBER
2039
2289
~
2040
2290
is
factor -> ~ factor
2290
>=
factor -> ~ factor
2290
<<
factor -> ~ factor
2290
<=
factor -> ~ factor
2290
if
factor -> ~ factor
2290
==
factor -> ~ factor
2290
for
factor -> ~ factor
2290
//
factor -> ~ factor
2290
or
factor -> ~ factor
2290
+
factor -> ~ factor
2290
and
factor -> ~ factor
2290
!=
factor -> ~ factor
2290
&
factor -> ~ factor
2290
%
factor -> ~ factor
2290
|
factor -> ~ factor
2290
>>
factor -> ~ factor
2290
in
factor -> ~ factor
2290
>
factor -> ~ factor
2290
/
factor -> ~ factor
2290
not
factor -> ~ factor
2290
@
factor -> ~ factor
2290
-
factor -> ~ factor
2290
^
factor -> ~ factor
2290
*
factor -> ~ factor
2290
<
factor -> ~ factor
2290
]
factor -> ~ factor
2291
for
not_test -> not not_test
2291
or
not_test -> not not_test
2291
]
not_test -> not not_test
2291
if
not_test -> not not_test
2291
and
not_test -> not not_test
2292
NAME
2016
2292
atom_expr
2017
2292
atom
2018
2292
-
2019
2292
test_nocond
2472
2292
factor
2020
2292
True
2021
2292
lambda
2473
2292
arith_expr
2022
2292
False
2023
2292
{
2024
2292
+
2025
2292
and_expr
2026
2292
[
2027
2292
(
2028
2292
STRING
2029
2292
term
2030
2292
and_test
2031
2292
comparison
2032
2292
shift_expr
2033
2292
not_test
2034
2292
power
2035
2292
None
2036
2292
xor_expr
2037
2292
expr
2038
2292
NUMBER
2039
2292
or_test
2474
2292
~
2040
2292
not
2041
2292
lambdef_nocond
2475
2293
]
comp_iter -> comp_for
2294
]
comp_for -> for expr_list in or_test comp_iter
2295
]
comp_iter -> comp_if
2296
break
while_stmt -> while test : suite else : suite
2296
yield
while_stmt -> while test : suite else : suite
2296
(
while_stmt -> while test : suite else : suite
2296
pass
while_stmt -> while test : suite else : suite
2296
with
while_stmt -> while test : suite else : suite
2296
False
while_stmt -> while test : suite else : suite
2296
[
while_stmt -> while test : suite else : suite
2296
not
while_stmt -> while test : suite else : suite
2296
while
while_stmt -> while test : suite else : suite
2296
~
while_stmt -> while test : suite else : suite
2296
+
while_stmt -> while test : suite else : suite
2296
-
while_stmt -> while test : suite else : suite
2296
raise
while_stmt -> while test : suite else : suite
2296
endsim
while_stmt -> while test : suite else : suite
2296
begsim
while_stmt -> while test : suite else : suite
2296
{
while_stmt -> while test : suite else : suite
2296
del
while_stmt -> while test : suite else : suite
2296
@
while_stmt -> while test : suite else : suite
2296
global
while_stmt -> while test : suite else : suite
2296
class
while_stmt -> while test : suite else : suite
2296
assert
while_stmt -> while test : suite else : suite
2296
continue
while_stmt -> while test : suite else : suite
2296
True
while_stmt -> while test : suite else : suite
2296
for
while_stmt -> while test : suite else : suite
2296
STRING
while_stmt -> while test : suite else : suite
2296
try
while_stmt -> while test : suite else : suite
2296
def
while_stmt -> while test : suite else : suite
2296
NEWLINE
while_stmt -> while test : suite else : suite
2296
conf
while_stmt -> while test : suite else : suite
2296
resetstats
while_stmt -> while test : suite else : suite
2296
if
while_stmt -> while test : suite else : suite
2296
return
while_stmt -> while test : suite else : suite
2296
NUMBER
while_stmt -> while test : suite else : suite
2296
$
while_stmt -> while test : suite else : suite
2296
lambda
while_stmt -> while test : suite else : suite
2296
nonlocal
while_stmt -> while test : suite else : suite
2296
None
while_stmt -> while test : suite else : suite
2296
NAME
while_stmt -> while test : suite else : suite
2297
(
suite -> NEWLINE INDENT stmt_list DEDENT
2297
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2297
try
suite -> NEWLINE INDENT stmt_list DEDENT
2297
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2297
@
suite -> NEWLINE INDENT stmt_list DEDENT
2297
None
suite -> NEWLINE INDENT stmt_list DEDENT
2297
$
suite -> NEWLINE INDENT stmt_list DEDENT
2297
if
suite -> NEWLINE INDENT stmt_list DEDENT
2297
class
suite -> NEWLINE INDENT stmt_list DEDENT
2297
[
suite -> NEWLINE INDENT stmt_list DEDENT
2297
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2297
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2297
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2297
-
suite -> NEWLINE INDENT stmt_list DEDENT
2297
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2297
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2297
False
suite -> NEWLINE INDENT stmt_list DEDENT
2297
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2297
break
suite -> NEWLINE INDENT stmt_list DEDENT
2297
else
suite -> NEWLINE INDENT stmt_list DEDENT
2297
global
suite -> NEWLINE INDENT stmt_list DEDENT
2297
+
suite -> NEWLINE INDENT stmt_list DEDENT
2297
{
suite -> NEWLINE INDENT stmt_list DEDENT
2297
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2297
~
suite -> NEWLINE INDENT stmt_list DEDENT
2297
for
suite -> NEWLINE INDENT stmt_list DEDENT
2297
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
2297
with
suite -> NEWLINE INDENT stmt_list DEDENT
2297
not
suite -> NEWLINE INDENT stmt_list DEDENT
2297
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2297
while
suite -> NEWLINE INDENT stmt_list DEDENT
2297
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2297
True
suite -> NEWLINE INDENT stmt_list DEDENT
2297
def
suite -> NEWLINE INDENT stmt_list DEDENT
2297
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2297
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2297
return
suite -> NEWLINE INDENT stmt_list DEDENT
2297
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2297
del
suite -> NEWLINE INDENT stmt_list DEDENT
2298
endsim
classdef -> class NAME ( arglist ) : suite
2298
lambda
classdef -> class NAME ( arglist ) : suite
2298
{
classdef -> class NAME ( arglist ) : suite
2298
break
classdef -> class NAME ( arglist ) : suite
2298
assert
classdef -> class NAME ( arglist ) : suite
2298
None
classdef -> class NAME ( arglist ) : suite
2298
yield
classdef -> class NAME ( arglist ) : suite
2298
-
classdef -> class NAME ( arglist ) : suite
2298
~
classdef -> class NAME ( arglist ) : suite
2298
while
classdef -> class NAME ( arglist ) : suite
2298
raise
classdef -> class NAME ( arglist ) : suite
2298
$
classdef -> class NAME ( arglist ) : suite
2298
global
classdef -> class NAME ( arglist ) : suite
2298
with
classdef -> class NAME ( arglist ) : suite
2298
continue
classdef -> class NAME ( arglist ) : suite
2298
False
classdef -> class NAME ( arglist ) : suite
2298
[
classdef -> class NAME ( arglist ) : suite
2298
conf
classdef -> class NAME ( arglist ) : suite
2298
return
classdef -> class NAME ( arglist ) : suite
2298
NAME
classdef -> class NAME ( arglist ) : suite
2298
STRING
classdef -> class NAME ( arglist ) : suite
2298
not
classdef -> class NAME ( arglist ) : suite
2298
if
classdef -> class NAME ( arglist ) : suite
2298
@
classdef -> class NAME ( arglist ) : suite
2298
NEWLINE
classdef -> class NAME ( arglist ) : suite
2298
begsim
classdef -> class NAME ( arglist ) : suite
2298
(
classdef -> class NAME ( arglist ) : suite
2298
def
classdef -> class NAME ( arglist ) : suite
2298
resetstats
classdef -> class NAME ( arglist ) : suite
2298
True
classdef -> class NAME ( arglist ) : suite
2298
try
classdef -> class NAME ( arglist ) : suite
2298
+
classdef -> class NAME ( arglist ) : suite
2298
nonlocal
classdef -> class NAME ( arglist ) : suite
2298
NUMBER
classdef -> class NAME ( arglist ) : suite
2298
for
classdef -> class NAME ( arglist ) : suite
2298
pass
classdef -> class NAME ( arglist ) : suite
2298
del
classdef -> class NAME ( arglist ) : suite
2298
class
classdef -> class NAME ( arglist ) : suite
2299
(
suite -> NEWLINE INDENT stmt_list DEDENT
2299
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2299
try
suite -> NEWLINE INDENT stmt_list DEDENT
2299
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2299
@
suite -> NEWLINE INDENT stmt_list DEDENT
2299
None
suite -> NEWLINE INDENT stmt_list DEDENT
2299
$
suite -> NEWLINE INDENT stmt_list DEDENT
2299
if
suite -> NEWLINE INDENT stmt_list DEDENT
2299
class
suite -> NEWLINE INDENT stmt_list DEDENT
2299
[
suite -> NEWLINE INDENT stmt_list DEDENT
2299
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2299
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2299
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2299
-
suite -> NEWLINE INDENT stmt_list DEDENT
2299
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2299
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2299
False
suite -> NEWLINE INDENT stmt_list DEDENT
2299
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2299
break
suite -> NEWLINE INDENT stmt_list DEDENT
2299
global
suite -> NEWLINE INDENT stmt_list DEDENT
2299
+
suite -> NEWLINE INDENT stmt_list DEDENT
2299
{
suite -> NEWLINE INDENT stmt_list DEDENT
2299
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2299
~
suite -> NEWLINE INDENT stmt_list DEDENT
2299
for
suite -> NEWLINE INDENT stmt_list DEDENT
2299
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
2299
with
suite -> NEWLINE INDENT stmt_list DEDENT
2299
not
suite -> NEWLINE INDENT stmt_list DEDENT
2299
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2299
while
suite -> NEWLINE INDENT stmt_list DEDENT
2299
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2299
True
suite -> NEWLINE INDENT stmt_list DEDENT
2299
def
suite -> NEWLINE INDENT stmt_list DEDENT
2299
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2299
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2299
return
suite -> NEWLINE INDENT stmt_list DEDENT
2299
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2299
del
suite -> NEWLINE INDENT stmt_list DEDENT
2300
False
suite -> simple_stmt
2300
if
suite -> simple_stmt
2300
NUMBER
suite -> simple_stmt
2300
NEWLINE
suite -> simple_stmt
2300
{
suite -> simple_stmt
2300
@
suite -> simple_stmt
2300
begsim
suite -> simple_stmt
2300
endsim
suite -> simple_stmt
2300
nonlocal
suite -> simple_stmt
2300
STRING
suite -> simple_stmt
2300
(
suite -> simple_stmt
2300
global
suite -> simple_stmt
2300
yield
suite -> simple_stmt
2300
try
suite -> simple_stmt
2300
conf
suite -> simple_stmt
2300
finally
suite -> simple_stmt
2300
for
suite -> simple_stmt
2300
not
suite -> simple_stmt
2300
while
suite -> simple_stmt
2300
lambda
suite -> simple_stmt
2300
None
suite -> simple_stmt
2300
break
suite -> simple_stmt
2300
resetstats
suite -> simple_stmt
2300
True
suite -> simple_stmt
2300
~
suite -> simple_stmt
2300
-
suite -> simple_stmt
2300
pass
suite -> simple_stmt
2300
def
suite -> simple_stmt
2300
raise
suite -> simple_stmt
2300
with
suite -> simple_stmt
2300
class
suite -> simple_stmt
2300
[
suite -> simple_stmt
2300
return
suite -> simple_stmt
2300
del
suite -> simple_stmt
2300
continue
suite -> simple_stmt
2300
assert
suite -> simple_stmt
2300
+
suite -> simple_stmt
2300
$
suite -> simple_stmt
2300
NAME
suite -> simple_stmt
2301
finally
2476
2301
True
try_stmt -> try : suite except_clause else : suite
2301
raise
try_stmt -> try : suite except_clause else : suite
2301
NUMBER
try_stmt -> try : suite except_clause else : suite
2301
pass
try_stmt -> try : suite except_clause else : suite
2301
NEWLINE
try_stmt -> try : suite except_clause else : suite
2301
lambda
try_stmt -> try : suite except_clause else : suite
2301
with
try_stmt -> try : suite except_clause else : suite
2301
if
try_stmt -> try : suite except_clause else : suite
2301
class
try_stmt -> try : suite except_clause else : suite
2301
not
try_stmt -> try : suite except_clause else : suite
2301
NAME
try_stmt -> try : suite except_clause else : suite
2301
del
try_stmt -> try : suite except_clause else : suite
2301
break
try_stmt -> try : suite except_clause else : suite
2301
resetstats
try_stmt -> try : suite except_clause else : suite
2301
{
try_stmt -> try : suite except_clause else : suite
2301
nonlocal
try_stmt -> try : suite except_clause else : suite
2301
None
try_stmt -> try : suite except_clause else : suite
2301
[
try_stmt -> try : suite except_clause else : suite
2301
begsim
try_stmt -> try : suite except_clause else : suite
2301
False
try_stmt -> try : suite except_clause else : suite
2301
@
try_stmt -> try : suite except_clause else : suite
2301
conf
try_stmt -> try : suite except_clause else : suite
2301
~
try_stmt -> try : suite except_clause else : suite
2301
STRING
try_stmt -> try : suite except_clause else : suite
2301
+
try_stmt -> try : suite except_clause else : suite
2301
endsim
try_stmt -> try : suite except_clause else : suite
2301
continue
try_stmt -> try : suite except_clause else : suite
2301
global
try_stmt -> try : suite except_clause else : suite
2301
return
try_stmt -> try : suite except_clause else : suite
2301
def
try_stmt -> try : suite except_clause else : suite
2301
-
try_stmt -> try : suite except_clause else : suite
2301
assert
try_stmt -> try : suite except_clause else : suite
2301
while
try_stmt -> try : suite except_clause else : suite
2301
$
try_stmt -> try : suite except_clause else : suite
2301
for
try_stmt -> try : suite except_clause else : suite
2301
(
try_stmt -> try : suite except_clause else : suite
2301
try
try_stmt -> try : suite except_clause else : suite
2301
yield
try_stmt -> try : suite except_clause else : suite
2302
NEWLINE
2477
2303
INDENT
2478
2304
[
try_stmt -> try : suite except_clause finally : suite
2304
~
try_stmt -> try : suite except_clause finally : suite
2304
True
try_stmt -> try : suite except_clause finally : suite
2304
$
try_stmt -> try : suite except_clause finally : suite
2304
global
try_stmt -> try : suite except_clause finally : suite
2304
pass
try_stmt -> try : suite except_clause finally : suite
2304
while
try_stmt -> try : suite except_clause finally : suite
2304
NEWLINE
try_stmt -> try : suite except_clause finally : suite
2304
del
try_stmt -> try : suite except_clause finally : suite
2304
resetstats
try_stmt -> try : suite except_clause finally : suite
2304
nonlocal
try_stmt -> try : suite except_clause finally : suite
2304
with
try_stmt -> try : suite except_clause finally : suite
2304
for
try_stmt -> try : suite except_clause finally : suite
2304
STRING
try_stmt -> try : suite except_clause finally : suite
2304
NUMBER
try_stmt -> try : suite except_clause finally : suite
2304
assert
try_stmt -> try : suite except_clause finally : suite
2304
NAME
try_stmt -> try : suite except_clause finally : suite
2304
endsim
try_stmt -> try : suite except_clause finally : suite
2304
-
try_stmt -> try : suite except_clause finally : suite
2304
None
try_stmt -> try : suite except_clause finally : suite
2304
lambda
try_stmt -> try : suite except_clause finally : suite
2304
{
try_stmt -> try : suite except_clause finally : suite
2304
return
try_stmt -> try : suite except_clause finally : suite
2304
not
try_stmt -> try : suite except_clause finally : suite
2304
+
try_stmt -> try : suite except_clause finally : suite
2304
break
try_stmt -> try : suite except_clause finally : suite
2304
class
try_stmt -> try : suite except_clause finally : suite
2304
if
try_stmt -> try : suite except_clause finally : suite
2304
@
try_stmt -> try : suite except_clause finally : suite
2304
continue
try_stmt -> try : suite except_clause finally : suite
2304
(
try_stmt -> try : suite except_clause finally : suite
2304
def
try_stmt -> try : suite except_clause finally : suite
2304
raise
try_stmt -> try : suite except_clause finally : suite
2304
False
try_stmt -> try : suite except_clause finally : suite
2304
conf
try_stmt -> try : suite except_clause finally : suite
2304
yield
try_stmt -> try : suite except_clause finally : suite
2304
begsim
try_stmt -> try : suite except_clause finally : suite
2304
try
try_stmt -> try : suite except_clause finally : suite
2305
as
power -> atom_expr ** factor
2305
>>
power -> atom_expr ** factor
2305
<=
power -> atom_expr ** factor
2305
:
power -> atom_expr ** factor
2305
//
power -> atom_expr ** factor
2305
/
power -> atom_expr ** factor
2305
&
power -> atom_expr ** factor
2305
if
power -> atom_expr ** factor
2305
not
power -> atom_expr ** factor
2305
<
power -> atom_expr ** factor
2305
!=
power -> atom_expr ** factor
2305
>
power -> atom_expr ** factor
2305
*
power -> atom_expr ** factor
2305
|
power -> atom_expr ** factor
2305
==
power -> atom_expr ** factor
2305
is
power -> atom_expr ** factor
2305
and
power -> atom_expr ** factor
2305
<<
power -> atom_expr ** factor
2305
-
power -> atom_expr ** factor
2305
@
power -> atom_expr ** factor
2305
in
power -> atom_expr ** factor
2305
^
power -> atom_expr ** factor
2305
%
power -> atom_expr ** factor
2305
>=
power -> atom_expr ** factor
2305
+
power -> atom_expr ** factor
2305
or
power -> atom_expr ** factor
2306
except
1238
2306
except_clause
2321
2306
maybe_except_clause
2479
2306
False
maybe_except_clause -> 
2306
del
maybe_except_clause -> 
2306
True
maybe_except_clause -> 
2306
{
maybe_except_clause -> 
2306
def
maybe_except_clause -> 
2306
(
maybe_except_clause -> 
2306
$
maybe_except_clause -> 
2306
continue
maybe_except_clause -> 
2306
endsim
maybe_except_clause -> 
2306
try
maybe_except_clause -> 
2306
None
maybe_except_clause -> 
2306
global
maybe_except_clause -> 
2306
resetstats
maybe_except_clause -> 
2306
class
maybe_except_clause -> 
2306
STRING
maybe_except_clause -> 
2306
raise
maybe_except_clause -> 
2306
begsim
maybe_except_clause -> 
2306
-
maybe_except_clause -> 
2306
@
maybe_except_clause -> 
2306
yield
maybe_except_clause -> 
2306
break
maybe_except_clause -> 
2306
assert
maybe_except_clause -> 
2306
else
maybe_except_clause -> 
2306
NEWLINE
maybe_except_clause -> 
2306
[
maybe_except_clause -> 
2306
NAME
maybe_except_clause -> 
2306
lambda
maybe_except_clause -> 
2306
finally
maybe_except_clause -> 
2306
while
maybe_except_clause -> 
2306
for
maybe_except_clause -> 
2306
not
maybe_except_clause -> 
2306
conf
maybe_except_clause -> 
2306
pass
maybe_except_clause -> 
2306
nonlocal
maybe_except_clause -> 
2306
return
maybe_except_clause -> 
2306
if
maybe_except_clause -> 
2306
+
maybe_except_clause -> 
2306
with
maybe_except_clause -> 
2306
~
maybe_except_clause -> 
2306
NUMBER
maybe_except_clause -> 
2307
:
2480
2308
and
arith_expr -> term + arith_expr
2308
<
arith_expr -> term + arith_expr
2308
|
arith_expr -> term + arith_expr
2308
>=
arith_expr -> term + arith_expr
2308
>>
arith_expr -> term + arith_expr
2308
:
arith_expr -> term + arith_expr
2308
if
arith_expr -> term + arith_expr
2308
>
arith_expr -> term + arith_expr
2308
in
arith_expr -> term + arith_expr
2308
or
arith_expr -> term + arith_expr
2308
<=
arith_expr -> term + arith_expr
2308
not
arith_expr -> term + arith_expr
2308
^
arith_expr -> term + arith_expr
2308
!=
arith_expr -> term + arith_expr
2308
&
arith_expr -> term + arith_expr
2308
==
arith_expr -> term + arith_expr
2308
as
arith_expr -> term + arith_expr
2308
<<
arith_expr -> term + arith_expr
2308
is
arith_expr -> term + arith_expr
2309
as
arith_expr -> term - arith_expr
2309
<<
arith_expr -> term - arith_expr
2309
if
arith_expr -> term - arith_expr
2309
:
arith_expr -> term - arith_expr
2309
<
arith_expr -> term - arith_expr
2309
<=
arith_expr -> term - arith_expr
2309
and
arith_expr -> term - arith_expr
2309
in
arith_expr -> term - arith_expr
2309
&
arith_expr -> term - arith_expr
2309
|
arith_expr -> term - arith_expr
2309
==
arith_expr -> term - arith_expr
2309
is
arith_expr -> term - arith_expr
2309
>>
arith_expr -> term - arith_expr
2309
!=
arith_expr -> term - arith_expr
2309
>
arith_expr -> term - arith_expr
2309
or
arith_expr -> term - arith_expr
2309
>=
arith_expr -> term - arith_expr
2309
^
arith_expr -> term - arith_expr
2309
not
arith_expr -> term - arith_expr
2310
*
trailer_expr -> trailer trailer_expr
2310
+
trailer_expr -> trailer trailer_expr
2310
if
trailer_expr -> trailer trailer_expr
2310
-
trailer_expr -> trailer trailer_expr
2310
<=
trailer_expr -> trailer trailer_expr
2310
|
trailer_expr -> trailer trailer_expr
2310
@
trailer_expr -> trailer trailer_expr
2310
%
trailer_expr -> trailer trailer_expr
2310
in
trailer_expr -> trailer trailer_expr
2310
<<
trailer_expr -> trailer trailer_expr
2310
**
trailer_expr -> trailer trailer_expr
2310
==
trailer_expr -> trailer trailer_expr
2310
not
trailer_expr -> trailer trailer_expr
2310
and
trailer_expr -> trailer trailer_expr
2310
//
trailer_expr -> trailer trailer_expr
2310
^
trailer_expr -> trailer trailer_expr
2310
or
trailer_expr -> trailer trailer_expr
2310
>
trailer_expr -> trailer trailer_expr
2310
!=
trailer_expr -> trailer trailer_expr
2310
is
trailer_expr -> trailer trailer_expr
2310
:
trailer_expr -> trailer trailer_expr
2310
as
trailer_expr -> trailer trailer_expr
2310
&
trailer_expr -> trailer trailer_expr
2310
>>
trailer_expr -> trailer trailer_expr
2310
/
trailer_expr -> trailer trailer_expr
2310
<
trailer_expr -> trailer trailer_expr
2310
>=
trailer_expr -> trailer trailer_expr
2311
]
2481
2312
)
2482
2313
as
trailer -> ( )
2313
[
trailer -> ( )
2313
not
trailer -> ( )
2313
==
trailer -> ( )
2313
**
trailer -> ( )
2313
:
trailer -> ( )
2313
<=
trailer -> ( )
2313
//
trailer -> ( )
2313
<<
trailer -> ( )
2313
<
trailer -> ( )
2313
in
trailer -> ( )
2313
or
trailer -> ( )
2313
-
trailer -> ( )
2313
+
trailer -> ( )
2313
&
trailer -> ( )
2313
*
trailer -> ( )
2313
is
trailer -> ( )
2313
>
trailer -> ( )
2313
!=
trailer -> ( )
2313
>>
trailer -> ( )
2313
%
trailer -> ( )
2313
|
trailer -> ( )
2313
.
trailer -> ( )
2313
>=
trailer -> ( )
2313
(
trailer -> ( )
2313
and
trailer -> ( )
2313
@
trailer -> ( )
2313
/
trailer -> ( )
2313
^
trailer -> ( )
2313
if
trailer -> ( )
2314
^
trailer -> . NAME
2314
%
trailer -> . NAME
2314
**
trailer -> . NAME
2314
>>
trailer -> . NAME
2314
>
trailer -> . NAME
2314
in
trailer -> . NAME
2314
[
trailer -> . NAME
2314
is
trailer -> . NAME
2314
<<
trailer -> . NAME
2314
or
trailer -> . NAME
2314
and
trailer -> . NAME
2314
as
trailer -> . NAME
2314
>=
trailer -> . NAME
2314
|
trailer -> . NAME
2314
==
trailer -> . NAME
2314
.
trailer -> . NAME
2314
+
trailer -> . NAME
2314
<
trailer -> . NAME
2314
-
trailer -> . NAME
2314
&
trailer -> . NAME
2314
*
trailer -> . NAME
2314
if
trailer -> . NAME
2314
<=
trailer -> . NAME
2314
:
trailer -> . NAME
2314
(
trailer -> . NAME
2314
not
trailer -> . NAME
2314
//
trailer -> . NAME
2314
@
trailer -> . NAME
2314
!=
trailer -> . NAME
2314
/
trailer -> . NAME
2315
|
term -> factor % term
2315
<<
term -> factor % term
2315
^
term -> factor % term
2315
==
term -> factor % term
2315
-
term -> factor % term
2315
:
term -> factor % term
2315
as
term -> factor % term
2315
is
term -> factor % term
2315
>=
term -> factor % term
2315
>>
term -> factor % term
2315
>
term -> factor % term
2315
in
term -> factor % term
2315
&
term -> factor % term
2315
if
term -> factor % term
2315
<
term -> factor % term
2315
!=
term -> factor % term
2315
<=
term -> factor % term
2315
not
term -> factor % term
2315
+
term -> factor % term
2315
and
term -> factor % term
2315
or
term -> factor % term
2316
if
term -> factor // term
2316
<
term -> factor // term
2316
and
term -> factor // term
2316
as
term -> factor // term
2316
in
term -> factor // term
2316
>>
term -> factor // term
2316
<=
term -> factor // term
2316
!=
term -> factor // term
2316
^
term -> factor // term
2316
|
term -> factor // term
2316
or
term -> factor // term
2316
>=
term -> factor // term
2316
&
term -> factor // term
2316
>
term -> factor // term
2316
+
term -> factor // term
2316
is
term -> factor // term
2316
not
term -> factor // term
2316
<<
term -> factor // term
2316
:
term -> factor // term
2316
-
term -> factor // term
2316
==
term -> factor // term
2317
>>
term -> factor / term
2317
^
term -> factor / term
2317
or
term -> factor / term
2317
:
term -> factor / term
2317
+
term -> factor / term
2317
if
term -> factor / term
2317
>=
term -> factor / term
2317
>
term -> factor / term
2317
-
term -> factor / term
2317
and
term -> factor / term
2317
not
term -> factor / term
2317
<
term -> factor / term
2317
in
term -> factor / term
2317
==
term -> factor / term
2317
<=
term -> factor / term
2317
is
term -> factor / term
2317
&
term -> factor / term
2317
<<
term -> factor / term
2317
as
term -> factor / term
2317
!=
term -> factor / term
2317
|
term -> factor / term
2318
-
term -> factor * term
2318
&
term -> factor * term
2318
and
term -> factor * term
2318
!=
term -> factor * term
2318
|
term -> factor * term
2318
<<
term -> factor * term
2318
<
term -> factor * term
2318
if
term -> factor * term
2318
^
term -> factor * term
2318
+
term -> factor * term
2318
in
term -> factor * term
2318
or
term -> factor * term
2318
>>
term -> factor * term
2318
not
term -> factor * term
2318
as
term -> factor * term
2318
:
term -> factor * term
2318
==
term -> factor * term
2318
>=
term -> factor * term
2318
<=
term -> factor * term
2318
>
term -> factor * term
2318
is
term -> factor * term
2319
>>
term -> factor @ term
2319
^
term -> factor @ term
2319
&
term -> factor @ term
2319
|
term -> factor @ term
2319
if
term -> factor @ term
2319
is
term -> factor @ term
2319
<
term -> factor @ term
2319
<<
term -> factor @ term
2319
as
term -> factor @ term
2319
and
term -> factor @ term
2319
==
term -> factor @ term
2319
>
term -> factor @ term
2319
in
term -> factor @ term
2319
>=
term -> factor @ term
2319
:
term -> factor @ term
2319
+
term -> factor @ term
2319
not
term -> factor @ term
2319
!=
term -> factor @ term
2319
<=
term -> factor @ term
2319
or
term -> factor @ term
2319
-
term -> factor @ term
2320
True
1
2320
if
1708
2320
decorated
1709
2320
atom
4
2320
atom_expr
5
2320
while_stmt
1710
2320
try
1711
2320
shift_expr
7
2320
arith_expr
8
2320
and_expr
9
2320
conf
1712
2320
factor
11
2320
NAME
12
2320
(
13
2320
for
1713
2320
[
15
2320
resetstats
16
2320
compound_stmt
1714
2320
while
1715
2320
raise
19
2320
class
1716
2320
small_stmt
1717
2320
or_test
23
2320
for_stmt
1718
2320
try_stmt
1719
2320
def
1720
2320
False
27
2320
comparison
28
2320
term
29
2320
simple_stmt
1721
2320
+
31
2320
power
32
2320
not_test
33
2320
None
34
2320
with
1722
2320
classdef
1723
2320
lambdef
37
2320
if_stmt
1724
2320
NUMBER
39
2320
xor_expr
40
2320
{
41
2320
not
42
2320
-
43
2320
stmt_list
2483
2320
funcdef
1725
2320
decorators
1726
2320
STRING
46
2320
test
47
2320
and_test
48
2320
begsim
49
2320
expr
50
2320
with_stmt
1727
2320
lambda
53
2320
return
54
2320
~
55
2320
confdef
1728
2320
return_stmt
56
2320
endsim
57
2320
@
58
2320
raise_stmt
59
2320
global_stmt
61
2320
continue_stmt
62
2320
assert
63
2320
break_stmt
64
2320
del
66
2320
global
67
2320
pass_stmt
68
2320
test_list
70
2320
flow_stmt
71
2320
yield_stmt
72
2320
stmt
1729
2320
pass
73
2320
continue
74
2320
del_stmt
75
2320
nonlocal
76
2320
decorator
77
2320
assert_stmt
78
2320
stat_stmt
79
2320
nonlocal_stmt
80
2320
expr_stmt
81
2320
break
82
2320
yield
83
2320
sim_stmt
84
2321
break
maybe_except_clause -> except_clause
2321
+
maybe_except_clause -> except_clause
2321
finally
maybe_except_clause -> except_clause
2321
-
maybe_except_clause -> except_clause
2321
assert
maybe_except_clause -> except_clause
2321
del
maybe_except_clause -> except_clause
2321
nonlocal
maybe_except_clause -> except_clause
2321
conf
maybe_except_clause -> except_clause
2321
STRING
maybe_except_clause -> except_clause
2321
~
maybe_except_clause -> except_clause
2321
continue
maybe_except_clause -> except_clause
2321
$
maybe_except_clause -> except_clause
2321
{
maybe_except_clause -> except_clause
2321
lambda
maybe_except_clause -> except_clause
2321
True
maybe_except_clause -> except_clause
2321
not
maybe_except_clause -> except_clause
2321
for
maybe_except_clause -> except_clause
2321
NEWLINE
maybe_except_clause -> except_clause
2321
None
maybe_except_clause -> except_clause
2321
raise
maybe_except_clause -> except_clause
2321
begsim
maybe_except_clause -> except_clause
2321
resetstats
maybe_except_clause -> except_clause
2321
while
maybe_except_clause -> except_clause
2321
def
maybe_except_clause -> except_clause
2321
global
maybe_except_clause -> except_clause
2321
else
maybe_except_clause -> except_clause
2321
False
maybe_except_clause -> except_clause
2321
(
maybe_except_clause -> except_clause
2321
return
maybe_except_clause -> except_clause
2321
NUMBER
maybe_except_clause -> except_clause
2321
pass
maybe_except_clause -> except_clause
2321
yield
maybe_except_clause -> except_clause
2321
with
maybe_except_clause -> except_clause
2321
if
maybe_except_clause -> except_clause
2321
[
maybe_except_clause -> except_clause
2321
class
maybe_except_clause -> except_clause
2321
endsim
maybe_except_clause -> except_clause
2321
@
maybe_except_clause -> except_clause
2321
try
maybe_except_clause -> except_clause
2321
NAME
maybe_except_clause -> except_clause
2322
continue
except_clause -> except : suite maybe_except_clause
2322
break
except_clause -> except : suite maybe_except_clause
2322
resetstats
except_clause -> except : suite maybe_except_clause
2322
NEWLINE
except_clause -> except : suite maybe_except_clause
2322
None
except_clause -> except : suite maybe_except_clause
2322
True
except_clause -> except : suite maybe_except_clause
2322
NUMBER
except_clause -> except : suite maybe_except_clause
2322
pass
except_clause -> except : suite maybe_except_clause
2322
~
except_clause -> except : suite maybe_except_clause
2322
raise
except_clause -> except : suite maybe_except_clause
2322
global
except_clause -> except : suite maybe_except_clause
2322
yield
except_clause -> except : suite maybe_except_clause
2322
$
except_clause -> except : suite maybe_except_clause
2322
NAME
except_clause -> except : suite maybe_except_clause
2322
try
except_clause -> except : suite maybe_except_clause
2322
if
except_clause -> except : suite maybe_except_clause
2322
else
except_clause -> except : suite maybe_except_clause
2322
class
except_clause -> except : suite maybe_except_clause
2322
def
except_clause -> except : suite maybe_except_clause
2322
for
except_clause -> except : suite maybe_except_clause
2322
+
except_clause -> except : suite maybe_except_clause
2322
assert
except_clause -> except : suite maybe_except_clause
2322
(
except_clause -> except : suite maybe_except_clause
2322
-
except_clause -> except : suite maybe_except_clause
2322
nonlocal
except_clause -> except : suite maybe_except_clause
2322
finally
except_clause -> except : suite maybe_except_clause
2322
while
except_clause -> except : suite maybe_except_clause
2322
@
except_clause -> except : suite maybe_except_clause
2322
return
except_clause -> except : suite maybe_except_clause
2322
conf
except_clause -> except : suite maybe_except_clause
2322
not
except_clause -> except : suite maybe_except_clause
2322
del
except_clause -> except : suite maybe_except_clause
2322
False
except_clause -> except : suite maybe_except_clause
2322
begsim
except_clause -> except : suite maybe_except_clause
2322
lambda
except_clause -> except : suite maybe_except_clause
2322
endsim
except_clause -> except : suite maybe_except_clause
2322
STRING
except_clause -> except : suite maybe_except_clause
2322
with
except_clause -> except : suite maybe_except_clause
2322
{
except_clause -> except : suite maybe_except_clause
2322
[
except_clause -> except : suite maybe_except_clause
2323
STRING
simple_stmt -> small_stmt NEWLINE
2323
while
simple_stmt -> small_stmt NEWLINE
2323
~
simple_stmt -> small_stmt NEWLINE
2323
del
simple_stmt -> small_stmt NEWLINE
2323
global
simple_stmt -> small_stmt NEWLINE
2323
NUMBER
simple_stmt -> small_stmt NEWLINE
2323
True
simple_stmt -> small_stmt NEWLINE
2323
NAME
simple_stmt -> small_stmt NEWLINE
2323
with
simple_stmt -> small_stmt NEWLINE
2323
NEWLINE
simple_stmt -> small_stmt NEWLINE
2323
(
simple_stmt -> small_stmt NEWLINE
2323
-
simple_stmt -> small_stmt NEWLINE
2323
+
simple_stmt -> small_stmt NEWLINE
2323
continue
simple_stmt -> small_stmt NEWLINE
2323
endsim
simple_stmt -> small_stmt NEWLINE
2323
try
simple_stmt -> small_stmt NEWLINE
2323
$
simple_stmt -> small_stmt NEWLINE
2323
[
simple_stmt -> small_stmt NEWLINE
2323
raise
simple_stmt -> small_stmt NEWLINE
2323
if
simple_stmt -> small_stmt NEWLINE
2323
{
simple_stmt -> small_stmt NEWLINE
2323
except
simple_stmt -> small_stmt NEWLINE
2323
begsim
simple_stmt -> small_stmt NEWLINE
2323
return
simple_stmt -> small_stmt NEWLINE
2323
finally
simple_stmt -> small_stmt NEWLINE
2323
assert
simple_stmt -> small_stmt NEWLINE
2323
nonlocal
simple_stmt -> small_stmt NEWLINE
2323
not
simple_stmt -> small_stmt NEWLINE
2323
conf
simple_stmt -> small_stmt NEWLINE
2323
yield
simple_stmt -> small_stmt NEWLINE
2323
resetstats
simple_stmt -> small_stmt NEWLINE
2323
None
simple_stmt -> small_stmt NEWLINE
2323
else
simple_stmt -> small_stmt NEWLINE
2323
for
simple_stmt -> small_stmt NEWLINE
2323
class
simple_stmt -> small_stmt NEWLINE
2323
@
simple_stmt -> small_stmt NEWLINE
2323
pass
simple_stmt -> small_stmt NEWLINE
2323
lambda
simple_stmt -> small_stmt NEWLINE
2323
False
simple_stmt -> small_stmt NEWLINE
2323
break
simple_stmt -> small_stmt NEWLINE
2323
def
simple_stmt -> small_stmt NEWLINE
2324
<
shift_expr -> arith_expr >> shift_expr
2324
^
shift_expr -> arith_expr >> shift_expr
2324
in
shift_expr -> arith_expr >> shift_expr
2324
==
shift_expr -> arith_expr >> shift_expr
2324
!=
shift_expr -> arith_expr >> shift_expr
2324
>=
shift_expr -> arith_expr >> shift_expr
2324
not
shift_expr -> arith_expr >> shift_expr
2324
and
shift_expr -> arith_expr >> shift_expr
2324
is
shift_expr -> arith_expr >> shift_expr
2324
&
shift_expr -> arith_expr >> shift_expr
2324
>
shift_expr -> arith_expr >> shift_expr
2324
|
shift_expr -> arith_expr >> shift_expr
2324
:
shift_expr -> arith_expr >> shift_expr
2324
<=
shift_expr -> arith_expr >> shift_expr
2324
as
shift_expr -> arith_expr >> shift_expr
2324
or
shift_expr -> arith_expr >> shift_expr
2324
if
shift_expr -> arith_expr >> shift_expr
2325
if
shift_expr -> arith_expr << shift_expr
2325
&
shift_expr -> arith_expr << shift_expr
2325
>=
shift_expr -> arith_expr << shift_expr
2325
<=
shift_expr -> arith_expr << shift_expr
2325
or
shift_expr -> arith_expr << shift_expr
2325
in
shift_expr -> arith_expr << shift_expr
2325
:
shift_expr -> arith_expr << shift_expr
2325
!=
shift_expr -> arith_expr << shift_expr
2325
^
shift_expr -> arith_expr << shift_expr
2325
<
shift_expr -> arith_expr << shift_expr
2325
|
shift_expr -> arith_expr << shift_expr
2325
==
shift_expr -> arith_expr << shift_expr
2325
is
shift_expr -> arith_expr << shift_expr
2325
as
shift_expr -> arith_expr << shift_expr
2325
and
shift_expr -> arith_expr << shift_expr
2325
>
shift_expr -> arith_expr << shift_expr
2325
not
shift_expr -> arith_expr << shift_expr
2326
@
atom -> ( test_list_comp )
2326
<
atom -> ( test_list_comp )
2326
and
atom -> ( test_list_comp )
2326
if
atom -> ( test_list_comp )
2326
as
atom -> ( test_list_comp )
2326
&
atom -> ( test_list_comp )
2326
*
atom -> ( test_list_comp )
2326
%
atom -> ( test_list_comp )
2326
[
atom -> ( test_list_comp )
2326
//
atom -> ( test_list_comp )
2326
<<
atom -> ( test_list_comp )
2326
.
atom -> ( test_list_comp )
2326
/
atom -> ( test_list_comp )
2326
>=
atom -> ( test_list_comp )
2326
or
atom -> ( test_list_comp )
2326
>
atom -> ( test_list_comp )
2326
-
atom -> ( test_list_comp )
2326
|
atom -> ( test_list_comp )
2326
**
atom -> ( test_list_comp )
2326
is
atom -> ( test_list_comp )
2326
:
atom -> ( test_list_comp )
2326
==
atom -> ( test_list_comp )
2326
not
atom -> ( test_list_comp )
2326
in
atom -> ( test_list_comp )
2326
!=
atom -> ( test_list_comp )
2326
^
atom -> ( test_list_comp )
2326
(
atom -> ( test_list_comp )
2326
<=
atom -> ( test_list_comp )
2326
+
atom -> ( test_list_comp )
2326
>>
atom -> ( test_list_comp )
2327
>=
xor_expr -> and_expr ^ xor_expr
2327
>
xor_expr -> and_expr ^ xor_expr
2327
or
xor_expr -> and_expr ^ xor_expr
2327
and
xor_expr -> and_expr ^ xor_expr
2327
<=
xor_expr -> and_expr ^ xor_expr
2327
in
xor_expr -> and_expr ^ xor_expr
2327
==
xor_expr -> and_expr ^ xor_expr
2327
if
xor_expr -> and_expr ^ xor_expr
2327
!=
xor_expr -> and_expr ^ xor_expr
2327
as
xor_expr -> and_expr ^ xor_expr
2327
not
xor_expr -> and_expr ^ xor_expr
2327
<
xor_expr -> and_expr ^ xor_expr
2327
is
xor_expr -> and_expr ^ xor_expr
2327
:
xor_expr -> and_expr ^ xor_expr
2327
|
xor_expr -> and_expr ^ xor_expr
2328
:
or_test -> and_test or or_test
2328
as
or_test -> and_test or or_test
2328
if
or_test -> and_test or or_test
2329
<<
atom -> [ test_list_comp ]
2329
:
atom -> [ test_list_comp ]
2329
>>
atom -> [ test_list_comp ]
2329
+
atom -> [ test_list_comp ]
2329
-
atom -> [ test_list_comp ]
2329
not
atom -> [ test_list_comp ]
2329
<=
atom -> [ test_list_comp ]
2329
is
atom -> [ test_list_comp ]
2329
[
atom -> [ test_list_comp ]
2329
*
atom -> [ test_list_comp ]
2329
==
atom -> [ test_list_comp ]
2329
@
atom -> [ test_list_comp ]
2329
>
atom -> [ test_list_comp ]
2329
%
atom -> [ test_list_comp ]
2329
if
atom -> [ test_list_comp ]
2329
>=
atom -> [ test_list_comp ]
2329
//
atom -> [ test_list_comp ]
2329
.
atom -> [ test_list_comp ]
2329
in
atom -> [ test_list_comp ]
2329
**
atom -> [ test_list_comp ]
2329
and
atom -> [ test_list_comp ]
2329
/
atom -> [ test_list_comp ]
2329
or
atom -> [ test_list_comp ]
2329
!=
atom -> [ test_list_comp ]
2329
<
atom -> [ test_list_comp ]
2329
^
atom -> [ test_list_comp ]
2329
&
atom -> [ test_list_comp ]
2329
as
atom -> [ test_list_comp ]
2329
(
atom -> [ test_list_comp ]
2329
|
atom -> [ test_list_comp ]
2330
is
expr -> xor_expr | expr
2330
or
expr -> xor_expr | expr
2330
>
expr -> xor_expr | expr
2330
and
expr -> xor_expr | expr
2330
in
expr -> xor_expr | expr
2330
if
expr -> xor_expr | expr
2330
as
expr -> xor_expr | expr
2330
<=
expr -> xor_expr | expr
2330
not
expr -> xor_expr | expr
2330
==
expr -> xor_expr | expr
2330
>=
expr -> xor_expr | expr
2330
<
expr -> xor_expr | expr
2330
:
expr -> xor_expr | expr
2330
!=
expr -> xor_expr | expr
2331
>=
and_expr -> shift_expr & and_expr
2331
!=
and_expr -> shift_expr & and_expr
2331
or
and_expr -> shift_expr & and_expr
2331
is
and_expr -> shift_expr & and_expr
2331
^
and_expr -> shift_expr & and_expr
2331
if
and_expr -> shift_expr & and_expr
2331
==
and_expr -> shift_expr & and_expr
2331
not
and_expr -> shift_expr & and_expr
2331
<
and_expr -> shift_expr & and_expr
2331
>
and_expr -> shift_expr & and_expr
2331
in
and_expr -> shift_expr & and_expr
2331
and
and_expr -> shift_expr & and_expr
2331
as
and_expr -> shift_expr & and_expr
2331
|
and_expr -> shift_expr & and_expr
2331
:
and_expr -> shift_expr & and_expr
2331
<=
and_expr -> shift_expr & and_expr
2332
or
and_test -> not_test and and_test
2332
:
and_test -> not_test and and_test
2332
as
and_test -> not_test and and_test
2332
if
and_test -> not_test and and_test
2333
:
comparison -> expr comp_op comparison
2333
as
comparison -> expr comp_op comparison
2333
and
comparison -> expr comp_op comparison
2333
if
comparison -> expr comp_op comparison
2333
or
comparison -> expr comp_op comparison
2334
NAME
1677
2334
atom_expr
1678
2334
term
1680
2334
atom
1681
2334
-
1682
2334
factor
1683
2334
arith_expr
1685
2334
True
1686
2334
False
1687
2334
{
1688
2334
(
1689
2334
+
1690
2334
and_expr
1691
2334
and_test
1692
2334
[
1693
2334
STRING
1694
2334
xor_expr
1695
2334
comparison
1696
2334
shift_expr
1697
2334
not_test
1698
2334
power
1699
2334
None
1700
2334
expr
1701
2334
NUMBER
1702
2334
~
1703
2334
lambda
1704
2334
test
2484
2334
or_test
1705
2334
not
1706
2334
lambdef
1707
2335
as
lambdef -> lambda : test
2335
:
lambdef -> lambda : test
2336
else
2485
2337
NAME
12
2337
True
1
2337
atom_expr
5
2337
term
29
2337
atom
4
2337
simple_stmt
2486
2337
factor
11
2337
shift_expr
7
2337
arith_expr
8
2337
False
27
2337
and_expr
9
2337
xor_expr
40
2337
{
41
2337
(
13
2337
[
15
2337
resetstats
16
2337
STRING
46
2337
raise
19
2337
small_stmt
2487
2337
test
47
2337
comparison
28
2337
suite
2488
2337
or_test
23
2337
~
55
2337
-
43
2337
lambda
53
2337
+
31
2337
not_test
33
2337
and_test
48
2337
power
32
2337
pass
73
2337
None
34
2337
lambdef
37
2337
not
42
2337
NUMBER
39
2337
expr
50
2337
continue
74
2337
NEWLINE
2489
2337
begsim
49
2337
del_stmt
75
2337
return
54
2337
nonlocal
76
2337
return_stmt
56
2337
endsim
57
2337
test_list
70
2337
raise_stmt
59
2337
assert_stmt
78
2337
stat_stmt
79
2337
global_stmt
61
2337
continue_stmt
62
2337
assert
63
2337
break_stmt
64
2337
nonlocal_stmt
80
2337
expr_stmt
81
2337
break
82
2337
del
66
2337
global
67
2337
yield
83
2337
pass_stmt
68
2337
flow_stmt
71
2337
yield_stmt
72
2337
sim_stmt
84
2338
except_clause
2490
2338
except
2491
2339
NEWLINE
2492
2340
NAME
1098
2340
atom_expr
1099
2340
term
1100
2340
atom
1101
2340
-
1102
2340
factor
1103
2340
test_list
2493
2340
[
1105
2340
True
1106
2340
arith_expr
1107
2340
False
1108
2340
{
1109
2340
(
1110
2340
+
1111
2340
and_expr
1112
2340
and_test
1113
2340
STRING
1114
2340
comparison
1115
2340
shift_expr
1116
2340
not_test
1117
2340
power
1118
2340
None
1119
2340
xor_expr
1120
2340
expr
1121
2340
NUMBER
1122
2340
~
1123
2340
test
1124
2340
lambdef
1125
2340
not
1126
2340
or_test
1127
2340
lambda
1128
2341
NAME
12
2341
True
1
2341
atom_expr
5
2341
term
29
2341
atom
4
2341
simple_stmt
2494
2341
factor
11
2341
shift_expr
7
2341
arith_expr
8
2341
False
27
2341
and_expr
9
2341
xor_expr
40
2341
{
41
2341
(
13
2341
[
15
2341
resetstats
16
2341
STRING
46
2341
raise
19
2341
small_stmt
2495
2341
test
47
2341
comparison
28
2341
suite
2496
2341
or_test
23
2341
~
55
2341
-
43
2341
lambda
53
2341
+
31
2341
not_test
33
2341
and_test
48
2341
power
32
2341
pass
73
2341
None
34
2341
lambdef
37
2341
not
42
2341
NUMBER
39
2341
expr
50
2341
continue
74
2341
NEWLINE
2497
2341
begsim
49
2341
del_stmt
75
2341
return
54
2341
nonlocal
76
2341
return_stmt
56
2341
endsim
57
2341
test_list
70
2341
raise_stmt
59
2341
assert_stmt
78
2341
stat_stmt
79
2341
global_stmt
61
2341
continue_stmt
62
2341
assert
63
2341
break_stmt
64
2341
nonlocal_stmt
80
2341
expr_stmt
81
2341
break
82
2341
del
66
2341
global
67
2341
yield
83
2341
pass_stmt
68
2341
flow_stmt
71
2341
yield_stmt
72
2341
sim_stmt
84
2342
NAME
496
2342
atom_expr
497
2342
atom
498
2342
-
499
2342
factor
501
2342
*
502
2342
[
503
2342
True
504
2342
arith_expr
505
2342
arglist
2498
2342
xor_expr
506
2342
False
507
2342
**
508
2342
{
509
2342
+
510
2342
and_expr
512
2342
(
513
2342
STRING
514
2342
power
515
2342
term
516
2342
comparison
517
2342
)
2499
2342
shift_expr
518
2342
argument
519
2342
not_test
520
2342
or_test
521
2342
lambdef
522
2342
lambda
523
2342
None
524
2342
test
525
2342
expr
526
2342
NUMBER
527
2342
and_test
528
2342
~
529
2342
not
530
2343
NAME
12
2343
True
1
2343
atom_expr
5
2343
term
29
2343
atom
4
2343
simple_stmt
2500
2343
factor
11
2343
shift_expr
7
2343
arith_expr
8
2343
False
27
2343
and_expr
9
2343
xor_expr
40
2343
{
41
2343
(
13
2343
[
15
2343
resetstats
16
2343
STRING
46
2343
raise
19
2343
suite
2501
2343
small_stmt
1717
2343
test
47
2343
comparison
28
2343
or_test
23
2343
~
55
2343
-
43
2343
lambda
53
2343
+
31
2343
not_test
33
2343
and_test
48
2343
power
32
2343
pass
73
2343
None
34
2343
lambdef
37
2343
not
42
2343
NUMBER
39
2343
expr
50
2343
continue
74
2343
NEWLINE
2502
2343
begsim
49
2343
del_stmt
75
2343
return
54
2343
nonlocal
76
2343
return_stmt
56
2343
endsim
57
2343
test_list
70
2343
raise_stmt
59
2343
assert_stmt
78
2343
stat_stmt
79
2343
global_stmt
61
2343
continue_stmt
62
2343
assert
63
2343
break_stmt
64
2343
nonlocal_stmt
80
2343
expr_stmt
81
2343
break
82
2343
del
66
2343
global
67
2343
yield
83
2343
pass_stmt
68
2343
flow_stmt
71
2343
yield_stmt
72
2343
sim_stmt
84
2344
)
2503
2344
parameters
2504
2344
NAME
1274
2344
tfpdef
1275
2344
**
1276
2344
param
1277
2344
*
1278
2345
NAME
12
2345
suite
2505
2345
True
1
2345
atom_expr
5
2345
term
29
2345
atom
4
2345
simple_stmt
2500
2345
factor
11
2345
shift_expr
7
2345
arith_expr
8
2345
False
27
2345
and_expr
9
2345
xor_expr
40
2345
{
41
2345
(
13
2345
[
15
2345
resetstats
16
2345
STRING
46
2345
raise
19
2345
small_stmt
1717
2345
test
47
2345
comparison
28
2345
or_test
23
2345
~
55
2345
-
43
2345
lambda
53
2345
+
31
2345
not_test
33
2345
and_test
48
2345
power
32
2345
pass
73
2345
None
34
2345
lambdef
37
2345
not
42
2345
NUMBER
39
2345
expr
50
2345
continue
74
2345
NEWLINE
2502
2345
begsim
49
2345
del_stmt
75
2345
return
54
2345
nonlocal
76
2345
return_stmt
56
2345
endsim
57
2345
test_list
70
2345
raise_stmt
59
2345
assert_stmt
78
2345
stat_stmt
79
2345
global_stmt
61
2345
continue_stmt
62
2345
assert
63
2345
break_stmt
64
2345
nonlocal_stmt
80
2345
expr_stmt
81
2345
break
82
2345
del
66
2345
global
67
2345
yield
83
2345
pass_stmt
68
2345
flow_stmt
71
2345
yield_stmt
72
2345
sim_stmt
84
2346
if
funcdef -> def NAME ( parameters ) : suite
2346
assert
funcdef -> def NAME ( parameters ) : suite
2346
try
funcdef -> def NAME ( parameters ) : suite
2346
(
funcdef -> def NAME ( parameters ) : suite
2346
resetstats
funcdef -> def NAME ( parameters ) : suite
2346
+
funcdef -> def NAME ( parameters ) : suite
2346
raise
funcdef -> def NAME ( parameters ) : suite
2346
for
funcdef -> def NAME ( parameters ) : suite
2346
{
funcdef -> def NAME ( parameters ) : suite
2346
yield
funcdef -> def NAME ( parameters ) : suite
2346
return
funcdef -> def NAME ( parameters ) : suite
2346
endsim
funcdef -> def NAME ( parameters ) : suite
2346
conf
funcdef -> def NAME ( parameters ) : suite
2346
with
funcdef -> def NAME ( parameters ) : suite
2346
[
funcdef -> def NAME ( parameters ) : suite
2346
continue
funcdef -> def NAME ( parameters ) : suite
2346
break
funcdef -> def NAME ( parameters ) : suite
2346
NAME
funcdef -> def NAME ( parameters ) : suite
2346
global
funcdef -> def NAME ( parameters ) : suite
2346
False
funcdef -> def NAME ( parameters ) : suite
2346
~
funcdef -> def NAME ( parameters ) : suite
2346
nonlocal
funcdef -> def NAME ( parameters ) : suite
2346
$
funcdef -> def NAME ( parameters ) : suite
2346
NUMBER
funcdef -> def NAME ( parameters ) : suite
2346
lambda
funcdef -> def NAME ( parameters ) : suite
2346
STRING
funcdef -> def NAME ( parameters ) : suite
2346
True
funcdef -> def NAME ( parameters ) : suite
2346
while
funcdef -> def NAME ( parameters ) : suite
2346
not
funcdef -> def NAME ( parameters ) : suite
2346
pass
funcdef -> def NAME ( parameters ) : suite
2346
class
funcdef -> def NAME ( parameters ) : suite
2346
@
funcdef -> def NAME ( parameters ) : suite
2346
None
funcdef -> def NAME ( parameters ) : suite
2346
begsim
funcdef -> def NAME ( parameters ) : suite
2346
def
funcdef -> def NAME ( parameters ) : suite
2346
NEWLINE
funcdef -> def NAME ( parameters ) : suite
2346
-
funcdef -> def NAME ( parameters ) : suite
2346
del
funcdef -> def NAME ( parameters ) : suite
2347
NAME
2107
2347
atom_expr
2108
2347
atom
2109
2347
-
2110
2347
[
2112
2347
True
2113
2347
False
2116
2347
{
2117
2347
+
2118
2347
(
2120
2347
STRING
2121
2347
power
2122
2347
factor
2506
2347
None
2130
2347
NUMBER
2133
2347
~
2135
2348
trailer
2348
2348
trailer_expr
2507
2348
[
2350
2348
or
trailer_expr -> 
2348
.
2351
2348
(
2352
2348
not
trailer_expr -> 
2348
in
trailer_expr -> 
2348
is
trailer_expr -> 
2348
>=
trailer_expr -> 
2348
-
trailer_expr -> 
2348
@
trailer_expr -> 
2348
<=
trailer_expr -> 
2348
)
trailer_expr -> 
2348
,
trailer_expr -> 
2348
^
trailer_expr -> 
2348
*
trailer_expr -> 
2348
if
trailer_expr -> 
2348
**
trailer_expr -> 
2348
=
trailer_expr -> 
2348
>
trailer_expr -> 
2348
==
trailer_expr -> 
2348
>>
trailer_expr -> 
2348
<<
trailer_expr -> 
2348
/
trailer_expr -> 
2348
//
trailer_expr -> 
2348
!=
trailer_expr -> 
2348
<
trailer_expr -> 
2348
&
trailer_expr -> 
2348
|
trailer_expr -> 
2348
and
trailer_expr -> 
2348
+
trailer_expr -> 
2348
%
trailer_expr -> 
2349
|
atom_expr -> atom trailer_expr
2349
)
atom_expr -> atom trailer_expr
2349
*
atom_expr -> atom trailer_expr
2349
-
atom_expr -> atom trailer_expr
2349
not
atom_expr -> atom trailer_expr
2349
in
atom_expr -> atom trailer_expr
2349
and
atom_expr -> atom trailer_expr
2349
^
atom_expr -> atom trailer_expr
2349
or
atom_expr -> atom trailer_expr
2349
<=
atom_expr -> atom trailer_expr
2349
<
atom_expr -> atom trailer_expr
2349
>>
atom_expr -> atom trailer_expr
2349
//
atom_expr -> atom trailer_expr
2349
!=
atom_expr -> atom trailer_expr
2349
<<
atom_expr -> atom trailer_expr
2349
+
atom_expr -> atom trailer_expr
2349
>
atom_expr -> atom trailer_expr
2349
/
atom_expr -> atom trailer_expr
2349
==
atom_expr -> atom trailer_expr
2349
%
atom_expr -> atom trailer_expr
2349
&
atom_expr -> atom trailer_expr
2349
@
atom_expr -> atom trailer_expr
2349
if
atom_expr -> atom trailer_expr
2349
=
atom_expr -> atom trailer_expr
2349
>=
atom_expr -> atom trailer_expr
2349
is
atom_expr -> atom trailer_expr
2349
,
atom_expr -> atom trailer_expr
2349
**
atom_expr -> atom trailer_expr
2350
NAME
461
2350
atom_expr
462
2350
term
463
2350
atom
464
2350
-
465
2350
factor
466
2350
[
467
2350
True
468
2350
arith_expr
469
2350
False
470
2350
{
471
2350
(
472
2350
+
473
2350
and_expr
474
2350
and_test
475
2350
STRING
476
2350
subscriptlist
2508
2350
comparison
478
2350
shift_expr
479
2350
not_test
480
2350
power
481
2350
None
482
2350
xor_expr
483
2350
expr
484
2350
NUMBER
485
2350
test
486
2350
~
487
2350
or_test
488
2350
not
489
2350
lambdef
490
2350
:
maybe_test -> 
2350
lambda
491
2350
subscript
492
2350
maybe_test
493
2351
NAME
2509
2352
NAME
496
2352
atom_expr
497
2352
atom
498
2352
-
499
2352
arglist
2510
2352
factor
501
2352
*
502
2352
[
503
2352
True
504
2352
arith_expr
505
2352
xor_expr
506
2352
False
507
2352
**
508
2352
{
509
2352
+
510
2352
)
2511
2352
and_expr
512
2352
(
513
2352
STRING
514
2352
power
515
2352
term
516
2352
comparison
517
2352
shift_expr
518
2352
argument
519
2352
not_test
520
2352
or_test
521
2352
lambdef
522
2352
lambda
523
2352
None
524
2352
test
525
2352
expr
526
2352
NUMBER
527
2352
and_test
528
2352
~
529
2352
not
530
2353
>>
factor -> - factor
2353
if
factor -> - factor
2353
>
factor -> - factor
2353
,
factor -> - factor
2353
@
factor -> - factor
2353
is
factor -> - factor
2353
//
factor -> - factor
2353
)
factor -> - factor
2353
not
factor -> - factor
2353
or
factor -> - factor
2353
-
factor -> - factor
2353
<<
factor -> - factor
2353
>=
factor -> - factor
2353
/
factor -> - factor
2353
<=
factor -> - factor
2353
<
factor -> - factor
2353
in
factor -> - factor
2353
|
factor -> - factor
2353
*
factor -> - factor
2353
!=
factor -> - factor
2353
&
factor -> - factor
2353
and
factor -> - factor
2353
^
factor -> - factor
2353
+
factor -> - factor
2353
%
factor -> - factor
2353
==
factor -> - factor
2353
=
factor -> - factor
2354
NAME
2107
2354
atom_expr
2108
2354
atom
2109
2354
-
2110
2354
factor
2111
2354
[
2112
2354
True
2113
2354
False
2116
2354
{
2117
2354
+
2118
2354
(
2120
2354
STRING
2121
2354
power
2122
2354
term
2512
2354
None
2130
2354
NUMBER
2133
2354
~
2135
2355
NAME
2107
2355
atom_expr
2108
2355
atom
2109
2355
-
2110
2355
factor
2111
2355
[
2112
2355
True
2113
2355
False
2116
2355
term
2513
2355
{
2117
2355
+
2118
2355
(
2120
2355
STRING
2121
2355
power
2122
2355
None
2130
2355
NUMBER
2133
2355
~
2135
2356
NAME
2107
2356
atom_expr
2108
2356
atom
2109
2356
-
2110
2356
factor
2111
2356
[
2112
2356
True
2113
2356
False
2116
2356
{
2117
2356
+
2118
2356
(
2120
2356
STRING
2121
2356
power
2122
2356
term
2514
2356
None
2130
2356
NUMBER
2133
2356
~
2135
2357
NAME
2107
2357
atom_expr
2108
2357
atom
2109
2357
-
2110
2357
factor
2111
2357
[
2112
2357
True
2113
2357
False
2116
2357
{
2117
2357
+
2118
2357
(
2120
2357
STRING
2121
2357
term
2515
2357
power
2122
2357
None
2130
2357
NUMBER
2133
2357
~
2135
2358
NAME
2107
2358
atom_expr
2108
2358
atom
2109
2358
-
2110
2358
factor
2111
2358
[
2112
2358
True
2113
2358
False
2116
2358
{
2117
2358
+
2118
2358
(
2120
2358
STRING
2121
2358
power
2122
2358
term
2516
2358
None
2130
2358
NUMBER
2133
2358
~
2135
2359
]
2517
2360
and
atom -> [ ]
2360
<<
atom -> [ ]
2360
//
atom -> [ ]
2360
*
atom -> [ ]
2360
+
atom -> [ ]
2360
=
atom -> [ ]
2360
^
atom -> [ ]
2360
==
atom -> [ ]
2360
>>
atom -> [ ]
2360
/
atom -> [ ]
2360
in
atom -> [ ]
2360
>
atom -> [ ]
2360
<=
atom -> [ ]
2360
.
atom -> [ ]
2360
)
atom -> [ ]
2360
%
atom -> [ ]
2360
&
atom -> [ ]
2360
-
atom -> [ ]
2360
>=
atom -> [ ]
2360
not
atom -> [ ]
2360
|
atom -> [ ]
2360
@
atom -> [ ]
2360
is
atom -> [ ]
2360
or
atom -> [ ]
2360
!=
atom -> [ ]
2360
if
atom -> [ ]
2360
,
atom -> [ ]
2360
**
atom -> [ ]
2360
<
atom -> [ ]
2360
(
atom -> [ ]
2360
[
atom -> [ ]
2361
NAME
2107
2361
atom_expr
2108
2361
atom
2109
2361
-
2110
2361
factor
2111
2361
[
2112
2361
True
2113
2361
arith_expr
2114
2361
False
2116
2361
{
2117
2361
+
2118
2361
(
2120
2361
STRING
2121
2361
power
2122
2361
shift_expr
2518
2361
term
2123
2361
None
2130
2361
NUMBER
2133
2361
~
2135
2362
NAME
2107
2362
atom_expr
2108
2362
atom
2109
2362
-
2110
2362
factor
2111
2362
[
2112
2362
True
2113
2362
arith_expr
2114
2362
False
2116
2362
{
2117
2362
shift_expr
2519
2362
+
2118
2362
(
2120
2362
STRING
2121
2362
power
2122
2362
term
2123
2362
None
2130
2362
NUMBER
2133
2362
~
2135
2363
NAME
2107
2363
atom_expr
2108
2363
atom
2109
2363
-
2110
2363
factor
2111
2363
[
2112
2363
True
2113
2363
arith_expr
2114
2363
xor_expr
2115
2363
False
2116
2363
{
2117
2363
+
2118
2363
and_expr
2119
2363
(
2120
2363
STRING
2121
2363
power
2122
2363
term
2123
2363
shift_expr
2125
2363
None
2130
2363
NUMBER
2133
2363
expr
2520
2363
~
2135
2364
%
atom -> { }
2364
[
atom -> { }
2364
not
atom -> { }
2364
^
atom -> { }
2364
or
atom -> { }
2364
-
atom -> { }
2364
=
atom -> { }
2364
>=
atom -> { }
2364
<<
atom -> { }
2364
/
atom -> { }
2364
<=
atom -> { }
2364
|
atom -> { }
2364
)
atom -> { }
2364
>>
atom -> { }
2364
@
atom -> { }
2364
is
atom -> { }
2364
if
atom -> { }
2364
and
atom -> { }
2364
==
atom -> { }
2364
in
atom -> { }
2364
**
atom -> { }
2364
&
atom -> { }
2364
>
atom -> { }
2364
//
atom -> { }
2364
(
atom -> { }
2364
+
atom -> { }
2364
<
atom -> { }
2364
,
atom -> { }
2364
!=
atom -> { }
2364
.
atom -> { }
2364
*
atom -> { }
2365
>>
factor -> + factor
2365
>=
factor -> + factor
2365
or
factor -> + factor
2365
==
factor -> + factor
2365
-
factor -> + factor
2365
*
factor -> + factor
2365
<
factor -> + factor
2365
^
factor -> + factor
2365
,
factor -> + factor
2365
&
factor -> + factor
2365
)
factor -> + factor
2365
@
factor -> + factor
2365
|
factor -> + factor
2365
<<
factor -> + factor
2365
%
factor -> + factor
2365
not
factor -> + factor
2365
//
factor -> + factor
2365
and
factor -> + factor
2365
in
factor -> + factor
2365
!=
factor -> + factor
2365
=
factor -> + factor
2365
>
factor -> + factor
2365
/
factor -> + factor
2365
is
factor -> + factor
2365
+
factor -> + factor
2365
if
factor -> + factor
2365
<=
factor -> + factor
2366
NAME
2107
2366
atom_expr
2108
2366
atom
2109
2366
-
2110
2366
factor
2111
2366
[
2112
2366
True
2113
2366
arith_expr
2114
2366
False
2116
2366
{
2117
2366
+
2118
2366
and_expr
2119
2366
(
2120
2366
STRING
2121
2366
power
2122
2366
xor_expr
2521
2366
term
2123
2366
shift_expr
2125
2366
None
2130
2366
NUMBER
2133
2366
~
2135
2367
|
atom -> ( )
2367
**
atom -> ( )
2367
>>
atom -> ( )
2367
-
atom -> ( )
2367
%
atom -> ( )
2367
(
atom -> ( )
2367
not
atom -> ( )
2367
+
atom -> ( )
2367
>=
atom -> ( )
2367
&
atom -> ( )
2367
*
atom -> ( )
2367
!=
atom -> ( )
2367
<=
atom -> ( )
2367
and
atom -> ( )
2367
<
atom -> ( )
2367
^
atom -> ( )
2367
==
atom -> ( )
2367
if
atom -> ( )
2367
in
atom -> ( )
2367
/
atom -> ( )
2367
>
atom -> ( )
2367
//
atom -> ( )
2367
.
atom -> ( )
2367
or
atom -> ( )
2367
@
atom -> ( )
2367
is
atom -> ( )
2367
=
atom -> ( )
2367
)
atom -> ( )
2367
<<
atom -> ( )
2367
,
atom -> ( )
2367
[
atom -> ( )
2368
)
2522
2369
NAME
2107
2369
atom_expr
2108
2369
atom
2109
2369
-
2110
2369
factor
2111
2369
[
2112
2369
True
2113
2369
False
2116
2369
{
2117
2369
+
2118
2369
(
2120
2369
STRING
2121
2369
power
2122
2369
arith_expr
2523
2369
term
2123
2369
None
2130
2369
NUMBER
2133
2369
~
2135
2370
NAME
2107
2370
atom_expr
2108
2370
atom
2109
2370
-
2110
2370
factor
2111
2370
[
2112
2370
True
2113
2370
False
2116
2370
{
2117
2370
+
2118
2370
(
2120
2370
STRING
2121
2370
power
2122
2370
term
2123
2370
arith_expr
2524
2370
None
2130
2370
NUMBER
2133
2370
~
2135
2371
NAME
2107
2371
atom_expr
2108
2371
atom
2109
2371
-
2110
2371
factor
2111
2371
[
2112
2371
True
2113
2371
arith_expr
2114
2371
False
2116
2371
{
2117
2371
+
2118
2371
(
2120
2371
STRING
2121
2371
power
2122
2371
term
2123
2371
shift_expr
2125
2371
None
2130
2371
and_expr
2525
2371
NUMBER
2133
2371
~
2135
2372
NAME
2107
2372
atom_expr
2108
2372
atom
2109
2372
-
2110
2372
factor
2111
2372
[
2112
2372
True
2113
2372
arith_expr
2114
2372
xor_expr
2115
2372
False
2116
2372
{
2117
2372
+
2118
2372
and_expr
2119
2372
(
2120
2372
STRING
2121
2372
power
2122
2372
term
2123
2372
comparison
2124
2372
shift_expr
2125
2372
not_test
2126
2372
None
2130
2372
expr
2132
2372
NUMBER
2133
2372
~
2135
2372
and_test
2526
2372
not
2136
2373
atom_expr
685
2373
atom
686
2373
-
687
2373
factor
688
2373
and_test
689
2373
True
690
2373
arith_expr
691
2373
False
692
2373
NAME
693
2373
{
694
2373
+
695
2373
and_expr
696
2373
[
697
2373
(
698
2373
STRING
699
2373
term
700
2373
comparison
701
2373
shift_expr
702
2373
not_test
703
2373
power
704
2373
xor_expr
706
2373
None
707
2373
NUMBER
708
2373
expr
709
2373
or_test
2527
2373
~
710
2373
not
711
2374
NAME
2107
2374
atom_expr
2108
2374
atom
2109
2374
-
2110
2374
factor
2111
2374
[
2112
2374
True
2113
2374
arith_expr
2114
2374
xor_expr
2115
2374
False
2116
2374
{
2117
2374
+
2118
2374
and_expr
2119
2374
(
2120
2374
STRING
2121
2374
power
2122
2374
term
2123
2374
comparison
2124
2374
shift_expr
2125
2374
test
2528
2374
not_test
2126
2374
or_test
2127
2374
lambdef
2128
2374
lambda
2129
2374
None
2130
2374
expr
2132
2374
NUMBER
2133
2374
and_test
2134
2374
~
2135
2374
not
2136
2375
:
2529
2376
NAME
2107
2376
atom_expr
2108
2376
atom
2109
2376
-
2110
2376
factor
2111
2376
[
2112
2376
True
2113
2376
arith_expr
2114
2376
xor_expr
2115
2376
False
2116
2376
{
2117
2376
+
2118
2376
and_expr
2119
2376
(
2120
2376
STRING
2121
2376
power
2122
2376
term
2123
2376
shift_expr
2125
2376
None
2130
2376
comparison
2530
2376
expr
2132
2376
NUMBER
2133
2376
~
2135
2377
NAME
2107
2377
atom_expr
2108
2377
atom
2109
2377
-
2110
2377
factor
2111
2377
[
2112
2377
True
2113
2377
arith_expr
2114
2377
xor_expr
2115
2377
False
2116
2377
{
2117
2377
+
2118
2377
and_expr
2119
2377
(
2120
2377
STRING
2121
2377
power
2122
2377
term
2123
2377
comparison
2124
2377
shift_expr
2125
2377
not_test
2126
2377
None
2130
2377
expr
2132
2377
NUMBER
2133
2377
and_test
2134
2377
~
2135
2377
or_test
2531
2377
not
2136
2378
is
factor -> ~ factor
2378
>=
factor -> ~ factor
2378
<<
factor -> ~ factor
2378
<=
factor -> ~ factor
2378
if
factor -> ~ factor
2378
==
factor -> ~ factor
2378
//
factor -> ~ factor
2378
or
factor -> ~ factor
2378
+
factor -> ~ factor
2378
)
factor -> ~ factor
2378
and
factor -> ~ factor
2378
!=
factor -> ~ factor
2378
&
factor -> ~ factor
2378
|
factor -> ~ factor
2378
>>
factor -> ~ factor
2378
in
factor -> ~ factor
2378
=
factor -> ~ factor
2378
>
factor -> ~ factor
2378
/
factor -> ~ factor
2378
not
factor -> ~ factor
2378
@
factor -> ~ factor
2378
-
factor -> ~ factor
2378
^
factor -> ~ factor
2378
,
factor -> ~ factor
2378
*
factor -> ~ factor
2378
<
factor -> ~ factor
2378
%
factor -> ~ factor
2379
)
not_test -> not not_test
2379
,
not_test -> not not_test
2379
or
not_test -> not not_test
2379
=
not_test -> not not_test
2379
if
not_test -> not not_test
2379
and
not_test -> not not_test
2380
,
tfpdef -> NAME : test
2380
)
tfpdef -> NAME : test
2381
*
trailer -> ( arglist )
2381
:
trailer -> ( arglist )
2381
.
trailer -> ( arglist )
2381
//
trailer -> ( arglist )
2381
>>
trailer -> ( arglist )
2381
**
trailer -> ( arglist )
2381
+
trailer -> ( arglist )
2381
/
trailer -> ( arglist )
2381
,
trailer -> ( arglist )
2381
(
trailer -> ( arglist )
2381
-
trailer -> ( arglist )
2381
%
trailer -> ( arglist )
2381
&
trailer -> ( arglist )
2381
@
trailer -> ( arglist )
2381
|
trailer -> ( arglist )
2381
[
trailer -> ( arglist )
2381
^
trailer -> ( arglist )
2381
<<
trailer -> ( arglist )
2382
(
trailer -> [ subscriptlist ]
2382
.
trailer -> [ subscriptlist ]
2382
:
trailer -> [ subscriptlist ]
2382
<<
trailer -> [ subscriptlist ]
2382
*
trailer -> [ subscriptlist ]
2382
//
trailer -> [ subscriptlist ]
2382
&
trailer -> [ subscriptlist ]
2382
/
trailer -> [ subscriptlist ]
2382
,
trailer -> [ subscriptlist ]
2382
@
trailer -> [ subscriptlist ]
2382
**
trailer -> [ subscriptlist ]
2382
>>
trailer -> [ subscriptlist ]
2382
-
trailer -> [ subscriptlist ]
2382
%
trailer -> [ subscriptlist ]
2382
+
trailer -> [ subscriptlist ]
2382
|
trailer -> [ subscriptlist ]
2382
^
trailer -> [ subscriptlist ]
2382
[
trailer -> [ subscriptlist ]
2383
NEWLINE
test -> or_test if or_test else test
2383
,
test -> or_test if or_test else test
2383
=
test -> or_test if or_test else test
2384
>>
power -> atom_expr ** factor
2384
<=
power -> atom_expr ** factor
2384
//
power -> atom_expr ** factor
2384
/
power -> atom_expr ** factor
2384
&
power -> atom_expr ** factor
2384
if
power -> atom_expr ** factor
2384
not
power -> atom_expr ** factor
2384
<
power -> atom_expr ** factor
2384
!=
power -> atom_expr ** factor
2384
>
power -> atom_expr ** factor
2384
*
power -> atom_expr ** factor
2384
|
power -> atom_expr ** factor
2384
==
power -> atom_expr ** factor
2384
NEWLINE
power -> atom_expr ** factor
2384
is
power -> atom_expr ** factor
2384
and
power -> atom_expr ** factor
2384
<<
power -> atom_expr ** factor
2384
-
power -> atom_expr ** factor
2384
=
power -> atom_expr ** factor
2384
@
power -> atom_expr ** factor
2384
in
power -> atom_expr ** factor
2384
^
power -> atom_expr ** factor
2384
%
power -> atom_expr ** factor
2384
>=
power -> atom_expr ** factor
2384
+
power -> atom_expr ** factor
2384
or
power -> atom_expr ** factor
2385
and
arith_expr -> term + arith_expr
2385
<
arith_expr -> term + arith_expr
2385
|
arith_expr -> term + arith_expr
2385
>=
arith_expr -> term + arith_expr
2385
>>
arith_expr -> term + arith_expr
2385
if
arith_expr -> term + arith_expr
2385
>
arith_expr -> term + arith_expr
2385
in
arith_expr -> term + arith_expr
2385
or
arith_expr -> term + arith_expr
2385
<=
arith_expr -> term + arith_expr
2385
not
arith_expr -> term + arith_expr
2385
^
arith_expr -> term + arith_expr
2385
!=
arith_expr -> term + arith_expr
2385
&
arith_expr -> term + arith_expr
2385
==
arith_expr -> term + arith_expr
2385
=
arith_expr -> term + arith_expr
2385
NEWLINE
arith_expr -> term + arith_expr
2385
<<
arith_expr -> term + arith_expr
2385
is
arith_expr -> term + arith_expr
2386
NEWLINE
arith_expr -> term - arith_expr
2386
<<
arith_expr -> term - arith_expr
2386
if
arith_expr -> term - arith_expr
2386
<
arith_expr -> term - arith_expr
2386
=
arith_expr -> term - arith_expr
2386
<=
arith_expr -> term - arith_expr
2386
and
arith_expr -> term - arith_expr
2386
in
arith_expr -> term - arith_expr
2386
&
arith_expr -> term - arith_expr
2386
|
arith_expr -> term - arith_expr
2386
==
arith_expr -> term - arith_expr
2386
is
arith_expr -> term - arith_expr
2386
>>
arith_expr -> term - arith_expr
2386
!=
arith_expr -> term - arith_expr
2386
>
arith_expr -> term - arith_expr
2386
or
arith_expr -> term - arith_expr
2386
>=
arith_expr -> term - arith_expr
2386
^
arith_expr -> term - arith_expr
2386
not
arith_expr -> term - arith_expr
2387
*
trailer_expr -> trailer trailer_expr
2387
+
trailer_expr -> trailer trailer_expr
2387
if
trailer_expr -> trailer trailer_expr
2387
-
trailer_expr -> trailer trailer_expr
2387
<=
trailer_expr -> trailer trailer_expr
2387
|
trailer_expr -> trailer trailer_expr
2387
@
trailer_expr -> trailer trailer_expr
2387
%
trailer_expr -> trailer trailer_expr
2387
in
trailer_expr -> trailer trailer_expr
2387
<<
trailer_expr -> trailer trailer_expr
2387
**
trailer_expr -> trailer trailer_expr
2387
==
trailer_expr -> trailer trailer_expr
2387
not
trailer_expr -> trailer trailer_expr
2387
and
trailer_expr -> trailer trailer_expr
2387
//
trailer_expr -> trailer trailer_expr
2387
NEWLINE
trailer_expr -> trailer trailer_expr
2387
^
trailer_expr -> trailer trailer_expr
2387
or
trailer_expr -> trailer trailer_expr
2387
=
trailer_expr -> trailer trailer_expr
2387
>
trailer_expr -> trailer trailer_expr
2387
!=
trailer_expr -> trailer trailer_expr
2387
is
trailer_expr -> trailer trailer_expr
2387
&
trailer_expr -> trailer trailer_expr
2387
>>
trailer_expr -> trailer trailer_expr
2387
/
trailer_expr -> trailer trailer_expr
2387
<
trailer_expr -> trailer trailer_expr
2387
>=
trailer_expr -> trailer trailer_expr
2388
]
2532
2389
^
trailer -> . NAME
2389
%
trailer -> . NAME
2389
**
trailer -> . NAME
2389
>>
trailer -> . NAME
2389
>
trailer -> . NAME
2389
in
trailer -> . NAME
2389
[
trailer -> . NAME
2389
is
trailer -> . NAME
2389
<<
trailer -> . NAME
2389
or
trailer -> . NAME
2389
and
trailer -> . NAME
2389
>=
trailer -> . NAME
2389
|
trailer -> . NAME
2389
==
trailer -> . NAME
2389
=
trailer -> . NAME
2389
.
trailer -> . NAME
2389
+
trailer -> . NAME
2389
<
trailer -> . NAME
2389
-
trailer -> . NAME
2389
&
trailer -> . NAME
2389
NEWLINE
trailer -> . NAME
2389
*
trailer -> . NAME
2389
if
trailer -> . NAME
2389
<=
trailer -> . NAME
2389
(
trailer -> . NAME
2389
not
trailer -> . NAME
2389
//
trailer -> . NAME
2389
@
trailer -> . NAME
2389
!=
trailer -> . NAME
2389
/
trailer -> . NAME
2390
)
2533
2391
[
trailer -> ( )
2391
not
trailer -> ( )
2391
==
trailer -> ( )
2391
**
trailer -> ( )
2391
<=
trailer -> ( )
2391
//
trailer -> ( )
2391
<<
trailer -> ( )
2391
<
trailer -> ( )
2391
=
trailer -> ( )
2391
in
trailer -> ( )
2391
or
trailer -> ( )
2391
-
trailer -> ( )
2391
+
trailer -> ( )
2391
&
trailer -> ( )
2391
*
trailer -> ( )
2391
is
trailer -> ( )
2391
>
trailer -> ( )
2391
!=
trailer -> ( )
2391
>>
trailer -> ( )
2391
%
trailer -> ( )
2391
|
trailer -> ( )
2391
.
trailer -> ( )
2391
>=
trailer -> ( )
2391
(
trailer -> ( )
2391
and
trailer -> ( )
2391
@
trailer -> ( )
2391
NEWLINE
trailer -> ( )
2391
/
trailer -> ( )
2391
^
trailer -> ( )
2391
if
trailer -> ( )
2392
NEWLINE
term -> factor % term
2392
|
term -> factor % term
2392
<<
term -> factor % term
2392
^
term -> factor % term
2392
==
term -> factor % term
2392
-
term -> factor % term
2392
=
term -> factor % term
2392
is
term -> factor % term
2392
>=
term -> factor % term
2392
>>
term -> factor % term
2392
>
term -> factor % term
2392
in
term -> factor % term
2392
&
term -> factor % term
2392
if
term -> factor % term
2392
<
term -> factor % term
2392
!=
term -> factor % term
2392
<=
term -> factor % term
2392
not
term -> factor % term
2392
+
term -> factor % term
2392
and
term -> factor % term
2392
or
term -> factor % term
2393
>>
term -> factor / term
2393
^
term -> factor / term
2393
NEWLINE
term -> factor / term
2393
or
term -> factor / term
2393
+
term -> factor / term
2393
=
term -> factor / term
2393
if
term -> factor / term
2393
>=
term -> factor / term
2393
>
term -> factor / term
2393
-
term -> factor / term
2393
and
term -> factor / term
2393
not
term -> factor / term
2393
<
term -> factor / term
2393
in
term -> factor / term
2393
==
term -> factor / term
2393
<=
term -> factor / term
2393
is
term -> factor / term
2393
&
term -> factor / term
2393
<<
term -> factor / term
2393
!=
term -> factor / term
2393
|
term -> factor / term
2394
NEWLINE
term -> factor * term
2394
-
term -> factor * term
2394
&
term -> factor * term
2394
and
term -> factor * term
2394
!=
term -> factor * term
2394
|
term -> factor * term
2394
<<
term -> factor * term
2394
<
term -> factor * term
2394
=
term -> factor * term
2394
if
term -> factor * term
2394
^
term -> factor * term
2394
+
term -> factor * term
2394
in
term -> factor * term
2394
or
term -> factor * term
2394
>>
term -> factor * term
2394
not
term -> factor * term
2394
==
term -> factor * term
2394
>=
term -> factor * term
2394
<=
term -> factor * term
2394
>
term -> factor * term
2394
is
term -> factor * term
2395
if
term -> factor // term
2395
<
term -> factor // term
2395
and
term -> factor // term
2395
in
term -> factor // term
2395
>>
term -> factor // term
2395
<=
term -> factor // term
2395
!=
term -> factor // term
2395
^
term -> factor // term
2395
=
term -> factor // term
2395
|
term -> factor // term
2395
or
term -> factor // term
2395
NEWLINE
term -> factor // term
2395
>=
term -> factor // term
2395
&
term -> factor // term
2395
>
term -> factor // term
2395
+
term -> factor // term
2395
is
term -> factor // term
2395
not
term -> factor // term
2395
<<
term -> factor // term
2395
-
term -> factor // term
2395
==
term -> factor // term
2396
>>
term -> factor @ term
2396
^
term -> factor @ term
2396
&
term -> factor @ term
2396
|
term -> factor @ term
2396
=
term -> factor @ term
2396
if
term -> factor @ term
2396
is
term -> factor @ term
2396
<
term -> factor @ term
2396
<<
term -> factor @ term
2396
NEWLINE
term -> factor @ term
2396
and
term -> factor @ term
2396
==
term -> factor @ term
2396
>
term -> factor @ term
2396
in
term -> factor @ term
2396
>=
term -> factor @ term
2396
+
term -> factor @ term
2396
not
term -> factor @ term
2396
!=
term -> factor @ term
2396
<=
term -> factor @ term
2396
or
term -> factor @ term
2396
-
term -> factor @ term
2397
NEWLINE
shift_expr -> arith_expr >> shift_expr
2397
<
shift_expr -> arith_expr >> shift_expr
2397
^
shift_expr -> arith_expr >> shift_expr
2397
=
shift_expr -> arith_expr >> shift_expr
2397
in
shift_expr -> arith_expr >> shift_expr
2397
==
shift_expr -> arith_expr >> shift_expr
2397
!=
shift_expr -> arith_expr >> shift_expr
2397
>=
shift_expr -> arith_expr >> shift_expr
2397
not
shift_expr -> arith_expr >> shift_expr
2397
and
shift_expr -> arith_expr >> shift_expr
2397
is
shift_expr -> arith_expr >> shift_expr
2397
&
shift_expr -> arith_expr >> shift_expr
2397
>
shift_expr -> arith_expr >> shift_expr
2397
|
shift_expr -> arith_expr >> shift_expr
2397
<=
shift_expr -> arith_expr >> shift_expr
2397
or
shift_expr -> arith_expr >> shift_expr
2397
if
shift_expr -> arith_expr >> shift_expr
2398
if
shift_expr -> arith_expr << shift_expr
2398
&
shift_expr -> arith_expr << shift_expr
2398
>=
shift_expr -> arith_expr << shift_expr
2398
<=
shift_expr -> arith_expr << shift_expr
2398
or
shift_expr -> arith_expr << shift_expr
2398
in
shift_expr -> arith_expr << shift_expr
2398
!=
shift_expr -> arith_expr << shift_expr
2398
^
shift_expr -> arith_expr << shift_expr
2398
<
shift_expr -> arith_expr << shift_expr
2398
|
shift_expr -> arith_expr << shift_expr
2398
==
shift_expr -> arith_expr << shift_expr
2398
=
shift_expr -> arith_expr << shift_expr
2398
is
shift_expr -> arith_expr << shift_expr
2398
and
shift_expr -> arith_expr << shift_expr
2398
NEWLINE
shift_expr -> arith_expr << shift_expr
2398
>
shift_expr -> arith_expr << shift_expr
2398
not
shift_expr -> arith_expr << shift_expr
2399
NEWLINE
expr -> xor_expr | expr
2399
is
expr -> xor_expr | expr
2399
or
expr -> xor_expr | expr
2399
>
expr -> xor_expr | expr
2399
and
expr -> xor_expr | expr
2399
in
expr -> xor_expr | expr
2399
=
expr -> xor_expr | expr
2399
if
expr -> xor_expr | expr
2399
<=
expr -> xor_expr | expr
2399
not
expr -> xor_expr | expr
2399
==
expr -> xor_expr | expr
2399
>=
expr -> xor_expr | expr
2399
<
expr -> xor_expr | expr
2399
!=
expr -> xor_expr | expr
2400
>=
xor_expr -> and_expr ^ xor_expr
2400
>
xor_expr -> and_expr ^ xor_expr
2400
or
xor_expr -> and_expr ^ xor_expr
2400
and
xor_expr -> and_expr ^ xor_expr
2400
<=
xor_expr -> and_expr ^ xor_expr
2400
in
xor_expr -> and_expr ^ xor_expr
2400
==
xor_expr -> and_expr ^ xor_expr
2400
=
xor_expr -> and_expr ^ xor_expr
2400
if
xor_expr -> and_expr ^ xor_expr
2400
!=
xor_expr -> and_expr ^ xor_expr
2400
not
xor_expr -> and_expr ^ xor_expr
2400
<
xor_expr -> and_expr ^ xor_expr
2400
is
xor_expr -> and_expr ^ xor_expr
2400
NEWLINE
xor_expr -> and_expr ^ xor_expr
2400
|
xor_expr -> and_expr ^ xor_expr
2401
<<
atom -> [ test_list_comp ]
2401
>>
atom -> [ test_list_comp ]
2401
+
atom -> [ test_list_comp ]
2401
-
atom -> [ test_list_comp ]
2401
not
atom -> [ test_list_comp ]
2401
<=
atom -> [ test_list_comp ]
2401
is
atom -> [ test_list_comp ]
2401
[
atom -> [ test_list_comp ]
2401
*
atom -> [ test_list_comp ]
2401
==
atom -> [ test_list_comp ]
2401
@
atom -> [ test_list_comp ]
2401
NEWLINE
atom -> [ test_list_comp ]
2401
>
atom -> [ test_list_comp ]
2401
=
atom -> [ test_list_comp ]
2401
%
atom -> [ test_list_comp ]
2401
if
atom -> [ test_list_comp ]
2401
>=
atom -> [ test_list_comp ]
2401
//
atom -> [ test_list_comp ]
2401
.
atom -> [ test_list_comp ]
2401
in
atom -> [ test_list_comp ]
2401
**
atom -> [ test_list_comp ]
2401
and
atom -> [ test_list_comp ]
2401
/
atom -> [ test_list_comp ]
2401
or
atom -> [ test_list_comp ]
2401
!=
atom -> [ test_list_comp ]
2401
<
atom -> [ test_list_comp ]
2401
^
atom -> [ test_list_comp ]
2401
&
atom -> [ test_list_comp ]
2401
(
atom -> [ test_list_comp ]
2401
|
atom -> [ test_list_comp ]
2402
@
atom -> ( test_list_comp )
2402
<
atom -> ( test_list_comp )
2402
and
atom -> ( test_list_comp )
2402
if
atom -> ( test_list_comp )
2402
&
atom -> ( test_list_comp )
2402
=
atom -> ( test_list_comp )
2402
*
atom -> ( test_list_comp )
2402
%
atom -> ( test_list_comp )
2402
[
atom -> ( test_list_comp )
2402
//
atom -> ( test_list_comp )
2402
<<
atom -> ( test_list_comp )
2402
.
atom -> ( test_list_comp )
2402
/
atom -> ( test_list_comp )
2402
>=
atom -> ( test_list_comp )
2402
or
atom -> ( test_list_comp )
2402
>
atom -> ( test_list_comp )
2402
-
atom -> ( test_list_comp )
2402
|
atom -> ( test_list_comp )
2402
**
atom -> ( test_list_comp )
2402
is
atom -> ( test_list_comp )
2402
==
atom -> ( test_list_comp )
2402
not
atom -> ( test_list_comp )
2402
in
atom -> ( test_list_comp )
2402
!=
atom -> ( test_list_comp )
2402
^
atom -> ( test_list_comp )
2402
(
atom -> ( test_list_comp )
2402
NEWLINE
atom -> ( test_list_comp )
2402
<=
atom -> ( test_list_comp )
2402
+
atom -> ( test_list_comp )
2402
>>
atom -> ( test_list_comp )
2403
>=
and_expr -> shift_expr & and_expr
2403
!=
and_expr -> shift_expr & and_expr
2403
or
and_expr -> shift_expr & and_expr
2403
is
and_expr -> shift_expr & and_expr
2403
=
and_expr -> shift_expr & and_expr
2403
^
and_expr -> shift_expr & and_expr
2403
==
and_expr -> shift_expr & and_expr
2403
if
and_expr -> shift_expr & and_expr
2403
not
and_expr -> shift_expr & and_expr
2403
<
and_expr -> shift_expr & and_expr
2403
>
and_expr -> shift_expr & and_expr
2403
in
and_expr -> shift_expr & and_expr
2403
and
and_expr -> shift_expr & and_expr
2403
|
and_expr -> shift_expr & and_expr
2403
NEWLINE
and_expr -> shift_expr & and_expr
2403
<=
and_expr -> shift_expr & and_expr
2404
NEWLINE
and_test -> not_test and and_test
2404
or
and_test -> not_test and and_test
2404
=
and_test -> not_test and and_test
2404
if
and_test -> not_test and and_test
2405
=
comparison -> expr comp_op comparison
2405
NEWLINE
comparison -> expr comp_op comparison
2405
and
comparison -> expr comp_op comparison
2405
if
comparison -> expr comp_op comparison
2405
or
comparison -> expr comp_op comparison
2406
=
or_test -> and_test or or_test
2406
if
or_test -> and_test or or_test
2406
NEWLINE
or_test -> and_test or or_test
2407
else
2534
2408
=
lambdef -> lambda : test
2408
NEWLINE
lambdef -> lambda : test
2409
NAME
1830
2409
atom_expr
1831
2409
term
1832
2409
atom
1833
2409
-
1834
2409
factor
1835
2409
True
1836
2409
arith_expr
1837
2409
xor_expr
1838
2409
False
1839
2409
{
1840
2409
+
1841
2409
and_expr
1842
2409
[
1843
2409
(
1844
2409
STRING
1845
2409
comparison
1846
2409
shift_expr
1847
2409
not_test
1848
2409
power
1849
2409
lambdef
1850
2409
None
1851
2409
expr
1852
2409
NUMBER
1853
2409
and_test
1854
2409
or_test
1855
2409
~
1856
2409
test
2535
2409
lambda
1858
2409
not
1859
2410
=
test -> or_test if or_test else test
2411
not
if_stmt -> if test : suite elif_clause else : suite
2411
(
if_stmt -> if test : suite elif_clause else : suite
2411
raise
if_stmt -> if test : suite elif_clause else : suite
2411
nonlocal
if_stmt -> if test : suite elif_clause else : suite
2411
NAME
if_stmt -> if test : suite elif_clause else : suite
2411
NEWLINE
if_stmt -> if test : suite elif_clause else : suite
2411
lambda
if_stmt -> if test : suite elif_clause else : suite
2411
@
if_stmt -> if test : suite elif_clause else : suite
2411
[
if_stmt -> if test : suite elif_clause else : suite
2411
NUMBER
if_stmt -> if test : suite elif_clause else : suite
2411
resetstats
if_stmt -> if test : suite elif_clause else : suite
2411
break
if_stmt -> if test : suite elif_clause else : suite
2411
endsim
if_stmt -> if test : suite elif_clause else : suite
2411
return
if_stmt -> if test : suite elif_clause else : suite
2411
$
if_stmt -> if test : suite elif_clause else : suite
2411
+
if_stmt -> if test : suite elif_clause else : suite
2411
None
if_stmt -> if test : suite elif_clause else : suite
2411
del
if_stmt -> if test : suite elif_clause else : suite
2411
conf
if_stmt -> if test : suite elif_clause else : suite
2411
{
if_stmt -> if test : suite elif_clause else : suite
2411
False
if_stmt -> if test : suite elif_clause else : suite
2411
def
if_stmt -> if test : suite elif_clause else : suite
2411
with
if_stmt -> if test : suite elif_clause else : suite
2411
while
if_stmt -> if test : suite elif_clause else : suite
2411
True
if_stmt -> if test : suite elif_clause else : suite
2411
try
if_stmt -> if test : suite elif_clause else : suite
2411
if
if_stmt -> if test : suite elif_clause else : suite
2411
continue
if_stmt -> if test : suite elif_clause else : suite
2411
global
if_stmt -> if test : suite elif_clause else : suite
2411
-
if_stmt -> if test : suite elif_clause else : suite
2411
class
if_stmt -> if test : suite elif_clause else : suite
2411
STRING
if_stmt -> if test : suite elif_clause else : suite
2411
~
if_stmt -> if test : suite elif_clause else : suite
2411
assert
if_stmt -> if test : suite elif_clause else : suite
2411
begsim
if_stmt -> if test : suite elif_clause else : suite
2411
pass
if_stmt -> if test : suite elif_clause else : suite
2411
yield
if_stmt -> if test : suite elif_clause else : suite
2411
for
if_stmt -> if test : suite elif_clause else : suite
2412
+
elif_clause -> 
2412
elif_clause
2536
2412
False
elif_clause -> 
2412
elif
1489
2412
with
elif_clause -> 
2412
class
elif_clause -> 
2412
pass
elif_clause -> 
2412
NEWLINE
elif_clause -> 
2412
~
elif_clause -> 
2412
[
elif_clause -> 
2412
conf
elif_clause -> 
2412
not
elif_clause -> 
2412
while
elif_clause -> 
2412
else
elif_clause -> 
2412
@
elif_clause -> 
2412
True
elif_clause -> 
2412
if
elif_clause -> 
2412
lambda
elif_clause -> 
2412
STRING
elif_clause -> 
2412
resetstats
elif_clause -> 
2412
assert
elif_clause -> 
2412
for
elif_clause -> 
2412
(
elif_clause -> 
2412
return
elif_clause -> 
2412
nonlocal
elif_clause -> 
2412
endsim
elif_clause -> 
2412
None
elif_clause -> 
2412
global
elif_clause -> 
2412
break
elif_clause -> 
2412
NAME
elif_clause -> 
2412
$
elif_clause -> 
2412
continue
elif_clause -> 
2412
try
elif_clause -> 
2412
def
elif_clause -> 
2412
yield
elif_clause -> 
2412
begsim
elif_clause -> 
2412
NUMBER
elif_clause -> 
2412
del
elif_clause -> 
2412
-
elif_clause -> 
2412
{
elif_clause -> 
2412
raise
elif_clause -> 
2413
)
test -> or_test if or_test else test
2413
,
test -> or_test if or_test else test
2414
NAME
131
2414
atom_expr
132
2414
atom
133
2414
-
134
2414
factor
136
2414
[
137
2414
True
138
2414
lambda
2537
2414
arith_expr
139
2414
False
140
2414
{
141
2414
+
142
2414
and_expr
143
2414
(
144
2414
STRING
145
2414
power
147
2414
term
148
2414
comparison
149
2414
shift_expr
150
2414
not_test
152
2414
test_nocond
2538
2414
None
155
2414
lambdef_nocond
2539
2414
xor_expr
156
2414
expr
157
2414
NUMBER
158
2414
and_test
159
2414
or_test
2540
2414
~
160
2414
not
162
2415
,
comp_for -> for expr_list in or_test comp_iter
2415
)
comp_for -> for expr_list in or_test comp_iter
2416
,
comp_iter -> comp_if
2416
)
comp_iter -> comp_if
2417
,
comp_iter -> comp_for
2417
)
comp_iter -> comp_for
2418
DEDENT
confbody -> NAME test NEWLINE
2418
NAME
1932
2418
confbody
2541
2419
>>
power -> atom_expr ** factor
2419
<=
power -> atom_expr ** factor
2419
//
power -> atom_expr ** factor
2419
for
power -> atom_expr ** factor
2419
/
power -> atom_expr ** factor
2419
&
power -> atom_expr ** factor
2419
if
power -> atom_expr ** factor
2419
not
power -> atom_expr ** factor
2419
<
power -> atom_expr ** factor
2419
!=
power -> atom_expr ** factor
2419
>
power -> atom_expr ** factor
2419
*
power -> atom_expr ** factor
2419
|
power -> atom_expr ** factor
2419
==
power -> atom_expr ** factor
2419
is
power -> atom_expr ** factor
2419
and
power -> atom_expr ** factor
2419
<<
power -> atom_expr ** factor
2419
-
power -> atom_expr ** factor
2419
)
power -> atom_expr ** factor
2419
@
power -> atom_expr ** factor
2419
in
power -> atom_expr ** factor
2419
^
power -> atom_expr ** factor
2419
%
power -> atom_expr ** factor
2419
>=
power -> atom_expr ** factor
2419
+
power -> atom_expr ** factor
2419
or
power -> atom_expr ** factor
2420
*
trailer_expr -> trailer trailer_expr
2420
+
trailer_expr -> trailer trailer_expr
2420
if
trailer_expr -> trailer trailer_expr
2420
-
trailer_expr -> trailer trailer_expr
2420
<=
trailer_expr -> trailer trailer_expr
2420
|
trailer_expr -> trailer trailer_expr
2420
@
trailer_expr -> trailer trailer_expr
2420
%
trailer_expr -> trailer trailer_expr
2420
in
trailer_expr -> trailer trailer_expr
2420
<<
trailer_expr -> trailer trailer_expr
2420
**
trailer_expr -> trailer trailer_expr
2420
==
trailer_expr -> trailer trailer_expr
2420
not
trailer_expr -> trailer trailer_expr
2420
and
trailer_expr -> trailer trailer_expr
2420
//
trailer_expr -> trailer trailer_expr
2420
^
trailer_expr -> trailer trailer_expr
2420
for
trailer_expr -> trailer trailer_expr
2420
or
trailer_expr -> trailer trailer_expr
2420
>
trailer_expr -> trailer trailer_expr
2420
!=
trailer_expr -> trailer trailer_expr
2420
is
trailer_expr -> trailer trailer_expr
2420
&
trailer_expr -> trailer trailer_expr
2420
>>
trailer_expr -> trailer trailer_expr
2420
/
trailer_expr -> trailer trailer_expr
2420
)
trailer_expr -> trailer trailer_expr
2420
<
trailer_expr -> trailer trailer_expr
2420
>=
trailer_expr -> trailer trailer_expr
2421
]
2542
2422
^
trailer -> . NAME
2422
%
trailer -> . NAME
2422
**
trailer -> . NAME
2422
>>
trailer -> . NAME
2422
>
trailer -> . NAME
2422
in
trailer -> . NAME
2422
[
trailer -> . NAME
2422
is
trailer -> . NAME
2422
<<
trailer -> . NAME
2422
or
trailer -> . NAME
2422
and
trailer -> . NAME
2422
>=
trailer -> . NAME
2422
|
trailer -> . NAME
2422
==
trailer -> . NAME
2422
)
trailer -> . NAME
2422
.
trailer -> . NAME
2422
+
trailer -> . NAME
2422
<
trailer -> . NAME
2422
for
trailer -> . NAME
2422
-
trailer -> . NAME
2422
&
trailer -> . NAME
2422
*
trailer -> . NAME
2422
if
trailer -> . NAME
2422
<=
trailer -> . NAME
2422
(
trailer -> . NAME
2422
not
trailer -> . NAME
2422
//
trailer -> . NAME
2422
@
trailer -> . NAME
2422
!=
trailer -> . NAME
2422
/
trailer -> . NAME
2423
)
2543
2424
[
trailer -> ( )
2424
not
trailer -> ( )
2424
==
trailer -> ( )
2424
**
trailer -> ( )
2424
<=
trailer -> ( )
2424
//
trailer -> ( )
2424
<<
trailer -> ( )
2424
<
trailer -> ( )
2424
for
trailer -> ( )
2424
in
trailer -> ( )
2424
or
trailer -> ( )
2424
-
trailer -> ( )
2424
+
trailer -> ( )
2424
&
trailer -> ( )
2424
*
trailer -> ( )
2424
is
trailer -> ( )
2424
>
trailer -> ( )
2424
!=
trailer -> ( )
2424
>>
trailer -> ( )
2424
%
trailer -> ( )
2424
|
trailer -> ( )
2424
)
trailer -> ( )
2424
.
trailer -> ( )
2424
>=
trailer -> ( )
2424
(
trailer -> ( )
2424
and
trailer -> ( )
2424
@
trailer -> ( )
2424
/
trailer -> ( )
2424
^
trailer -> ( )
2424
if
trailer -> ( )
2425
|
term -> factor % term
2425
<<
term -> factor % term
2425
^
term -> factor % term
2425
==
term -> factor % term
2425
-
term -> factor % term
2425
is
term -> factor % term
2425
>=
term -> factor % term
2425
>>
term -> factor % term
2425
>
term -> factor % term
2425
in
term -> factor % term
2425
)
term -> factor % term
2425
&
term -> factor % term
2425
if
term -> factor % term
2425
<
term -> factor % term
2425
!=
term -> factor % term
2425
<=
term -> factor % term
2425
not
term -> factor % term
2425
+
term -> factor % term
2425
and
term -> factor % term
2425
or
term -> factor % term
2425
for
term -> factor % term
2426
>>
term -> factor / term
2426
^
term -> factor / term
2426
or
term -> factor / term
2426
for
term -> factor / term
2426
+
term -> factor / term
2426
if
term -> factor / term
2426
>=
term -> factor / term
2426
>
term -> factor / term
2426
-
term -> factor / term
2426
and
term -> factor / term
2426
)
term -> factor / term
2426
not
term -> factor / term
2426
<
term -> factor / term
2426
in
term -> factor / term
2426
==
term -> factor / term
2426
<=
term -> factor / term
2426
is
term -> factor / term
2426
&
term -> factor / term
2426
<<
term -> factor / term
2426
!=
term -> factor / term
2426
|
term -> factor / term
2427
-
term -> factor * term
2427
&
term -> factor * term
2427
and
term -> factor * term
2427
!=
term -> factor * term
2427
|
term -> factor * term
2427
<<
term -> factor * term
2427
for
term -> factor * term
2427
<
term -> factor * term
2427
if
term -> factor * term
2427
^
term -> factor * term
2427
+
term -> factor * term
2427
in
term -> factor * term
2427
or
term -> factor * term
2427
>>
term -> factor * term
2427
not
term -> factor * term
2427
)
term -> factor * term
2427
==
term -> factor * term
2427
>=
term -> factor * term
2427
<=
term -> factor * term
2427
>
term -> factor * term
2427
is
term -> factor * term
2428
if
term -> factor // term
2428
<
term -> factor // term
2428
and
term -> factor // term
2428
in
term -> factor // term
2428
>>
term -> factor // term
2428
)
term -> factor // term
2428
<=
term -> factor // term
2428
!=
term -> factor // term
2428
^
term -> factor // term
2428
for
term -> factor // term
2428
|
term -> factor // term
2428
or
term -> factor // term
2428
>=
term -> factor // term
2428
&
term -> factor // term
2428
>
term -> factor // term
2428
+
term -> factor // term
2428
is
term -> factor // term
2428
not
term -> factor // term
2428
<<
term -> factor // term
2428
-
term -> factor // term
2428
==
term -> factor // term
2429
>>
term -> factor @ term
2429
^
term -> factor @ term
2429
&
term -> factor @ term
2429
|
term -> factor @ term
2429
if
term -> factor @ term
2429
is
term -> factor @ term
2429
)
term -> factor @ term
2429
<
term -> factor @ term
2429
for
term -> factor @ term
2429
<<
term -> factor @ term
2429
and
term -> factor @ term
2429
==
term -> factor @ term
2429
>
term -> factor @ term
2429
in
term -> factor @ term
2429
>=
term -> factor @ term
2429
+
term -> factor @ term
2429
not
term -> factor @ term
2429
!=
term -> factor @ term
2429
<=
term -> factor @ term
2429
or
term -> factor @ term
2429
-
term -> factor @ term
2430
for
shift_expr -> arith_expr >> shift_expr
2430
)
shift_expr -> arith_expr >> shift_expr
2430
<
shift_expr -> arith_expr >> shift_expr
2430
^
shift_expr -> arith_expr >> shift_expr
2430
in
shift_expr -> arith_expr >> shift_expr
2430
==
shift_expr -> arith_expr >> shift_expr
2430
!=
shift_expr -> arith_expr >> shift_expr
2430
>=
shift_expr -> arith_expr >> shift_expr
2430
not
shift_expr -> arith_expr >> shift_expr
2430
and
shift_expr -> arith_expr >> shift_expr
2430
is
shift_expr -> arith_expr >> shift_expr
2430
>
shift_expr -> arith_expr >> shift_expr
2430
&
shift_expr -> arith_expr >> shift_expr
2430
|
shift_expr -> arith_expr >> shift_expr
2430
<=
shift_expr -> arith_expr >> shift_expr
2430
or
shift_expr -> arith_expr >> shift_expr
2430
if
shift_expr -> arith_expr >> shift_expr
2431
if
shift_expr -> arith_expr << shift_expr
2431
&
shift_expr -> arith_expr << shift_expr
2431
>=
shift_expr -> arith_expr << shift_expr
2431
<=
shift_expr -> arith_expr << shift_expr
2431
or
shift_expr -> arith_expr << shift_expr
2431
in
shift_expr -> arith_expr << shift_expr
2431
!=
shift_expr -> arith_expr << shift_expr
2431
^
shift_expr -> arith_expr << shift_expr
2431
<
shift_expr -> arith_expr << shift_expr
2431
|
shift_expr -> arith_expr << shift_expr
2431
==
shift_expr -> arith_expr << shift_expr
2431
not
shift_expr -> arith_expr << shift_expr
2431
is
shift_expr -> arith_expr << shift_expr
2431
and
shift_expr -> arith_expr << shift_expr
2431
>
shift_expr -> arith_expr << shift_expr
2431
for
shift_expr -> arith_expr << shift_expr
2431
)
shift_expr -> arith_expr << shift_expr
2432
>=
xor_expr -> and_expr ^ xor_expr
2432
>
xor_expr -> and_expr ^ xor_expr
2432
or
xor_expr -> and_expr ^ xor_expr
2432
and
xor_expr -> and_expr ^ xor_expr
2432
<=
xor_expr -> and_expr ^ xor_expr
2432
in
xor_expr -> and_expr ^ xor_expr
2432
==
xor_expr -> and_expr ^ xor_expr
2432
)
xor_expr -> and_expr ^ xor_expr
2432
if
xor_expr -> and_expr ^ xor_expr
2432
!=
xor_expr -> and_expr ^ xor_expr
2432
not
xor_expr -> and_expr ^ xor_expr
2432
<
xor_expr -> and_expr ^ xor_expr
2432
for
xor_expr -> and_expr ^ xor_expr
2432
is
xor_expr -> and_expr ^ xor_expr
2432
|
xor_expr -> and_expr ^ xor_expr
2433
<<
atom -> [ test_list_comp ]
2433
>>
atom -> [ test_list_comp ]
2433
for
atom -> [ test_list_comp ]
2433
+
atom -> [ test_list_comp ]
2433
-
atom -> [ test_list_comp ]
2433
not
atom -> [ test_list_comp ]
2433
<=
atom -> [ test_list_comp ]
2433
is
atom -> [ test_list_comp ]
2433
[
atom -> [ test_list_comp ]
2433
*
atom -> [ test_list_comp ]
2433
==
atom -> [ test_list_comp ]
2433
@
atom -> [ test_list_comp ]
2433
)
atom -> [ test_list_comp ]
2433
>
atom -> [ test_list_comp ]
2433
%
atom -> [ test_list_comp ]
2433
if
atom -> [ test_list_comp ]
2433
>=
atom -> [ test_list_comp ]
2433
//
atom -> [ test_list_comp ]
2433
.
atom -> [ test_list_comp ]
2433
in
atom -> [ test_list_comp ]
2433
**
atom -> [ test_list_comp ]
2433
and
atom -> [ test_list_comp ]
2433
/
atom -> [ test_list_comp ]
2433
or
atom -> [ test_list_comp ]
2433
!=
atom -> [ test_list_comp ]
2433
<
atom -> [ test_list_comp ]
2433
^
atom -> [ test_list_comp ]
2433
&
atom -> [ test_list_comp ]
2433
(
atom -> [ test_list_comp ]
2433
|
atom -> [ test_list_comp ]
2434
@
atom -> ( test_list_comp )
2434
<
atom -> ( test_list_comp )
2434
and
atom -> ( test_list_comp )
2434
)
atom -> ( test_list_comp )
2434
if
atom -> ( test_list_comp )
2434
&
atom -> ( test_list_comp )
2434
*
atom -> ( test_list_comp )
2434
%
atom -> ( test_list_comp )
2434
[
atom -> ( test_list_comp )
2434
//
atom -> ( test_list_comp )
2434
<<
atom -> ( test_list_comp )
2434
.
atom -> ( test_list_comp )
2434
/
atom -> ( test_list_comp )
2434
>=
atom -> ( test_list_comp )
2434
or
atom -> ( test_list_comp )
2434
>
atom -> ( test_list_comp )
2434
for
atom -> ( test_list_comp )
2434
-
atom -> ( test_list_comp )
2434
|
atom -> ( test_list_comp )
2434
**
atom -> ( test_list_comp )
2434
is
atom -> ( test_list_comp )
2434
==
atom -> ( test_list_comp )
2434
not
atom -> ( test_list_comp )
2434
in
atom -> ( test_list_comp )
2434
!=
atom -> ( test_list_comp )
2434
^
atom -> ( test_list_comp )
2434
(
atom -> ( test_list_comp )
2434
<=
atom -> ( test_list_comp )
2434
+
atom -> ( test_list_comp )
2434
>>
atom -> ( test_list_comp )
2435
and
arith_expr -> term + arith_expr
2435
<
arith_expr -> term + arith_expr
2435
|
arith_expr -> term + arith_expr
2435
>=
arith_expr -> term + arith_expr
2435
>>
arith_expr -> term + arith_expr
2435
if
arith_expr -> term + arith_expr
2435
>
arith_expr -> term + arith_expr
2435
in
arith_expr -> term + arith_expr
2435
or
arith_expr -> term + arith_expr
2435
<=
arith_expr -> term + arith_expr
2435
)
arith_expr -> term + arith_expr
2435
not
arith_expr -> term + arith_expr
2435
^
arith_expr -> term + arith_expr
2435
!=
arith_expr -> term + arith_expr
2435
&
arith_expr -> term + arith_expr
2435
==
arith_expr -> term + arith_expr
2435
for
arith_expr -> term + arith_expr
2435
<<
arith_expr -> term + arith_expr
2435
is
arith_expr -> term + arith_expr
2436
<<
arith_expr -> term - arith_expr
2436
if
arith_expr -> term - arith_expr
2436
<
arith_expr -> term - arith_expr
2436
<=
arith_expr -> term - arith_expr
2436
for
arith_expr -> term - arith_expr
2436
and
arith_expr -> term - arith_expr
2436
in
arith_expr -> term - arith_expr
2436
&
arith_expr -> term - arith_expr
2436
|
arith_expr -> term - arith_expr
2436
==
arith_expr -> term - arith_expr
2436
is
arith_expr -> term - arith_expr
2436
)
arith_expr -> term - arith_expr
2436
>>
arith_expr -> term - arith_expr
2436
!=
arith_expr -> term - arith_expr
2436
>
arith_expr -> term - arith_expr
2436
or
arith_expr -> term - arith_expr
2436
>=
arith_expr -> term - arith_expr
2436
^
arith_expr -> term - arith_expr
2436
not
arith_expr -> term - arith_expr
2437
>=
and_expr -> shift_expr & and_expr
2437
!=
and_expr -> shift_expr & and_expr
2437
or
and_expr -> shift_expr & and_expr
2437
is
and_expr -> shift_expr & and_expr
2437
^
and_expr -> shift_expr & and_expr
2437
if
and_expr -> shift_expr & and_expr
2437
==
and_expr -> shift_expr & and_expr
2437
not
and_expr -> shift_expr & and_expr
2437
<
and_expr -> shift_expr & and_expr
2437
)
and_expr -> shift_expr & and_expr
2437
>
and_expr -> shift_expr & and_expr
2437
in
and_expr -> shift_expr & and_expr
2437
and
and_expr -> shift_expr & and_expr
2437
|
and_expr -> shift_expr & and_expr
2437
for
and_expr -> shift_expr & and_expr
2437
<=
and_expr -> shift_expr & and_expr
2438
for
and_test -> not_test and and_test
2438
or
and_test -> not_test and and_test
2438
)
and_test -> not_test and and_test
2438
if
and_test -> not_test and and_test
2439
varargslist
2544
2439
vfpdef
343
2439
:
2545
2439
NAME
342
2440
comp_for
2247
2440
for
569
2440
comp_if
2245
2440
if
2246
2440
comp_iter
2546
2440
)
comp_iter -> 
2441
if
test_nocond -> lambdef_nocond
2441
)
test_nocond -> lambdef_nocond
2441
for
test_nocond -> lambdef_nocond
2442
for
test_nocond -> or_test
2442
)
test_nocond -> or_test
2442
if
test_nocond -> or_test
2443
is
expr -> xor_expr | expr
2443
)
expr -> xor_expr | expr
2443
or
expr -> xor_expr | expr
2443
>
expr -> xor_expr | expr
2443
and
expr -> xor_expr | expr
2443
for
expr -> xor_expr | expr
2443
in
expr -> xor_expr | expr
2443
if
expr -> xor_expr | expr
2443
<=
expr -> xor_expr | expr
2443
not
expr -> xor_expr | expr
2443
==
expr -> xor_expr | expr
2443
>=
expr -> xor_expr | expr
2443
<
expr -> xor_expr | expr
2443
!=
expr -> xor_expr | expr
2444
for
comparison -> expr comp_op comparison
2444
)
comparison -> expr comp_op comparison
2444
and
comparison -> expr comp_op comparison
2444
if
comparison -> expr comp_op comparison
2444
or
comparison -> expr comp_op comparison
2445
)
or_test -> and_test or or_test
2445
for
or_test -> and_test or or_test
2445
if
or_test -> and_test or or_test
2446
NAME
12
2446
True
1
2446
atom_expr
5
2446
term
29
2446
atom
4
2446
simple_stmt
1234
2446
factor
11
2446
shift_expr
7
2446
arith_expr
8
2446
suite
2547
2446
False
27
2446
and_expr
9
2446
xor_expr
40
2446
{
41
2446
(
13
2446
[
15
2446
resetstats
16
2446
STRING
46
2446
raise
19
2446
small_stmt
21
2446
test
47
2446
comparison
28
2446
or_test
23
2446
~
55
2446
-
43
2446
lambda
53
2446
+
31
2446
not_test
33
2446
and_test
48
2446
power
32
2446
pass
73
2446
None
34
2446
lambdef
37
2446
not
42
2446
NUMBER
39
2446
expr
50
2446
continue
74
2446
begsim
49
2446
del_stmt
75
2446
NEWLINE
1236
2446
return
54
2446
nonlocal
76
2446
return_stmt
56
2446
endsim
57
2446
test_list
70
2446
raise_stmt
59
2446
assert_stmt
78
2446
stat_stmt
79
2446
global_stmt
61
2446
continue_stmt
62
2446
assert
63
2446
break_stmt
64
2446
nonlocal_stmt
80
2446
expr_stmt
81
2446
break
82
2446
del
66
2446
global
67
2446
yield
83
2446
pass_stmt
68
2446
flow_stmt
71
2446
yield_stmt
72
2446
sim_stmt
84
2447
:
test -> or_test if or_test else test
2447
,
test -> or_test if or_test else test
2448
]
test -> or_test if or_test else test
2448
,
test -> or_test if or_test else test
2449
>>
power -> atom_expr ** factor
2449
<=
power -> atom_expr ** factor
2449
//
power -> atom_expr ** factor
2449
for
power -> atom_expr ** factor
2449
/
power -> atom_expr ** factor
2449
&
power -> atom_expr ** factor
2449
if
power -> atom_expr ** factor
2449
not
power -> atom_expr ** factor
2449
<
power -> atom_expr ** factor
2449
!=
power -> atom_expr ** factor
2449
>
power -> atom_expr ** factor
2449
*
power -> atom_expr ** factor
2449
|
power -> atom_expr ** factor
2449
==
power -> atom_expr ** factor
2449
is
power -> atom_expr ** factor
2449
and
power -> atom_expr ** factor
2449
<<
power -> atom_expr ** factor
2449
-
power -> atom_expr ** factor
2449
]
power -> atom_expr ** factor
2449
@
power -> atom_expr ** factor
2449
in
power -> atom_expr ** factor
2449
^
power -> atom_expr ** factor
2449
%
power -> atom_expr ** factor
2449
>=
power -> atom_expr ** factor
2449
+
power -> atom_expr ** factor
2449
or
power -> atom_expr ** factor
2450
*
trailer_expr -> trailer trailer_expr
2450
+
trailer_expr -> trailer trailer_expr
2450
if
trailer_expr -> trailer trailer_expr
2450
-
trailer_expr -> trailer trailer_expr
2450
<=
trailer_expr -> trailer trailer_expr
2450
|
trailer_expr -> trailer trailer_expr
2450
@
trailer_expr -> trailer trailer_expr
2450
%
trailer_expr -> trailer trailer_expr
2450
in
trailer_expr -> trailer trailer_expr
2450
<<
trailer_expr -> trailer trailer_expr
2450
]
trailer_expr -> trailer trailer_expr
2450
**
trailer_expr -> trailer trailer_expr
2450
==
trailer_expr -> trailer trailer_expr
2450
not
trailer_expr -> trailer trailer_expr
2450
and
trailer_expr -> trailer trailer_expr
2450
//
trailer_expr -> trailer trailer_expr
2450
^
trailer_expr -> trailer trailer_expr
2450
for
trailer_expr -> trailer trailer_expr
2450
or
trailer_expr -> trailer trailer_expr
2450
>
trailer_expr -> trailer trailer_expr
2450
!=
trailer_expr -> trailer trailer_expr
2450
is
trailer_expr -> trailer trailer_expr
2450
&
trailer_expr -> trailer trailer_expr
2450
>>
trailer_expr -> trailer trailer_expr
2450
/
trailer_expr -> trailer trailer_expr
2450
<
trailer_expr -> trailer trailer_expr
2450
>=
trailer_expr -> trailer trailer_expr
2451
]
2548
2452
^
trailer -> . NAME
2452
%
trailer -> . NAME
2452
**
trailer -> . NAME
2452
>>
trailer -> . NAME
2452
>
trailer -> . NAME
2452
in
trailer -> . NAME
2452
[
trailer -> . NAME
2452
is
trailer -> . NAME
2452
<<
trailer -> . NAME
2452
or
trailer -> . NAME
2452
and
trailer -> . NAME
2452
>=
trailer -> . NAME
2452
|
trailer -> . NAME
2452
==
trailer -> . NAME
2452
.
trailer -> . NAME
2452
+
trailer -> . NAME
2452
<
trailer -> . NAME
2452
for
trailer -> . NAME
2452
-
trailer -> . NAME
2452
&
trailer -> . NAME
2452
*
trailer -> . NAME
2452
if
trailer -> . NAME
2452
<=
trailer -> . NAME
2452
(
trailer -> . NAME
2452
]
trailer -> . NAME
2452
not
trailer -> . NAME
2452
//
trailer -> . NAME
2452
@
trailer -> . NAME
2452
!=
trailer -> . NAME
2452
/
trailer -> . NAME
2453
)
2549
2454
[
trailer -> ( )
2454
not
trailer -> ( )
2454
==
trailer -> ( )
2454
**
trailer -> ( )
2454
<=
trailer -> ( )
2454
//
trailer -> ( )
2454
<<
trailer -> ( )
2454
<
trailer -> ( )
2454
]
trailer -> ( )
2454
for
trailer -> ( )
2454
in
trailer -> ( )
2454
or
trailer -> ( )
2454
-
trailer -> ( )
2454
+
trailer -> ( )
2454
&
trailer -> ( )
2454
*
trailer -> ( )
2454
is
trailer -> ( )
2454
>
trailer -> ( )
2454
!=
trailer -> ( )
2454
>>
trailer -> ( )
2454
%
trailer -> ( )
2454
|
trailer -> ( )
2454
.
trailer -> ( )
2454
>=
trailer -> ( )
2454
(
trailer -> ( )
2454
and
trailer -> ( )
2454
@
trailer -> ( )
2454
/
trailer -> ( )
2454
^
trailer -> ( )
2454
if
trailer -> ( )
2455
|
term -> factor % term
2455
<<
term -> factor % term
2455
^
term -> factor % term
2455
==
term -> factor % term
2455
]
term -> factor % term
2455
-
term -> factor % term
2455
is
term -> factor % term
2455
>=
term -> factor % term
2455
>>
term -> factor % term
2455
>
term -> factor % term
2455
in
term -> factor % term
2455
&
term -> factor % term
2455
if
term -> factor % term
2455
<
term -> factor % term
2455
!=
term -> factor % term
2455
<=
term -> factor % term
2455
not
term -> factor % term
2455
+
term -> factor % term
2455
and
term -> factor % term
2455
or
term -> factor % term
2455
for
term -> factor % term
2456
if
term -> factor // term
2456
<
term -> factor // term
2456
and
term -> factor // term
2456
in
term -> factor // term
2456
>>
term -> factor // term
2456
<=
term -> factor // term
2456
!=
term -> factor // term
2456
]
term -> factor // term
2456
^
term -> factor // term
2456
for
term -> factor // term
2456
|
term -> factor // term
2456
or
term -> factor // term
2456
>=
term -> factor // term
2456
&
term -> factor // term
2456
>
term -> factor // term
2456
+
term -> factor // term
2456
is
term -> factor // term
2456
not
term -> factor // term
2456
<<
term -> factor // term
2456
-
term -> factor // term
2456
==
term -> factor // term
2457
]
term -> factor / term
2457
>>
term -> factor / term
2457
^
term -> factor / term
2457
or
term -> factor / term
2457
for
term -> factor / term
2457
+
term -> factor / term
2457
if
term -> factor / term
2457
>=
term -> factor / term
2457
>
term -> factor / term
2457
-
term -> factor / term
2457
and
term -> factor / term
2457
not
term -> factor / term
2457
<
term -> factor / term
2457
in
term -> factor / term
2457
==
term -> factor / term
2457
<=
term -> factor / term
2457
is
term -> factor / term
2457
&
term -> factor / term
2457
<<
term -> factor / term
2457
!=
term -> factor / term
2457
|
term -> factor / term
2458
-
term -> factor * term
2458
&
term -> factor * term
2458
and
term -> factor * term
2458
!=
term -> factor * term
2458
|
term -> factor * term
2458
<<
term -> factor * term
2458
for
term -> factor * term
2458
<
term -> factor * term
2458
if
term -> factor * term
2458
^
term -> factor * term
2458
+
term -> factor * term
2458
in
term -> factor * term
2458
or
term -> factor * term
2458
>>
term -> factor * term
2458
not
term -> factor * term
2458
]
term -> factor * term
2458
==
term -> factor * term
2458
>=
term -> factor * term
2458
<=
term -> factor * term
2458
>
term -> factor * term
2458
is
term -> factor * term
2459
>>
term -> factor @ term
2459
^
term -> factor @ term
2459
&
term -> factor @ term
2459
|
term -> factor @ term
2459
if
term -> factor @ term
2459
is
term -> factor @ term
2459
<
term -> factor @ term
2459
for
term -> factor @ term
2459
<<
term -> factor @ term
2459
and
term -> factor @ term
2459
==
term -> factor @ term
2459
>
term -> factor @ term
2459
in
term -> factor @ term
2459
]
term -> factor @ term
2459
>=
term -> factor @ term
2459
+
term -> factor @ term
2459
not
term -> factor @ term
2459
!=
term -> factor @ term
2459
<=
term -> factor @ term
2459
or
term -> factor @ term
2459
-
term -> factor @ term
2460
for
shift_expr -> arith_expr >> shift_expr
2460
]
shift_expr -> arith_expr >> shift_expr
2460
<
shift_expr -> arith_expr >> shift_expr
2460
^
shift_expr -> arith_expr >> shift_expr
2460
in
shift_expr -> arith_expr >> shift_expr
2460
==
shift_expr -> arith_expr >> shift_expr
2460
!=
shift_expr -> arith_expr >> shift_expr
2460
>=
shift_expr -> arith_expr >> shift_expr
2460
not
shift_expr -> arith_expr >> shift_expr
2460
and
shift_expr -> arith_expr >> shift_expr
2460
is
shift_expr -> arith_expr >> shift_expr
2460
>
shift_expr -> arith_expr >> shift_expr
2460
&
shift_expr -> arith_expr >> shift_expr
2460
|
shift_expr -> arith_expr >> shift_expr
2460
<=
shift_expr -> arith_expr >> shift_expr
2460
or
shift_expr -> arith_expr >> shift_expr
2460
if
shift_expr -> arith_expr >> shift_expr
2461
if
shift_expr -> arith_expr << shift_expr
2461
&
shift_expr -> arith_expr << shift_expr
2461
>=
shift_expr -> arith_expr << shift_expr
2461
<=
shift_expr -> arith_expr << shift_expr
2461
or
shift_expr -> arith_expr << shift_expr
2461
in
shift_expr -> arith_expr << shift_expr
2461
!=
shift_expr -> arith_expr << shift_expr
2461
^
shift_expr -> arith_expr << shift_expr
2461
<
shift_expr -> arith_expr << shift_expr
2461
|
shift_expr -> arith_expr << shift_expr
2461
==
shift_expr -> arith_expr << shift_expr
2461
is
shift_expr -> arith_expr << shift_expr
2461
and
shift_expr -> arith_expr << shift_expr
2461
]
shift_expr -> arith_expr << shift_expr
2461
>
shift_expr -> arith_expr << shift_expr
2461
for
shift_expr -> arith_expr << shift_expr
2461
not
shift_expr -> arith_expr << shift_expr
2462
>=
xor_expr -> and_expr ^ xor_expr
2462
>
xor_expr -> and_expr ^ xor_expr
2462
or
xor_expr -> and_expr ^ xor_expr
2462
and
xor_expr -> and_expr ^ xor_expr
2462
<=
xor_expr -> and_expr ^ xor_expr
2462
in
xor_expr -> and_expr ^ xor_expr
2462
==
xor_expr -> and_expr ^ xor_expr
2462
]
xor_expr -> and_expr ^ xor_expr
2462
if
xor_expr -> and_expr ^ xor_expr
2462
!=
xor_expr -> and_expr ^ xor_expr
2462
not
xor_expr -> and_expr ^ xor_expr
2462
<
xor_expr -> and_expr ^ xor_expr
2462
for
xor_expr -> and_expr ^ xor_expr
2462
is
xor_expr -> and_expr ^ xor_expr
2462
|
xor_expr -> and_expr ^ xor_expr
2463
<<
atom -> [ test_list_comp ]
2463
>>
atom -> [ test_list_comp ]
2463
for
atom -> [ test_list_comp ]
2463
+
atom -> [ test_list_comp ]
2463
-
atom -> [ test_list_comp ]
2463
not
atom -> [ test_list_comp ]
2463
<=
atom -> [ test_list_comp ]
2463
is
atom -> [ test_list_comp ]
2463
[
atom -> [ test_list_comp ]
2463
*
atom -> [ test_list_comp ]
2463
==
atom -> [ test_list_comp ]
2463
@
atom -> [ test_list_comp ]
2463
>
atom -> [ test_list_comp ]
2463
%
atom -> [ test_list_comp ]
2463
if
atom -> [ test_list_comp ]
2463
>=
atom -> [ test_list_comp ]
2463
]
atom -> [ test_list_comp ]
2463
//
atom -> [ test_list_comp ]
2463
.
atom -> [ test_list_comp ]
2463
in
atom -> [ test_list_comp ]
2463
**
atom -> [ test_list_comp ]
2463
and
atom -> [ test_list_comp ]
2463
/
atom -> [ test_list_comp ]
2463
or
atom -> [ test_list_comp ]
2463
!=
atom -> [ test_list_comp ]
2463
<
atom -> [ test_list_comp ]
2463
^
atom -> [ test_list_comp ]
2463
&
atom -> [ test_list_comp ]
2463
(
atom -> [ test_list_comp ]
2463
|
atom -> [ test_list_comp ]
2464
@
atom -> ( test_list_comp )
2464
]
atom -> ( test_list_comp )
2464
<
atom -> ( test_list_comp )
2464
and
atom -> ( test_list_comp )
2464
if
atom -> ( test_list_comp )
2464
&
atom -> ( test_list_comp )
2464
*
atom -> ( test_list_comp )
2464
%
atom -> ( test_list_comp )
2464
[
atom -> ( test_list_comp )
2464
//
atom -> ( test_list_comp )
2464
<<
atom -> ( test_list_comp )
2464
.
atom -> ( test_list_comp )
2464
/
atom -> ( test_list_comp )
2464
>=
atom -> ( test_list_comp )
2464
or
atom -> ( test_list_comp )
2464
for
atom -> ( test_list_comp )
2464
>
atom -> ( test_list_comp )
2464
-
atom -> ( test_list_comp )
2464
|
atom -> ( test_list_comp )
2464
**
atom -> ( test_list_comp )
2464
is
atom -> ( test_list_comp )
2464
==
atom -> ( test_list_comp )
2464
not
atom -> ( test_list_comp )
2464
in
atom -> ( test_list_comp )
2464
!=
atom -> ( test_list_comp )
2464
^
atom -> ( test_list_comp )
2464
(
atom -> ( test_list_comp )
2464
<=
atom -> ( test_list_comp )
2464
+
atom -> ( test_list_comp )
2464
>>
atom -> ( test_list_comp )
2465
and
arith_expr -> term + arith_expr
2465
<
arith_expr -> term + arith_expr
2465
|
arith_expr -> term + arith_expr
2465
>=
arith_expr -> term + arith_expr
2465
>>
arith_expr -> term + arith_expr
2465
if
arith_expr -> term + arith_expr
2465
>
arith_expr -> term + arith_expr
2465
in
arith_expr -> term + arith_expr
2465
or
arith_expr -> term + arith_expr
2465
<=
arith_expr -> term + arith_expr
2465
not
arith_expr -> term + arith_expr
2465
^
arith_expr -> term + arith_expr
2465
!=
arith_expr -> term + arith_expr
2465
&
arith_expr -> term + arith_expr
2465
==
arith_expr -> term + arith_expr
2465
]
arith_expr -> term + arith_expr
2465
for
arith_expr -> term + arith_expr
2465
<<
arith_expr -> term + arith_expr
2465
is
arith_expr -> term + arith_expr
2466
<<
arith_expr -> term - arith_expr
2466
if
arith_expr -> term - arith_expr
2466
<
arith_expr -> term - arith_expr
2466
<=
arith_expr -> term - arith_expr
2466
for
arith_expr -> term - arith_expr
2466
and
arith_expr -> term - arith_expr
2466
in
arith_expr -> term - arith_expr
2466
&
arith_expr -> term - arith_expr
2466
|
arith_expr -> term - arith_expr
2466
==
arith_expr -> term - arith_expr
2466
is
arith_expr -> term - arith_expr
2466
>>
arith_expr -> term - arith_expr
2466
!=
arith_expr -> term - arith_expr
2466
>
arith_expr -> term - arith_expr
2466
or
arith_expr -> term - arith_expr
2466
]
arith_expr -> term - arith_expr
2466
>=
arith_expr -> term - arith_expr
2466
^
arith_expr -> term - arith_expr
2466
not
arith_expr -> term - arith_expr
2467
]
or_test -> and_test or or_test
2467
for
or_test -> and_test or or_test
2467
if
or_test -> and_test or or_test
2468
>=
and_expr -> shift_expr & and_expr
2468
!=
and_expr -> shift_expr & and_expr
2468
or
and_expr -> shift_expr & and_expr
2468
is
and_expr -> shift_expr & and_expr
2468
^
and_expr -> shift_expr & and_expr
2468
]
and_expr -> shift_expr & and_expr
2468
if
and_expr -> shift_expr & and_expr
2468
==
and_expr -> shift_expr & and_expr
2468
not
and_expr -> shift_expr & and_expr
2468
<
and_expr -> shift_expr & and_expr
2468
>
and_expr -> shift_expr & and_expr
2468
in
and_expr -> shift_expr & and_expr
2468
and
and_expr -> shift_expr & and_expr
2468
|
and_expr -> shift_expr & and_expr
2468
for
and_expr -> shift_expr & and_expr
2468
<=
and_expr -> shift_expr & and_expr
2469
for
and_test -> not_test and and_test
2469
or
and_test -> not_test and and_test
2469
]
and_test -> not_test and and_test
2469
if
and_test -> not_test and and_test
2470
]
expr -> xor_expr | expr
2470
is
expr -> xor_expr | expr
2470
or
expr -> xor_expr | expr
2470
>
expr -> xor_expr | expr
2470
and
expr -> xor_expr | expr
2470
for
expr -> xor_expr | expr
2470
in
expr -> xor_expr | expr
2470
if
expr -> xor_expr | expr
2470
<=
expr -> xor_expr | expr
2470
not
expr -> xor_expr | expr
2470
==
expr -> xor_expr | expr
2470
>=
expr -> xor_expr | expr
2470
<
expr -> xor_expr | expr
2470
!=
expr -> xor_expr | expr
2471
for
comparison -> expr comp_op comparison
2471
]
comparison -> expr comp_op comparison
2471
and
comparison -> expr comp_op comparison
2471
if
comparison -> expr comp_op comparison
2471
or
comparison -> expr comp_op comparison
2472
for
642
2472
]
comp_iter -> 
2472
if
2292
2472
comp_for
2293
2472
comp_iter
2550
2472
comp_if
2295
2473
varargslist
2551
2473
:
2552
2473
vfpdef
343
2473
NAME
342
2474
for
test_nocond -> or_test
2474
if
test_nocond -> or_test
2474
]
test_nocond -> or_test
2475
]
test_nocond -> lambdef_nocond
2475
if
test_nocond -> lambdef_nocond
2475
for
test_nocond -> lambdef_nocond
2476
:
2553
2477
STRING
simple_stmt -> small_stmt NEWLINE
2477
while
simple_stmt -> small_stmt NEWLINE
2477
~
simple_stmt -> small_stmt NEWLINE
2477
del
simple_stmt -> small_stmt NEWLINE
2477
global
simple_stmt -> small_stmt NEWLINE
2477
NUMBER
simple_stmt -> small_stmt NEWLINE
2477
True
simple_stmt -> small_stmt NEWLINE
2477
NAME
simple_stmt -> small_stmt NEWLINE
2477
with
simple_stmt -> small_stmt NEWLINE
2477
NEWLINE
simple_stmt -> small_stmt NEWLINE
2477
(
simple_stmt -> small_stmt NEWLINE
2477
-
simple_stmt -> small_stmt NEWLINE
2477
+
simple_stmt -> small_stmt NEWLINE
2477
continue
simple_stmt -> small_stmt NEWLINE
2477
endsim
simple_stmt -> small_stmt NEWLINE
2477
try
simple_stmt -> small_stmt NEWLINE
2477
$
simple_stmt -> small_stmt NEWLINE
2477
[
simple_stmt -> small_stmt NEWLINE
2477
raise
simple_stmt -> small_stmt NEWLINE
2477
if
simple_stmt -> small_stmt NEWLINE
2477
{
simple_stmt -> small_stmt NEWLINE
2477
begsim
simple_stmt -> small_stmt NEWLINE
2477
return
simple_stmt -> small_stmt NEWLINE
2477
finally
simple_stmt -> small_stmt NEWLINE
2477
assert
simple_stmt -> small_stmt NEWLINE
2477
nonlocal
simple_stmt -> small_stmt NEWLINE
2477
not
simple_stmt -> small_stmt NEWLINE
2477
conf
simple_stmt -> small_stmt NEWLINE
2477
yield
simple_stmt -> small_stmt NEWLINE
2477
resetstats
simple_stmt -> small_stmt NEWLINE
2477
None
simple_stmt -> small_stmt NEWLINE
2477
for
simple_stmt -> small_stmt NEWLINE
2477
class
simple_stmt -> small_stmt NEWLINE
2477
@
simple_stmt -> small_stmt NEWLINE
2477
pass
simple_stmt -> small_stmt NEWLINE
2477
lambda
simple_stmt -> small_stmt NEWLINE
2477
False
simple_stmt -> small_stmt NEWLINE
2477
break
simple_stmt -> small_stmt NEWLINE
2477
def
simple_stmt -> small_stmt NEWLINE
2478
True
1
2478
if
1708
2478
decorated
1709
2478
atom
4
2478
atom_expr
5
2478
while_stmt
1710
2478
try
1711
2478
shift_expr
7
2478
arith_expr
8
2478
and_expr
9
2478
conf
1712
2478
factor
11
2478
NAME
12
2478
(
13
2478
for
1713
2478
[
15
2478
resetstats
16
2478
compound_stmt
1714
2478
while
1715
2478
raise
19
2478
class
1716
2478
small_stmt
1717
2478
or_test
23
2478
for_stmt
1718
2478
try_stmt
1719
2478
def
1720
2478
False
27
2478
comparison
28
2478
term
29
2478
simple_stmt
1721
2478
+
31
2478
power
32
2478
not_test
33
2478
None
34
2478
with
1722
2478
classdef
1723
2478
lambdef
37
2478
if_stmt
1724
2478
NUMBER
39
2478
xor_expr
40
2478
{
41
2478
not
42
2478
-
43
2478
stmt_list
2554
2478
funcdef
1725
2478
decorators
1726
2478
STRING
46
2478
test
47
2478
and_test
48
2478
begsim
49
2478
expr
50
2478
with_stmt
1727
2478
lambda
53
2478
return
54
2478
~
55
2478
confdef
1728
2478
return_stmt
56
2478
endsim
57
2478
@
58
2478
raise_stmt
59
2478
global_stmt
61
2478
continue_stmt
62
2478
assert
63
2478
break_stmt
64
2478
del
66
2478
global
67
2478
pass_stmt
68
2478
test_list
70
2478
flow_stmt
71
2478
yield_stmt
72
2478
stmt
1729
2478
pass
73
2478
continue
74
2478
del_stmt
75
2478
nonlocal
76
2478
decorator
77
2478
assert_stmt
78
2478
stat_stmt
79
2478
nonlocal_stmt
80
2478
expr_stmt
81
2478
break
82
2478
yield
83
2478
sim_stmt
84
2479
while
except_clause -> except test : suite maybe_except_clause
2479
assert
except_clause -> except test : suite maybe_except_clause
2479
yield
except_clause -> except test : suite maybe_except_clause
2479
$
except_clause -> except test : suite maybe_except_clause
2479
endsim
except_clause -> except test : suite maybe_except_clause
2479
True
except_clause -> except test : suite maybe_except_clause
2479
continue
except_clause -> except test : suite maybe_except_clause
2479
(
except_clause -> except test : suite maybe_except_clause
2479
~
except_clause -> except test : suite maybe_except_clause
2479
global
except_clause -> except test : suite maybe_except_clause
2479
del
except_clause -> except test : suite maybe_except_clause
2479
[
except_clause -> except test : suite maybe_except_clause
2479
def
except_clause -> except test : suite maybe_except_clause
2479
NAME
except_clause -> except test : suite maybe_except_clause
2479
finally
except_clause -> except test : suite maybe_except_clause
2479
return
except_clause -> except test : suite maybe_except_clause
2479
else
except_clause -> except test : suite maybe_except_clause
2479
not
except_clause -> except test : suite maybe_except_clause
2479
pass
except_clause -> except test : suite maybe_except_clause
2479
raise
except_clause -> except test : suite maybe_except_clause
2479
class
except_clause -> except test : suite maybe_except_clause
2479
@
except_clause -> except test : suite maybe_except_clause
2479
nonlocal
except_clause -> except test : suite maybe_except_clause
2479
break
except_clause -> except test : suite maybe_except_clause
2479
if
except_clause -> except test : suite maybe_except_clause
2479
begsim
except_clause -> except test : suite maybe_except_clause
2479
{
except_clause -> except test : suite maybe_except_clause
2479
NEWLINE
except_clause -> except test : suite maybe_except_clause
2479
False
except_clause -> except test : suite maybe_except_clause
2479
STRING
except_clause -> except test : suite maybe_except_clause
2479
with
except_clause -> except test : suite maybe_except_clause
2479
try
except_clause -> except test : suite maybe_except_clause
2479
conf
except_clause -> except test : suite maybe_except_clause
2479
+
except_clause -> except test : suite maybe_except_clause
2479
None
except_clause -> except test : suite maybe_except_clause
2479
NUMBER
except_clause -> except test : suite maybe_except_clause
2479
for
except_clause -> except test : suite maybe_except_clause
2479
resetstats
except_clause -> except test : suite maybe_except_clause
2479
-
except_clause -> except test : suite maybe_except_clause
2479
lambda
except_clause -> except test : suite maybe_except_clause
2480
NAME
12
2480
True
1
2480
atom_expr
5
2480
term
29
2480
NEWLINE
2067
2480
atom
4
2480
simple_stmt
2068
2480
factor
11
2480
shift_expr
7
2480
arith_expr
8
2480
False
27
2480
and_expr
9
2480
xor_expr
40
2480
{
41
2480
(
13
2480
[
15
2480
resetstats
16
2480
STRING
46
2480
raise
19
2480
small_stmt
2070
2480
test
47
2480
comparison
28
2480
or_test
23
2480
~
55
2480
-
43
2480
lambda
53
2480
+
31
2480
not_test
33
2480
suite
2555
2480
and_test
48
2480
power
32
2480
pass
73
2480
None
34
2480
lambdef
37
2480
not
42
2480
NUMBER
39
2480
expr
50
2480
continue
74
2480
begsim
49
2480
del_stmt
75
2480
return
54
2480
nonlocal
76
2480
return_stmt
56
2480
endsim
57
2480
test_list
70
2480
raise_stmt
59
2480
assert_stmt
78
2480
stat_stmt
79
2480
global_stmt
61
2480
continue_stmt
62
2480
assert
63
2480
break_stmt
64
2480
nonlocal_stmt
80
2480
expr_stmt
81
2480
break
82
2480
del
66
2480
global
67
2480
yield
83
2480
pass_stmt
68
2480
flow_stmt
71
2480
yield_stmt
72
2480
sim_stmt
84
2481
(
trailer -> [ subscriptlist ]
2481
//
trailer -> [ subscriptlist ]
2481
&
trailer -> [ subscriptlist ]
2481
>
trailer -> [ subscriptlist ]
2481
in
trailer -> [ subscriptlist ]
2481
>>
trailer -> [ subscriptlist ]
2481
[
trailer -> [ subscriptlist ]
2481
<=
trailer -> [ subscriptlist ]
2481
-
trailer -> [ subscriptlist ]
2481
!=
trailer -> [ subscriptlist ]
2481
|
trailer -> [ subscriptlist ]
2481
not
trailer -> [ subscriptlist ]
2481
.
trailer -> [ subscriptlist ]
2481
>=
trailer -> [ subscriptlist ]
2481
or
trailer -> [ subscriptlist ]
2481
*
trailer -> [ subscriptlist ]
2481
<<
trailer -> [ subscriptlist ]
2481
**
trailer -> [ subscriptlist ]
2481
==
trailer -> [ subscriptlist ]
2481
+
trailer -> [ subscriptlist ]
2481
is
trailer -> [ subscriptlist ]
2481
/
trailer -> [ subscriptlist ]
2481
^
trailer -> [ subscriptlist ]
2481
as
trailer -> [ subscriptlist ]
2481
and
trailer -> [ subscriptlist ]
2481
@
trailer -> [ subscriptlist ]
2481
if
trailer -> [ subscriptlist ]
2481
<
trailer -> [ subscriptlist ]
2481
%
trailer -> [ subscriptlist ]
2481
:
trailer -> [ subscriptlist ]
2482
or
trailer -> ( arglist )
2482
>>
trailer -> ( arglist )
2482
<=
trailer -> ( arglist )
2482
**
trailer -> ( arglist )
2482
<
trailer -> ( arglist )
2482
(
trailer -> ( arglist )
2482
-
trailer -> ( arglist )
2482
not
trailer -> ( arglist )
2482
if
trailer -> ( arglist )
2482
and
trailer -> ( arglist )
2482
.
trailer -> ( arglist )
2482
is
trailer -> ( arglist )
2482
>
trailer -> ( arglist )
2482
in
trailer -> ( arglist )
2482
!=
trailer -> ( arglist )
2482
==
trailer -> ( arglist )
2482
as
trailer -> ( arglist )
2482
%
trailer -> ( arglist )
2482
@
trailer -> ( arglist )
2482
^
trailer -> ( arglist )
2482
<<
trailer -> ( arglist )
2482
*
trailer -> ( arglist )
2482
//
trailer -> ( arglist )
2482
:
trailer -> ( arglist )
2482
&
trailer -> ( arglist )
2482
|
trailer -> ( arglist )
2482
>=
trailer -> ( arglist )
2482
+
trailer -> ( arglist )
2482
/
trailer -> ( arglist )
2482
[
trailer -> ( arglist )
2483
DEDENT
2556
2484
:
lambdef -> lambda varargslist : test
2484
as
lambdef -> lambda varargslist : test
2485
NAME
1677
2485
atom_expr
1678
2485
term
1680
2485
atom
1681
2485
-
1682
2485
factor
1683
2485
arith_expr
1685
2485
True
1686
2485
False
1687
2485
{
1688
2485
(
1689
2485
+
1690
2485
and_expr
1691
2485
and_test
1692
2485
[
1693
2485
STRING
1694
2485
xor_expr
1695
2485
comparison
1696
2485
shift_expr
1697
2485
not_test
1698
2485
power
1699
2485
None
1700
2485
expr
1701
2485
NUMBER
1702
2485
~
1703
2485
lambda
1704
2485
or_test
1705
2485
test
2557
2485
not
1706
2485
lambdef
1707
2486
False
suite -> simple_stmt
2486
if
suite -> simple_stmt
2486
NUMBER
suite -> simple_stmt
2486
nonlocal
suite -> simple_stmt
2486
{
suite -> simple_stmt
2486
@
suite -> simple_stmt
2486
begsim
suite -> simple_stmt
2486
endsim
suite -> simple_stmt
2486
(
suite -> simple_stmt
2486
STRING
suite -> simple_stmt
2486
global
suite -> simple_stmt
2486
yield
suite -> simple_stmt
2486
try
suite -> simple_stmt
2486
conf
suite -> simple_stmt
2486
for
suite -> simple_stmt
2486
not
suite -> simple_stmt
2486
else
suite -> simple_stmt
2486
DEDENT
suite -> simple_stmt
2486
while
suite -> simple_stmt
2486
lambda
suite -> simple_stmt
2486
None
suite -> simple_stmt
2486
elif
suite -> simple_stmt
2486
break
suite -> simple_stmt
2486
resetstats
suite -> simple_stmt
2486
True
suite -> simple_stmt
2486
~
suite -> simple_stmt
2486
-
suite -> simple_stmt
2486
pass
suite -> simple_stmt
2486
def
suite -> simple_stmt
2486
raise
suite -> simple_stmt
2486
with
suite -> simple_stmt
2486
class
suite -> simple_stmt
2486
[
suite -> simple_stmt
2486
return
suite -> simple_stmt
2486
del
suite -> simple_stmt
2486
continue
suite -> simple_stmt
2486
assert
suite -> simple_stmt
2486
+
suite -> simple_stmt
2486
NAME
suite -> simple_stmt
2487
NEWLINE
2558
2488
elif_clause
2559
2488
False
elif_clause -> 
2488
class
elif_clause -> 
2488
DEDENT
elif_clause -> 
2488
elif
2560
2488
~
elif_clause -> 
2488
not
elif_clause -> 
2488
else
elif_clause -> 
2488
@
elif_clause -> 
2488
True
elif_clause -> 
2488
if
elif_clause -> 
2488
STRING
elif_clause -> 
2488
assert
elif_clause -> 
2488
for
elif_clause -> 
2488
(
elif_clause -> 
2488
nonlocal
elif_clause -> 
2488
endsim
elif_clause -> 
2488
None
elif_clause -> 
2488
global
elif_clause -> 
2488
break
elif_clause -> 
2488
continue
elif_clause -> 
2488
try
elif_clause -> 
2488
def
elif_clause -> 
2488
begsim
elif_clause -> 
2488
raise
elif_clause -> 
2488
+
elif_clause -> 
2488
pass
elif_clause -> 
2488
[
elif_clause -> 
2488
conf
elif_clause -> 
2488
while
elif_clause -> 
2488
lambda
elif_clause -> 
2488
resetstats
elif_clause -> 
2488
return
elif_clause -> 
2488
NAME
elif_clause -> 
2488
yield
elif_clause -> 
2488
NUMBER
elif_clause -> 
2488
del
elif_clause -> 
2488
-
elif_clause -> 
2488
{
elif_clause -> 
2488
with
elif_clause -> 
2489
INDENT
2561
2490
else
2562
2490
finally
2563
2490
if
try_stmt -> try : suite except_clause
2490
resetstats
try_stmt -> try : suite except_clause
2490
class
try_stmt -> try : suite except_clause
2490
DEDENT
try_stmt -> try : suite except_clause
2490
conf
try_stmt -> try : suite except_clause
2490
-
try_stmt -> try : suite except_clause
2490
+
try_stmt -> try : suite except_clause
2490
try
try_stmt -> try : suite except_clause
2490
STRING
try_stmt -> try : suite except_clause
2490
for
try_stmt -> try : suite except_clause
2490
~
try_stmt -> try : suite except_clause
2490
not
try_stmt -> try : suite except_clause
2490
while
try_stmt -> try : suite except_clause
2490
[
try_stmt -> try : suite except_clause
2490
True
try_stmt -> try : suite except_clause
2490
NUMBER
try_stmt -> try : suite except_clause
2490
endsim
try_stmt -> try : suite except_clause
2490
NAME
try_stmt -> try : suite except_clause
2490
{
try_stmt -> try : suite except_clause
2490
global
try_stmt -> try : suite except_clause
2490
pass
try_stmt -> try : suite except_clause
2490
None
try_stmt -> try : suite except_clause
2490
begsim
try_stmt -> try : suite except_clause
2490
with
try_stmt -> try : suite except_clause
2490
(
try_stmt -> try : suite except_clause
2490
nonlocal
try_stmt -> try : suite except_clause
2490
assert
try_stmt -> try : suite except_clause
2490
yield
try_stmt -> try : suite except_clause
2490
lambda
try_stmt -> try : suite except_clause
2490
@
try_stmt -> try : suite except_clause
2490
def
try_stmt -> try : suite except_clause
2490
return
try_stmt -> try : suite except_clause
2490
del
try_stmt -> try : suite except_clause
2490
continue
try_stmt -> try : suite except_clause
2490
break
try_stmt -> try : suite except_clause
2490
raise
try_stmt -> try : suite except_clause
2490
False
try_stmt -> try : suite except_clause
2491
NAME
1677
2491
atom_expr
1678
2491
test
2564
2491
term
1680
2491
atom
1681
2491
-
1682
2491
factor
1683
2491
:
2565
2491
arith_expr
1685
2491
True
1686
2491
False
1687
2491
{
1688
2491
(
1689
2491
+
1690
2491
and_expr
1691
2491
and_test
1692
2491
[
1693
2491
STRING
1694
2491
xor_expr
1695
2491
comparison
1696
2491
shift_expr
1697
2491
not_test
1698
2491
power
1699
2491
None
1700
2491
expr
1701
2491
NUMBER
1702
2491
~
1703
2491
lambda
1704
2491
or_test
1705
2491
not
1706
2491
lambdef
1707
2492
INDENT
2566
2493
:
2567
2494
False
suite -> simple_stmt
2494
if
suite -> simple_stmt
2494
NUMBER
suite -> simple_stmt
2494
nonlocal
suite -> simple_stmt
2494
{
suite -> simple_stmt
2494
@
suite -> simple_stmt
2494
begsim
suite -> simple_stmt
2494
endsim
suite -> simple_stmt
2494
(
suite -> simple_stmt
2494
STRING
suite -> simple_stmt
2494
global
suite -> simple_stmt
2494
yield
suite -> simple_stmt
2494
try
suite -> simple_stmt
2494
conf
suite -> simple_stmt
2494
for
suite -> simple_stmt
2494
not
suite -> simple_stmt
2494
else
suite -> simple_stmt
2494
DEDENT
suite -> simple_stmt
2494
while
suite -> simple_stmt
2494
lambda
suite -> simple_stmt
2494
None
suite -> simple_stmt
2494
break
suite -> simple_stmt
2494
resetstats
suite -> simple_stmt
2494
True
suite -> simple_stmt
2494
~
suite -> simple_stmt
2494
-
suite -> simple_stmt
2494
pass
suite -> simple_stmt
2494
def
suite -> simple_stmt
2494
raise
suite -> simple_stmt
2494
with
suite -> simple_stmt
2494
class
suite -> simple_stmt
2494
[
suite -> simple_stmt
2494
return
suite -> simple_stmt
2494
del
suite -> simple_stmt
2494
continue
suite -> simple_stmt
2494
assert
suite -> simple_stmt
2494
+
suite -> simple_stmt
2494
NAME
suite -> simple_stmt
2495
NEWLINE
2568
2496
True
while_stmt -> while test : suite
2496
with
while_stmt -> while test : suite
2496
else
2569
2496
endsim
while_stmt -> while test : suite
2496
while
while_stmt -> while test : suite
2496
raise
while_stmt -> while test : suite
2496
if
while_stmt -> while test : suite
2496
nonlocal
while_stmt -> while test : suite
2496
~
while_stmt -> while test : suite
2496
conf
while_stmt -> while test : suite
2496
lambda
while_stmt -> while test : suite
2496
(
while_stmt -> while test : suite
2496
pass
while_stmt -> while test : suite
2496
continue
while_stmt -> while test : suite
2496
NAME
while_stmt -> while test : suite
2496
def
while_stmt -> while test : suite
2496
class
while_stmt -> while test : suite
2496
break
while_stmt -> while test : suite
2496
return
while_stmt -> while test : suite
2496
begsim
while_stmt -> while test : suite
2496
try
while_stmt -> while test : suite
2496
False
while_stmt -> while test : suite
2496
yield
while_stmt -> while test : suite
2496
resetstats
while_stmt -> while test : suite
2496
global
while_stmt -> while test : suite
2496
-
while_stmt -> while test : suite
2496
[
while_stmt -> while test : suite
2496
for
while_stmt -> while test : suite
2496
not
while_stmt -> while test : suite
2496
{
while_stmt -> while test : suite
2496
@
while_stmt -> while test : suite
2496
None
while_stmt -> while test : suite
2496
NUMBER
while_stmt -> while test : suite
2496
STRING
while_stmt -> while test : suite
2496
+
while_stmt -> while test : suite
2496
assert
while_stmt -> while test : suite
2496
DEDENT
while_stmt -> while test : suite
2496
del
while_stmt -> while test : suite
2497
INDENT
2570
2498
)
2571
2499
:
2572
2500
False
suite -> simple_stmt
2500
if
suite -> simple_stmt
2500
NUMBER
suite -> simple_stmt
2500
nonlocal
suite -> simple_stmt
2500
{
suite -> simple_stmt
2500
@
suite -> simple_stmt
2500
begsim
suite -> simple_stmt
2500
endsim
suite -> simple_stmt
2500
(
suite -> simple_stmt
2500
STRING
suite -> simple_stmt
2500
global
suite -> simple_stmt
2500
yield
suite -> simple_stmt
2500
try
suite -> simple_stmt
2500
conf
suite -> simple_stmt
2500
for
suite -> simple_stmt
2500
not
suite -> simple_stmt
2500
DEDENT
suite -> simple_stmt
2500
while
suite -> simple_stmt
2500
lambda
suite -> simple_stmt
2500
None
suite -> simple_stmt
2500
resetstats
suite -> simple_stmt
2500
break
suite -> simple_stmt
2500
True
suite -> simple_stmt
2500
~
suite -> simple_stmt
2500
-
suite -> simple_stmt
2500
pass
suite -> simple_stmt
2500
def
suite -> simple_stmt
2500
raise
suite -> simple_stmt
2500
with
suite -> simple_stmt
2500
class
suite -> simple_stmt
2500
[
suite -> simple_stmt
2500
return
suite -> simple_stmt
2500
del
suite -> simple_stmt
2500
continue
suite -> simple_stmt
2500
assert
suite -> simple_stmt
2500
+
suite -> simple_stmt
2500
NAME
suite -> simple_stmt
2501
resetstats
classdef -> class NAME : suite
2501
with
classdef -> class NAME : suite
2501
def
classdef -> class NAME : suite
2501
True
classdef -> class NAME : suite
2501
lambda
classdef -> class NAME : suite
2501
None
classdef -> class NAME : suite
2501
conf
classdef -> class NAME : suite
2501
NAME
classdef -> class NAME : suite
2501
@
classdef -> class NAME : suite
2501
False
classdef -> class NAME : suite
2501
nonlocal
classdef -> class NAME : suite
2501
class
classdef -> class NAME : suite
2501
yield
classdef -> class NAME : suite
2501
continue
classdef -> class NAME : suite
2501
break
classdef -> class NAME : suite
2501
try
classdef -> class NAME : suite
2501
~
classdef -> class NAME : suite
2501
STRING
classdef -> class NAME : suite
2501
{
classdef -> class NAME : suite
2501
if
classdef -> class NAME : suite
2501
not
classdef -> class NAME : suite
2501
global
classdef -> class NAME : suite
2501
while
classdef -> class NAME : suite
2501
return
classdef -> class NAME : suite
2501
endsim
classdef -> class NAME : suite
2501
pass
classdef -> class NAME : suite
2501
[
classdef -> class NAME : suite
2501
(
classdef -> class NAME : suite
2501
-
classdef -> class NAME : suite
2501
del
classdef -> class NAME : suite
2501
raise
classdef -> class NAME : suite
2501
assert
classdef -> class NAME : suite
2501
NUMBER
classdef -> class NAME : suite
2501
DEDENT
classdef -> class NAME : suite
2501
for
classdef -> class NAME : suite
2501
+
classdef -> class NAME : suite
2501
begsim
classdef -> class NAME : suite
2502
INDENT
2573
2503
:
2574
2504
)
2575
2505
yield
with_stmt -> with with_items : suite
2505
NAME
with_stmt -> with with_items : suite
2505
del
with_stmt -> with with_items : suite
2505
False
with_stmt -> with with_items : suite
2505
if
with_stmt -> with with_items : suite
2505
DEDENT
with_stmt -> with with_items : suite
2505
with
with_stmt -> with with_items : suite
2505
pass
with_stmt -> with with_items : suite
2505
begsim
with_stmt -> with with_items : suite
2505
try
with_stmt -> with with_items : suite
2505
NUMBER
with_stmt -> with with_items : suite
2505
nonlocal
with_stmt -> with with_items : suite
2505
not
with_stmt -> with with_items : suite
2505
endsim
with_stmt -> with with_items : suite
2505
True
with_stmt -> with with_items : suite
2505
continue
with_stmt -> with with_items : suite
2505
STRING
with_stmt -> with with_items : suite
2505
raise
with_stmt -> with with_items : suite
2505
global
with_stmt -> with with_items : suite
2505
~
with_stmt -> with with_items : suite
2505
lambda
with_stmt -> with with_items : suite
2505
assert
with_stmt -> with with_items : suite
2505
for
with_stmt -> with with_items : suite
2505
(
with_stmt -> with with_items : suite
2505
None
with_stmt -> with with_items : suite
2505
while
with_stmt -> with with_items : suite
2505
resetstats
with_stmt -> with with_items : suite
2505
[
with_stmt -> with with_items : suite
2505
def
with_stmt -> with with_items : suite
2505
-
with_stmt -> with with_items : suite
2505
+
with_stmt -> with with_items : suite
2505
return
with_stmt -> with with_items : suite
2505
class
with_stmt -> with with_items : suite
2505
@
with_stmt -> with with_items : suite
2505
conf
with_stmt -> with with_items : suite
2505
break
with_stmt -> with with_items : suite
2505
{
with_stmt -> with with_items : suite
2506
>>
power -> atom_expr ** factor
2506
<=
power -> atom_expr ** factor
2506
//
power -> atom_expr ** factor
2506
/
power -> atom_expr ** factor
2506
&
power -> atom_expr ** factor
2506
if
power -> atom_expr ** factor
2506
not
power -> atom_expr ** factor
2506
<
power -> atom_expr ** factor
2506
!=
power -> atom_expr ** factor
2506
,
power -> atom_expr ** factor
2506
>
power -> atom_expr ** factor
2506
*
power -> atom_expr ** factor
2506
==
power -> atom_expr ** factor
2506
|
power -> atom_expr ** factor
2506
is
power -> atom_expr ** factor
2506
and
power -> atom_expr ** factor
2506
<<
power -> atom_expr ** factor
2506
-
power -> atom_expr ** factor
2506
=
power -> atom_expr ** factor
2506
)
power -> atom_expr ** factor
2506
@
power -> atom_expr ** factor
2506
in
power -> atom_expr ** factor
2506
^
power -> atom_expr ** factor
2506
%
power -> atom_expr ** factor
2506
>=
power -> atom_expr ** factor
2506
+
power -> atom_expr ** factor
2506
or
power -> atom_expr ** factor
2507
*
trailer_expr -> trailer trailer_expr
2507
+
trailer_expr -> trailer trailer_expr
2507
if
trailer_expr -> trailer trailer_expr
2507
-
trailer_expr -> trailer trailer_expr
2507
<=
trailer_expr -> trailer trailer_expr
2507
|
trailer_expr -> trailer trailer_expr
2507
@
trailer_expr -> trailer trailer_expr
2507
%
trailer_expr -> trailer trailer_expr
2507
in
trailer_expr -> trailer trailer_expr
2507
<<
trailer_expr -> trailer trailer_expr
2507
**
trailer_expr -> trailer trailer_expr
2507
==
trailer_expr -> trailer trailer_expr
2507
not
trailer_expr -> trailer trailer_expr
2507
,
trailer_expr -> trailer trailer_expr
2507
and
trailer_expr -> trailer trailer_expr
2507
//
trailer_expr -> trailer trailer_expr
2507
^
trailer_expr -> trailer trailer_expr
2507
or
trailer_expr -> trailer trailer_expr
2507
=
trailer_expr -> trailer trailer_expr
2507
>
trailer_expr -> trailer trailer_expr
2507
!=
trailer_expr -> trailer trailer_expr
2507
is
trailer_expr -> trailer trailer_expr
2507
&
trailer_expr -> trailer trailer_expr
2507
>>
trailer_expr -> trailer trailer_expr
2507
/
trailer_expr -> trailer trailer_expr
2507
)
trailer_expr -> trailer trailer_expr
2507
<
trailer_expr -> trailer trailer_expr
2507
>=
trailer_expr -> trailer trailer_expr
2508
]
2576
2509
^
trailer -> . NAME
2509
%
trailer -> . NAME
2509
**
trailer -> . NAME
2509
>>
trailer -> . NAME
2509
>
trailer -> . NAME
2509
in
trailer -> . NAME
2509
[
trailer -> . NAME
2509
is
trailer -> . NAME
2509
,
trailer -> . NAME
2509
<<
trailer -> . NAME
2509
or
trailer -> . NAME
2509
and
trailer -> . NAME
2509
>=
trailer -> . NAME
2509
|
trailer -> . NAME
2509
==
trailer -> . NAME
2509
)
trailer -> . NAME
2509
.
trailer -> . NAME
2509
=
trailer -> . NAME
2509
+
trailer -> . NAME
2509
<
trailer -> . NAME
2509
-
trailer -> . NAME
2509
&
trailer -> . NAME
2509
*
trailer -> . NAME
2509
if
trailer -> . NAME
2509
<=
trailer -> . NAME
2509
(
trailer -> . NAME
2509
not
trailer -> . NAME
2509
//
trailer -> . NAME
2509
@
trailer -> . NAME
2509
!=
trailer -> . NAME
2509
/
trailer -> . NAME
2510
)
2577
2511
[
trailer -> ( )
2511
not
trailer -> ( )
2511
==
trailer -> ( )
2511
**
trailer -> ( )
2511
,
trailer -> ( )
2511
<=
trailer -> ( )
2511
//
trailer -> ( )
2511
<<
trailer -> ( )
2511
<
trailer -> ( )
2511
=
trailer -> ( )
2511
in
trailer -> ( )
2511
or
trailer -> ( )
2511
-
trailer -> ( )
2511
+
trailer -> ( )
2511
&
trailer -> ( )
2511
*
trailer -> ( )
2511
is
trailer -> ( )
2511
>
trailer -> ( )
2511
!=
trailer -> ( )
2511
>>
trailer -> ( )
2511
%
trailer -> ( )
2511
|
trailer -> ( )
2511
)
trailer -> ( )
2511
.
trailer -> ( )
2511
>=
trailer -> ( )
2511
(
trailer -> ( )
2511
and
trailer -> ( )
2511
@
trailer -> ( )
2511
/
trailer -> ( )
2511
^
trailer -> ( )
2511
if
trailer -> ( )
2512
|
term -> factor % term
2512
<<
term -> factor % term
2512
^
term -> factor % term
2512
==
term -> factor % term
2512
-
term -> factor % term
2512
=
term -> factor % term
2512
,
term -> factor % term
2512
is
term -> factor % term
2512
>=
term -> factor % term
2512
>>
term -> factor % term
2512
>
term -> factor % term
2512
in
term -> factor % term
2512
)
term -> factor % term
2512
&
term -> factor % term
2512
if
term -> factor % term
2512
<
term -> factor % term
2512
!=
term -> factor % term
2512
<=
term -> factor % term
2512
not
term -> factor % term
2512
+
term -> factor % term
2512
and
term -> factor % term
2512
or
term -> factor % term
2513
,
term -> factor / term
2513
>>
term -> factor / term
2513
^
term -> factor / term
2513
or
term -> factor / term
2513
+
term -> factor / term
2513
=
term -> factor / term
2513
if
term -> factor / term
2513
>=
term -> factor / term
2513
>
term -> factor / term
2513
-
term -> factor / term
2513
and
term -> factor / term
2513
)
term -> factor / term
2513
not
term -> factor / term
2513
<
term -> factor / term
2513
in
term -> factor / term
2513
==
term -> factor / term
2513
<=
term -> factor / term
2513
is
term -> factor / term
2513
&
term -> factor / term
2513
<<
term -> factor / term
2513
!=
term -> factor / term
2513
|
term -> factor / term
2514
-
term -> factor * term
2514
&
term -> factor * term
2514
and
term -> factor * term
2514
,
term -> factor * term
2514
!=
term -> factor * term
2514
|
term -> factor * term
2514
<<
term -> factor * term
2514
<
term -> factor * term
2514
=
term -> factor * term
2514
if
term -> factor * term
2514
^
term -> factor * term
2514
+
term -> factor * term
2514
in
term -> factor * term
2514
or
term -> factor * term
2514
>>
term -> factor * term
2514
not
term -> factor * term
2514
)
term -> factor * term
2514
==
term -> factor * term
2514
>=
term -> factor * term
2514
<=
term -> factor * term
2514
>
term -> factor * term
2514
is
term -> factor * term
2515
if
term -> factor // term
2515
<
term -> factor // term
2515
and
term -> factor // term
2515
in
term -> factor // term
2515
,
term -> factor // term
2515
>>
term -> factor // term
2515
)
term -> factor // term
2515
<=
term -> factor // term
2515
!=
term -> factor // term
2515
^
term -> factor // term
2515
=
term -> factor // term
2515
|
term -> factor // term
2515
or
term -> factor // term
2515
>=
term -> factor // term
2515
&
term -> factor // term
2515
>
term -> factor // term
2515
+
term -> factor // term
2515
is
term -> factor // term
2515
not
term -> factor // term
2515
<<
term -> factor // term
2515
-
term -> factor // term
2515
==
term -> factor // term
2516
>>
term -> factor @ term
2516
^
term -> factor @ term
2516
&
term -> factor @ term
2516
|
term -> factor @ term
2516
=
term -> factor @ term
2516
if
term -> factor @ term
2516
is
term -> factor @ term
2516
)
term -> factor @ term
2516
<
term -> factor @ term
2516
<<
term -> factor @ term
2516
and
term -> factor @ term
2516
==
term -> factor @ term
2516
>
term -> factor @ term
2516
in
term -> factor @ term
2516
,
term -> factor @ term
2516
>=
term -> factor @ term
2516
+
term -> factor @ term
2516
not
term -> factor @ term
2516
!=
term -> factor @ term
2516
<=
term -> factor @ term
2516
or
term -> factor @ term
2516
-
term -> factor @ term
2517
<<
atom -> [ test_list_comp ]
2517
,
atom -> [ test_list_comp ]
2517
>>
atom -> [ test_list_comp ]
2517
+
atom -> [ test_list_comp ]
2517
-
atom -> [ test_list_comp ]
2517
not
atom -> [ test_list_comp ]
2517
<=
atom -> [ test_list_comp ]
2517
is
atom -> [ test_list_comp ]
2517
[
atom -> [ test_list_comp ]
2517
*
atom -> [ test_list_comp ]
2517
==
atom -> [ test_list_comp ]
2517
@
atom -> [ test_list_comp ]
2517
)
atom -> [ test_list_comp ]
2517
>
atom -> [ test_list_comp ]
2517
=
atom -> [ test_list_comp ]
2517
%
atom -> [ test_list_comp ]
2517
if
atom -> [ test_list_comp ]
2517
>=
atom -> [ test_list_comp ]
2517
//
atom -> [ test_list_comp ]
2517
.
atom -> [ test_list_comp ]
2517
in
atom -> [ test_list_comp ]
2517
**
atom -> [ test_list_comp ]
2517
and
atom -> [ test_list_comp ]
2517
/
atom -> [ test_list_comp ]
2517
or
atom -> [ test_list_comp ]
2517
!=
atom -> [ test_list_comp ]
2517
<
atom -> [ test_list_comp ]
2517
^
atom -> [ test_list_comp ]
2517
&
atom -> [ test_list_comp ]
2517
(
atom -> [ test_list_comp ]
2517
|
atom -> [ test_list_comp ]
2518
)
shift_expr -> arith_expr >> shift_expr
2518
<
shift_expr -> arith_expr >> shift_expr
2518
^
shift_expr -> arith_expr >> shift_expr
2518
=
shift_expr -> arith_expr >> shift_expr
2518
in
shift_expr -> arith_expr >> shift_expr
2518
==
shift_expr -> arith_expr >> shift_expr
2518
!=
shift_expr -> arith_expr >> shift_expr
2518
>=
shift_expr -> arith_expr >> shift_expr
2518
not
shift_expr -> arith_expr >> shift_expr
2518
and
shift_expr -> arith_expr >> shift_expr
2518
is
shift_expr -> arith_expr >> shift_expr
2518
,
shift_expr -> arith_expr >> shift_expr
2518
&
shift_expr -> arith_expr >> shift_expr
2518
>
shift_expr -> arith_expr >> shift_expr
2518
|
shift_expr -> arith_expr >> shift_expr
2518
<=
shift_expr -> arith_expr >> shift_expr
2518
or
shift_expr -> arith_expr >> shift_expr
2518
if
shift_expr -> arith_expr >> shift_expr
2519
,
shift_expr -> arith_expr << shift_expr
2519
if
shift_expr -> arith_expr << shift_expr
2519
&
shift_expr -> arith_expr << shift_expr
2519
>=
shift_expr -> arith_expr << shift_expr
2519
<=
shift_expr -> arith_expr << shift_expr
2519
or
shift_expr -> arith_expr << shift_expr
2519
in
shift_expr -> arith_expr << shift_expr
2519
!=
shift_expr -> arith_expr << shift_expr
2519
^
shift_expr -> arith_expr << shift_expr
2519
<
shift_expr -> arith_expr << shift_expr
2519
|
shift_expr -> arith_expr << shift_expr
2519
==
shift_expr -> arith_expr << shift_expr
2519
not
shift_expr -> arith_expr << shift_expr
2519
is
shift_expr -> arith_expr << shift_expr
2519
=
shift_expr -> arith_expr << shift_expr
2519
and
shift_expr -> arith_expr << shift_expr
2519
>
shift_expr -> arith_expr << shift_expr
2519
)
shift_expr -> arith_expr << shift_expr
2520
is
expr -> xor_expr | expr
2520
)
expr -> xor_expr | expr
2520
or
expr -> xor_expr | expr
2520
>
expr -> xor_expr | expr
2520
and
expr -> xor_expr | expr
2520
,
expr -> xor_expr | expr
2520
in
expr -> xor_expr | expr
2520
=
expr -> xor_expr | expr
2520
if
expr -> xor_expr | expr
2520
<=
expr -> xor_expr | expr
2520
not
expr -> xor_expr | expr
2520
==
expr -> xor_expr | expr
2520
>=
expr -> xor_expr | expr
2520
<
expr -> xor_expr | expr
2520
!=
expr -> xor_expr | expr
2521
>=
xor_expr -> and_expr ^ xor_expr
2521
>
xor_expr -> and_expr ^ xor_expr
2521
or
xor_expr -> and_expr ^ xor_expr
2521
and
xor_expr -> and_expr ^ xor_expr
2521
<=
xor_expr -> and_expr ^ xor_expr
2521
in
xor_expr -> and_expr ^ xor_expr
2521
==
xor_expr -> and_expr ^ xor_expr
2521
)
xor_expr -> and_expr ^ xor_expr
2521
if
xor_expr -> and_expr ^ xor_expr
2521
,
xor_expr -> and_expr ^ xor_expr
2521
!=
xor_expr -> and_expr ^ xor_expr
2521
=
xor_expr -> and_expr ^ xor_expr
2521
not
xor_expr -> and_expr ^ xor_expr
2521
<
xor_expr -> and_expr ^ xor_expr
2521
is
xor_expr -> and_expr ^ xor_expr
2521
|
xor_expr -> and_expr ^ xor_expr
2522
@
atom -> ( test_list_comp )
2522
<
atom -> ( test_list_comp )
2522
and
atom -> ( test_list_comp )
2522
)
atom -> ( test_list_comp )
2522
if
atom -> ( test_list_comp )
2522
&
atom -> ( test_list_comp )
2522
=
atom -> ( test_list_comp )
2522
*
atom -> ( test_list_comp )
2522
%
atom -> ( test_list_comp )
2522
[
atom -> ( test_list_comp )
2522
//
atom -> ( test_list_comp )
2522
<<
atom -> ( test_list_comp )
2522
.
atom -> ( test_list_comp )
2522
/
atom -> ( test_list_comp )
2522
>=
atom -> ( test_list_comp )
2522
or
atom -> ( test_list_comp )
2522
>
atom -> ( test_list_comp )
2522
-
atom -> ( test_list_comp )
2522
|
atom -> ( test_list_comp )
2522
**
atom -> ( test_list_comp )
2522
is
atom -> ( test_list_comp )
2522
==
atom -> ( test_list_comp )
2522
not
atom -> ( test_list_comp )
2522
in
atom -> ( test_list_comp )
2522
!=
atom -> ( test_list_comp )
2522
^
atom -> ( test_list_comp )
2522
,
atom -> ( test_list_comp )
2522
(
atom -> ( test_list_comp )
2522
<=
atom -> ( test_list_comp )
2522
+
atom -> ( test_list_comp )
2522
>>
atom -> ( test_list_comp )
2523
and
arith_expr -> term + arith_expr
2523
<
arith_expr -> term + arith_expr
2523
|
arith_expr -> term + arith_expr
2523
>=
arith_expr -> term + arith_expr
2523
>>
arith_expr -> term + arith_expr
2523
,
arith_expr -> term + arith_expr
2523
if
arith_expr -> term + arith_expr
2523
>
arith_expr -> term + arith_expr
2523
in
arith_expr -> term + arith_expr
2523
or
arith_expr -> term + arith_expr
2523
<=
arith_expr -> term + arith_expr
2523
)
arith_expr -> term + arith_expr
2523
not
arith_expr -> term + arith_expr
2523
^
arith_expr -> term + arith_expr
2523
!=
arith_expr -> term + arith_expr
2523
&
arith_expr -> term + arith_expr
2523
==
arith_expr -> term + arith_expr
2523
=
arith_expr -> term + arith_expr
2523
<<
arith_expr -> term + arith_expr
2523
is
arith_expr -> term + arith_expr
2524
<<
arith_expr -> term - arith_expr
2524
if
arith_expr -> term - arith_expr
2524
<
arith_expr -> term - arith_expr
2524
=
arith_expr -> term - arith_expr
2524
<=
arith_expr -> term - arith_expr
2524
and
arith_expr -> term - arith_expr
2524
in
arith_expr -> term - arith_expr
2524
&
arith_expr -> term - arith_expr
2524
|
arith_expr -> term - arith_expr
2524
==
arith_expr -> term - arith_expr
2524
is
arith_expr -> term - arith_expr
2524
)
arith_expr -> term - arith_expr
2524
>>
arith_expr -> term - arith_expr
2524
!=
arith_expr -> term - arith_expr
2524
>
arith_expr -> term - arith_expr
2524
or
arith_expr -> term - arith_expr
2524
,
arith_expr -> term - arith_expr
2524
>=
arith_expr -> term - arith_expr
2524
^
arith_expr -> term - arith_expr
2524
not
arith_expr -> term - arith_expr
2525
,
and_expr -> shift_expr & and_expr
2525
>=
and_expr -> shift_expr & and_expr
2525
!=
and_expr -> shift_expr & and_expr
2525
or
and_expr -> shift_expr & and_expr
2525
is
and_expr -> shift_expr & and_expr
2525
=
and_expr -> shift_expr & and_expr
2525
^
and_expr -> shift_expr & and_expr
2525
if
and_expr -> shift_expr & and_expr
2525
==
and_expr -> shift_expr & and_expr
2525
not
and_expr -> shift_expr & and_expr
2525
<
and_expr -> shift_expr & and_expr
2525
)
and_expr -> shift_expr & and_expr
2525
>
and_expr -> shift_expr & and_expr
2525
in
and_expr -> shift_expr & and_expr
2525
and
and_expr -> shift_expr & and_expr
2525
|
and_expr -> shift_expr & and_expr
2525
<=
and_expr -> shift_expr & and_expr
2526
if
and_test -> not_test and and_test
2526
,
and_test -> not_test and and_test
2526
or
and_test -> not_test and and_test
2526
)
and_test -> not_test and and_test
2526
=
and_test -> not_test and and_test
2527
else
2578
2528
=
lambdef -> lambda : test
2528
,
lambdef -> lambda : test
2528
)
lambdef -> lambda : test
2529
NAME
2107
2529
atom_expr
2108
2529
atom
2109
2529
-
2110
2529
factor
2111
2529
[
2112
2529
True
2113
2529
arith_expr
2114
2529
xor_expr
2115
2529
False
2116
2529
{
2117
2529
+
2118
2529
and_expr
2119
2529
(
2120
2529
STRING
2121
2529
power
2122
2529
term
2123
2529
comparison
2124
2529
shift_expr
2125
2529
not_test
2126
2529
or_test
2127
2529
lambdef
2128
2529
lambda
2129
2529
None
2130
2529
expr
2132
2529
NUMBER
2133
2529
and_test
2134
2529
~
2135
2529
test
2579
2529
not
2136
2530
)
comparison -> expr comp_op comparison
2530
=
comparison -> expr comp_op comparison
2530
,
comparison -> expr comp_op comparison
2530
and
comparison -> expr comp_op comparison
2530
if
comparison -> expr comp_op comparison
2530
or
comparison -> expr comp_op comparison
2531
)
or_test -> and_test or or_test
2531
=
or_test -> and_test or or_test
2531
,
or_test -> and_test or or_test
2531
if
or_test -> and_test or or_test
2532
(
trailer -> [ subscriptlist ]
2532
//
trailer -> [ subscriptlist ]
2532
&
trailer -> [ subscriptlist ]
2532
>
trailer -> [ subscriptlist ]
2532
in
trailer -> [ subscriptlist ]
2532
>>
trailer -> [ subscriptlist ]
2532
[
trailer -> [ subscriptlist ]
2532
<=
trailer -> [ subscriptlist ]
2532
-
trailer -> [ subscriptlist ]
2532
!=
trailer -> [ subscriptlist ]
2532
|
trailer -> [ subscriptlist ]
2532
=
trailer -> [ subscriptlist ]
2532
not
trailer -> [ subscriptlist ]
2532
.
trailer -> [ subscriptlist ]
2532
>=
trailer -> [ subscriptlist ]
2532
or
trailer -> [ subscriptlist ]
2532
*
trailer -> [ subscriptlist ]
2532
<<
trailer -> [ subscriptlist ]
2532
**
trailer -> [ subscriptlist ]
2532
==
trailer -> [ subscriptlist ]
2532
+
trailer -> [ subscriptlist ]
2532
is
trailer -> [ subscriptlist ]
2532
/
trailer -> [ subscriptlist ]
2532
^
trailer -> [ subscriptlist ]
2532
and
trailer -> [ subscriptlist ]
2532
NEWLINE
trailer -> [ subscriptlist ]
2532
@
trailer -> [ subscriptlist ]
2532
if
trailer -> [ subscriptlist ]
2532
<
trailer -> [ subscriptlist ]
2532
%
trailer -> [ subscriptlist ]
2533
or
trailer -> ( arglist )
2533
NEWLINE
trailer -> ( arglist )
2533
>>
trailer -> ( arglist )
2533
<=
trailer -> ( arglist )
2533
**
trailer -> ( arglist )
2533
<
trailer -> ( arglist )
2533
(
trailer -> ( arglist )
2533
-
trailer -> ( arglist )
2533
not
trailer -> ( arglist )
2533
if
trailer -> ( arglist )
2533
and
trailer -> ( arglist )
2533
.
trailer -> ( arglist )
2533
is
trailer -> ( arglist )
2533
>
trailer -> ( arglist )
2533
in
trailer -> ( arglist )
2533
!=
trailer -> ( arglist )
2533
==
trailer -> ( arglist )
2533
%
trailer -> ( arglist )
2533
@
trailer -> ( arglist )
2533
^
trailer -> ( arglist )
2533
<<
trailer -> ( arglist )
2533
*
trailer -> ( arglist )
2533
//
trailer -> ( arglist )
2533
&
trailer -> ( arglist )
2533
|
trailer -> ( arglist )
2533
>=
trailer -> ( arglist )
2533
+
trailer -> ( arglist )
2533
/
trailer -> ( arglist )
2533
=
trailer -> ( arglist )
2533
[
trailer -> ( arglist )
2534
NAME
1830
2534
atom_expr
1831
2534
term
1832
2534
atom
1833
2534
-
1834
2534
factor
1835
2534
True
1836
2534
arith_expr
1837
2534
xor_expr
1838
2534
False
1839
2534
{
1840
2534
+
1841
2534
and_expr
1842
2534
[
1843
2534
(
1844
2534
STRING
1845
2534
comparison
1846
2534
shift_expr
1847
2534
not_test
1848
2534
power
1849
2534
lambdef
1850
2534
None
1851
2534
expr
1852
2534
NUMBER
1853
2534
and_test
1854
2534
or_test
1855
2534
~
1856
2534
test
2580
2534
lambda
1858
2534
not
1859
2535
=
lambdef -> lambda varargslist : test
2535
NEWLINE
lambdef -> lambda varargslist : test
2536
STRING
elif_clause -> elif test : suite elif_clause
2536
global
elif_clause -> elif test : suite elif_clause
2536
begsim
elif_clause -> elif test : suite elif_clause
2536
class
elif_clause -> elif test : suite elif_clause
2536
NUMBER
elif_clause -> elif test : suite elif_clause
2536
+
elif_clause -> elif test : suite elif_clause
2536
NAME
elif_clause -> elif test : suite elif_clause
2536
@
elif_clause -> elif test : suite elif_clause
2536
conf
elif_clause -> elif test : suite elif_clause
2536
del
elif_clause -> elif test : suite elif_clause
2536
endsim
elif_clause -> elif test : suite elif_clause
2536
break
elif_clause -> elif test : suite elif_clause
2536
lambda
elif_clause -> elif test : suite elif_clause
2536
True
elif_clause -> elif test : suite elif_clause
2536
$
elif_clause -> elif test : suite elif_clause
2536
try
elif_clause -> elif test : suite elif_clause
2536
assert
elif_clause -> elif test : suite elif_clause
2536
(
elif_clause -> elif test : suite elif_clause
2536
{
elif_clause -> elif test : suite elif_clause
2536
else
elif_clause -> elif test : suite elif_clause
2536
raise
elif_clause -> elif test : suite elif_clause
2536
if
elif_clause -> elif test : suite elif_clause
2536
NEWLINE
elif_clause -> elif test : suite elif_clause
2536
while
elif_clause -> elif test : suite elif_clause
2536
def
elif_clause -> elif test : suite elif_clause
2536
return
elif_clause -> elif test : suite elif_clause
2536
with
elif_clause -> elif test : suite elif_clause
2536
pass
elif_clause -> elif test : suite elif_clause
2536
False
elif_clause -> elif test : suite elif_clause
2536
yield
elif_clause -> elif test : suite elif_clause
2536
for
elif_clause -> elif test : suite elif_clause
2536
continue
elif_clause -> elif test : suite elif_clause
2536
resetstats
elif_clause -> elif test : suite elif_clause
2536
-
elif_clause -> elif test : suite elif_clause
2536
nonlocal
elif_clause -> elif test : suite elif_clause
2536
None
elif_clause -> elif test : suite elif_clause
2536
[
elif_clause -> elif test : suite elif_clause
2536
not
elif_clause -> elif test : suite elif_clause
2536
~
elif_clause -> elif test : suite elif_clause
2537
varargslist
2581
2537
vfpdef
343
2537
:
2582
2537
NAME
342
2538
,
comp_iter -> 
2538
if
2414
2538
comp_for
2417
2538
for
1055
2538
comp_if
2416
2538
comp_iter
2583
2538
)
comp_iter -> 
2539
,
test_nocond -> lambdef_nocond
2539
if
test_nocond -> lambdef_nocond
2539
)
test_nocond -> lambdef_nocond
2539
for
test_nocond -> lambdef_nocond
2540
,
test_nocond -> or_test
2540
for
test_nocond -> or_test
2540
)
test_nocond -> or_test
2540
if
test_nocond -> or_test
2541
DEDENT
confbody -> NAME test NEWLINE confbody
2542
(
trailer -> [ subscriptlist ]
2542
for
trailer -> [ subscriptlist ]
2542
//
trailer -> [ subscriptlist ]
2542
&
trailer -> [ subscriptlist ]
2542
>
trailer -> [ subscriptlist ]
2542
in
trailer -> [ subscriptlist ]
2542
>>
trailer -> [ subscriptlist ]
2542
[
trailer -> [ subscriptlist ]
2542
<=
trailer -> [ subscriptlist ]
2542
-
trailer -> [ subscriptlist ]
2542
)
trailer -> [ subscriptlist ]
2542
!=
trailer -> [ subscriptlist ]
2542
|
trailer -> [ subscriptlist ]
2542
not
trailer -> [ subscriptlist ]
2542
.
trailer -> [ subscriptlist ]
2542
>=
trailer -> [ subscriptlist ]
2542
or
trailer -> [ subscriptlist ]
2542
*
trailer -> [ subscriptlist ]
2542
<<
trailer -> [ subscriptlist ]
2542
**
trailer -> [ subscriptlist ]
2542
==
trailer -> [ subscriptlist ]
2542
+
trailer -> [ subscriptlist ]
2542
is
trailer -> [ subscriptlist ]
2542
/
trailer -> [ subscriptlist ]
2542
^
trailer -> [ subscriptlist ]
2542
and
trailer -> [ subscriptlist ]
2542
@
trailer -> [ subscriptlist ]
2542
if
trailer -> [ subscriptlist ]
2542
<
trailer -> [ subscriptlist ]
2542
%
trailer -> [ subscriptlist ]
2543
or
trailer -> ( arglist )
2543
>>
trailer -> ( arglist )
2543
<=
trailer -> ( arglist )
2543
**
trailer -> ( arglist )
2543
<
trailer -> ( arglist )
2543
(
trailer -> ( arglist )
2543
-
trailer -> ( arglist )
2543
not
trailer -> ( arglist )
2543
if
trailer -> ( arglist )
2543
and
trailer -> ( arglist )
2543
.
trailer -> ( arglist )
2543
is
trailer -> ( arglist )
2543
)
trailer -> ( arglist )
2543
>
trailer -> ( arglist )
2543
in
trailer -> ( arglist )
2543
!=
trailer -> ( arglist )
2543
==
trailer -> ( arglist )
2543
%
trailer -> ( arglist )
2543
@
trailer -> ( arglist )
2543
^
trailer -> ( arglist )
2543
<<
trailer -> ( arglist )
2543
for
trailer -> ( arglist )
2543
*
trailer -> ( arglist )
2543
//
trailer -> ( arglist )
2543
&
trailer -> ( arglist )
2543
|
trailer -> ( arglist )
2543
>=
trailer -> ( arglist )
2543
+
trailer -> ( arglist )
2543
/
trailer -> ( arglist )
2543
[
trailer -> ( arglist )
2544
:
2584
2545
NAME
1933
2545
atom_expr
1934
2545
atom
1935
2545
-
1936
2545
factor
1937
2545
True
1938
2545
lambda
2439
2545
arith_expr
1939
2545
False
1940
2545
{
1941
2545
+
1942
2545
and_expr
1943
2545
[
1944
2545
(
1945
2545
STRING
1946
2545
power
1947
2545
term
1948
2545
comparison
1949
2545
test_nocond
2585
2545
shift_expr
1950
2545
not_test
1951
2545
None
1953
2545
lambdef_nocond
2441
2545
xor_expr
1954
2545
expr
1955
2545
NUMBER
1956
2545
and_test
1957
2545
or_test
2442
2545
~
1958
2545
not
1959
2546
)
comp_if -> if test_nocond comp_iter
2547
break
for_stmt -> for expr_list in test_list : suite else : suite
2547
assert
for_stmt -> for expr_list in test_list : suite else : suite
2547
continue
for_stmt -> for expr_list in test_list : suite else : suite
2547
lambda
for_stmt -> for expr_list in test_list : suite else : suite
2547
with
for_stmt -> for expr_list in test_list : suite else : suite
2547
NEWLINE
for_stmt -> for expr_list in test_list : suite else : suite
2547
return
for_stmt -> for expr_list in test_list : suite else : suite
2547
class
for_stmt -> for expr_list in test_list : suite else : suite
2547
def
for_stmt -> for expr_list in test_list : suite else : suite
2547
False
for_stmt -> for expr_list in test_list : suite else : suite
2547
None
for_stmt -> for expr_list in test_list : suite else : suite
2547
if
for_stmt -> for expr_list in test_list : suite else : suite
2547
NAME
for_stmt -> for expr_list in test_list : suite else : suite
2547
~
for_stmt -> for expr_list in test_list : suite else : suite
2547
@
for_stmt -> for expr_list in test_list : suite else : suite
2547
conf
for_stmt -> for expr_list in test_list : suite else : suite
2547
try
for_stmt -> for expr_list in test_list : suite else : suite
2547
(
for_stmt -> for expr_list in test_list : suite else : suite
2547
STRING
for_stmt -> for expr_list in test_list : suite else : suite
2547
endsim
for_stmt -> for expr_list in test_list : suite else : suite
2547
resetstats
for_stmt -> for expr_list in test_list : suite else : suite
2547
True
for_stmt -> for expr_list in test_list : suite else : suite
2547
$
for_stmt -> for expr_list in test_list : suite else : suite
2547
not
for_stmt -> for expr_list in test_list : suite else : suite
2547
+
for_stmt -> for expr_list in test_list : suite else : suite
2547
{
for_stmt -> for expr_list in test_list : suite else : suite
2547
del
for_stmt -> for expr_list in test_list : suite else : suite
2547
global
for_stmt -> for expr_list in test_list : suite else : suite
2547
pass
for_stmt -> for expr_list in test_list : suite else : suite
2547
NUMBER
for_stmt -> for expr_list in test_list : suite else : suite
2547
while
for_stmt -> for expr_list in test_list : suite else : suite
2547
[
for_stmt -> for expr_list in test_list : suite else : suite
2547
yield
for_stmt -> for expr_list in test_list : suite else : suite
2547
for
for_stmt -> for expr_list in test_list : suite else : suite
2547
-
for_stmt -> for expr_list in test_list : suite else : suite
2547
nonlocal
for_stmt -> for expr_list in test_list : suite else : suite
2547
raise
for_stmt -> for expr_list in test_list : suite else : suite
2547
begsim
for_stmt -> for expr_list in test_list : suite else : suite
2548
(
trailer -> [ subscriptlist ]
2548
for
trailer -> [ subscriptlist ]
2548
//
trailer -> [ subscriptlist ]
2548
&
trailer -> [ subscriptlist ]
2548
>
trailer -> [ subscriptlist ]
2548
in
trailer -> [ subscriptlist ]
2548
>>
trailer -> [ subscriptlist ]
2548
[
trailer -> [ subscriptlist ]
2548
<=
trailer -> [ subscriptlist ]
2548
-
trailer -> [ subscriptlist ]
2548
!=
trailer -> [ subscriptlist ]
2548
|
trailer -> [ subscriptlist ]
2548
not
trailer -> [ subscriptlist ]
2548
.
trailer -> [ subscriptlist ]
2548
]
trailer -> [ subscriptlist ]
2548
>=
trailer -> [ subscriptlist ]
2548
or
trailer -> [ subscriptlist ]
2548
*
trailer -> [ subscriptlist ]
2548
<<
trailer -> [ subscriptlist ]
2548
**
trailer -> [ subscriptlist ]
2548
==
trailer -> [ subscriptlist ]
2548
+
trailer -> [ subscriptlist ]
2548
is
trailer -> [ subscriptlist ]
2548
/
trailer -> [ subscriptlist ]
2548
^
trailer -> [ subscriptlist ]
2548
and
trailer -> [ subscriptlist ]
2548
@
trailer -> [ subscriptlist ]
2548
if
trailer -> [ subscriptlist ]
2548
<
trailer -> [ subscriptlist ]
2548
%
trailer -> [ subscriptlist ]
2549
or
trailer -> ( arglist )
2549
>>
trailer -> ( arglist )
2549
<=
trailer -> ( arglist )
2549
**
trailer -> ( arglist )
2549
<
trailer -> ( arglist )
2549
(
trailer -> ( arglist )
2549
-
trailer -> ( arglist )
2549
not
trailer -> ( arglist )
2549
if
trailer -> ( arglist )
2549
and
trailer -> ( arglist )
2549
.
trailer -> ( arglist )
2549
is
trailer -> ( arglist )
2549
>
trailer -> ( arglist )
2549
in
trailer -> ( arglist )
2549
!=
trailer -> ( arglist )
2549
==
trailer -> ( arglist )
2549
%
trailer -> ( arglist )
2549
@
trailer -> ( arglist )
2549
^
trailer -> ( arglist )
2549
<<
trailer -> ( arglist )
2549
for
trailer -> ( arglist )
2549
*
trailer -> ( arglist )
2549
//
trailer -> ( arglist )
2549
&
trailer -> ( arglist )
2549
|
trailer -> ( arglist )
2549
>=
trailer -> ( arglist )
2549
+
trailer -> ( arglist )
2549
]
trailer -> ( arglist )
2549
/
trailer -> ( arglist )
2549
[
trailer -> ( arglist )
2550
]
comp_if -> if test_nocond comp_iter
2551
:
2586
2552
NAME
2016
2552
atom_expr
2017
2552
atom
2018
2552
-
2019
2552
factor
2020
2552
True
2021
2552
lambda
2473
2552
arith_expr
2022
2552
False
2023
2552
{
2024
2552
+
2025
2552
and_expr
2026
2552
[
2027
2552
(
2028
2552
STRING
2029
2552
term
2030
2552
and_test
2031
2552
comparison
2032
2552
shift_expr
2033
2552
not_test
2034
2552
power
2035
2552
None
2036
2552
test_nocond
2587
2552
xor_expr
2037
2552
expr
2038
2552
NUMBER
2039
2552
or_test
2474
2552
~
2040
2552
not
2041
2552
lambdef_nocond
2475
2553
NAME
12
2553
True
1
2553
atom_expr
5
2553
term
29
2553
atom
4
2553
simple_stmt
1234
2553
factor
11
2553
shift_expr
7
2553
arith_expr
8
2553
False
27
2553
and_expr
9
2553
suite
2588
2553
xor_expr
40
2553
{
41
2553
(
13
2553
[
15
2553
resetstats
16
2553
STRING
46
2553
raise
19
2553
small_stmt
21
2553
test
47
2553
comparison
28
2553
or_test
23
2553
~
55
2553
-
43
2553
lambda
53
2553
+
31
2553
not_test
33
2553
and_test
48
2553
power
32
2553
pass
73
2553
None
34
2553
lambdef
37
2553
not
42
2553
NUMBER
39
2553
expr
50
2553
continue
74
2553
begsim
49
2553
del_stmt
75
2553
NEWLINE
1236
2553
return
54
2553
nonlocal
76
2553
return_stmt
56
2553
endsim
57
2553
test_list
70
2553
raise_stmt
59
2553
assert_stmt
78
2553
stat_stmt
79
2553
global_stmt
61
2553
continue_stmt
62
2553
assert
63
2553
break_stmt
64
2553
nonlocal_stmt
80
2553
expr_stmt
81
2553
break
82
2553
del
66
2553
global
67
2553
yield
83
2553
pass_stmt
68
2553
flow_stmt
71
2553
yield_stmt
72
2553
sim_stmt
84
2554
DEDENT
2589
2555
except
1238
2555
maybe_except_clause
2590
2555
except_clause
2321
2555
False
maybe_except_clause -> 
2555
del
maybe_except_clause -> 
2555
True
maybe_except_clause -> 
2555
{
maybe_except_clause -> 
2555
def
maybe_except_clause -> 
2555
(
maybe_except_clause -> 
2555
$
maybe_except_clause -> 
2555
continue
maybe_except_clause -> 
2555
endsim
maybe_except_clause -> 
2555
try
maybe_except_clause -> 
2555
None
maybe_except_clause -> 
2555
global
maybe_except_clause -> 
2555
resetstats
maybe_except_clause -> 
2555
class
maybe_except_clause -> 
2555
begsim
maybe_except_clause -> 
2555
STRING
maybe_except_clause -> 
2555
raise
maybe_except_clause -> 
2555
-
maybe_except_clause -> 
2555
@
maybe_except_clause -> 
2555
yield
maybe_except_clause -> 
2555
break
maybe_except_clause -> 
2555
assert
maybe_except_clause -> 
2555
else
maybe_except_clause -> 
2555
NEWLINE
maybe_except_clause -> 
2555
[
maybe_except_clause -> 
2555
NAME
maybe_except_clause -> 
2555
lambda
maybe_except_clause -> 
2555
finally
maybe_except_clause -> 
2555
while
maybe_except_clause -> 
2555
for
maybe_except_clause -> 
2555
not
maybe_except_clause -> 
2555
conf
maybe_except_clause -> 
2555
pass
maybe_except_clause -> 
2555
nonlocal
maybe_except_clause -> 
2555
return
maybe_except_clause -> 
2555
if
maybe_except_clause -> 
2555
+
maybe_except_clause -> 
2555
with
maybe_except_clause -> 
2555
~
maybe_except_clause -> 
2555
NUMBER
maybe_except_clause -> 
2556
(
suite -> NEWLINE INDENT stmt_list DEDENT
2556
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2556
try
suite -> NEWLINE INDENT stmt_list DEDENT
2556
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2556
@
suite -> NEWLINE INDENT stmt_list DEDENT
2556
None
suite -> NEWLINE INDENT stmt_list DEDENT
2556
$
suite -> NEWLINE INDENT stmt_list DEDENT
2556
if
suite -> NEWLINE INDENT stmt_list DEDENT
2556
class
suite -> NEWLINE INDENT stmt_list DEDENT
2556
[
suite -> NEWLINE INDENT stmt_list DEDENT
2556
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2556
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2556
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2556
-
suite -> NEWLINE INDENT stmt_list DEDENT
2556
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2556
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2556
False
suite -> NEWLINE INDENT stmt_list DEDENT
2556
finally
suite -> NEWLINE INDENT stmt_list DEDENT
2556
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2556
break
suite -> NEWLINE INDENT stmt_list DEDENT
2556
else
suite -> NEWLINE INDENT stmt_list DEDENT
2556
global
suite -> NEWLINE INDENT stmt_list DEDENT
2556
+
suite -> NEWLINE INDENT stmt_list DEDENT
2556
{
suite -> NEWLINE INDENT stmt_list DEDENT
2556
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2556
~
suite -> NEWLINE INDENT stmt_list DEDENT
2556
for
suite -> NEWLINE INDENT stmt_list DEDENT
2556
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
2556
with
suite -> NEWLINE INDENT stmt_list DEDENT
2556
not
suite -> NEWLINE INDENT stmt_list DEDENT
2556
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2556
while
suite -> NEWLINE INDENT stmt_list DEDENT
2556
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2556
True
suite -> NEWLINE INDENT stmt_list DEDENT
2556
def
suite -> NEWLINE INDENT stmt_list DEDENT
2556
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2556
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2556
return
suite -> NEWLINE INDENT stmt_list DEDENT
2556
except
suite -> NEWLINE INDENT stmt_list DEDENT
2556
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2556
del
suite -> NEWLINE INDENT stmt_list DEDENT
2557
as
test -> or_test if or_test else test
2557
:
test -> or_test if or_test else test
2558
STRING
simple_stmt -> small_stmt NEWLINE
2558
while
simple_stmt -> small_stmt NEWLINE
2558
~
simple_stmt -> small_stmt NEWLINE
2558
del
simple_stmt -> small_stmt NEWLINE
2558
global
simple_stmt -> small_stmt NEWLINE
2558
NUMBER
simple_stmt -> small_stmt NEWLINE
2558
True
simple_stmt -> small_stmt NEWLINE
2558
DEDENT
simple_stmt -> small_stmt NEWLINE
2558
NAME
simple_stmt -> small_stmt NEWLINE
2558
with
simple_stmt -> small_stmt NEWLINE
2558
(
simple_stmt -> small_stmt NEWLINE
2558
-
simple_stmt -> small_stmt NEWLINE
2558
+
simple_stmt -> small_stmt NEWLINE
2558
continue
simple_stmt -> small_stmt NEWLINE
2558
endsim
simple_stmt -> small_stmt NEWLINE
2558
try
simple_stmt -> small_stmt NEWLINE
2558
[
simple_stmt -> small_stmt NEWLINE
2558
raise
simple_stmt -> small_stmt NEWLINE
2558
if
simple_stmt -> small_stmt NEWLINE
2558
{
simple_stmt -> small_stmt NEWLINE
2558
begsim
simple_stmt -> small_stmt NEWLINE
2558
return
simple_stmt -> small_stmt NEWLINE
2558
assert
simple_stmt -> small_stmt NEWLINE
2558
nonlocal
simple_stmt -> small_stmt NEWLINE
2558
elif
simple_stmt -> small_stmt NEWLINE
2558
not
simple_stmt -> small_stmt NEWLINE
2558
conf
simple_stmt -> small_stmt NEWLINE
2558
yield
simple_stmt -> small_stmt NEWLINE
2558
resetstats
simple_stmt -> small_stmt NEWLINE
2558
None
simple_stmt -> small_stmt NEWLINE
2558
else
simple_stmt -> small_stmt NEWLINE
2558
for
simple_stmt -> small_stmt NEWLINE
2558
class
simple_stmt -> small_stmt NEWLINE
2558
@
simple_stmt -> small_stmt NEWLINE
2558
pass
simple_stmt -> small_stmt NEWLINE
2558
lambda
simple_stmt -> small_stmt NEWLINE
2558
False
simple_stmt -> small_stmt NEWLINE
2558
break
simple_stmt -> small_stmt NEWLINE
2558
def
simple_stmt -> small_stmt NEWLINE
2559
else
2591
2559
return
if_stmt -> if test : suite elif_clause
2559
(
if_stmt -> if test : suite elif_clause
2559
del
if_stmt -> if test : suite elif_clause
2559
[
if_stmt -> if test : suite elif_clause
2559
global
if_stmt -> if test : suite elif_clause
2559
raise
if_stmt -> if test : suite elif_clause
2559
+
if_stmt -> if test : suite elif_clause
2559
resetstats
if_stmt -> if test : suite elif_clause
2559
break
if_stmt -> if test : suite elif_clause
2559
try
if_stmt -> if test : suite elif_clause
2559
None
if_stmt -> if test : suite elif_clause
2559
lambda
if_stmt -> if test : suite elif_clause
2559
DEDENT
if_stmt -> if test : suite elif_clause
2559
NUMBER
if_stmt -> if test : suite elif_clause
2559
pass
if_stmt -> if test : suite elif_clause
2559
@
if_stmt -> if test : suite elif_clause
2559
if
if_stmt -> if test : suite elif_clause
2559
False
if_stmt -> if test : suite elif_clause
2559
yield
if_stmt -> if test : suite elif_clause
2559
assert
if_stmt -> if test : suite elif_clause
2559
class
if_stmt -> if test : suite elif_clause
2559
True
if_stmt -> if test : suite elif_clause
2559
with
if_stmt -> if test : suite elif_clause
2559
begsim
if_stmt -> if test : suite elif_clause
2559
not
if_stmt -> if test : suite elif_clause
2559
for
if_stmt -> if test : suite elif_clause
2559
continue
if_stmt -> if test : suite elif_clause
2559
{
if_stmt -> if test : suite elif_clause
2559
nonlocal
if_stmt -> if test : suite elif_clause
2559
endsim
if_stmt -> if test : suite elif_clause
2559
while
if_stmt -> if test : suite elif_clause
2559
~
if_stmt -> if test : suite elif_clause
2559
def
if_stmt -> if test : suite elif_clause
2559
STRING
if_stmt -> if test : suite elif_clause
2559
-
if_stmt -> if test : suite elif_clause
2559
NAME
if_stmt -> if test : suite elif_clause
2559
conf
if_stmt -> if test : suite elif_clause
2560
NAME
85
2560
atom_expr
86
2560
term
87
2560
atom
88
2560
-
89
2560
factor
90
2560
True
91
2560
arith_expr
92
2560
False
94
2560
{
96
2560
(
97
2560
+
95
2560
and_expr
98
2560
and_test
99
2560
[
100
2560
STRING
101
2560
comparison
102
2560
shift_expr
103
2560
not_test
104
2560
power
105
2560
None
106
2560
test
2592
2560
xor_expr
107
2560
expr
108
2560
NUMBER
109
2560
~
110
2560
not
111
2560
or_test
112
2560
lambda
113
2560
lambdef
114
2561
True
1
2561
if
1708
2561
decorated
1709
2561
atom
4
2561
atom_expr
5
2561
while_stmt
1710
2561
try
1711
2561
shift_expr
7
2561
arith_expr
8
2561
and_expr
9
2561
conf
1712
2561
factor
11
2561
NAME
12
2561
(
13
2561
for
1713
2561
[
15
2561
resetstats
16
2561
compound_stmt
1714
2561
while
1715
2561
raise
19
2561
class
1716
2561
small_stmt
1717
2561
or_test
23
2561
for_stmt
1718
2561
try_stmt
1719
2561
def
1720
2561
False
27
2561
comparison
28
2561
term
29
2561
simple_stmt
1721
2561
+
31
2561
power
32
2561
not_test
33
2561
None
34
2561
with
1722
2561
classdef
1723
2561
lambdef
37
2561
if_stmt
1724
2561
NUMBER
39
2561
xor_expr
40
2561
{
41
2561
not
42
2561
-
43
2561
stmt_list
2593
2561
funcdef
1725
2561
decorators
1726
2561
STRING
46
2561
test
47
2561
and_test
48
2561
begsim
49
2561
expr
50
2561
with_stmt
1727
2561
lambda
53
2561
return
54
2561
~
55
2561
confdef
1728
2561
return_stmt
56
2561
endsim
57
2561
@
58
2561
raise_stmt
59
2561
global_stmt
61
2561
continue_stmt
62
2561
assert
63
2561
break_stmt
64
2561
del
66
2561
global
67
2561
pass_stmt
68
2561
test_list
70
2561
flow_stmt
71
2561
yield_stmt
72
2561
stmt
1729
2561
pass
73
2561
continue
74
2561
del_stmt
75
2561
nonlocal
76
2561
decorator
77
2561
assert_stmt
78
2561
stat_stmt
79
2561
nonlocal_stmt
80
2561
expr_stmt
81
2561
break
82
2561
yield
83
2561
sim_stmt
84
2562
:
2594
2563
:
2595
2564
:
2596
2564
as
2597
2565
NAME
12
2565
True
1
2565
atom_expr
5
2565
term
29
2565
NEWLINE
2598
2565
atom
4
2565
simple_stmt
2599
2565
factor
11
2565
shift_expr
7
2565
arith_expr
8
2565
suite
2600
2565
and_expr
9
2565
False
27
2565
xor_expr
40
2565
{
41
2565
(
13
2565
[
15
2565
resetstats
16
2565
STRING
46
2565
raise
19
2565
small_stmt
2601
2565
test
47
2565
comparison
28
2565
or_test
23
2565
~
55
2565
-
43
2565
lambda
53
2565
+
31
2565
not_test
33
2565
and_test
48
2565
power
32
2565
pass
73
2565
None
34
2565
lambdef
37
2565
not
42
2565
NUMBER
39
2565
expr
50
2565
continue
74
2565
begsim
49
2565
del_stmt
75
2565
return
54
2565
nonlocal
76
2565
return_stmt
56
2565
endsim
57
2565
test_list
70
2565
raise_stmt
59
2565
assert_stmt
78
2565
stat_stmt
79
2565
global_stmt
61
2565
continue_stmt
62
2565
assert
63
2565
break_stmt
64
2565
nonlocal_stmt
80
2565
expr_stmt
81
2565
break
82
2565
del
66
2565
global
67
2565
yield
83
2565
pass_stmt
68
2565
flow_stmt
71
2565
yield_stmt
72
2565
sim_stmt
84
2566
confbody
2602
2566
NAME
1932
2567
NAME
12
2567
True
1
2567
atom_expr
5
2567
term
29
2567
atom
4
2567
simple_stmt
2494
2567
factor
11
2567
suite
2603
2567
shift_expr
7
2567
arith_expr
8
2567
False
27
2567
and_expr
9
2567
xor_expr
40
2567
{
41
2567
(
13
2567
[
15
2567
resetstats
16
2567
STRING
46
2567
raise
19
2567
small_stmt
2495
2567
test
47
2567
comparison
28
2567
or_test
23
2567
~
55
2567
-
43
2567
lambda
53
2567
+
31
2567
not_test
33
2567
and_test
48
2567
power
32
2567
pass
73
2567
None
34
2567
lambdef
37
2567
not
42
2567
NUMBER
39
2567
expr
50
2567
continue
74
2567
NEWLINE
2497
2567
begsim
49
2567
del_stmt
75
2567
return
54
2567
nonlocal
76
2567
return_stmt
56
2567
endsim
57
2567
test_list
70
2567
raise_stmt
59
2567
assert_stmt
78
2567
stat_stmt
79
2567
global_stmt
61
2567
continue_stmt
62
2567
assert
63
2567
break_stmt
64
2567
nonlocal_stmt
80
2567
expr_stmt
81
2567
break
82
2567
del
66
2567
global
67
2567
yield
83
2567
pass_stmt
68
2567
flow_stmt
71
2567
yield_stmt
72
2567
sim_stmt
84
2568
STRING
simple_stmt -> small_stmt NEWLINE
2568
while
simple_stmt -> small_stmt NEWLINE
2568
~
simple_stmt -> small_stmt NEWLINE
2568
del
simple_stmt -> small_stmt NEWLINE
2568
global
simple_stmt -> small_stmt NEWLINE
2568
NUMBER
simple_stmt -> small_stmt NEWLINE
2568
True
simple_stmt -> small_stmt NEWLINE
2568
DEDENT
simple_stmt -> small_stmt NEWLINE
2568
NAME
simple_stmt -> small_stmt NEWLINE
2568
with
simple_stmt -> small_stmt NEWLINE
2568
(
simple_stmt -> small_stmt NEWLINE
2568
-
simple_stmt -> small_stmt NEWLINE
2568
+
simple_stmt -> small_stmt NEWLINE
2568
continue
simple_stmt -> small_stmt NEWLINE
2568
endsim
simple_stmt -> small_stmt NEWLINE
2568
try
simple_stmt -> small_stmt NEWLINE
2568
[
simple_stmt -> small_stmt NEWLINE
2568
raise
simple_stmt -> small_stmt NEWLINE
2568
if
simple_stmt -> small_stmt NEWLINE
2568
{
simple_stmt -> small_stmt NEWLINE
2568
begsim
simple_stmt -> small_stmt NEWLINE
2568
return
simple_stmt -> small_stmt NEWLINE
2568
assert
simple_stmt -> small_stmt NEWLINE
2568
nonlocal
simple_stmt -> small_stmt NEWLINE
2568
not
simple_stmt -> small_stmt NEWLINE
2568
conf
simple_stmt -> small_stmt NEWLINE
2568
yield
simple_stmt -> small_stmt NEWLINE
2568
resetstats
simple_stmt -> small_stmt NEWLINE
2568
None
simple_stmt -> small_stmt NEWLINE
2568
else
simple_stmt -> small_stmt NEWLINE
2568
for
simple_stmt -> small_stmt NEWLINE
2568
class
simple_stmt -> small_stmt NEWLINE
2568
@
simple_stmt -> small_stmt NEWLINE
2568
pass
simple_stmt -> small_stmt NEWLINE
2568
lambda
simple_stmt -> small_stmt NEWLINE
2568
False
simple_stmt -> small_stmt NEWLINE
2568
break
simple_stmt -> small_stmt NEWLINE
2568
def
simple_stmt -> small_stmt NEWLINE
2569
:
2604
2570
True
1
2570
if
1708
2570
decorated
1709
2570
atom
4
2570
atom_expr
5
2570
while_stmt
1710
2570
try
1711
2570
shift_expr
7
2570
arith_expr
8
2570
and_expr
9
2570
conf
1712
2570
factor
11
2570
NAME
12
2570
(
13
2570
for
1713
2570
[
15
2570
resetstats
16
2570
compound_stmt
1714
2570
while
1715
2570
raise
19
2570
class
1716
2570
small_stmt
1717
2570
or_test
23
2570
for_stmt
1718
2570
try_stmt
1719
2570
def
1720
2570
False
27
2570
comparison
28
2570
term
29
2570
simple_stmt
1721
2570
+
31
2570
power
32
2570
not_test
33
2570
None
34
2570
with
1722
2570
classdef
1723
2570
lambdef
37
2570
if_stmt
1724
2570
NUMBER
39
2570
xor_expr
40
2570
{
41
2570
not
42
2570
-
43
2570
stmt_list
2605
2570
funcdef
1725
2570
decorators
1726
2570
STRING
46
2570
test
47
2570
and_test
48
2570
begsim
49
2570
expr
50
2570
with_stmt
1727
2570
lambda
53
2570
return
54
2570
~
55
2570
confdef
1728
2570
return_stmt
56
2570
endsim
57
2570
@
58
2570
raise_stmt
59
2570
global_stmt
61
2570
continue_stmt
62
2570
assert
63
2570
break_stmt
64
2570
del
66
2570
global
67
2570
pass_stmt
68
2570
test_list
70
2570
flow_stmt
71
2570
yield_stmt
72
2570
stmt
1729
2570
pass
73
2570
continue
74
2570
del_stmt
75
2570
nonlocal
76
2570
decorator
77
2570
assert_stmt
78
2570
stat_stmt
79
2570
nonlocal_stmt
80
2570
expr_stmt
81
2570
break
82
2570
yield
83
2570
sim_stmt
84
2571
:
2606
2572
NAME
12
2572
True
1
2572
suite
2607
2572
atom_expr
5
2572
term
29
2572
atom
4
2572
simple_stmt
2500
2572
factor
11
2572
shift_expr
7
2572
arith_expr
8
2572
False
27
2572
and_expr
9
2572
xor_expr
40
2572
{
41
2572
(
13
2572
[
15
2572
resetstats
16
2572
STRING
46
2572
raise
19
2572
small_stmt
1717
2572
test
47
2572
comparison
28
2572
or_test
23
2572
~
55
2572
-
43
2572
lambda
53
2572
+
31
2572
not_test
33
2572
and_test
48
2572
power
32
2572
pass
73
2572
None
34
2572
lambdef
37
2572
not
42
2572
NUMBER
39
2572
expr
50
2572
continue
74
2572
NEWLINE
2502
2572
begsim
49
2572
del_stmt
75
2572
return
54
2572
nonlocal
76
2572
return_stmt
56
2572
endsim
57
2572
test_list
70
2572
raise_stmt
59
2572
assert_stmt
78
2572
stat_stmt
79
2572
global_stmt
61
2572
continue_stmt
62
2572
assert
63
2572
break_stmt
64
2572
nonlocal_stmt
80
2572
expr_stmt
81
2572
break
82
2572
del
66
2572
global
67
2572
yield
83
2572
pass_stmt
68
2572
flow_stmt
71
2572
yield_stmt
72
2572
sim_stmt
84
2573
True
1
2573
if
1708
2573
decorated
1709
2573
atom
4
2573
atom_expr
5
2573
while_stmt
1710
2573
try
1711
2573
shift_expr
7
2573
arith_expr
8
2573
and_expr
9
2573
conf
1712
2573
factor
11
2573
NAME
12
2573
(
13
2573
for
1713
2573
[
15
2573
resetstats
16
2573
compound_stmt
1714
2573
while
1715
2573
raise
19
2573
class
1716
2573
small_stmt
1717
2573
or_test
23
2573
for_stmt
1718
2573
try_stmt
1719
2573
def
1720
2573
False
27
2573
comparison
28
2573
term
29
2573
simple_stmt
1721
2573
+
31
2573
power
32
2573
not_test
33
2573
None
34
2573
with
1722
2573
classdef
1723
2573
lambdef
37
2573
if_stmt
1724
2573
NUMBER
39
2573
xor_expr
40
2573
{
41
2573
not
42
2573
-
43
2573
stmt_list
2608
2573
funcdef
1725
2573
decorators
1726
2573
STRING
46
2573
test
47
2573
and_test
48
2573
begsim
49
2573
expr
50
2573
with_stmt
1727
2573
lambda
53
2573
return
54
2573
~
55
2573
confdef
1728
2573
return_stmt
56
2573
endsim
57
2573
@
58
2573
raise_stmt
59
2573
global_stmt
61
2573
continue_stmt
62
2573
assert
63
2573
break_stmt
64
2573
del
66
2573
global
67
2573
pass_stmt
68
2573
test_list
70
2573
flow_stmt
71
2573
yield_stmt
72
2573
stmt
1729
2573
pass
73
2573
continue
74
2573
del_stmt
75
2573
nonlocal
76
2573
decorator
77
2573
assert_stmt
78
2573
stat_stmt
79
2573
nonlocal_stmt
80
2573
expr_stmt
81
2573
break
82
2573
yield
83
2573
sim_stmt
84
2574
NAME
12
2574
True
1
2574
atom_expr
5
2574
term
29
2574
atom
4
2574
simple_stmt
2500
2574
factor
11
2574
shift_expr
7
2574
arith_expr
8
2574
False
27
2574
and_expr
9
2574
xor_expr
40
2574
{
41
2574
suite
2609
2574
(
13
2574
[
15
2574
resetstats
16
2574
STRING
46
2574
raise
19
2574
small_stmt
1717
2574
test
47
2574
comparison
28
2574
or_test
23
2574
~
55
2574
-
43
2574
lambda
53
2574
+
31
2574
not_test
33
2574
and_test
48
2574
power
32
2574
pass
73
2574
None
34
2574
lambdef
37
2574
not
42
2574
NUMBER
39
2574
expr
50
2574
continue
74
2574
NEWLINE
2502
2574
begsim
49
2574
del_stmt
75
2574
return
54
2574
nonlocal
76
2574
return_stmt
56
2574
endsim
57
2574
test_list
70
2574
raise_stmt
59
2574
assert_stmt
78
2574
stat_stmt
79
2574
global_stmt
61
2574
continue_stmt
62
2574
assert
63
2574
break_stmt
64
2574
nonlocal_stmt
80
2574
expr_stmt
81
2574
break
82
2574
del
66
2574
global
67
2574
yield
83
2574
pass_stmt
68
2574
flow_stmt
71
2574
yield_stmt
72
2574
sim_stmt
84
2575
:
2610
2576
(
trailer -> [ subscriptlist ]
2576
//
trailer -> [ subscriptlist ]
2576
&
trailer -> [ subscriptlist ]
2576
>
trailer -> [ subscriptlist ]
2576
in
trailer -> [ subscriptlist ]
2576
>>
trailer -> [ subscriptlist ]
2576
[
trailer -> [ subscriptlist ]
2576
<=
trailer -> [ subscriptlist ]
2576
-
trailer -> [ subscriptlist ]
2576
)
trailer -> [ subscriptlist ]
2576
!=
trailer -> [ subscriptlist ]
2576
|
trailer -> [ subscriptlist ]
2576
=
trailer -> [ subscriptlist ]
2576
not
trailer -> [ subscriptlist ]
2576
.
trailer -> [ subscriptlist ]
2576
>=
trailer -> [ subscriptlist ]
2576
or
trailer -> [ subscriptlist ]
2576
*
trailer -> [ subscriptlist ]
2576
<<
trailer -> [ subscriptlist ]
2576
**
trailer -> [ subscriptlist ]
2576
==
trailer -> [ subscriptlist ]
2576
+
trailer -> [ subscriptlist ]
2576
is
trailer -> [ subscriptlist ]
2576
/
trailer -> [ subscriptlist ]
2576
^
trailer -> [ subscriptlist ]
2576
and
trailer -> [ subscriptlist ]
2576
,
trailer -> [ subscriptlist ]
2576
@
trailer -> [ subscriptlist ]
2576
if
trailer -> [ subscriptlist ]
2576
<
trailer -> [ subscriptlist ]
2576
%
trailer -> [ subscriptlist ]
2577
or
trailer -> ( arglist )
2577
>>
trailer -> ( arglist )
2577
<=
trailer -> ( arglist )
2577
**
trailer -> ( arglist )
2577
<
trailer -> ( arglist )
2577
(
trailer -> ( arglist )
2577
-
trailer -> ( arglist )
2577
not
trailer -> ( arglist )
2577
if
trailer -> ( arglist )
2577
and
trailer -> ( arglist )
2577
.
trailer -> ( arglist )
2577
is
trailer -> ( arglist )
2577
)
trailer -> ( arglist )
2577
>
trailer -> ( arglist )
2577
in
trailer -> ( arglist )
2577
!=
trailer -> ( arglist )
2577
,
trailer -> ( arglist )
2577
==
trailer -> ( arglist )
2577
%
trailer -> ( arglist )
2577
@
trailer -> ( arglist )
2577
^
trailer -> ( arglist )
2577
<<
trailer -> ( arglist )
2577
*
trailer -> ( arglist )
2577
//
trailer -> ( arglist )
2577
&
trailer -> ( arglist )
2577
|
trailer -> ( arglist )
2577
>=
trailer -> ( arglist )
2577
+
trailer -> ( arglist )
2577
/
trailer -> ( arglist )
2577
=
trailer -> ( arglist )
2577
[
trailer -> ( arglist )
2578
NAME
2107
2578
atom_expr
2108
2578
atom
2109
2578
-
2110
2578
factor
2111
2578
[
2112
2578
True
2113
2578
arith_expr
2114
2578
xor_expr
2115
2578
False
2116
2578
{
2117
2578
+
2118
2578
and_expr
2119
2578
(
2120
2578
STRING
2121
2578
power
2122
2578
term
2123
2578
comparison
2124
2578
shift_expr
2125
2578
not_test
2126
2578
or_test
2127
2578
lambdef
2128
2578
lambda
2129
2578
None
2130
2578
expr
2132
2578
NUMBER
2133
2578
and_test
2134
2578
~
2135
2578
not
2136
2578
test
2611
2579
,
lambdef -> lambda varargslist : test
2579
=
lambdef -> lambda varargslist : test
2579
)
lambdef -> lambda varargslist : test
2580
NEWLINE
test -> or_test if or_test else test
2580
=
test -> or_test if or_test else test
2581
:
2612
2582
NAME
131
2582
atom_expr
132
2582
atom
133
2582
-
134
2582
factor
136
2582
[
137
2582
True
138
2582
lambda
2537
2582
arith_expr
139
2582
False
140
2582
{
141
2582
+
142
2582
and_expr
143
2582
(
144
2582
STRING
145
2582
power
147
2582
term
148
2582
comparison
149
2582
test_nocond
2613
2582
shift_expr
150
2582
not_test
152
2582
None
155
2582
lambdef_nocond
2539
2582
xor_expr
156
2582
expr
157
2582
NUMBER
158
2582
and_test
159
2582
or_test
2540
2582
~
160
2582
not
162
2583
)
comp_if -> if test_nocond comp_iter
2583
,
comp_if -> if test_nocond comp_iter
2584
NAME
1933
2584
atom_expr
1934
2584
atom
1935
2584
-
1936
2584
factor
1937
2584
True
1938
2584
lambda
2439
2584
arith_expr
1939
2584
False
1940
2584
{
1941
2584
+
1942
2584
and_expr
1943
2584
[
1944
2584
(
1945
2584
STRING
1946
2584
power
1947
2584
term
1948
2584
comparison
1949
2584
shift_expr
1950
2584
not_test
1951
2584
None
1953
2584
lambdef_nocond
2441
2584
xor_expr
1954
2584
expr
1955
2584
NUMBER
1956
2584
and_test
1957
2584
or_test
2442
2584
~
1958
2584
not
1959
2584
test_nocond
2614
2585
for
lambdef_nocond -> lambda : test_nocond
2585
)
lambdef_nocond -> lambda : test_nocond
2585
if
lambdef_nocond -> lambda : test_nocond
2586
NAME
2016
2586
atom_expr
2017
2586
atom
2018
2586
-
2019
2586
factor
2020
2586
True
2021
2586
lambda
2473
2586
arith_expr
2022
2586
False
2023
2586
{
2024
2586
+
2025
2586
and_expr
2026
2586
[
2027
2586
(
2028
2586
STRING
2029
2586
term
2030
2586
and_test
2031
2586
comparison
2032
2586
shift_expr
2033
2586
not_test
2034
2586
power
2035
2586
None
2036
2586
xor_expr
2037
2586
expr
2038
2586
NUMBER
2039
2586
or_test
2474
2586
~
2040
2586
not
2041
2586
lambdef_nocond
2475
2586
test_nocond
2615
2587
]
lambdef_nocond -> lambda : test_nocond
2587
for
lambdef_nocond -> lambda : test_nocond
2587
if
lambdef_nocond -> lambda : test_nocond
2588
assert
try_stmt -> try : suite except_clause else : suite finally : suite
2588
pass
try_stmt -> try : suite except_clause else : suite finally : suite
2588
$
try_stmt -> try : suite except_clause else : suite finally : suite
2588
[
try_stmt -> try : suite except_clause else : suite finally : suite
2588
class
try_stmt -> try : suite except_clause else : suite finally : suite
2588
with
try_stmt -> try : suite except_clause else : suite finally : suite
2588
None
try_stmt -> try : suite except_clause else : suite finally : suite
2588
if
try_stmt -> try : suite except_clause else : suite finally : suite
2588
for
try_stmt -> try : suite except_clause else : suite finally : suite
2588
not
try_stmt -> try : suite except_clause else : suite finally : suite
2588
+
try_stmt -> try : suite except_clause else : suite finally : suite
2588
resetstats
try_stmt -> try : suite except_clause else : suite finally : suite
2588
{
try_stmt -> try : suite except_clause else : suite finally : suite
2588
(
try_stmt -> try : suite except_clause else : suite finally : suite
2588
try
try_stmt -> try : suite except_clause else : suite finally : suite
2588
break
try_stmt -> try : suite except_clause else : suite finally : suite
2588
del
try_stmt -> try : suite except_clause else : suite finally : suite
2588
lambda
try_stmt -> try : suite except_clause else : suite finally : suite
2588
while
try_stmt -> try : suite except_clause else : suite finally : suite
2588
False
try_stmt -> try : suite except_clause else : suite finally : suite
2588
~
try_stmt -> try : suite except_clause else : suite finally : suite
2588
begsim
try_stmt -> try : suite except_clause else : suite finally : suite
2588
continue
try_stmt -> try : suite except_clause else : suite finally : suite
2588
def
try_stmt -> try : suite except_clause else : suite finally : suite
2588
NAME
try_stmt -> try : suite except_clause else : suite finally : suite
2588
conf
try_stmt -> try : suite except_clause else : suite finally : suite
2588
STRING
try_stmt -> try : suite except_clause else : suite finally : suite
2588
global
try_stmt -> try : suite except_clause else : suite finally : suite
2588
nonlocal
try_stmt -> try : suite except_clause else : suite finally : suite
2588
True
try_stmt -> try : suite except_clause else : suite finally : suite
2588
yield
try_stmt -> try : suite except_clause else : suite finally : suite
2588
endsim
try_stmt -> try : suite except_clause else : suite finally : suite
2588
-
try_stmt -> try : suite except_clause else : suite finally : suite
2588
@
try_stmt -> try : suite except_clause else : suite finally : suite
2588
raise
try_stmt -> try : suite except_clause else : suite finally : suite
2588
NUMBER
try_stmt -> try : suite except_clause else : suite finally : suite
2588
NEWLINE
try_stmt -> try : suite except_clause else : suite finally : suite
2588
return
try_stmt -> try : suite except_clause else : suite finally : suite
2589
(
suite -> NEWLINE INDENT stmt_list DEDENT
2589
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2589
try
suite -> NEWLINE INDENT stmt_list DEDENT
2589
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2589
@
suite -> NEWLINE INDENT stmt_list DEDENT
2589
None
suite -> NEWLINE INDENT stmt_list DEDENT
2589
$
suite -> NEWLINE INDENT stmt_list DEDENT
2589
if
suite -> NEWLINE INDENT stmt_list DEDENT
2589
class
suite -> NEWLINE INDENT stmt_list DEDENT
2589
[
suite -> NEWLINE INDENT stmt_list DEDENT
2589
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2589
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2589
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2589
-
suite -> NEWLINE INDENT stmt_list DEDENT
2589
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2589
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2589
False
suite -> NEWLINE INDENT stmt_list DEDENT
2589
finally
suite -> NEWLINE INDENT stmt_list DEDENT
2589
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2589
break
suite -> NEWLINE INDENT stmt_list DEDENT
2589
global
suite -> NEWLINE INDENT stmt_list DEDENT
2589
+
suite -> NEWLINE INDENT stmt_list DEDENT
2589
{
suite -> NEWLINE INDENT stmt_list DEDENT
2589
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2589
~
suite -> NEWLINE INDENT stmt_list DEDENT
2589
for
suite -> NEWLINE INDENT stmt_list DEDENT
2589
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
2589
with
suite -> NEWLINE INDENT stmt_list DEDENT
2589
not
suite -> NEWLINE INDENT stmt_list DEDENT
2589
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2589
while
suite -> NEWLINE INDENT stmt_list DEDENT
2589
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2589
True
suite -> NEWLINE INDENT stmt_list DEDENT
2589
def
suite -> NEWLINE INDENT stmt_list DEDENT
2589
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2589
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2589
return
suite -> NEWLINE INDENT stmt_list DEDENT
2589
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2589
del
suite -> NEWLINE INDENT stmt_list DEDENT
2590
del
except_clause -> except test as NAME : suite maybe_except_clause
2590
assert
except_clause -> except test as NAME : suite maybe_except_clause
2590
{
except_clause -> except test as NAME : suite maybe_except_clause
2590
nonlocal
except_clause -> except test as NAME : suite maybe_except_clause
2590
-
except_clause -> except test as NAME : suite maybe_except_clause
2590
True
except_clause -> except test as NAME : suite maybe_except_clause
2590
+
except_clause -> except test as NAME : suite maybe_except_clause
2590
NEWLINE
except_clause -> except test as NAME : suite maybe_except_clause
2590
lambda
except_clause -> except test as NAME : suite maybe_except_clause
2590
[
except_clause -> except test as NAME : suite maybe_except_clause
2590
raise
except_clause -> except test as NAME : suite maybe_except_clause
2590
NAME
except_clause -> except test as NAME : suite maybe_except_clause
2590
False
except_clause -> except test as NAME : suite maybe_except_clause
2590
pass
except_clause -> except test as NAME : suite maybe_except_clause
2590
if
except_clause -> except test as NAME : suite maybe_except_clause
2590
def
except_clause -> except test as NAME : suite maybe_except_clause
2590
finally
except_clause -> except test as NAME : suite maybe_except_clause
2590
endsim
except_clause -> except test as NAME : suite maybe_except_clause
2590
not
except_clause -> except test as NAME : suite maybe_except_clause
2590
NUMBER
except_clause -> except test as NAME : suite maybe_except_clause
2590
resetstats
except_clause -> except test as NAME : suite maybe_except_clause
2590
(
except_clause -> except test as NAME : suite maybe_except_clause
2590
begsim
except_clause -> except test as NAME : suite maybe_except_clause
2590
break
except_clause -> except test as NAME : suite maybe_except_clause
2590
STRING
except_clause -> except test as NAME : suite maybe_except_clause
2590
while
except_clause -> except test as NAME : suite maybe_except_clause
2590
conf
except_clause -> except test as NAME : suite maybe_except_clause
2590
continue
except_clause -> except test as NAME : suite maybe_except_clause
2590
else
except_clause -> except test as NAME : suite maybe_except_clause
2590
with
except_clause -> except test as NAME : suite maybe_except_clause
2590
$
except_clause -> except test as NAME : suite maybe_except_clause
2590
class
except_clause -> except test as NAME : suite maybe_except_clause
2590
try
except_clause -> except test as NAME : suite maybe_except_clause
2590
@
except_clause -> except test as NAME : suite maybe_except_clause
2590
for
except_clause -> except test as NAME : suite maybe_except_clause
2590
global
except_clause -> except test as NAME : suite maybe_except_clause
2590
yield
except_clause -> except test as NAME : suite maybe_except_clause
2590
return
except_clause -> except test as NAME : suite maybe_except_clause
2590
~
except_clause -> except test as NAME : suite maybe_except_clause
2590
None
except_clause -> except test as NAME : suite maybe_except_clause
2591
:
2616
2592
:
2617
2593
DEDENT
2618
2594
NAME
12
2594
True
1
2594
atom_expr
5
2594
term
29
2594
atom
4
2594
simple_stmt
2619
2594
factor
11
2594
shift_expr
7
2594
arith_expr
8
2594
False
27
2594
and_expr
9
2594
xor_expr
40
2594
{
41
2594
(
13
2594
[
15
2594
resetstats
16
2594
suite
2620
2594
STRING
46
2594
raise
19
2594
small_stmt
2621
2594
test
47
2594
comparison
28
2594
or_test
23
2594
~
55
2594
-
43
2594
lambda
53
2594
+
31
2594
not_test
33
2594
and_test
48
2594
power
32
2594
pass
73
2594
None
34
2594
lambdef
37
2594
not
42
2594
NUMBER
39
2594
expr
50
2594
continue
74
2594
NEWLINE
2622
2594
begsim
49
2594
del_stmt
75
2594
return
54
2594
nonlocal
76
2594
return_stmt
56
2594
endsim
57
2594
test_list
70
2594
raise_stmt
59
2594
assert_stmt
78
2594
stat_stmt
79
2594
global_stmt
61
2594
continue_stmt
62
2594
assert
63
2594
break_stmt
64
2594
nonlocal_stmt
80
2594
expr_stmt
81
2594
break
82
2594
del
66
2594
global
67
2594
yield
83
2594
pass_stmt
68
2594
flow_stmt
71
2594
yield_stmt
72
2594
sim_stmt
84
2595
NAME
12
2595
True
1
2595
atom_expr
5
2595
term
29
2595
atom
4
2595
simple_stmt
2500
2595
factor
11
2595
shift_expr
7
2595
arith_expr
8
2595
False
27
2595
and_expr
9
2595
xor_expr
40
2595
{
41
2595
(
13
2595
[
15
2595
resetstats
16
2595
STRING
46
2595
raise
19
2595
small_stmt
1717
2595
test
47
2595
suite
2623
2595
comparison
28
2595
or_test
23
2595
~
55
2595
-
43
2595
lambda
53
2595
+
31
2595
not_test
33
2595
and_test
48
2595
power
32
2595
pass
73
2595
None
34
2595
lambdef
37
2595
not
42
2595
NUMBER
39
2595
expr
50
2595
continue
74
2595
NEWLINE
2502
2595
begsim
49
2595
del_stmt
75
2595
return
54
2595
nonlocal
76
2595
return_stmt
56
2595
endsim
57
2595
test_list
70
2595
raise_stmt
59
2595
assert_stmt
78
2595
stat_stmt
79
2595
global_stmt
61
2595
continue_stmt
62
2595
assert
63
2595
break_stmt
64
2595
nonlocal_stmt
80
2595
expr_stmt
81
2595
break
82
2595
del
66
2595
global
67
2595
yield
83
2595
pass_stmt
68
2595
flow_stmt
71
2595
yield_stmt
72
2595
sim_stmt
84
2596
NAME
12
2596
True
1
2596
atom_expr
5
2596
term
29
2596
NEWLINE
2598
2596
atom
4
2596
simple_stmt
2599
2596
factor
11
2596
suite
2624
2596
shift_expr
7
2596
arith_expr
8
2596
False
27
2596
and_expr
9
2596
xor_expr
40
2596
{
41
2596
(
13
2596
[
15
2596
resetstats
16
2596
STRING
46
2596
raise
19
2596
small_stmt
2601
2596
test
47
2596
comparison
28
2596
or_test
23
2596
~
55
2596
-
43
2596
lambda
53
2596
+
31
2596
not_test
33
2596
and_test
48
2596
power
32
2596
pass
73
2596
None
34
2596
lambdef
37
2596
not
42
2596
NUMBER
39
2596
expr
50
2596
continue
74
2596
begsim
49
2596
del_stmt
75
2596
return
54
2596
nonlocal
76
2596
return_stmt
56
2596
endsim
57
2596
test_list
70
2596
raise_stmt
59
2596
assert_stmt
78
2596
stat_stmt
79
2596
global_stmt
61
2596
continue_stmt
62
2596
assert
63
2596
break_stmt
64
2596
nonlocal_stmt
80
2596
expr_stmt
81
2596
break
82
2596
del
66
2596
global
67
2596
yield
83
2596
pass_stmt
68
2596
flow_stmt
71
2596
yield_stmt
72
2596
sim_stmt
84
2597
NAME
2625
2598
INDENT
2626
2599
False
suite -> simple_stmt
2599
if
suite -> simple_stmt
2599
NUMBER
suite -> simple_stmt
2599
nonlocal
suite -> simple_stmt
2599
{
suite -> simple_stmt
2599
@
suite -> simple_stmt
2599
begsim
suite -> simple_stmt
2599
endsim
suite -> simple_stmt
2599
(
suite -> simple_stmt
2599
STRING
suite -> simple_stmt
2599
global
suite -> simple_stmt
2599
yield
suite -> simple_stmt
2599
try
suite -> simple_stmt
2599
conf
suite -> simple_stmt
2599
finally
suite -> simple_stmt
2599
for
suite -> simple_stmt
2599
not
suite -> simple_stmt
2599
else
suite -> simple_stmt
2599
DEDENT
suite -> simple_stmt
2599
while
suite -> simple_stmt
2599
lambda
suite -> simple_stmt
2599
None
suite -> simple_stmt
2599
resetstats
suite -> simple_stmt
2599
break
suite -> simple_stmt
2599
True
suite -> simple_stmt
2599
~
suite -> simple_stmt
2599
-
suite -> simple_stmt
2599
pass
suite -> simple_stmt
2599
def
suite -> simple_stmt
2599
raise
suite -> simple_stmt
2599
except
suite -> simple_stmt
2599
with
suite -> simple_stmt
2599
class
suite -> simple_stmt
2599
[
suite -> simple_stmt
2599
return
suite -> simple_stmt
2599
del
suite -> simple_stmt
2599
continue
suite -> simple_stmt
2599
assert
suite -> simple_stmt
2599
+
suite -> simple_stmt
2599
NAME
suite -> simple_stmt
2600
except
2491
2600
except_clause
2627
2600
False
maybe_except_clause -> 
2600
maybe_except_clause
2628
2600
del
maybe_except_clause -> 
2600
True
maybe_except_clause -> 
2600
{
maybe_except_clause -> 
2600
def
maybe_except_clause -> 
2600
(
maybe_except_clause -> 
2600
continue
maybe_except_clause -> 
2600
endsim
maybe_except_clause -> 
2600
try
maybe_except_clause -> 
2600
None
maybe_except_clause -> 
2600
global
maybe_except_clause -> 
2600
resetstats
maybe_except_clause -> 
2600
class
maybe_except_clause -> 
2600
STRING
maybe_except_clause -> 
2600
begsim
maybe_except_clause -> 
2600
raise
maybe_except_clause -> 
2600
-
maybe_except_clause -> 
2600
@
maybe_except_clause -> 
2600
yield
maybe_except_clause -> 
2600
break
maybe_except_clause -> 
2600
assert
maybe_except_clause -> 
2600
else
maybe_except_clause -> 
2600
[
maybe_except_clause -> 
2600
NAME
maybe_except_clause -> 
2600
lambda
maybe_except_clause -> 
2600
finally
maybe_except_clause -> 
2600
while
maybe_except_clause -> 
2600
DEDENT
maybe_except_clause -> 
2600
for
maybe_except_clause -> 
2600
not
maybe_except_clause -> 
2600
conf
maybe_except_clause -> 
2600
pass
maybe_except_clause -> 
2600
nonlocal
maybe_except_clause -> 
2600
return
maybe_except_clause -> 
2600
if
maybe_except_clause -> 
2600
+
maybe_except_clause -> 
2600
with
maybe_except_clause -> 
2600
~
maybe_except_clause -> 
2600
NUMBER
maybe_except_clause -> 
2601
NEWLINE
2629
2602
DEDENT
2630
2603
return
for_stmt -> for expr_list in test_list : suite
2603
else
2631
2603
-
for_stmt -> for expr_list in test_list : suite
2603
DEDENT
for_stmt -> for expr_list in test_list : suite
2603
True
for_stmt -> for expr_list in test_list : suite
2603
if
for_stmt -> for expr_list in test_list : suite
2603
~
for_stmt -> for expr_list in test_list : suite
2603
endsim
for_stmt -> for expr_list in test_list : suite
2603
raise
for_stmt -> for expr_list in test_list : suite
2603
lambda
for_stmt -> for expr_list in test_list : suite
2603
conf
for_stmt -> for expr_list in test_list : suite
2603
@
for_stmt -> for expr_list in test_list : suite
2603
def
for_stmt -> for expr_list in test_list : suite
2603
None
for_stmt -> for expr_list in test_list : suite
2603
(
for_stmt -> for expr_list in test_list : suite
2603
STRING
for_stmt -> for expr_list in test_list : suite
2603
begsim
for_stmt -> for expr_list in test_list : suite
2603
{
for_stmt -> for expr_list in test_list : suite
2603
with
for_stmt -> for expr_list in test_list : suite
2603
[
for_stmt -> for expr_list in test_list : suite
2603
try
for_stmt -> for expr_list in test_list : suite
2603
False
for_stmt -> for expr_list in test_list : suite
2603
NAME
for_stmt -> for expr_list in test_list : suite
2603
yield
for_stmt -> for expr_list in test_list : suite
2603
nonlocal
for_stmt -> for expr_list in test_list : suite
2603
not
for_stmt -> for expr_list in test_list : suite
2603
NUMBER
for_stmt -> for expr_list in test_list : suite
2603
resetstats
for_stmt -> for expr_list in test_list : suite
2603
for
for_stmt -> for expr_list in test_list : suite
2603
class
for_stmt -> for expr_list in test_list : suite
2603
+
for_stmt -> for expr_list in test_list : suite
2603
assert
for_stmt -> for expr_list in test_list : suite
2603
while
for_stmt -> for expr_list in test_list : suite
2603
continue
for_stmt -> for expr_list in test_list : suite
2603
del
for_stmt -> for expr_list in test_list : suite
2603
global
for_stmt -> for expr_list in test_list : suite
2603
break
for_stmt -> for expr_list in test_list : suite
2603
pass
for_stmt -> for expr_list in test_list : suite
2604
NAME
12
2604
True
1
2604
atom_expr
5
2604
term
29
2604
atom
4
2604
simple_stmt
2500
2604
factor
11
2604
shift_expr
7
2604
arith_expr
8
2604
False
27
2604
and_expr
9
2604
xor_expr
40
2604
{
41
2604
(
13
2604
[
15
2604
resetstats
16
2604
STRING
46
2604
raise
19
2604
small_stmt
1717
2604
test
47
2604
suite
2632
2604
comparison
28
2604
or_test
23
2604
~
55
2604
-
43
2604
lambda
53
2604
+
31
2604
not_test
33
2604
and_test
48
2604
power
32
2604
pass
73
2604
None
34
2604
lambdef
37
2604
not
42
2604
NUMBER
39
2604
expr
50
2604
continue
74
2604
NEWLINE
2502
2604
begsim
49
2604
del_stmt
75
2604
return
54
2604
nonlocal
76
2604
return_stmt
56
2604
endsim
57
2604
test_list
70
2604
raise_stmt
59
2604
assert_stmt
78
2604
stat_stmt
79
2604
global_stmt
61
2604
continue_stmt
62
2604
assert
63
2604
break_stmt
64
2604
nonlocal_stmt
80
2604
expr_stmt
81
2604
break
82
2604
del
66
2604
global
67
2604
yield
83
2604
pass_stmt
68
2604
flow_stmt
71
2604
yield_stmt
72
2604
sim_stmt
84
2605
DEDENT
2633
2606
NAME
12
2606
True
1
2606
atom_expr
5
2606
term
29
2606
atom
4
2606
simple_stmt
2500
2606
factor
11
2606
shift_expr
7
2606
suite
2634
2606
arith_expr
8
2606
False
27
2606
and_expr
9
2606
xor_expr
40
2606
{
41
2606
(
13
2606
[
15
2606
resetstats
16
2606
STRING
46
2606
raise
19
2606
small_stmt
1717
2606
test
47
2606
comparison
28
2606
or_test
23
2606
~
55
2606
-
43
2606
lambda
53
2606
+
31
2606
not_test
33
2606
and_test
48
2606
power
32
2606
pass
73
2606
None
34
2606
lambdef
37
2606
not
42
2606
NUMBER
39
2606
expr
50
2606
continue
74
2606
NEWLINE
2502
2606
begsim
49
2606
del_stmt
75
2606
return
54
2606
nonlocal
76
2606
return_stmt
56
2606
endsim
57
2606
test_list
70
2606
raise_stmt
59
2606
assert_stmt
78
2606
stat_stmt
79
2606
global_stmt
61
2606
continue_stmt
62
2606
assert
63
2606
break_stmt
64
2606
nonlocal_stmt
80
2606
expr_stmt
81
2606
break
82
2606
del
66
2606
global
67
2606
yield
83
2606
pass_stmt
68
2606
flow_stmt
71
2606
yield_stmt
72
2606
sim_stmt
84
2607
while
classdef -> class NAME ( ) : suite
2607
(
classdef -> class NAME ( ) : suite
2607
endsim
classdef -> class NAME ( ) : suite
2607
def
classdef -> class NAME ( ) : suite
2607
try
classdef -> class NAME ( ) : suite
2607
-
classdef -> class NAME ( ) : suite
2607
NAME
classdef -> class NAME ( ) : suite
2607
~
classdef -> class NAME ( ) : suite
2607
True
classdef -> class NAME ( ) : suite
2607
class
classdef -> class NAME ( ) : suite
2607
DEDENT
classdef -> class NAME ( ) : suite
2607
conf
classdef -> class NAME ( ) : suite
2607
assert
classdef -> class NAME ( ) : suite
2607
False
classdef -> class NAME ( ) : suite
2607
with
classdef -> class NAME ( ) : suite
2607
continue
classdef -> class NAME ( ) : suite
2607
NUMBER
classdef -> class NAME ( ) : suite
2607
global
classdef -> class NAME ( ) : suite
2607
return
classdef -> class NAME ( ) : suite
2607
yield
classdef -> class NAME ( ) : suite
2607
break
classdef -> class NAME ( ) : suite
2607
@
classdef -> class NAME ( ) : suite
2607
STRING
classdef -> class NAME ( ) : suite
2607
nonlocal
classdef -> class NAME ( ) : suite
2607
pass
classdef -> class NAME ( ) : suite
2607
begsim
classdef -> class NAME ( ) : suite
2607
resetstats
classdef -> class NAME ( ) : suite
2607
raise
classdef -> class NAME ( ) : suite
2607
if
classdef -> class NAME ( ) : suite
2607
not
classdef -> class NAME ( ) : suite
2607
{
classdef -> class NAME ( ) : suite
2607
lambda
classdef -> class NAME ( ) : suite
2607
None
classdef -> class NAME ( ) : suite
2607
for
classdef -> class NAME ( ) : suite
2607
+
classdef -> class NAME ( ) : suite
2607
del
classdef -> class NAME ( ) : suite
2607
[
classdef -> class NAME ( ) : suite
2608
DEDENT
2635
2609
try
funcdef -> def NAME ( ) : suite
2609
resetstats
funcdef -> def NAME ( ) : suite
2609
pass
funcdef -> def NAME ( ) : suite
2609
break
funcdef -> def NAME ( ) : suite
2609
+
funcdef -> def NAME ( ) : suite
2609
global
funcdef -> def NAME ( ) : suite
2609
None
funcdef -> def NAME ( ) : suite
2609
True
funcdef -> def NAME ( ) : suite
2609
NUMBER
funcdef -> def NAME ( ) : suite
2609
def
funcdef -> def NAME ( ) : suite
2609
@
funcdef -> def NAME ( ) : suite
2609
for
funcdef -> def NAME ( ) : suite
2609
DEDENT
funcdef -> def NAME ( ) : suite
2609
continue
funcdef -> def NAME ( ) : suite
2609
STRING
funcdef -> def NAME ( ) : suite
2609
while
funcdef -> def NAME ( ) : suite
2609
~
funcdef -> def NAME ( ) : suite
2609
{
funcdef -> def NAME ( ) : suite
2609
nonlocal
funcdef -> def NAME ( ) : suite
2609
del
funcdef -> def NAME ( ) : suite
2609
raise
funcdef -> def NAME ( ) : suite
2609
conf
funcdef -> def NAME ( ) : suite
2609
(
funcdef -> def NAME ( ) : suite
2609
class
funcdef -> def NAME ( ) : suite
2609
not
funcdef -> def NAME ( ) : suite
2609
[
funcdef -> def NAME ( ) : suite
2609
begsim
funcdef -> def NAME ( ) : suite
2609
yield
funcdef -> def NAME ( ) : suite
2609
NAME
funcdef -> def NAME ( ) : suite
2609
-
funcdef -> def NAME ( ) : suite
2609
assert
funcdef -> def NAME ( ) : suite
2609
if
funcdef -> def NAME ( ) : suite
2609
endsim
funcdef -> def NAME ( ) : suite
2609
False
funcdef -> def NAME ( ) : suite
2609
with
funcdef -> def NAME ( ) : suite
2609
return
funcdef -> def NAME ( ) : suite
2609
lambda
funcdef -> def NAME ( ) : suite
2610
NAME
12
2610
True
1
2610
atom_expr
5
2610
term
29
2610
atom
4
2610
simple_stmt
2500
2610
factor
11
2610
shift_expr
7
2610
arith_expr
8
2610
False
27
2610
and_expr
9
2610
xor_expr
40
2610
{
41
2610
(
13
2610
[
15
2610
resetstats
16
2610
STRING
46
2610
raise
19
2610
small_stmt
1717
2610
test
47
2610
comparison
28
2610
or_test
23
2610
~
55
2610
-
43
2610
lambda
53
2610
+
31
2610
not_test
33
2610
and_test
48
2610
power
32
2610
suite
2636
2610
pass
73
2610
None
34
2610
lambdef
37
2610
not
42
2610
NUMBER
39
2610
expr
50
2610
continue
74
2610
NEWLINE
2502
2610
begsim
49
2610
del_stmt
75
2610
return
54
2610
nonlocal
76
2610
return_stmt
56
2610
endsim
57
2610
test_list
70
2610
raise_stmt
59
2610
assert_stmt
78
2610
stat_stmt
79
2610
global_stmt
61
2610
continue_stmt
62
2610
assert
63
2610
break_stmt
64
2610
nonlocal_stmt
80
2610
expr_stmt
81
2610
break
82
2610
del
66
2610
global
67
2610
yield
83
2610
pass_stmt
68
2610
flow_stmt
71
2610
yield_stmt
72
2610
sim_stmt
84
2611
)
test -> or_test if or_test else test
2611
,
test -> or_test if or_test else test
2611
=
test -> or_test if or_test else test
2612
NAME
131
2612
atom_expr
132
2612
atom
133
2612
-
134
2612
factor
136
2612
[
137
2612
True
138
2612
lambda
2537
2612
arith_expr
139
2612
False
140
2612
{
141
2612
+
142
2612
and_expr
143
2612
(
144
2612
STRING
145
2612
power
147
2612
term
148
2612
comparison
149
2612
shift_expr
150
2612
not_test
152
2612
None
155
2612
lambdef_nocond
2539
2612
xor_expr
156
2612
expr
157
2612
NUMBER
158
2612
and_test
159
2612
or_test
2540
2612
~
160
2612
test_nocond
2637
2612
not
162
2613
for
lambdef_nocond -> lambda : test_nocond
2613
)
lambdef_nocond -> lambda : test_nocond
2613
,
lambdef_nocond -> lambda : test_nocond
2613
if
lambdef_nocond -> lambda : test_nocond
2614
if
lambdef_nocond -> lambda varargslist : test_nocond
2614
)
lambdef_nocond -> lambda varargslist : test_nocond
2614
for
lambdef_nocond -> lambda varargslist : test_nocond
2615
if
lambdef_nocond -> lambda varargslist : test_nocond
2615
]
lambdef_nocond -> lambda varargslist : test_nocond
2615
for
lambdef_nocond -> lambda varargslist : test_nocond
2616
NAME
12
2616
True
1
2616
atom_expr
5
2616
term
29
2616
atom
4
2616
simple_stmt
2500
2616
factor
11
2616
shift_expr
7
2616
arith_expr
8
2616
False
27
2616
and_expr
9
2616
xor_expr
40
2616
{
41
2616
(
13
2616
[
15
2616
resetstats
16
2616
STRING
46
2616
raise
19
2616
small_stmt
1717
2616
test
47
2616
comparison
28
2616
or_test
23
2616
~
55
2616
-
43
2616
lambda
53
2616
+
31
2616
not_test
33
2616
and_test
48
2616
power
32
2616
pass
73
2616
None
34
2616
lambdef
37
2616
not
42
2616
NUMBER
39
2616
suite
2638
2616
expr
50
2616
continue
74
2616
NEWLINE
2502
2616
begsim
49
2616
del_stmt
75
2616
return
54
2616
nonlocal
76
2616
return_stmt
56
2616
endsim
57
2616
test_list
70
2616
raise_stmt
59
2616
assert_stmt
78
2616
stat_stmt
79
2616
global_stmt
61
2616
continue_stmt
62
2616
assert
63
2616
break_stmt
64
2616
nonlocal_stmt
80
2616
expr_stmt
81
2616
break
82
2616
del
66
2616
global
67
2616
yield
83
2616
pass_stmt
68
2616
flow_stmt
71
2616
yield_stmt
72
2616
sim_stmt
84
2617
NAME
12
2617
True
1
2617
atom_expr
5
2617
term
29
2617
atom
4
2617
simple_stmt
2486
2617
factor
11
2617
shift_expr
7
2617
arith_expr
8
2617
False
27
2617
and_expr
9
2617
xor_expr
40
2617
{
41
2617
(
13
2617
[
15
2617
resetstats
16
2617
STRING
46
2617
raise
19
2617
small_stmt
2487
2617
test
47
2617
comparison
28
2617
or_test
23
2617
~
55
2617
-
43
2617
lambda
53
2617
+
31
2617
not_test
33
2617
and_test
48
2617
power
32
2617
pass
73
2617
None
34
2617
lambdef
37
2617
not
42
2617
NUMBER
39
2617
expr
50
2617
suite
2639
2617
continue
74
2617
NEWLINE
2489
2617
begsim
49
2617
del_stmt
75
2617
return
54
2617
nonlocal
76
2617
return_stmt
56
2617
endsim
57
2617
test_list
70
2617
raise_stmt
59
2617
assert_stmt
78
2617
stat_stmt
79
2617
global_stmt
61
2617
continue_stmt
62
2617
assert
63
2617
break_stmt
64
2617
nonlocal_stmt
80
2617
expr_stmt
81
2617
break
82
2617
del
66
2617
global
67
2617
yield
83
2617
pass_stmt
68
2617
flow_stmt
71
2617
yield_stmt
72
2617
sim_stmt
84
2618
(
suite -> NEWLINE INDENT stmt_list DEDENT
2618
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2618
try
suite -> NEWLINE INDENT stmt_list DEDENT
2618
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2618
@
suite -> NEWLINE INDENT stmt_list DEDENT
2618
None
suite -> NEWLINE INDENT stmt_list DEDENT
2618
if
suite -> NEWLINE INDENT stmt_list DEDENT
2618
class
suite -> NEWLINE INDENT stmt_list DEDENT
2618
[
suite -> NEWLINE INDENT stmt_list DEDENT
2618
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2618
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2618
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2618
-
suite -> NEWLINE INDENT stmt_list DEDENT
2618
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2618
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2618
False
suite -> NEWLINE INDENT stmt_list DEDENT
2618
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2618
break
suite -> NEWLINE INDENT stmt_list DEDENT
2618
else
suite -> NEWLINE INDENT stmt_list DEDENT
2618
global
suite -> NEWLINE INDENT stmt_list DEDENT
2618
+
suite -> NEWLINE INDENT stmt_list DEDENT
2618
{
suite -> NEWLINE INDENT stmt_list DEDENT
2618
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2618
~
suite -> NEWLINE INDENT stmt_list DEDENT
2618
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
2618
for
suite -> NEWLINE INDENT stmt_list DEDENT
2618
with
suite -> NEWLINE INDENT stmt_list DEDENT
2618
not
suite -> NEWLINE INDENT stmt_list DEDENT
2618
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2618
elif
suite -> NEWLINE INDENT stmt_list DEDENT
2618
while
suite -> NEWLINE INDENT stmt_list DEDENT
2618
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2618
True
suite -> NEWLINE INDENT stmt_list DEDENT
2618
def
suite -> NEWLINE INDENT stmt_list DEDENT
2618
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2618
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2618
return
suite -> NEWLINE INDENT stmt_list DEDENT
2618
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2618
del
suite -> NEWLINE INDENT stmt_list DEDENT
2619
False
suite -> simple_stmt
2619
if
suite -> simple_stmt
2619
NUMBER
suite -> simple_stmt
2619
nonlocal
suite -> simple_stmt
2619
{
suite -> simple_stmt
2619
@
suite -> simple_stmt
2619
begsim
suite -> simple_stmt
2619
endsim
suite -> simple_stmt
2619
(
suite -> simple_stmt
2619
STRING
suite -> simple_stmt
2619
global
suite -> simple_stmt
2619
yield
suite -> simple_stmt
2619
try
suite -> simple_stmt
2619
conf
suite -> simple_stmt
2619
finally
suite -> simple_stmt
2619
for
suite -> simple_stmt
2619
not
suite -> simple_stmt
2619
DEDENT
suite -> simple_stmt
2619
while
suite -> simple_stmt
2619
lambda
suite -> simple_stmt
2619
None
suite -> simple_stmt
2619
break
suite -> simple_stmt
2619
resetstats
suite -> simple_stmt
2619
True
suite -> simple_stmt
2619
~
suite -> simple_stmt
2619
-
suite -> simple_stmt
2619
pass
suite -> simple_stmt
2619
def
suite -> simple_stmt
2619
raise
suite -> simple_stmt
2619
with
suite -> simple_stmt
2619
class
suite -> simple_stmt
2619
[
suite -> simple_stmt
2619
return
suite -> simple_stmt
2619
del
suite -> simple_stmt
2619
continue
suite -> simple_stmt
2619
assert
suite -> simple_stmt
2619
+
suite -> simple_stmt
2619
NAME
suite -> simple_stmt
2620
finally
2640
2620
True
try_stmt -> try : suite except_clause else : suite
2620
raise
try_stmt -> try : suite except_clause else : suite
2620
NUMBER
try_stmt -> try : suite except_clause else : suite
2620
pass
try_stmt -> try : suite except_clause else : suite
2620
lambda
try_stmt -> try : suite except_clause else : suite
2620
with
try_stmt -> try : suite except_clause else : suite
2620
if
try_stmt -> try : suite except_clause else : suite
2620
class
try_stmt -> try : suite except_clause else : suite
2620
not
try_stmt -> try : suite except_clause else : suite
2620
NAME
try_stmt -> try : suite except_clause else : suite
2620
del
try_stmt -> try : suite except_clause else : suite
2620
break
try_stmt -> try : suite except_clause else : suite
2620
resetstats
try_stmt -> try : suite except_clause else : suite
2620
{
try_stmt -> try : suite except_clause else : suite
2620
nonlocal
try_stmt -> try : suite except_clause else : suite
2620
None
try_stmt -> try : suite except_clause else : suite
2620
[
try_stmt -> try : suite except_clause else : suite
2620
begsim
try_stmt -> try : suite except_clause else : suite
2620
False
try_stmt -> try : suite except_clause else : suite
2620
@
try_stmt -> try : suite except_clause else : suite
2620
conf
try_stmt -> try : suite except_clause else : suite
2620
~
try_stmt -> try : suite except_clause else : suite
2620
STRING
try_stmt -> try : suite except_clause else : suite
2620
+
try_stmt -> try : suite except_clause else : suite
2620
endsim
try_stmt -> try : suite except_clause else : suite
2620
DEDENT
try_stmt -> try : suite except_clause else : suite
2620
continue
try_stmt -> try : suite except_clause else : suite
2620
global
try_stmt -> try : suite except_clause else : suite
2620
return
try_stmt -> try : suite except_clause else : suite
2620
def
try_stmt -> try : suite except_clause else : suite
2620
-
try_stmt -> try : suite except_clause else : suite
2620
assert
try_stmt -> try : suite except_clause else : suite
2620
while
try_stmt -> try : suite except_clause else : suite
2620
for
try_stmt -> try : suite except_clause else : suite
2620
(
try_stmt -> try : suite except_clause else : suite
2620
try
try_stmt -> try : suite except_clause else : suite
2620
yield
try_stmt -> try : suite except_clause else : suite
2621
NEWLINE
2641
2622
INDENT
2642
2623
[
try_stmt -> try : suite except_clause finally : suite
2623
~
try_stmt -> try : suite except_clause finally : suite
2623
True
try_stmt -> try : suite except_clause finally : suite
2623
global
try_stmt -> try : suite except_clause finally : suite
2623
pass
try_stmt -> try : suite except_clause finally : suite
2623
while
try_stmt -> try : suite except_clause finally : suite
2623
del
try_stmt -> try : suite except_clause finally : suite
2623
resetstats
try_stmt -> try : suite except_clause finally : suite
2623
nonlocal
try_stmt -> try : suite except_clause finally : suite
2623
with
try_stmt -> try : suite except_clause finally : suite
2623
for
try_stmt -> try : suite except_clause finally : suite
2623
STRING
try_stmt -> try : suite except_clause finally : suite
2623
NUMBER
try_stmt -> try : suite except_clause finally : suite
2623
assert
try_stmt -> try : suite except_clause finally : suite
2623
NAME
try_stmt -> try : suite except_clause finally : suite
2623
endsim
try_stmt -> try : suite except_clause finally : suite
2623
-
try_stmt -> try : suite except_clause finally : suite
2623
None
try_stmt -> try : suite except_clause finally : suite
2623
lambda
try_stmt -> try : suite except_clause finally : suite
2623
{
try_stmt -> try : suite except_clause finally : suite
2623
return
try_stmt -> try : suite except_clause finally : suite
2623
not
try_stmt -> try : suite except_clause finally : suite
2623
+
try_stmt -> try : suite except_clause finally : suite
2623
break
try_stmt -> try : suite except_clause finally : suite
2623
class
try_stmt -> try : suite except_clause finally : suite
2623
if
try_stmt -> try : suite except_clause finally : suite
2623
DEDENT
try_stmt -> try : suite except_clause finally : suite
2623
@
try_stmt -> try : suite except_clause finally : suite
2623
continue
try_stmt -> try : suite except_clause finally : suite
2623
(
try_stmt -> try : suite except_clause finally : suite
2623
def
try_stmt -> try : suite except_clause finally : suite
2623
raise
try_stmt -> try : suite except_clause finally : suite
2623
False
try_stmt -> try : suite except_clause finally : suite
2623
conf
try_stmt -> try : suite except_clause finally : suite
2623
yield
try_stmt -> try : suite except_clause finally : suite
2623
begsim
try_stmt -> try : suite except_clause finally : suite
2623
try
try_stmt -> try : suite except_clause finally : suite
2624
except
2491
2624
except_clause
2627
2624
False
maybe_except_clause -> 
2624
maybe_except_clause
2643
2624
del
maybe_except_clause -> 
2624
True
maybe_except_clause -> 
2624
{
maybe_except_clause -> 
2624
def
maybe_except_clause -> 
2624
(
maybe_except_clause -> 
2624
continue
maybe_except_clause -> 
2624
endsim
maybe_except_clause -> 
2624
try
maybe_except_clause -> 
2624
None
maybe_except_clause -> 
2624
global
maybe_except_clause -> 
2624
resetstats
maybe_except_clause -> 
2624
class
maybe_except_clause -> 
2624
STRING
maybe_except_clause -> 
2624
raise
maybe_except_clause -> 
2624
begsim
maybe_except_clause -> 
2624
-
maybe_except_clause -> 
2624
@
maybe_except_clause -> 
2624
yield
maybe_except_clause -> 
2624
break
maybe_except_clause -> 
2624
assert
maybe_except_clause -> 
2624
else
maybe_except_clause -> 
2624
[
maybe_except_clause -> 
2624
NAME
maybe_except_clause -> 
2624
lambda
maybe_except_clause -> 
2624
finally
maybe_except_clause -> 
2624
while
maybe_except_clause -> 
2624
DEDENT
maybe_except_clause -> 
2624
for
maybe_except_clause -> 
2624
not
maybe_except_clause -> 
2624
conf
maybe_except_clause -> 
2624
pass
maybe_except_clause -> 
2624
nonlocal
maybe_except_clause -> 
2624
return
maybe_except_clause -> 
2624
if
maybe_except_clause -> 
2624
+
maybe_except_clause -> 
2624
with
maybe_except_clause -> 
2624
~
maybe_except_clause -> 
2624
NUMBER
maybe_except_clause -> 
2625
:
2644
2626
True
1
2626
if
1708
2626
decorated
1709
2626
atom
4
2626
atom_expr
5
2626
while_stmt
1710
2626
try
1711
2626
shift_expr
7
2626
arith_expr
8
2626
and_expr
9
2626
conf
1712
2626
factor
11
2626
NAME
12
2626
(
13
2626
for
1713
2626
[
15
2626
resetstats
16
2626
compound_stmt
1714
2626
while
1715
2626
raise
19
2626
class
1716
2626
small_stmt
1717
2626
or_test
23
2626
for_stmt
1718
2626
try_stmt
1719
2626
def
1720
2626
False
27
2626
comparison
28
2626
term
29
2626
simple_stmt
1721
2626
+
31
2626
power
32
2626
not_test
33
2626
None
34
2626
with
1722
2626
classdef
1723
2626
lambdef
37
2626
if_stmt
1724
2626
NUMBER
39
2626
xor_expr
40
2626
{
41
2626
not
42
2626
-
43
2626
stmt_list
2645
2626
funcdef
1725
2626
decorators
1726
2626
STRING
46
2626
test
47
2626
and_test
48
2626
begsim
49
2626
expr
50
2626
with_stmt
1727
2626
lambda
53
2626
return
54
2626
~
55
2626
confdef
1728
2626
return_stmt
56
2626
endsim
57
2626
@
58
2626
raise_stmt
59
2626
global_stmt
61
2626
continue_stmt
62
2626
assert
63
2626
break_stmt
64
2626
del
66
2626
global
67
2626
pass_stmt
68
2626
test_list
70
2626
flow_stmt
71
2626
yield_stmt
72
2626
stmt
1729
2626
pass
73
2626
continue
74
2626
del_stmt
75
2626
nonlocal
76
2626
decorator
77
2626
assert_stmt
78
2626
stat_stmt
79
2626
nonlocal_stmt
80
2626
expr_stmt
81
2626
break
82
2626
yield
83
2626
sim_stmt
84
2627
break
maybe_except_clause -> except_clause
2627
+
maybe_except_clause -> except_clause
2627
finally
maybe_except_clause -> except_clause
2627
-
maybe_except_clause -> except_clause
2627
assert
maybe_except_clause -> except_clause
2627
del
maybe_except_clause -> except_clause
2627
nonlocal
maybe_except_clause -> except_clause
2627
conf
maybe_except_clause -> except_clause
2627
STRING
maybe_except_clause -> except_clause
2627
~
maybe_except_clause -> except_clause
2627
continue
maybe_except_clause -> except_clause
2627
{
maybe_except_clause -> except_clause
2627
lambda
maybe_except_clause -> except_clause
2627
True
maybe_except_clause -> except_clause
2627
not
maybe_except_clause -> except_clause
2627
for
maybe_except_clause -> except_clause
2627
None
maybe_except_clause -> except_clause
2627
raise
maybe_except_clause -> except_clause
2627
begsim
maybe_except_clause -> except_clause
2627
resetstats
maybe_except_clause -> except_clause
2627
while
maybe_except_clause -> except_clause
2627
def
maybe_except_clause -> except_clause
2627
global
maybe_except_clause -> except_clause
2627
DEDENT
maybe_except_clause -> except_clause
2627
else
maybe_except_clause -> except_clause
2627
False
maybe_except_clause -> except_clause
2627
(
maybe_except_clause -> except_clause
2627
return
maybe_except_clause -> except_clause
2627
NUMBER
maybe_except_clause -> except_clause
2627
pass
maybe_except_clause -> except_clause
2627
yield
maybe_except_clause -> except_clause
2627
with
maybe_except_clause -> except_clause
2627
if
maybe_except_clause -> except_clause
2627
[
maybe_except_clause -> except_clause
2627
class
maybe_except_clause -> except_clause
2627
endsim
maybe_except_clause -> except_clause
2627
@
maybe_except_clause -> except_clause
2627
try
maybe_except_clause -> except_clause
2627
NAME
maybe_except_clause -> except_clause
2628
continue
except_clause -> except : suite maybe_except_clause
2628
break
except_clause -> except : suite maybe_except_clause
2628
resetstats
except_clause -> except : suite maybe_except_clause
2628
None
except_clause -> except : suite maybe_except_clause
2628
True
except_clause -> except : suite maybe_except_clause
2628
NUMBER
except_clause -> except : suite maybe_except_clause
2628
pass
except_clause -> except : suite maybe_except_clause
2628
~
except_clause -> except : suite maybe_except_clause
2628
raise
except_clause -> except : suite maybe_except_clause
2628
global
except_clause -> except : suite maybe_except_clause
2628
yield
except_clause -> except : suite maybe_except_clause
2628
NAME
except_clause -> except : suite maybe_except_clause
2628
try
except_clause -> except : suite maybe_except_clause
2628
if
except_clause -> except : suite maybe_except_clause
2628
else
except_clause -> except : suite maybe_except_clause
2628
class
except_clause -> except : suite maybe_except_clause
2628
def
except_clause -> except : suite maybe_except_clause
2628
for
except_clause -> except : suite maybe_except_clause
2628
+
except_clause -> except : suite maybe_except_clause
2628
assert
except_clause -> except : suite maybe_except_clause
2628
(
except_clause -> except : suite maybe_except_clause
2628
DEDENT
except_clause -> except : suite maybe_except_clause
2628
-
except_clause -> except : suite maybe_except_clause
2628
nonlocal
except_clause -> except : suite maybe_except_clause
2628
finally
except_clause -> except : suite maybe_except_clause
2628
while
except_clause -> except : suite maybe_except_clause
2628
@
except_clause -> except : suite maybe_except_clause
2628
return
except_clause -> except : suite maybe_except_clause
2628
conf
except_clause -> except : suite maybe_except_clause
2628
not
except_clause -> except : suite maybe_except_clause
2628
del
except_clause -> except : suite maybe_except_clause
2628
False
except_clause -> except : suite maybe_except_clause
2628
begsim
except_clause -> except : suite maybe_except_clause
2628
lambda
except_clause -> except : suite maybe_except_clause
2628
endsim
except_clause -> except : suite maybe_except_clause
2628
STRING
except_clause -> except : suite maybe_except_clause
2628
with
except_clause -> except : suite maybe_except_clause
2628
{
except_clause -> except : suite maybe_except_clause
2628
[
except_clause -> except : suite maybe_except_clause
2629
STRING
simple_stmt -> small_stmt NEWLINE
2629
while
simple_stmt -> small_stmt NEWLINE
2629
~
simple_stmt -> small_stmt NEWLINE
2629
del
simple_stmt -> small_stmt NEWLINE
2629
global
simple_stmt -> small_stmt NEWLINE
2629
NUMBER
simple_stmt -> small_stmt NEWLINE
2629
True
simple_stmt -> small_stmt NEWLINE
2629
DEDENT
simple_stmt -> small_stmt NEWLINE
2629
NAME
simple_stmt -> small_stmt NEWLINE
2629
with
simple_stmt -> small_stmt NEWLINE
2629
(
simple_stmt -> small_stmt NEWLINE
2629
-
simple_stmt -> small_stmt NEWLINE
2629
+
simple_stmt -> small_stmt NEWLINE
2629
continue
simple_stmt -> small_stmt NEWLINE
2629
endsim
simple_stmt -> small_stmt NEWLINE
2629
try
simple_stmt -> small_stmt NEWLINE
2629
[
simple_stmt -> small_stmt NEWLINE
2629
raise
simple_stmt -> small_stmt NEWLINE
2629
if
simple_stmt -> small_stmt NEWLINE
2629
{
simple_stmt -> small_stmt NEWLINE
2629
except
simple_stmt -> small_stmt NEWLINE
2629
begsim
simple_stmt -> small_stmt NEWLINE
2629
return
simple_stmt -> small_stmt NEWLINE
2629
finally
simple_stmt -> small_stmt NEWLINE
2629
assert
simple_stmt -> small_stmt NEWLINE
2629
nonlocal
simple_stmt -> small_stmt NEWLINE
2629
not
simple_stmt -> small_stmt NEWLINE
2629
conf
simple_stmt -> small_stmt NEWLINE
2629
yield
simple_stmt -> small_stmt NEWLINE
2629
resetstats
simple_stmt -> small_stmt NEWLINE
2629
None
simple_stmt -> small_stmt NEWLINE
2629
else
simple_stmt -> small_stmt NEWLINE
2629
for
simple_stmt -> small_stmt NEWLINE
2629
class
simple_stmt -> small_stmt NEWLINE
2629
@
simple_stmt -> small_stmt NEWLINE
2629
pass
simple_stmt -> small_stmt NEWLINE
2629
lambda
simple_stmt -> small_stmt NEWLINE
2629
False
simple_stmt -> small_stmt NEWLINE
2629
break
simple_stmt -> small_stmt NEWLINE
2629
def
simple_stmt -> small_stmt NEWLINE
2630
for
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
+
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
with
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
raise
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
STRING
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
NAME
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
False
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
resetstats
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
try
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
del
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
~
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
-
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
DEDENT
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
lambda
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
[
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
pass
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
while
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
begsim
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
@
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
{
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
if
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
True
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
endsim
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
return
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
not
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
break
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
global
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
assert
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
None
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
yield
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
continue
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
def
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
NUMBER
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
conf
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
class
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
nonlocal
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2630
(
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2631
:
2646
2632
break
while_stmt -> while test : suite else : suite
2632
yield
while_stmt -> while test : suite else : suite
2632
(
while_stmt -> while test : suite else : suite
2632
pass
while_stmt -> while test : suite else : suite
2632
with
while_stmt -> while test : suite else : suite
2632
False
while_stmt -> while test : suite else : suite
2632
[
while_stmt -> while test : suite else : suite
2632
not
while_stmt -> while test : suite else : suite
2632
while
while_stmt -> while test : suite else : suite
2632
DEDENT
while_stmt -> while test : suite else : suite
2632
~
while_stmt -> while test : suite else : suite
2632
+
while_stmt -> while test : suite else : suite
2632
-
while_stmt -> while test : suite else : suite
2632
raise
while_stmt -> while test : suite else : suite
2632
endsim
while_stmt -> while test : suite else : suite
2632
begsim
while_stmt -> while test : suite else : suite
2632
{
while_stmt -> while test : suite else : suite
2632
del
while_stmt -> while test : suite else : suite
2632
@
while_stmt -> while test : suite else : suite
2632
global
while_stmt -> while test : suite else : suite
2632
class
while_stmt -> while test : suite else : suite
2632
assert
while_stmt -> while test : suite else : suite
2632
continue
while_stmt -> while test : suite else : suite
2632
True
while_stmt -> while test : suite else : suite
2632
for
while_stmt -> while test : suite else : suite
2632
STRING
while_stmt -> while test : suite else : suite
2632
try
while_stmt -> while test : suite else : suite
2632
def
while_stmt -> while test : suite else : suite
2632
conf
while_stmt -> while test : suite else : suite
2632
resetstats
while_stmt -> while test : suite else : suite
2632
if
while_stmt -> while test : suite else : suite
2632
return
while_stmt -> while test : suite else : suite
2632
NUMBER
while_stmt -> while test : suite else : suite
2632
lambda
while_stmt -> while test : suite else : suite
2632
nonlocal
while_stmt -> while test : suite else : suite
2632
None
while_stmt -> while test : suite else : suite
2632
NAME
while_stmt -> while test : suite else : suite
2633
(
suite -> NEWLINE INDENT stmt_list DEDENT
2633
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2633
try
suite -> NEWLINE INDENT stmt_list DEDENT
2633
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2633
@
suite -> NEWLINE INDENT stmt_list DEDENT
2633
None
suite -> NEWLINE INDENT stmt_list DEDENT
2633
if
suite -> NEWLINE INDENT stmt_list DEDENT
2633
class
suite -> NEWLINE INDENT stmt_list DEDENT
2633
[
suite -> NEWLINE INDENT stmt_list DEDENT
2633
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2633
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2633
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2633
-
suite -> NEWLINE INDENT stmt_list DEDENT
2633
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2633
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2633
False
suite -> NEWLINE INDENT stmt_list DEDENT
2633
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2633
break
suite -> NEWLINE INDENT stmt_list DEDENT
2633
else
suite -> NEWLINE INDENT stmt_list DEDENT
2633
global
suite -> NEWLINE INDENT stmt_list DEDENT
2633
+
suite -> NEWLINE INDENT stmt_list DEDENT
2633
{
suite -> NEWLINE INDENT stmt_list DEDENT
2633
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2633
~
suite -> NEWLINE INDENT stmt_list DEDENT
2633
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
2633
for
suite -> NEWLINE INDENT stmt_list DEDENT
2633
with
suite -> NEWLINE INDENT stmt_list DEDENT
2633
not
suite -> NEWLINE INDENT stmt_list DEDENT
2633
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2633
while
suite -> NEWLINE INDENT stmt_list DEDENT
2633
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2633
True
suite -> NEWLINE INDENT stmt_list DEDENT
2633
def
suite -> NEWLINE INDENT stmt_list DEDENT
2633
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2633
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2633
return
suite -> NEWLINE INDENT stmt_list DEDENT
2633
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2633
del
suite -> NEWLINE INDENT stmt_list DEDENT
2634
endsim
classdef -> class NAME ( arglist ) : suite
2634
lambda
classdef -> class NAME ( arglist ) : suite
2634
{
classdef -> class NAME ( arglist ) : suite
2634
break
classdef -> class NAME ( arglist ) : suite
2634
assert
classdef -> class NAME ( arglist ) : suite
2634
None
classdef -> class NAME ( arglist ) : suite
2634
yield
classdef -> class NAME ( arglist ) : suite
2634
-
classdef -> class NAME ( arglist ) : suite
2634
~
classdef -> class NAME ( arglist ) : suite
2634
while
classdef -> class NAME ( arglist ) : suite
2634
raise
classdef -> class NAME ( arglist ) : suite
2634
global
classdef -> class NAME ( arglist ) : suite
2634
with
classdef -> class NAME ( arglist ) : suite
2634
continue
classdef -> class NAME ( arglist ) : suite
2634
False
classdef -> class NAME ( arglist ) : suite
2634
[
classdef -> class NAME ( arglist ) : suite
2634
conf
classdef -> class NAME ( arglist ) : suite
2634
return
classdef -> class NAME ( arglist ) : suite
2634
NAME
classdef -> class NAME ( arglist ) : suite
2634
STRING
classdef -> class NAME ( arglist ) : suite
2634
not
classdef -> class NAME ( arglist ) : suite
2634
if
classdef -> class NAME ( arglist ) : suite
2634
DEDENT
classdef -> class NAME ( arglist ) : suite
2634
@
classdef -> class NAME ( arglist ) : suite
2634
begsim
classdef -> class NAME ( arglist ) : suite
2634
(
classdef -> class NAME ( arglist ) : suite
2634
def
classdef -> class NAME ( arglist ) : suite
2634
resetstats
classdef -> class NAME ( arglist ) : suite
2634
True
classdef -> class NAME ( arglist ) : suite
2634
try
classdef -> class NAME ( arglist ) : suite
2634
+
classdef -> class NAME ( arglist ) : suite
2634
nonlocal
classdef -> class NAME ( arglist ) : suite
2634
NUMBER
classdef -> class NAME ( arglist ) : suite
2634
for
classdef -> class NAME ( arglist ) : suite
2634
pass
classdef -> class NAME ( arglist ) : suite
2634
del
classdef -> class NAME ( arglist ) : suite
2634
class
classdef -> class NAME ( arglist ) : suite
2635
(
suite -> NEWLINE INDENT stmt_list DEDENT
2635
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2635
try
suite -> NEWLINE INDENT stmt_list DEDENT
2635
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2635
@
suite -> NEWLINE INDENT stmt_list DEDENT
2635
None
suite -> NEWLINE INDENT stmt_list DEDENT
2635
if
suite -> NEWLINE INDENT stmt_list DEDENT
2635
class
suite -> NEWLINE INDENT stmt_list DEDENT
2635
[
suite -> NEWLINE INDENT stmt_list DEDENT
2635
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2635
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2635
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2635
-
suite -> NEWLINE INDENT stmt_list DEDENT
2635
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2635
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2635
False
suite -> NEWLINE INDENT stmt_list DEDENT
2635
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2635
break
suite -> NEWLINE INDENT stmt_list DEDENT
2635
global
suite -> NEWLINE INDENT stmt_list DEDENT
2635
+
suite -> NEWLINE INDENT stmt_list DEDENT
2635
{
suite -> NEWLINE INDENT stmt_list DEDENT
2635
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2635
~
suite -> NEWLINE INDENT stmt_list DEDENT
2635
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
2635
for
suite -> NEWLINE INDENT stmt_list DEDENT
2635
with
suite -> NEWLINE INDENT stmt_list DEDENT
2635
not
suite -> NEWLINE INDENT stmt_list DEDENT
2635
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2635
while
suite -> NEWLINE INDENT stmt_list DEDENT
2635
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2635
True
suite -> NEWLINE INDENT stmt_list DEDENT
2635
def
suite -> NEWLINE INDENT stmt_list DEDENT
2635
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2635
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2635
return
suite -> NEWLINE INDENT stmt_list DEDENT
2635
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2635
del
suite -> NEWLINE INDENT stmt_list DEDENT
2636
if
funcdef -> def NAME ( parameters ) : suite
2636
assert
funcdef -> def NAME ( parameters ) : suite
2636
try
funcdef -> def NAME ( parameters ) : suite
2636
(
funcdef -> def NAME ( parameters ) : suite
2636
resetstats
funcdef -> def NAME ( parameters ) : suite
2636
+
funcdef -> def NAME ( parameters ) : suite
2636
raise
funcdef -> def NAME ( parameters ) : suite
2636
for
funcdef -> def NAME ( parameters ) : suite
2636
{
funcdef -> def NAME ( parameters ) : suite
2636
yield
funcdef -> def NAME ( parameters ) : suite
2636
return
funcdef -> def NAME ( parameters ) : suite
2636
endsim
funcdef -> def NAME ( parameters ) : suite
2636
conf
funcdef -> def NAME ( parameters ) : suite
2636
with
funcdef -> def NAME ( parameters ) : suite
2636
[
funcdef -> def NAME ( parameters ) : suite
2636
continue
funcdef -> def NAME ( parameters ) : suite
2636
break
funcdef -> def NAME ( parameters ) : suite
2636
NAME
funcdef -> def NAME ( parameters ) : suite
2636
global
funcdef -> def NAME ( parameters ) : suite
2636
False
funcdef -> def NAME ( parameters ) : suite
2636
~
funcdef -> def NAME ( parameters ) : suite
2636
nonlocal
funcdef -> def NAME ( parameters ) : suite
2636
NUMBER
funcdef -> def NAME ( parameters ) : suite
2636
lambda
funcdef -> def NAME ( parameters ) : suite
2636
STRING
funcdef -> def NAME ( parameters ) : suite
2636
True
funcdef -> def NAME ( parameters ) : suite
2636
DEDENT
funcdef -> def NAME ( parameters ) : suite
2636
while
funcdef -> def NAME ( parameters ) : suite
2636
not
funcdef -> def NAME ( parameters ) : suite
2636
pass
funcdef -> def NAME ( parameters ) : suite
2636
class
funcdef -> def NAME ( parameters ) : suite
2636
@
funcdef -> def NAME ( parameters ) : suite
2636
None
funcdef -> def NAME ( parameters ) : suite
2636
begsim
funcdef -> def NAME ( parameters ) : suite
2636
def
funcdef -> def NAME ( parameters ) : suite
2636
-
funcdef -> def NAME ( parameters ) : suite
2636
del
funcdef -> def NAME ( parameters ) : suite
2637
,
lambdef_nocond -> lambda varargslist : test_nocond
2637
)
lambdef_nocond -> lambda varargslist : test_nocond
2637
for
lambdef_nocond -> lambda varargslist : test_nocond
2637
if
lambdef_nocond -> lambda varargslist : test_nocond
2638
not
if_stmt -> if test : suite elif_clause else : suite
2638
(
if_stmt -> if test : suite elif_clause else : suite
2638
raise
if_stmt -> if test : suite elif_clause else : suite
2638
nonlocal
if_stmt -> if test : suite elif_clause else : suite
2638
NAME
if_stmt -> if test : suite elif_clause else : suite
2638
lambda
if_stmt -> if test : suite elif_clause else : suite
2638
@
if_stmt -> if test : suite elif_clause else : suite
2638
[
if_stmt -> if test : suite elif_clause else : suite
2638
NUMBER
if_stmt -> if test : suite elif_clause else : suite
2638
DEDENT
if_stmt -> if test : suite elif_clause else : suite
2638
resetstats
if_stmt -> if test : suite elif_clause else : suite
2638
break
if_stmt -> if test : suite elif_clause else : suite
2638
endsim
if_stmt -> if test : suite elif_clause else : suite
2638
return
if_stmt -> if test : suite elif_clause else : suite
2638
+
if_stmt -> if test : suite elif_clause else : suite
2638
None
if_stmt -> if test : suite elif_clause else : suite
2638
del
if_stmt -> if test : suite elif_clause else : suite
2638
conf
if_stmt -> if test : suite elif_clause else : suite
2638
{
if_stmt -> if test : suite elif_clause else : suite
2638
False
if_stmt -> if test : suite elif_clause else : suite
2638
def
if_stmt -> if test : suite elif_clause else : suite
2638
with
if_stmt -> if test : suite elif_clause else : suite
2638
while
if_stmt -> if test : suite elif_clause else : suite
2638
True
if_stmt -> if test : suite elif_clause else : suite
2638
try
if_stmt -> if test : suite elif_clause else : suite
2638
if
if_stmt -> if test : suite elif_clause else : suite
2638
continue
if_stmt -> if test : suite elif_clause else : suite
2638
global
if_stmt -> if test : suite elif_clause else : suite
2638
-
if_stmt -> if test : suite elif_clause else : suite
2638
class
if_stmt -> if test : suite elif_clause else : suite
2638
STRING
if_stmt -> if test : suite elif_clause else : suite
2638
~
if_stmt -> if test : suite elif_clause else : suite
2638
assert
if_stmt -> if test : suite elif_clause else : suite
2638
begsim
if_stmt -> if test : suite elif_clause else : suite
2638
pass
if_stmt -> if test : suite elif_clause else : suite
2638
yield
if_stmt -> if test : suite elif_clause else : suite
2638
for
if_stmt -> if test : suite elif_clause else : suite
2639
+
elif_clause -> 
2639
elif_clause
2647
2639
False
elif_clause -> 
2639
elif
2560
2639
pass
elif_clause -> 
2639
class
elif_clause -> 
2639
DEDENT
elif_clause -> 
2639
~
elif_clause -> 
2639
[
elif_clause -> 
2639
conf
elif_clause -> 
2639
not
elif_clause -> 
2639
while
elif_clause -> 
2639
else
elif_clause -> 
2639
@
elif_clause -> 
2639
True
elif_clause -> 
2639
if
elif_clause -> 
2639
lambda
elif_clause -> 
2639
STRING
elif_clause -> 
2639
resetstats
elif_clause -> 
2639
assert
elif_clause -> 
2639
for
elif_clause -> 
2639
(
elif_clause -> 
2639
return
elif_clause -> 
2639
nonlocal
elif_clause -> 
2639
endsim
elif_clause -> 
2639
None
elif_clause -> 
2639
global
elif_clause -> 
2639
NAME
elif_clause -> 
2639
break
elif_clause -> 
2639
continue
elif_clause -> 
2639
try
elif_clause -> 
2639
def
elif_clause -> 
2639
yield
elif_clause -> 
2639
begsim
elif_clause -> 
2639
NUMBER
elif_clause -> 
2639
del
elif_clause -> 
2639
-
elif_clause -> 
2639
{
elif_clause -> 
2639
raise
elif_clause -> 
2639
with
elif_clause -> 
2640
:
2648
2641
STRING
simple_stmt -> small_stmt NEWLINE
2641
while
simple_stmt -> small_stmt NEWLINE
2641
~
simple_stmt -> small_stmt NEWLINE
2641
del
simple_stmt -> small_stmt NEWLINE
2641
global
simple_stmt -> small_stmt NEWLINE
2641
NUMBER
simple_stmt -> small_stmt NEWLINE
2641
True
simple_stmt -> small_stmt NEWLINE
2641
DEDENT
simple_stmt -> small_stmt NEWLINE
2641
NAME
simple_stmt -> small_stmt NEWLINE
2641
with
simple_stmt -> small_stmt NEWLINE
2641
(
simple_stmt -> small_stmt NEWLINE
2641
-
simple_stmt -> small_stmt NEWLINE
2641
+
simple_stmt -> small_stmt NEWLINE
2641
continue
simple_stmt -> small_stmt NEWLINE
2641
endsim
simple_stmt -> small_stmt NEWLINE
2641
try
simple_stmt -> small_stmt NEWLINE
2641
[
simple_stmt -> small_stmt NEWLINE
2641
raise
simple_stmt -> small_stmt NEWLINE
2641
if
simple_stmt -> small_stmt NEWLINE
2641
{
simple_stmt -> small_stmt NEWLINE
2641
begsim
simple_stmt -> small_stmt NEWLINE
2641
return
simple_stmt -> small_stmt NEWLINE
2641
finally
simple_stmt -> small_stmt NEWLINE
2641
assert
simple_stmt -> small_stmt NEWLINE
2641
nonlocal
simple_stmt -> small_stmt NEWLINE
2641
not
simple_stmt -> small_stmt NEWLINE
2641
conf
simple_stmt -> small_stmt NEWLINE
2641
yield
simple_stmt -> small_stmt NEWLINE
2641
resetstats
simple_stmt -> small_stmt NEWLINE
2641
None
simple_stmt -> small_stmt NEWLINE
2641
for
simple_stmt -> small_stmt NEWLINE
2641
class
simple_stmt -> small_stmt NEWLINE
2641
@
simple_stmt -> small_stmt NEWLINE
2641
pass
simple_stmt -> small_stmt NEWLINE
2641
lambda
simple_stmt -> small_stmt NEWLINE
2641
False
simple_stmt -> small_stmt NEWLINE
2641
break
simple_stmt -> small_stmt NEWLINE
2641
def
simple_stmt -> small_stmt NEWLINE
2642
True
1
2642
if
1708
2642
decorated
1709
2642
atom
4
2642
atom_expr
5
2642
while_stmt
1710
2642
try
1711
2642
shift_expr
7
2642
arith_expr
8
2642
and_expr
9
2642
conf
1712
2642
factor
11
2642
NAME
12
2642
(
13
2642
for
1713
2642
[
15
2642
resetstats
16
2642
compound_stmt
1714
2642
while
1715
2642
raise
19
2642
class
1716
2642
small_stmt
1717
2642
or_test
23
2642
for_stmt
1718
2642
try_stmt
1719
2642
def
1720
2642
False
27
2642
comparison
28
2642
term
29
2642
simple_stmt
1721
2642
+
31
2642
power
32
2642
not_test
33
2642
None
34
2642
with
1722
2642
classdef
1723
2642
lambdef
37
2642
if_stmt
1724
2642
NUMBER
39
2642
xor_expr
40
2642
{
41
2642
not
42
2642
-
43
2642
stmt_list
2649
2642
funcdef
1725
2642
decorators
1726
2642
STRING
46
2642
test
47
2642
and_test
48
2642
begsim
49
2642
expr
50
2642
with_stmt
1727
2642
lambda
53
2642
return
54
2642
~
55
2642
confdef
1728
2642
return_stmt
56
2642
endsim
57
2642
@
58
2642
raise_stmt
59
2642
global_stmt
61
2642
continue_stmt
62
2642
assert
63
2642
break_stmt
64
2642
del
66
2642
global
67
2642
pass_stmt
68
2642
test_list
70
2642
flow_stmt
71
2642
yield_stmt
72
2642
stmt
1729
2642
pass
73
2642
continue
74
2642
del_stmt
75
2642
nonlocal
76
2642
decorator
77
2642
assert_stmt
78
2642
stat_stmt
79
2642
nonlocal_stmt
80
2642
expr_stmt
81
2642
break
82
2642
yield
83
2642
sim_stmt
84
2643
while
except_clause -> except test : suite maybe_except_clause
2643
assert
except_clause -> except test : suite maybe_except_clause
2643
yield
except_clause -> except test : suite maybe_except_clause
2643
endsim
except_clause -> except test : suite maybe_except_clause
2643
True
except_clause -> except test : suite maybe_except_clause
2643
continue
except_clause -> except test : suite maybe_except_clause
2643
(
except_clause -> except test : suite maybe_except_clause
2643
~
except_clause -> except test : suite maybe_except_clause
2643
global
except_clause -> except test : suite maybe_except_clause
2643
del
except_clause -> except test : suite maybe_except_clause
2643
[
except_clause -> except test : suite maybe_except_clause
2643
def
except_clause -> except test : suite maybe_except_clause
2643
NAME
except_clause -> except test : suite maybe_except_clause
2643
finally
except_clause -> except test : suite maybe_except_clause
2643
return
except_clause -> except test : suite maybe_except_clause
2643
else
except_clause -> except test : suite maybe_except_clause
2643
not
except_clause -> except test : suite maybe_except_clause
2643
pass
except_clause -> except test : suite maybe_except_clause
2643
raise
except_clause -> except test : suite maybe_except_clause
2643
class
except_clause -> except test : suite maybe_except_clause
2643
@
except_clause -> except test : suite maybe_except_clause
2643
nonlocal
except_clause -> except test : suite maybe_except_clause
2643
break
except_clause -> except test : suite maybe_except_clause
2643
if
except_clause -> except test : suite maybe_except_clause
2643
begsim
except_clause -> except test : suite maybe_except_clause
2643
{
except_clause -> except test : suite maybe_except_clause
2643
DEDENT
except_clause -> except test : suite maybe_except_clause
2643
False
except_clause -> except test : suite maybe_except_clause
2643
STRING
except_clause -> except test : suite maybe_except_clause
2643
with
except_clause -> except test : suite maybe_except_clause
2643
try
except_clause -> except test : suite maybe_except_clause
2643
conf
except_clause -> except test : suite maybe_except_clause
2643
+
except_clause -> except test : suite maybe_except_clause
2643
None
except_clause -> except test : suite maybe_except_clause
2643
NUMBER
except_clause -> except test : suite maybe_except_clause
2643
for
except_clause -> except test : suite maybe_except_clause
2643
resetstats
except_clause -> except test : suite maybe_except_clause
2643
-
except_clause -> except test : suite maybe_except_clause
2643
lambda
except_clause -> except test : suite maybe_except_clause
2644
NAME
12
2644
True
1
2644
atom_expr
5
2644
term
29
2644
NEWLINE
2598
2644
atom
4
2644
simple_stmt
2599
2644
factor
11
2644
shift_expr
7
2644
arith_expr
8
2644
False
27
2644
and_expr
9
2644
xor_expr
40
2644
{
41
2644
(
13
2644
[
15
2644
resetstats
16
2644
STRING
46
2644
raise
19
2644
small_stmt
2601
2644
test
47
2644
comparison
28
2644
or_test
23
2644
~
55
2644
-
43
2644
lambda
53
2644
+
31
2644
not_test
33
2644
suite
2650
2644
and_test
48
2644
power
32
2644
pass
73
2644
None
34
2644
lambdef
37
2644
not
42
2644
NUMBER
39
2644
expr
50
2644
continue
74
2644
begsim
49
2644
del_stmt
75
2644
return
54
2644
nonlocal
76
2644
return_stmt
56
2644
endsim
57
2644
test_list
70
2644
raise_stmt
59
2644
assert_stmt
78
2644
stat_stmt
79
2644
global_stmt
61
2644
continue_stmt
62
2644
assert
63
2644
break_stmt
64
2644
nonlocal_stmt
80
2644
expr_stmt
81
2644
break
82
2644
del
66
2644
global
67
2644
yield
83
2644
pass_stmt
68
2644
flow_stmt
71
2644
yield_stmt
72
2644
sim_stmt
84
2645
DEDENT
2651
2646
NAME
12
2646
True
1
2646
atom_expr
5
2646
term
29
2646
atom
4
2646
simple_stmt
2500
2646
factor
11
2646
shift_expr
7
2646
arith_expr
8
2646
suite
2652
2646
False
27
2646
and_expr
9
2646
xor_expr
40
2646
{
41
2646
(
13
2646
[
15
2646
resetstats
16
2646
STRING
46
2646
raise
19
2646
small_stmt
1717
2646
test
47
2646
comparison
28
2646
or_test
23
2646
~
55
2646
-
43
2646
lambda
53
2646
+
31
2646
not_test
33
2646
and_test
48
2646
power
32
2646
pass
73
2646
None
34
2646
lambdef
37
2646
not
42
2646
NUMBER
39
2646
expr
50
2646
continue
74
2646
NEWLINE
2502
2646
begsim
49
2646
del_stmt
75
2646
return
54
2646
nonlocal
76
2646
return_stmt
56
2646
endsim
57
2646
test_list
70
2646
raise_stmt
59
2646
assert_stmt
78
2646
stat_stmt
79
2646
global_stmt
61
2646
continue_stmt
62
2646
assert
63
2646
break_stmt
64
2646
nonlocal_stmt
80
2646
expr_stmt
81
2646
break
82
2646
del
66
2646
global
67
2646
yield
83
2646
pass_stmt
68
2646
flow_stmt
71
2646
yield_stmt
72
2646
sim_stmt
84
2647
STRING
elif_clause -> elif test : suite elif_clause
2647
global
elif_clause -> elif test : suite elif_clause
2647
begsim
elif_clause -> elif test : suite elif_clause
2647
class
elif_clause -> elif test : suite elif_clause
2647
NUMBER
elif_clause -> elif test : suite elif_clause
2647
+
elif_clause -> elif test : suite elif_clause
2647
NAME
elif_clause -> elif test : suite elif_clause
2647
@
elif_clause -> elif test : suite elif_clause
2647
conf
elif_clause -> elif test : suite elif_clause
2647
del
elif_clause -> elif test : suite elif_clause
2647
endsim
elif_clause -> elif test : suite elif_clause
2647
break
elif_clause -> elif test : suite elif_clause
2647
lambda
elif_clause -> elif test : suite elif_clause
2647
True
elif_clause -> elif test : suite elif_clause
2647
try
elif_clause -> elif test : suite elif_clause
2647
assert
elif_clause -> elif test : suite elif_clause
2647
(
elif_clause -> elif test : suite elif_clause
2647
{
elif_clause -> elif test : suite elif_clause
2647
else
elif_clause -> elif test : suite elif_clause
2647
raise
elif_clause -> elif test : suite elif_clause
2647
if
elif_clause -> elif test : suite elif_clause
2647
DEDENT
elif_clause -> elif test : suite elif_clause
2647
while
elif_clause -> elif test : suite elif_clause
2647
def
elif_clause -> elif test : suite elif_clause
2647
return
elif_clause -> elif test : suite elif_clause
2647
with
elif_clause -> elif test : suite elif_clause
2647
pass
elif_clause -> elif test : suite elif_clause
2647
False
elif_clause -> elif test : suite elif_clause
2647
yield
elif_clause -> elif test : suite elif_clause
2647
for
elif_clause -> elif test : suite elif_clause
2647
continue
elif_clause -> elif test : suite elif_clause
2647
resetstats
elif_clause -> elif test : suite elif_clause
2647
-
elif_clause -> elif test : suite elif_clause
2647
nonlocal
elif_clause -> elif test : suite elif_clause
2647
None
elif_clause -> elif test : suite elif_clause
2647
[
elif_clause -> elif test : suite elif_clause
2647
not
elif_clause -> elif test : suite elif_clause
2647
~
elif_clause -> elif test : suite elif_clause
2648
NAME
12
2648
True
1
2648
atom_expr
5
2648
term
29
2648
atom
4
2648
simple_stmt
2500
2648
factor
11
2648
shift_expr
7
2648
arith_expr
8
2648
False
27
2648
and_expr
9
2648
suite
2653
2648
xor_expr
40
2648
{
41
2648
(
13
2648
[
15
2648
resetstats
16
2648
STRING
46
2648
raise
19
2648
small_stmt
1717
2648
test
47
2648
comparison
28
2648
or_test
23
2648
~
55
2648
-
43
2648
lambda
53
2648
+
31
2648
not_test
33
2648
and_test
48
2648
power
32
2648
pass
73
2648
None
34
2648
lambdef
37
2648
not
42
2648
NUMBER
39
2648
expr
50
2648
continue
74
2648
NEWLINE
2502
2648
begsim
49
2648
del_stmt
75
2648
return
54
2648
nonlocal
76
2648
return_stmt
56
2648
endsim
57
2648
test_list
70
2648
raise_stmt
59
2648
assert_stmt
78
2648
stat_stmt
79
2648
global_stmt
61
2648
continue_stmt
62
2648
assert
63
2648
break_stmt
64
2648
nonlocal_stmt
80
2648
expr_stmt
81
2648
break
82
2648
del
66
2648
global
67
2648
yield
83
2648
pass_stmt
68
2648
flow_stmt
71
2648
yield_stmt
72
2648
sim_stmt
84
2649
DEDENT
2654
2650
except
2491
2650
maybe_except_clause
2655
2650
except_clause
2627
2650
False
maybe_except_clause -> 
2650
del
maybe_except_clause -> 
2650
True
maybe_except_clause -> 
2650
{
maybe_except_clause -> 
2650
def
maybe_except_clause -> 
2650
(
maybe_except_clause -> 
2650
continue
maybe_except_clause -> 
2650
endsim
maybe_except_clause -> 
2650
try
maybe_except_clause -> 
2650
None
maybe_except_clause -> 
2650
global
maybe_except_clause -> 
2650
resetstats
maybe_except_clause -> 
2650
class
maybe_except_clause -> 
2650
begsim
maybe_except_clause -> 
2650
STRING
maybe_except_clause -> 
2650
raise
maybe_except_clause -> 
2650
-
maybe_except_clause -> 
2650
@
maybe_except_clause -> 
2650
yield
maybe_except_clause -> 
2650
break
maybe_except_clause -> 
2650
assert
maybe_except_clause -> 
2650
else
maybe_except_clause -> 
2650
[
maybe_except_clause -> 
2650
NAME
maybe_except_clause -> 
2650
lambda
maybe_except_clause -> 
2650
finally
maybe_except_clause -> 
2650
while
maybe_except_clause -> 
2650
DEDENT
maybe_except_clause -> 
2650
for
maybe_except_clause -> 
2650
not
maybe_except_clause -> 
2650
conf
maybe_except_clause -> 
2650
pass
maybe_except_clause -> 
2650
nonlocal
maybe_except_clause -> 
2650
return
maybe_except_clause -> 
2650
if
maybe_except_clause -> 
2650
+
maybe_except_clause -> 
2650
with
maybe_except_clause -> 
2650
~
maybe_except_clause -> 
2650
NUMBER
maybe_except_clause -> 
2651
(
suite -> NEWLINE INDENT stmt_list DEDENT
2651
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2651
try
suite -> NEWLINE INDENT stmt_list DEDENT
2651
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2651
@
suite -> NEWLINE INDENT stmt_list DEDENT
2651
None
suite -> NEWLINE INDENT stmt_list DEDENT
2651
if
suite -> NEWLINE INDENT stmt_list DEDENT
2651
class
suite -> NEWLINE INDENT stmt_list DEDENT
2651
[
suite -> NEWLINE INDENT stmt_list DEDENT
2651
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2651
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2651
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2651
-
suite -> NEWLINE INDENT stmt_list DEDENT
2651
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2651
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2651
False
suite -> NEWLINE INDENT stmt_list DEDENT
2651
finally
suite -> NEWLINE INDENT stmt_list DEDENT
2651
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2651
break
suite -> NEWLINE INDENT stmt_list DEDENT
2651
else
suite -> NEWLINE INDENT stmt_list DEDENT
2651
global
suite -> NEWLINE INDENT stmt_list DEDENT
2651
+
suite -> NEWLINE INDENT stmt_list DEDENT
2651
{
suite -> NEWLINE INDENT stmt_list DEDENT
2651
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2651
~
suite -> NEWLINE INDENT stmt_list DEDENT
2651
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
2651
for
suite -> NEWLINE INDENT stmt_list DEDENT
2651
with
suite -> NEWLINE INDENT stmt_list DEDENT
2651
not
suite -> NEWLINE INDENT stmt_list DEDENT
2651
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2651
while
suite -> NEWLINE INDENT stmt_list DEDENT
2651
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2651
True
suite -> NEWLINE INDENT stmt_list DEDENT
2651
def
suite -> NEWLINE INDENT stmt_list DEDENT
2651
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2651
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2651
return
suite -> NEWLINE INDENT stmt_list DEDENT
2651
except
suite -> NEWLINE INDENT stmt_list DEDENT
2651
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2651
del
suite -> NEWLINE INDENT stmt_list DEDENT
2652
break
for_stmt -> for expr_list in test_list : suite else : suite
2652
assert
for_stmt -> for expr_list in test_list : suite else : suite
2652
continue
for_stmt -> for expr_list in test_list : suite else : suite
2652
lambda
for_stmt -> for expr_list in test_list : suite else : suite
2652
with
for_stmt -> for expr_list in test_list : suite else : suite
2652
return
for_stmt -> for expr_list in test_list : suite else : suite
2652
class
for_stmt -> for expr_list in test_list : suite else : suite
2652
DEDENT
for_stmt -> for expr_list in test_list : suite else : suite
2652
def
for_stmt -> for expr_list in test_list : suite else : suite
2652
False
for_stmt -> for expr_list in test_list : suite else : suite
2652
None
for_stmt -> for expr_list in test_list : suite else : suite
2652
if
for_stmt -> for expr_list in test_list : suite else : suite
2652
NAME
for_stmt -> for expr_list in test_list : suite else : suite
2652
~
for_stmt -> for expr_list in test_list : suite else : suite
2652
@
for_stmt -> for expr_list in test_list : suite else : suite
2652
conf
for_stmt -> for expr_list in test_list : suite else : suite
2652
try
for_stmt -> for expr_list in test_list : suite else : suite
2652
(
for_stmt -> for expr_list in test_list : suite else : suite
2652
STRING
for_stmt -> for expr_list in test_list : suite else : suite
2652
endsim
for_stmt -> for expr_list in test_list : suite else : suite
2652
resetstats
for_stmt -> for expr_list in test_list : suite else : suite
2652
True
for_stmt -> for expr_list in test_list : suite else : suite
2652
not
for_stmt -> for expr_list in test_list : suite else : suite
2652
+
for_stmt -> for expr_list in test_list : suite else : suite
2652
{
for_stmt -> for expr_list in test_list : suite else : suite
2652
del
for_stmt -> for expr_list in test_list : suite else : suite
2652
global
for_stmt -> for expr_list in test_list : suite else : suite
2652
pass
for_stmt -> for expr_list in test_list : suite else : suite
2652
NUMBER
for_stmt -> for expr_list in test_list : suite else : suite
2652
while
for_stmt -> for expr_list in test_list : suite else : suite
2652
[
for_stmt -> for expr_list in test_list : suite else : suite
2652
yield
for_stmt -> for expr_list in test_list : suite else : suite
2652
for
for_stmt -> for expr_list in test_list : suite else : suite
2652
-
for_stmt -> for expr_list in test_list : suite else : suite
2652
nonlocal
for_stmt -> for expr_list in test_list : suite else : suite
2652
raise
for_stmt -> for expr_list in test_list : suite else : suite
2652
begsim
for_stmt -> for expr_list in test_list : suite else : suite
2653
assert
try_stmt -> try : suite except_clause else : suite finally : suite
2653
pass
try_stmt -> try : suite except_clause else : suite finally : suite
2653
[
try_stmt -> try : suite except_clause else : suite finally : suite
2653
class
try_stmt -> try : suite except_clause else : suite finally : suite
2653
with
try_stmt -> try : suite except_clause else : suite finally : suite
2653
None
try_stmt -> try : suite except_clause else : suite finally : suite
2653
if
try_stmt -> try : suite except_clause else : suite finally : suite
2653
for
try_stmt -> try : suite except_clause else : suite finally : suite
2653
not
try_stmt -> try : suite except_clause else : suite finally : suite
2653
DEDENT
try_stmt -> try : suite except_clause else : suite finally : suite
2653
+
try_stmt -> try : suite except_clause else : suite finally : suite
2653
resetstats
try_stmt -> try : suite except_clause else : suite finally : suite
2653
{
try_stmt -> try : suite except_clause else : suite finally : suite
2653
(
try_stmt -> try : suite except_clause else : suite finally : suite
2653
try
try_stmt -> try : suite except_clause else : suite finally : suite
2653
break
try_stmt -> try : suite except_clause else : suite finally : suite
2653
del
try_stmt -> try : suite except_clause else : suite finally : suite
2653
lambda
try_stmt -> try : suite except_clause else : suite finally : suite
2653
while
try_stmt -> try : suite except_clause else : suite finally : suite
2653
False
try_stmt -> try : suite except_clause else : suite finally : suite
2653
~
try_stmt -> try : suite except_clause else : suite finally : suite
2653
begsim
try_stmt -> try : suite except_clause else : suite finally : suite
2653
continue
try_stmt -> try : suite except_clause else : suite finally : suite
2653
def
try_stmt -> try : suite except_clause else : suite finally : suite
2653
NAME
try_stmt -> try : suite except_clause else : suite finally : suite
2653
conf
try_stmt -> try : suite except_clause else : suite finally : suite
2653
STRING
try_stmt -> try : suite except_clause else : suite finally : suite
2653
global
try_stmt -> try : suite except_clause else : suite finally : suite
2653
nonlocal
try_stmt -> try : suite except_clause else : suite finally : suite
2653
True
try_stmt -> try : suite except_clause else : suite finally : suite
2653
yield
try_stmt -> try : suite except_clause else : suite finally : suite
2653
endsim
try_stmt -> try : suite except_clause else : suite finally : suite
2653
-
try_stmt -> try : suite except_clause else : suite finally : suite
2653
@
try_stmt -> try : suite except_clause else : suite finally : suite
2653
raise
try_stmt -> try : suite except_clause else : suite finally : suite
2653
NUMBER
try_stmt -> try : suite except_clause else : suite finally : suite
2653
return
try_stmt -> try : suite except_clause else : suite finally : suite
2654
(
suite -> NEWLINE INDENT stmt_list DEDENT
2654
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2654
try
suite -> NEWLINE INDENT stmt_list DEDENT
2654
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2654
@
suite -> NEWLINE INDENT stmt_list DEDENT
2654
None
suite -> NEWLINE INDENT stmt_list DEDENT
2654
if
suite -> NEWLINE INDENT stmt_list DEDENT
2654
class
suite -> NEWLINE INDENT stmt_list DEDENT
2654
[
suite -> NEWLINE INDENT stmt_list DEDENT
2654
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2654
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2654
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2654
-
suite -> NEWLINE INDENT stmt_list DEDENT
2654
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2654
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2654
False
suite -> NEWLINE INDENT stmt_list DEDENT
2654
finally
suite -> NEWLINE INDENT stmt_list DEDENT
2654
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2654
break
suite -> NEWLINE INDENT stmt_list DEDENT
2654
global
suite -> NEWLINE INDENT stmt_list DEDENT
2654
+
suite -> NEWLINE INDENT stmt_list DEDENT
2654
{
suite -> NEWLINE INDENT stmt_list DEDENT
2654
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2654
~
suite -> NEWLINE INDENT stmt_list DEDENT
2654
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
2654
for
suite -> NEWLINE INDENT stmt_list DEDENT
2654
with
suite -> NEWLINE INDENT stmt_list DEDENT
2654
not
suite -> NEWLINE INDENT stmt_list DEDENT
2654
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2654
while
suite -> NEWLINE INDENT stmt_list DEDENT
2654
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2654
True
suite -> NEWLINE INDENT stmt_list DEDENT
2654
def
suite -> NEWLINE INDENT stmt_list DEDENT
2654
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2654
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2654
return
suite -> NEWLINE INDENT stmt_list DEDENT
2654
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2654
del
suite -> NEWLINE INDENT stmt_list DEDENT
2655
del
except_clause -> except test as NAME : suite maybe_except_clause
2655
assert
except_clause -> except test as NAME : suite maybe_except_clause
2655
{
except_clause -> except test as NAME : suite maybe_except_clause
2655
nonlocal
except_clause -> except test as NAME : suite maybe_except_clause
2655
-
except_clause -> except test as NAME : suite maybe_except_clause
2655
True
except_clause -> except test as NAME : suite maybe_except_clause
2655
+
except_clause -> except test as NAME : suite maybe_except_clause
2655
lambda
except_clause -> except test as NAME : suite maybe_except_clause
2655
[
except_clause -> except test as NAME : suite maybe_except_clause
2655
raise
except_clause -> except test as NAME : suite maybe_except_clause
2655
NAME
except_clause -> except test as NAME : suite maybe_except_clause
2655
False
except_clause -> except test as NAME : suite maybe_except_clause
2655
pass
except_clause -> except test as NAME : suite maybe_except_clause
2655
if
except_clause -> except test as NAME : suite maybe_except_clause
2655
def
except_clause -> except test as NAME : suite maybe_except_clause
2655
finally
except_clause -> except test as NAME : suite maybe_except_clause
2655
endsim
except_clause -> except test as NAME : suite maybe_except_clause
2655
not
except_clause -> except test as NAME : suite maybe_except_clause
2655
NUMBER
except_clause -> except test as NAME : suite maybe_except_clause
2655
resetstats
except_clause -> except test as NAME : suite maybe_except_clause
2655
(
except_clause -> except test as NAME : suite maybe_except_clause
2655
begsim
except_clause -> except test as NAME : suite maybe_except_clause
2655
break
except_clause -> except test as NAME : suite maybe_except_clause
2655
STRING
except_clause -> except test as NAME : suite maybe_except_clause
2655
while
except_clause -> except test as NAME : suite maybe_except_clause
2655
conf
except_clause -> except test as NAME : suite maybe_except_clause
2655
continue
except_clause -> except test as NAME : suite maybe_except_clause
2655
else
except_clause -> except test as NAME : suite maybe_except_clause
2655
with
except_clause -> except test as NAME : suite maybe_except_clause
2655
DEDENT
except_clause -> except test as NAME : suite maybe_except_clause
2655
class
except_clause -> except test as NAME : suite maybe_except_clause
2655
try
except_clause -> except test as NAME : suite maybe_except_clause
2655
@
except_clause -> except test as NAME : suite maybe_except_clause
2655
for
except_clause -> except test as NAME : suite maybe_except_clause
2655
global
except_clause -> except test as NAME : suite maybe_except_clause
2655
yield
except_clause -> except test as NAME : suite maybe_except_clause
2655
return
except_clause -> except test as NAME : suite maybe_except_clause
2655
~
except_clause -> except test as NAME : suite maybe_except_clause
2655
None
except_clause -> except test as NAME : suite maybe_except_clause
